
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
	return pm_state;
}


enum power_states pm_system_suspend(int32_t ticks)
{
   0:	20004ae8 	.word	0x20004ae8
	pm_state = (forced_pm_state == POWER_STATE_AUTO) ?
   4:	00004299 	.word	0x00004299
		   pm_policy_next_state(ticks) : forced_pm_state;
   8:	0001212d 	.word	0x0001212d
   c:	000042c9 	.word	0x000042c9
  10:	000042c9 	.word	0x000042c9
	if (pm_state == POWER_STATE_ACTIVE) {
  14:	000042c9 	.word	0x000042c9
  18:	000042c9 	.word	0x000042c9
	post_ops_done = 0;
  1c:	000042c9 	.word	0x000042c9
	...
	pm_power_state_set(pm_state);
  2c:	0000406d 	.word	0x0000406d
	if (!post_ops_done) {
  30:	000042c9 	.word	0x000042c9
		post_ops_done = 1;
  34:	00000000 	.word	0x00000000
		forced_pm_state = POWER_STATE_AUTO;
  38:	00004015 	.word	0x00004015
		pm_state_notify(false);
  3c:	0001191d 	.word	0x0001191d

00000040 <_irq_vector_table>:
		pm_power_state_exit_post_ops(pm_state);
  40:	00004259 00004259 00004259 00004259     YB..YB..YB..YB..
	return pm_policy_mgr(ticks);
}
  50:	00004259 00004259 00004259 00004259     YB..YB..YB..YB..
  60:	00004259 00004259 00004259 00004259     YB..YB..YB..YB..
  70:	00004259 00004259 00004259 00004259     YB..YB..YB..YB..
  80:	00004259 00004259 00004259 00004259     YB..YB..YB..YB..
  90:	00004259 00004259 00004259 00004259     YB..YB..YB..YB..
  a0:	00004259 00004259 00004259 00004259     YB..YB..YB..YB..
  b0:	00004259 00004259 00004259 00004259     YB..YB..YB..YB..
  c0:	00004259 00004259 00004259 00004259     YB..YB..YB..YB..
  d0:	00004259 00004259 00004259 00004259     YB..YB..YB..YB..
  e0:	00004259 00004259 00004259 00004259     YB..YB..YB..YB..
  f0:	00004259 00004259 00004259 00004259     YB..YB..YB..YB..
 100:	00004259 00004259 00004259 00004259     YB..YB..YB..YB..
 110:	00004259 00004259 00004259 00004259     YB..YB..YB..YB..
 120:	00004259 00004259 00004259 00004259     YB..YB..YB..YB..
 130:	00004259 00004259 00004259 00004259     YB..YB..YB..YB..
 140:	00004259 00004259 00004259 00004259     YB..YB..YB..YB..
 150:	00004259                                YB..

Disassembly of section text:

00000158 <__aeabi_uldivmod>:
     158:	b953      	cbnz	r3, 170 <__aeabi_uldivmod+0x18>
     15a:	b94a      	cbnz	r2, 170 <__aeabi_uldivmod+0x18>
     15c:	2900      	cmp	r1, #0
     15e:	bf08      	it	eq
     160:	2800      	cmpeq	r0, #0
     162:	bf1c      	itt	ne
     164:	f04f 31ff 	movne.w	r1, #4294967295
     168:	f04f 30ff 	movne.w	r0, #4294967295
     16c:	f000 b970 	b.w	450 <__aeabi_idiv0>
     170:	f1ad 0c08 	sub.w	ip, sp, #8
     174:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     178:	f000 f806 	bl	188 <__udivmoddi4>
     17c:	f8dd e004 	ldr.w	lr, [sp, #4]
     180:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     184:	b004      	add	sp, #16
     186:	4770      	bx	lr

00000188 <__udivmoddi4>:
     188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     18c:	9e08      	ldr	r6, [sp, #32]
     18e:	460d      	mov	r5, r1
     190:	4604      	mov	r4, r0
     192:	468a      	mov	sl, r1
     194:	2b00      	cmp	r3, #0
     196:	d17f      	bne.n	298 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x18>
     198:	428a      	cmp	r2, r1
     19a:	4617      	mov	r7, r2
     19c:	d941      	bls.n	222 <CONFIG_SRAM_SIZE+0x62>
     19e:	fab2 f282 	clz	r2, r2
     1a2:	b14a      	cbz	r2, 1b8 <__udivmoddi4+0x30>
     1a4:	f1c2 0120 	rsb	r1, r2, #32
     1a8:	fa05 f302 	lsl.w	r3, r5, r2
     1ac:	4097      	lsls	r7, r2
     1ae:	4094      	lsls	r4, r2
     1b0:	fa20 f101 	lsr.w	r1, r0, r1
     1b4:	ea41 0a03 	orr.w	sl, r1, r3
     1b8:	ea4f 4817 	mov.w	r8, r7, lsr #16
     1bc:	ea4f 4c14 	mov.w	ip, r4, lsr #16
     1c0:	fa1f f987 	uxth.w	r9, r7
     1c4:	fbba fef8 	udiv	lr, sl, r8
     1c8:	fb08 a31e 	mls	r3, r8, lr, sl
     1cc:	fb0e f109 	mul.w	r1, lr, r9
     1d0:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
     1d4:	4299      	cmp	r1, r3
     1d6:	d906      	bls.n	1e6 <CONFIG_SRAM_SIZE+0x26>
     1d8:	18fb      	adds	r3, r7, r3
     1da:	d202      	bcs.n	1e2 <CONFIG_SRAM_SIZE+0x22>
     1dc:	4299      	cmp	r1, r3
     1de:	f200 8124 	bhi.w	42a <CONFIG_BT_HCI_TX_STACK_SIZE+0x2a>
     1e2:	f10e 3eff 	add.w	lr, lr, #4294967295
     1e6:	1a59      	subs	r1, r3, r1
     1e8:	b2a3      	uxth	r3, r4
     1ea:	fbb1 f0f8 	udiv	r0, r1, r8
     1ee:	fb08 1110 	mls	r1, r8, r0, r1
     1f2:	fb00 f909 	mul.w	r9, r0, r9
     1f6:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
     1fa:	45a1      	cmp	r9, r4
     1fc:	d905      	bls.n	20a <CONFIG_SRAM_SIZE+0x4a>
     1fe:	193c      	adds	r4, r7, r4
     200:	d202      	bcs.n	208 <CONFIG_SRAM_SIZE+0x48>
     202:	45a1      	cmp	r9, r4
     204:	f200 810e 	bhi.w	424 <CONFIG_BT_HCI_TX_STACK_SIZE+0x24>
     208:	3801      	subs	r0, #1
     20a:	eba4 0409 	sub.w	r4, r4, r9
     20e:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     212:	2100      	movs	r1, #0
     214:	b11e      	cbz	r6, 21e <CONFIG_SRAM_SIZE+0x5e>
     216:	40d4      	lsrs	r4, r2
     218:	2300      	movs	r3, #0
     21a:	e9c6 4300 	strd	r4, r3, [r6]
     21e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     222:	b902      	cbnz	r2, 226 <CONFIG_SRAM_SIZE+0x66>
     224:	deff      	udf	#255	; 0xff
     226:	fab2 f282 	clz	r2, r2
     22a:	2a00      	cmp	r2, #0
     22c:	d14f      	bne.n	2ce <CONFIG_PM_PARTITION_SIZE_PROVISION+0x4e>
     22e:	1bcb      	subs	r3, r1, r7
     230:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     234:	fa1f f887 	uxth.w	r8, r7
     238:	2101      	movs	r1, #1
     23a:	0c25      	lsrs	r5, r4, #16
     23c:	fbb3 fcfe 	udiv	ip, r3, lr
     240:	fb0e 301c 	mls	r0, lr, ip, r3
     244:	462b      	mov	r3, r5
     246:	fb08 f90c 	mul.w	r9, r8, ip
     24a:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
     24e:	45a9      	cmp	r9, r5
     250:	d90a      	bls.n	268 <CONFIG_SRAM_SIZE+0xa8>
     252:	197d      	adds	r5, r7, r5
     254:	bf2c      	ite	cs
     256:	2301      	movcs	r3, #1
     258:	2300      	movcc	r3, #0
     25a:	45a9      	cmp	r9, r5
     25c:	d902      	bls.n	264 <CONFIG_SRAM_SIZE+0xa4>
     25e:	2b00      	cmp	r3, #0
     260:	f000 80d9 	beq.w	416 <CONFIG_BT_HCI_TX_STACK_SIZE+0x16>
     264:	f10c 3cff 	add.w	ip, ip, #4294967295
     268:	eba5 0509 	sub.w	r5, r5, r9
     26c:	b2a3      	uxth	r3, r4
     26e:	fbb5 f0fe 	udiv	r0, r5, lr
     272:	fb0e 5510 	mls	r5, lr, r0, r5
     276:	fb08 f800 	mul.w	r8, r8, r0
     27a:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     27e:	45a0      	cmp	r8, r4
     280:	d905      	bls.n	28e <CONFIG_PM_PARTITION_SIZE_PROVISION+0xe>
     282:	193c      	adds	r4, r7, r4
     284:	d202      	bcs.n	28c <CONFIG_PM_PARTITION_SIZE_PROVISION+0xc>
     286:	45a0      	cmp	r8, r4
     288:	f200 80c9 	bhi.w	41e <CONFIG_BT_HCI_TX_STACK_SIZE+0x1e>
     28c:	3801      	subs	r0, #1
     28e:	eba4 0408 	sub.w	r4, r4, r8
     292:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     296:	e7bd      	b.n	214 <CONFIG_SRAM_SIZE+0x54>
     298:	428b      	cmp	r3, r1
     29a:	d908      	bls.n	2ae <CONFIG_PM_PARTITION_SIZE_PROVISION+0x2e>
     29c:	2e00      	cmp	r6, #0
     29e:	f000 80b1 	beq.w	404 <CONFIG_BT_HCI_TX_STACK_SIZE+0x4>
     2a2:	2100      	movs	r1, #0
     2a4:	e9c6 0500 	strd	r0, r5, [r6]
     2a8:	4608      	mov	r0, r1
     2aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     2ae:	fab3 f183 	clz	r1, r3
     2b2:	2900      	cmp	r1, #0
     2b4:	d146      	bne.n	344 <CONFIG_BT_DEVICE_APPEARANCE+0x3>
     2b6:	42ab      	cmp	r3, r5
     2b8:	f0c0 80a7 	bcc.w	40a <CONFIG_BT_HCI_TX_STACK_SIZE+0xa>
     2bc:	4282      	cmp	r2, r0
     2be:	f240 80a4 	bls.w	40a <CONFIG_BT_HCI_TX_STACK_SIZE+0xa>
     2c2:	4608      	mov	r0, r1
     2c4:	2e00      	cmp	r6, #0
     2c6:	d0aa      	beq.n	21e <CONFIG_SRAM_SIZE+0x5e>
     2c8:	e9c6 4a00 	strd	r4, sl, [r6]
     2cc:	e7a7      	b.n	21e <CONFIG_SRAM_SIZE+0x5e>
     2ce:	f1c2 0020 	rsb	r0, r2, #32
     2d2:	4097      	lsls	r7, r2
     2d4:	fa01 f302 	lsl.w	r3, r1, r2
     2d8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     2dc:	40c1      	lsrs	r1, r0
     2de:	fa24 f500 	lsr.w	r5, r4, r0
     2e2:	fa1f f887 	uxth.w	r8, r7
     2e6:	4094      	lsls	r4, r2
     2e8:	431d      	orrs	r5, r3
     2ea:	fbb1 f0fe 	udiv	r0, r1, lr
     2ee:	0c2b      	lsrs	r3, r5, #16
     2f0:	fb0e 1110 	mls	r1, lr, r0, r1
     2f4:	fb00 fc08 	mul.w	ip, r0, r8
     2f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     2fc:	459c      	cmp	ip, r3
     2fe:	d909      	bls.n	314 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x14>
     300:	18fb      	adds	r3, r7, r3
     302:	bf2c      	ite	cs
     304:	2101      	movcs	r1, #1
     306:	2100      	movcc	r1, #0
     308:	459c      	cmp	ip, r3
     30a:	d902      	bls.n	312 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x12>
     30c:	2900      	cmp	r1, #0
     30e:	f000 8095 	beq.w	43c <CONFIG_BT_HCI_TX_STACK_SIZE+0x3c>
     312:	3801      	subs	r0, #1
     314:	eba3 030c 	sub.w	r3, r3, ip
     318:	b2ad      	uxth	r5, r5
     31a:	fbb3 f1fe 	udiv	r1, r3, lr
     31e:	fb0e 3311 	mls	r3, lr, r1, r3
     322:	fb01 fc08 	mul.w	ip, r1, r8
     326:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     32a:	45ac      	cmp	ip, r5
     32c:	d905      	bls.n	33a <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x3a>
     32e:	197d      	adds	r5, r7, r5
     330:	d202      	bcs.n	338 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x38>
     332:	45ac      	cmp	ip, r5
     334:	f200 8089 	bhi.w	44a <CONFIG_BT_HCI_TX_STACK_SIZE+0x4a>
     338:	3901      	subs	r1, #1
     33a:	eba5 030c 	sub.w	r3, r5, ip
     33e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     342:	e77a      	b.n	23a <CONFIG_SRAM_SIZE+0x7a>
     344:	f1c1 0420 	rsb	r4, r1, #32
     348:	408b      	lsls	r3, r1
     34a:	fa02 f701 	lsl.w	r7, r2, r1
     34e:	fa05 fc01 	lsl.w	ip, r5, r1
     352:	40e2      	lsrs	r2, r4
     354:	fa20 f804 	lsr.w	r8, r0, r4
     358:	40e5      	lsrs	r5, r4
     35a:	fa00 fe01 	lsl.w	lr, r0, r1
     35e:	4313      	orrs	r3, r2
     360:	ea48 020c 	orr.w	r2, r8, ip
     364:	ea4f 4813 	mov.w	r8, r3, lsr #16
     368:	ea4f 4c12 	mov.w	ip, r2, lsr #16
     36c:	fa1f f983 	uxth.w	r9, r3
     370:	fbb5 faf8 	udiv	sl, r5, r8
     374:	fb08 551a 	mls	r5, r8, sl, r5
     378:	fb0a f009 	mul.w	r0, sl, r9
     37c:	ea4c 4c05 	orr.w	ip, ip, r5, lsl #16
     380:	4560      	cmp	r0, ip
     382:	d90a      	bls.n	39a <CONFIG_BT_RPA_TIMEOUT+0x16>
     384:	eb13 0c0c 	adds.w	ip, r3, ip
     388:	bf2c      	ite	cs
     38a:	2501      	movcs	r5, #1
     38c:	2500      	movcc	r5, #0
     38e:	4560      	cmp	r0, ip
     390:	d901      	bls.n	396 <CONFIG_BT_RPA_TIMEOUT+0x12>
     392:	2d00      	cmp	r5, #0
     394:	d055      	beq.n	442 <CONFIG_BT_HCI_TX_STACK_SIZE+0x42>
     396:	f10a 3aff 	add.w	sl, sl, #4294967295
     39a:	ebac 0c00 	sub.w	ip, ip, r0
     39e:	b292      	uxth	r2, r2
     3a0:	fbbc f0f8 	udiv	r0, ip, r8
     3a4:	fb08 cc10 	mls	ip, r8, r0, ip
     3a8:	fb00 f909 	mul.w	r9, r0, r9
     3ac:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
     3b0:	45e1      	cmp	r9, ip
     3b2:	d905      	bls.n	3c0 <CONFIG_BT_RPA_TIMEOUT+0x3c>
     3b4:	eb13 0c0c 	adds.w	ip, r3, ip
     3b8:	d201      	bcs.n	3be <CONFIG_BT_RPA_TIMEOUT+0x3a>
     3ba:	45e1      	cmp	r9, ip
     3bc:	d83b      	bhi.n	436 <CONFIG_BT_HCI_TX_STACK_SIZE+0x36>
     3be:	3801      	subs	r0, #1
     3c0:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
     3c4:	ebac 0c09 	sub.w	ip, ip, r9
     3c8:	fba0 8907 	umull	r8, r9, r0, r7
     3cc:	45cc      	cmp	ip, r9
     3ce:	4645      	mov	r5, r8
     3d0:	464a      	mov	r2, r9
     3d2:	d302      	bcc.n	3da <CONFIG_BT_RPA_TIMEOUT+0x56>
     3d4:	d106      	bne.n	3e4 <CONFIG_BT_RPA_TIMEOUT+0x60>
     3d6:	45c6      	cmp	lr, r8
     3d8:	d204      	bcs.n	3e4 <CONFIG_BT_RPA_TIMEOUT+0x60>
     3da:	3801      	subs	r0, #1
     3dc:	ebb8 0507 	subs.w	r5, r8, r7
     3e0:	eb69 0203 	sbc.w	r2, r9, r3
     3e4:	b32e      	cbz	r6, 432 <CONFIG_BT_HCI_TX_STACK_SIZE+0x32>
     3e6:	ebbe 0305 	subs.w	r3, lr, r5
     3ea:	eb6c 0c02 	sbc.w	ip, ip, r2
     3ee:	fa23 f201 	lsr.w	r2, r3, r1
     3f2:	fa0c f404 	lsl.w	r4, ip, r4
     3f6:	fa2c f301 	lsr.w	r3, ip, r1
     3fa:	2100      	movs	r1, #0
     3fc:	4314      	orrs	r4, r2
     3fe:	e9c6 4300 	strd	r4, r3, [r6]
     402:	e70c      	b.n	21e <CONFIG_SRAM_SIZE+0x5e>
     404:	4631      	mov	r1, r6
     406:	4630      	mov	r0, r6
     408:	e709      	b.n	21e <CONFIG_SRAM_SIZE+0x5e>
     40a:	1a84      	subs	r4, r0, r2
     40c:	eb65 0303 	sbc.w	r3, r5, r3
     410:	2001      	movs	r0, #1
     412:	469a      	mov	sl, r3
     414:	e756      	b.n	2c4 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x44>
     416:	f1ac 0c02 	sub.w	ip, ip, #2
     41a:	443d      	add	r5, r7
     41c:	e724      	b.n	268 <CONFIG_SRAM_SIZE+0xa8>
     41e:	3802      	subs	r0, #2
     420:	443c      	add	r4, r7
     422:	e734      	b.n	28e <CONFIG_PM_PARTITION_SIZE_PROVISION+0xe>
     424:	3802      	subs	r0, #2
     426:	443c      	add	r4, r7
     428:	e6ef      	b.n	20a <CONFIG_SRAM_SIZE+0x4a>
     42a:	f1ae 0e02 	sub.w	lr, lr, #2
     42e:	443b      	add	r3, r7
     430:	e6d9      	b.n	1e6 <CONFIG_SRAM_SIZE+0x26>
     432:	4631      	mov	r1, r6
     434:	e6f3      	b.n	21e <CONFIG_SRAM_SIZE+0x5e>
     436:	3802      	subs	r0, #2
     438:	449c      	add	ip, r3
     43a:	e7c1      	b.n	3c0 <CONFIG_BT_RPA_TIMEOUT+0x3c>
     43c:	3802      	subs	r0, #2
     43e:	443b      	add	r3, r7
     440:	e768      	b.n	314 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x14>
     442:	f1aa 0a02 	sub.w	sl, sl, #2
     446:	449c      	add	ip, r3
     448:	e7a7      	b.n	39a <CONFIG_BT_RPA_TIMEOUT+0x16>
     44a:	3902      	subs	r1, #2
     44c:	443d      	add	r5, r7
     44e:	e774      	b.n	33a <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x3a>

00000450 <__aeabi_idiv0>:
     450:	4770      	bx	lr
     452:	bf00      	nop
     454:	0000      	movs	r0, r0
	...

00000458 <bt_init>:

	bt_dev_show_info();
}

static int bt_init(void)
{
     458:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
     45a:	4d65      	ldr	r5, [pc, #404]	; (5f0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x108>)
{
     45c:	b089      	sub	sp, #36	; 0x24
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
     45e:	f8d5 3134 	ldr.w	r3, [r5, #308]	; 0x134
     462:	6899      	ldr	r1, [r3, #8]
     464:	f011 0101 	ands.w	r1, r1, #1
     468:	d11c      	bne.n	4a4 <bt_init+0x4c>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
     46a:	f640 4003 	movw	r0, #3075	; 0xc03
     46e:	aa03      	add	r2, sp, #12
     470:	f005 fbb2 	bl	5bd8 <bt_hci_cmd_send_sync>
		if (err) {
     474:	4604      	mov	r4, r0
     476:	2800      	cmp	r0, #0
     478:	f040 80b7 	bne.w	5ea <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x102>
		hci_reset_complete(rsp);
     47c:	9b03      	ldr	r3, [sp, #12]
	uint8_t status = buf->data[0];
     47e:	689b      	ldr	r3, [r3, #8]
	if (status) {
     480:	781b      	ldrb	r3, [r3, #0]
     482:	b963      	cbnz	r3, 49e <bt_init+0x46>
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
     484:	f105 0394 	add.w	r3, r5, #148	; 0x94
     488:	4618      	mov	r0, r3
     48a:	f012 f88e 	bl	125aa <atomic_get>
     48e:	f000 0005 	and.w	r0, r0, #5
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
     492:	e8d3 2fef 	ldaex	r2, [r3]
     496:	e8c3 0fe1 	stlex	r1, r0, [r3]
     49a:	2900      	cmp	r1, #0
     49c:	d1f9      	bne.n	492 <bt_init+0x3a>
		net_buf_unref(rsp);
     49e:	9803      	ldr	r0, [sp, #12]
     4a0:	f00c fed2 	bl	d248 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
     4a4:	2100      	movs	r1, #0
     4a6:	f241 0003 	movw	r0, #4099	; 0x1003
     4aa:	aa03      	add	r2, sp, #12
     4ac:	f005 fb94 	bl	5bd8 <bt_hci_cmd_send_sync>
	if (err) {
     4b0:	4604      	mov	r4, r0
     4b2:	2800      	cmp	r0, #0
     4b4:	f040 8099 	bne.w	5ea <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x102>
	read_local_features_complete(rsp);
     4b8:	9b03      	ldr	r3, [sp, #12]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
     4ba:	2208      	movs	r2, #8
     4bc:	6899      	ldr	r1, [r3, #8]
     4be:	484d      	ldr	r0, [pc, #308]	; (5f4 <CONFIG_BT_COMPANY_ID+0x3>)
     4c0:	3101      	adds	r1, #1
     4c2:	f011 ff2a 	bl	1231a <memcpy>
	net_buf_unref(rsp);
     4c6:	9803      	ldr	r0, [sp, #12]
     4c8:	f00c febe 	bl	d248 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
     4cc:	4621      	mov	r1, r4
     4ce:	f241 0001 	movw	r0, #4097	; 0x1001
     4d2:	aa03      	add	r2, sp, #12
     4d4:	f005 fb80 	bl	5bd8 <bt_hci_cmd_send_sync>
	if (err) {
     4d8:	4604      	mov	r4, r0
     4da:	2800      	cmp	r0, #0
     4dc:	f040 8085 	bne.w	5ea <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x102>
	read_local_ver_complete(rsp);
     4e0:	9803      	ldr	r0, [sp, #12]
     4e2:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
     4e4:	785a      	ldrb	r2, [r3, #1]
     4e6:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
     4ea:	78d9      	ldrb	r1, [r3, #3]
     4ec:	789a      	ldrb	r2, [r3, #2]
     4ee:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
     4f2:	86ea      	strh	r2, [r5, #54]	; 0x36
	bt_dev.lmp_version = rp->lmp_version;
     4f4:	791a      	ldrb	r2, [r3, #4]
     4f6:	f885 2035 	strb.w	r2, [r5, #53]	; 0x35
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
     4fa:	7a19      	ldrb	r1, [r3, #8]
     4fc:	79da      	ldrb	r2, [r3, #7]
     4fe:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
     502:	872a      	strh	r2, [r5, #56]	; 0x38
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
     504:	795a      	ldrb	r2, [r3, #5]
     506:	799b      	ldrb	r3, [r3, #6]
     508:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
     50c:	876b      	strh	r3, [r5, #58]	; 0x3a
	net_buf_unref(rsp);
     50e:	f00c fe9b 	bl	d248 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
     512:	4621      	mov	r1, r4
     514:	f241 0002 	movw	r0, #4098	; 0x1002
     518:	aa03      	add	r2, sp, #12
     51a:	f005 fb5d 	bl	5bd8 <bt_hci_cmd_send_sync>
	if (err) {
     51e:	4604      	mov	r4, r0
     520:	2800      	cmp	r0, #0
     522:	d162      	bne.n	5ea <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x102>
	read_supported_commands_complete(rsp);
     524:	9b03      	ldr	r3, [sp, #12]
	memcpy(bt_dev.supported_commands, rp->commands,
     526:	2240      	movs	r2, #64	; 0x40
     528:	6899      	ldr	r1, [r3, #8]
     52a:	4833      	ldr	r0, [pc, #204]	; (5f8 <CONFIG_BT_COMPANY_ID+0x7>)
     52c:	3101      	adds	r1, #1
     52e:	f011 fef4 	bl	1231a <memcpy>
	net_buf_unref(rsp);
     532:	9803      	ldr	r0, [sp, #12]
     534:	f00c fe88 	bl	d248 <net_buf_unref>
		err = prng_init();
     538:	f007 fa6e 	bl	7a18 <prng_init>
		if (err) {
     53c:	4604      	mov	r4, r0
     53e:	2800      	cmp	r0, #0
     540:	d153      	bne.n	5ea <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x102>
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
     542:	f895 304e 	ldrb.w	r3, [r5, #78]	; 0x4e
     546:	069a      	lsls	r2, r3, #26
     548:	d41a      	bmi.n	580 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x98>
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
     54a:	492c      	ldr	r1, [pc, #176]	; (5fc <CONFIG_BT_COMPANY_ID+0xb>)
     54c:	4b2c      	ldr	r3, [pc, #176]	; (600 <CONFIG_BT_COMPANY_ID+0xf>)
		BT_WARN("Controller to host flow control not supported");
     54e:	482d      	ldr	r0, [pc, #180]	; (604 <CONFIG_BT_COMPANY_ID+0x13>)
     550:	1ac9      	subs	r1, r1, r3
     552:	08c9      	lsrs	r1, r1, #3
     554:	0189      	lsls	r1, r1, #6
     556:	f041 0102 	orr.w	r1, r1, #2
     55a:	f010 fbab 	bl	10cb4 <log_0>
	if (!BT_FEAT_LE(bt_dev.features)) {
     55e:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
     562:	065b      	lsls	r3, r3, #25
     564:	d452      	bmi.n	60c <CONFIG_BT_COMPANY_ID+0x1b>
     566:	4b26      	ldr	r3, [pc, #152]	; (600 <CONFIG_BT_COMPANY_ID+0xf>)
     568:	4924      	ldr	r1, [pc, #144]	; (5fc <CONFIG_BT_COMPANY_ID+0xb>)
		BT_ERR("Non-LE capable controller detected!");
     56a:	4827      	ldr	r0, [pc, #156]	; (608 <CONFIG_BT_COMPANY_ID+0x17>)
     56c:	1ac9      	subs	r1, r1, r3
     56e:	08c9      	lsrs	r1, r1, #3
     570:	0189      	lsls	r1, r1, #6
     572:	f041 0101 	orr.w	r1, r1, #1
     576:	f010 fb9d 	bl	10cb4 <log_0>
		return -ENODEV;
     57a:	f06f 0412 	mvn.w	r4, #18
     57e:	e034      	b.n	5ea <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x102>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_BUFFER_SIZE,
     580:	2107      	movs	r1, #7
     582:	f640 4033 	movw	r0, #3123	; 0xc33
     586:	f005 faef 	bl	5b68 <bt_hci_cmd_create>
	if (!buf) {
     58a:	4607      	mov	r7, r0
     58c:	b910      	cbnz	r0, 594 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xac>
		return -ENOBUFS;
     58e:	f06f 0436 	mvn.w	r4, #54	; 0x36
     592:	e02a      	b.n	5ea <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x102>
 *
 * @return The original tail of the buffer.
 */
static inline void *net_buf_add(struct net_buf *buf, size_t len)
{
	return net_buf_simple_add(&buf->b, len);
     594:	2107      	movs	r1, #7
     596:	3008      	adds	r0, #8
     598:	f013 fd60 	bl	1405c <net_buf_simple_add>
	(void)memset(hbs, 0, sizeof(*hbs));
     59c:	4621      	mov	r1, r4
     59e:	2207      	movs	r2, #7
     5a0:	4606      	mov	r6, r0
     5a2:	f011 fee5 	bl	12370 <memset>
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_L2CAP_RX_MTU +
     5a6:	2345      	movs	r3, #69	; 0x45
     5a8:	7033      	strb	r3, [r6, #0]
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_ACL_RX_COUNT);
     5aa:	2306      	movs	r3, #6
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
     5ac:	4622      	mov	r2, r4
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_L2CAP_RX_MTU +
     5ae:	7074      	strb	r4, [r6, #1]
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_ACL_RX_COUNT);
     5b0:	7134      	strb	r4, [r6, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
     5b2:	4639      	mov	r1, r7
     5b4:	f640 4033 	movw	r0, #3123	; 0xc33
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_ACL_RX_COUNT);
     5b8:	70f3      	strb	r3, [r6, #3]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
     5ba:	f005 fb0d 	bl	5bd8 <bt_hci_cmd_send_sync>
	if (err) {
     5be:	4604      	mov	r4, r0
     5c0:	b998      	cbnz	r0, 5ea <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x102>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, 1);
     5c2:	2101      	movs	r1, #1
     5c4:	f640 4031 	movw	r0, #3121	; 0xc31
     5c8:	f005 face 	bl	5b68 <bt_hci_cmd_create>
	if (!buf) {
     5cc:	4606      	mov	r6, r0
     5ce:	2800      	cmp	r0, #0
     5d0:	d0dd      	beq.n	58e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xa6>
	net_buf_add_u8(buf, BT_HCI_CTL_TO_HOST_FLOW_ENABLE);
     5d2:	2101      	movs	r1, #1
     5d4:	f012 f81c 	bl	12610 <net_buf_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, buf, NULL);
     5d8:	4622      	mov	r2, r4
     5da:	4631      	mov	r1, r6
     5dc:	f640 4031 	movw	r0, #3121	; 0xc31
     5e0:	f005 fafa 	bl	5bd8 <bt_hci_cmd_send_sync>
	if (err) {
     5e4:	4604      	mov	r4, r0
     5e6:	2800      	cmp	r0, #0
     5e8:	d0b9      	beq.n	55e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x76>
		atomic_set_bit(bt_dev.flags, BT_DEV_PRESET_ID);
	}

	bt_finalize_init();
	return 0;
}
     5ea:	4620      	mov	r0, r4
     5ec:	b009      	add	sp, #36	; 0x24
     5ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
     5f0:	20000000 	.word	0x20000000
     5f4:	2000003c 	.word	0x2000003c
     5f8:	20000044 	.word	0x20000044
     5fc:	00015a30 	.word	0x00015a30
     600:	00015a00 	.word	0x00015a00
     604:	00017d1d 	.word	0x00017d1d
     608:	00017d4b 	.word	0x00017d4b
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
     60c:	2100      	movs	r1, #0
     60e:	f242 0003 	movw	r0, #8195	; 0x2003
     612:	aa03      	add	r2, sp, #12
     614:	f005 fae0 	bl	5bd8 <bt_hci_cmd_send_sync>
	if (err) {
     618:	4604      	mov	r4, r0
     61a:	2800      	cmp	r0, #0
     61c:	d1e5      	bne.n	5ea <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x102>
	read_le_features_complete(rsp);
     61e:	9b03      	ldr	r3, [sp, #12]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
     620:	2208      	movs	r2, #8
     622:	6899      	ldr	r1, [r3, #8]
     624:	48b4      	ldr	r0, [pc, #720]	; (8f8 <CONFIG_BT_RX_STACK_SIZE+0x60>)
     626:	3101      	adds	r1, #1
     628:	f011 fe77 	bl	1231a <memcpy>
	net_buf_unref(rsp);
     62c:	9803      	ldr	r0, [sp, #12]
     62e:	f00c fe0b 	bl	d248 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
     632:	4621      	mov	r1, r4
     634:	f242 0002 	movw	r0, #8194	; 0x2002
     638:	aa03      	add	r2, sp, #12
     63a:	f005 facd 	bl	5bd8 <bt_hci_cmd_send_sync>
		if (err) {
     63e:	4604      	mov	r4, r0
     640:	2800      	cmp	r0, #0
     642:	d1d2      	bne.n	5ea <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x102>
		le_read_buffer_size_complete(rsp);
     644:	9b03      	ldr	r3, [sp, #12]
     646:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
     648:	f8b3 2001 	ldrh.w	r2, [r3, #1]
     64c:	b291      	uxth	r1, r2
     64e:	f8a5 20c4 	strh.w	r2, [r5, #196]	; 0xc4
	if (!bt_dev.le.acl_mtu) {
     652:	b121      	cbz	r1, 65e <CONFIG_BT_COMPANY_ID+0x6d>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
     654:	78da      	ldrb	r2, [r3, #3]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, *(uintptr_t *)&initial_count, *(uintptr_t *)&limit, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
     656:	48a9      	ldr	r0, [pc, #676]	; (8fc <CONFIG_BT_RX_STACK_SIZE+0x64>)
     658:	4611      	mov	r1, r2
     65a:	f014 fd66 	bl	1512a <z_impl_k_sem_init>
		net_buf_unref(rsp);
     65e:	9803      	ldr	r0, [sp, #12]
     660:	f00c fdf2 	bl	d248 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
     664:	f895 6040 	ldrb.w	r6, [r5, #64]	; 0x40
     668:	f016 0620 	ands.w	r6, r6, #32
     66c:	f000 811e 	beq.w	8ac <CONFIG_BT_RX_STACK_SIZE+0x14>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
     670:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
     674:	071f      	lsls	r7, r3, #28
     676:	d511      	bpl.n	69c <CONFIG_BT_COMPANY_ID+0xab>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
     678:	2100      	movs	r1, #0
     67a:	f242 001c 	movw	r0, #8220	; 0x201c
     67e:	aa03      	add	r2, sp, #12
     680:	f005 faaa 	bl	5bd8 <bt_hci_cmd_send_sync>
		if (err) {
     684:	4604      	mov	r4, r0
     686:	2800      	cmp	r0, #0
     688:	d1af      	bne.n	5ea <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x102>
		le_read_supp_states_complete(rsp);
     68a:	9803      	ldr	r0, [sp, #12]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
     68c:	6883      	ldr	r3, [r0, #8]
     68e:	f853 2f01 	ldr.w	r2, [r3, #1]!
     692:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
     694:	e9c5 2328 	strd	r2, r3, [r5, #160]	; 0xa0
		net_buf_unref(rsp);
     698:	f00c fdd6 	bl	d248 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
     69c:	f895 3098 	ldrb.w	r3, [r5, #152]	; 0x98
     6a0:	069e      	lsls	r6, r3, #26
     6a2:	d524      	bpl.n	6ee <CONFIG_BT_COMPANY_ID+0xfd>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
     6a4:	a902      	add	r1, sp, #8
     6a6:	f10d 0006 	add.w	r0, sp, #6
     6aa:	f005 fc5f 	bl	5f6c <hci_le_read_max_data_len>
		if (err) {
     6ae:	4604      	mov	r4, r0
     6b0:	2800      	cmp	r0, #0
     6b2:	d19a      	bne.n	5ea <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x102>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
     6b4:	2104      	movs	r1, #4
     6b6:	f242 0024 	movw	r0, #8228	; 0x2024
     6ba:	f005 fa55 	bl	5b68 <bt_hci_cmd_create>
		if (!buf) {
     6be:	4606      	mov	r6, r0
     6c0:	2800      	cmp	r0, #0
     6c2:	f43f af64 	beq.w	58e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xa6>
     6c6:	2104      	movs	r1, #4
     6c8:	3008      	adds	r0, #8
     6ca:	f013 fcc7 	bl	1405c <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
     6ce:	f8bd 3006 	ldrh.w	r3, [sp, #6]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
     6d2:	4622      	mov	r2, r4
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
     6d4:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
     6d6:	f8bd 3008 	ldrh.w	r3, [sp, #8]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
     6da:	4631      	mov	r1, r6
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
     6dc:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
     6de:	f242 0024 	movw	r0, #8228	; 0x2024
     6e2:	f005 fa79 	bl	5bd8 <bt_hci_cmd_send_sync>
		if (err) {
     6e6:	4604      	mov	r4, r0
     6e8:	2800      	cmp	r0, #0
     6ea:	f47f af7e 	bne.w	5ea <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x102>
	if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
     6ee:	f895 3098 	ldrb.w	r3, [r5, #152]	; 0x98
     6f2:	065c      	lsls	r4, r3, #25
     6f4:	d52c      	bpl.n	750 <CONFIG_BT_COMPANY_ID+0x15f>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RPA_TIMEOUT,
     6f6:	2102      	movs	r1, #2
     6f8:	f242 002e 	movw	r0, #8238	; 0x202e
     6fc:	f005 fa34 	bl	5b68 <bt_hci_cmd_create>
		if (!buf) {
     700:	4604      	mov	r4, r0
     702:	2800      	cmp	r0, #0
     704:	f43f af43 	beq.w	58e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xa6>
     708:	2102      	movs	r1, #2
     70a:	3008      	adds	r0, #8
     70c:	f013 fca6 	bl	1405c <net_buf_simple_add>
		cp->rpa_timeout = sys_cpu_to_le16(CONFIG_BT_RPA_TIMEOUT);
     710:	f06f 037b 	mvn.w	r3, #123	; 0x7b
     714:	7003      	strb	r3, [r0, #0]
     716:	2303      	movs	r3, #3
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RPA_TIMEOUT, buf,
     718:	4621      	mov	r1, r4
		cp->rpa_timeout = sys_cpu_to_le16(CONFIG_BT_RPA_TIMEOUT);
     71a:	7043      	strb	r3, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RPA_TIMEOUT, buf,
     71c:	2200      	movs	r2, #0
     71e:	f242 002e 	movw	r0, #8238	; 0x202e
     722:	f005 fa59 	bl	5bd8 <bt_hci_cmd_send_sync>
		if (err) {
     726:	4604      	mov	r4, r0
     728:	2800      	cmp	r0, #0
     72a:	f47f af5e 	bne.w	5ea <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x102>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_RL_SIZE, NULL,
     72e:	4601      	mov	r1, r0
     730:	aa03      	add	r2, sp, #12
     732:	f242 002a 	movw	r0, #8234	; 0x202a
     736:	f005 fa4f 	bl	5bd8 <bt_hci_cmd_send_sync>
		if (err) {
     73a:	4604      	mov	r4, r0
     73c:	2800      	cmp	r0, #0
     73e:	f47f af54 	bne.w	5ea <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x102>
		le_read_resolving_list_size_complete(rsp);
     742:	9803      	ldr	r0, [sp, #12]
	bt_dev.le.rl_size = rp->rl_size;
     744:	6883      	ldr	r3, [r0, #8]
     746:	785b      	ldrb	r3, [r3, #1]
     748:	f885 30e0 	strb.w	r3, [r5, #224]	; 0xe0
		net_buf_unref(rsp);
     74c:	f00c fd7c 	bl	d248 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
     750:	2108      	movs	r1, #8
     752:	f242 0001 	movw	r0, #8193	; 0x2001
     756:	f005 fa07 	bl	5b68 <bt_hci_cmd_create>
	if (!buf) {
     75a:	4604      	mov	r4, r0
     75c:	2800      	cmp	r0, #0
     75e:	f43f af16 	beq.w	58e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xa6>
     762:	2108      	movs	r1, #8
     764:	4408      	add	r0, r1
     766:	f013 fc79 	bl	1405c <net_buf_simple_add>
		     BT_FEAT_LE_PRIVACY(bt_dev.le.features)) ||
     76a:	f895 1098 	ldrb.w	r1, [r5, #152]	; 0x98
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
     76e:	f240 2302 	movw	r3, #514	; 0x202
     772:	f011 0f40 	tst.w	r1, #64	; 0x40
     776:	bf08      	it	eq
     778:	2303      	moveq	r3, #3
     77a:	4602      	mov	r2, r0
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
     77c:	0788      	lsls	r0, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
     77e:	bf4c      	ite	mi
     780:	f043 002c 	orrmi.w	r0, r3, #44	; 0x2c
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
     784:	f043 000c 	orrpl.w	r0, r3, #12
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
     788:	f895 3099 	ldrb.w	r3, [r5, #153]	; 0x99
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
     78c:	068f      	lsls	r7, r1, #26
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
     78e:	bf48      	it	mi
     790:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
     794:	f013 0f09 	tst.w	r3, #9
	if (IS_ENABLED(CONFIG_BT_ECC) &&
     798:	f895 3066 	ldrb.w	r3, [r5, #102]	; 0x66
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
     79c:	bf18      	it	ne
     79e:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_ECC) &&
     7a2:	f003 0306 	and.w	r3, r3, #6
	if (IS_ENABLED(CONFIG_BT_SMP) &&
     7a6:	07ce      	lsls	r6, r1, #31
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
     7a8:	bf48      	it	mi
     7aa:	f040 0010 	orrmi.w	r0, r0, #16
	if (IS_ENABLED(CONFIG_BT_ECC) &&
     7ae:	2b06      	cmp	r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
     7b0:	bf08      	it	eq
     7b2:	f440 70c0 	orreq.w	r0, r0, #384	; 0x180
	sys_put_le64(mask, cp_mask->events);
     7b6:	2100      	movs	r1, #0
     7b8:	f011 ff32 	bl	12620 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
     7bc:	4621      	mov	r1, r4
     7be:	2200      	movs	r2, #0
     7c0:	f242 0001 	movw	r0, #8193	; 0x2001
     7c4:	f005 fa08 	bl	5bd8 <bt_hci_cmd_send_sync>
	if (err) {
     7c8:	4604      	mov	r4, r0
     7ca:	2800      	cmp	r0, #0
     7cc:	f47f af0d 	bne.w	5ea <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x102>
	if (BT_FEAT_BREDR(bt_dev.features)) {
     7d0:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
     7d4:	0698      	lsls	r0, r3, #26
     7d6:	d41e      	bmi.n	816 <CONFIG_ISR_STACK_SIZE+0x16>
	if (bt_dev.le.acl_mtu) {
     7d8:	f8b5 10c4 	ldrh.w	r1, [r5, #196]	; 0xc4
     7dc:	b9d9      	cbnz	r1, 816 <CONFIG_ISR_STACK_SIZE+0x16>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
     7de:	f241 0005 	movw	r0, #4101	; 0x1005
     7e2:	aa03      	add	r2, sp, #12
     7e4:	f005 f9f8 	bl	5bd8 <bt_hci_cmd_send_sync>
	if (err) {
     7e8:	4604      	mov	r4, r0
     7ea:	2800      	cmp	r0, #0
     7ec:	f47f aefd 	bne.w	5ea <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x102>
	if (bt_dev.le.acl_mtu) {
     7f0:	f8b5 30c4 	ldrh.w	r3, [r5, #196]	; 0xc4
     7f4:	b963      	cbnz	r3, 810 <CONFIG_ISR_STACK_SIZE+0x10>
	read_buffer_size_complete(rsp);
     7f6:	9b03      	ldr	r3, [sp, #12]
     7f8:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
     7fa:	785a      	ldrb	r2, [r3, #1]
     7fc:	7899      	ldrb	r1, [r3, #2]
     7fe:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
     802:	f8a5 20c4 	strh.w	r2, [r5, #196]	; 0xc4
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
     806:	889a      	ldrh	r2, [r3, #4]
     808:	483c      	ldr	r0, [pc, #240]	; (8fc <CONFIG_BT_RX_STACK_SIZE+0x64>)
     80a:	4611      	mov	r1, r2
     80c:	f014 fc8d 	bl	1512a <z_impl_k_sem_init>
	net_buf_unref(rsp);
     810:	9803      	ldr	r0, [sp, #12]
     812:	f00c fd19 	bl	d248 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
     816:	2108      	movs	r1, #8
     818:	f640 4001 	movw	r0, #3073	; 0xc01
     81c:	f005 f9a4 	bl	5b68 <bt_hci_cmd_create>
	if (!buf) {
     820:	4604      	mov	r4, r0
     822:	2800      	cmp	r0, #0
     824:	f43f aeb3 	beq.w	58e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xa6>
     828:	2108      	movs	r1, #8
     82a:	4408      	add	r0, r1
     82c:	f013 fc16 	bl	1405c <net_buf_simple_add>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
     830:	f895 3098 	ldrb.w	r3, [r5, #152]	; 0x98
     834:	4602      	mov	r2, r0
     836:	07d9      	lsls	r1, r3, #31
     838:	d553      	bpl.n	8e2 <CONFIG_BT_RX_STACK_SIZE+0x4a>
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
     83a:	a12d      	add	r1, pc, #180	; (adr r1, 8f0 <CONFIG_BT_RX_STACK_SIZE+0x58>)
     83c:	e9d1 0100 	ldrd	r0, r1, [r1]
	sys_put_le64(mask, ev->events);
     840:	f011 feee 	bl	12620 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
     844:	4621      	mov	r1, r4
     846:	2200      	movs	r2, #0
     848:	f640 4001 	movw	r0, #3073	; 0xc01
     84c:	f005 f9c4 	bl	5bd8 <bt_hci_cmd_send_sync>
	if (err) {
     850:	4604      	mov	r4, r0
     852:	2800      	cmp	r0, #0
     854:	f47f aec9 	bne.w	5ea <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x102>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
     858:	4601      	mov	r1, r0
     85a:	aa02      	add	r2, sp, #8
     85c:	f64f 4001 	movw	r0, #64513	; 0xfc01
     860:	f005 f9ba 	bl	5bd8 <bt_hci_cmd_send_sync>
	if (err) {
     864:	4e26      	ldr	r6, [pc, #152]	; (900 <CONFIG_BT_RX_STACK_SIZE+0x68>)
     866:	4b27      	ldr	r3, [pc, #156]	; (904 <CONFIG_BT_RX_STACK_SIZE+0x6c>)
     868:	1af6      	subs	r6, r6, r3
     86a:	08f6      	lsrs	r6, r6, #3
     86c:	01b6      	lsls	r6, r6, #6
     86e:	2800      	cmp	r0, #0
     870:	d054      	beq.n	91c <CONFIG_BT_RX_STACK_SIZE+0x84>
		BT_WARN("Vendor HCI extensions not available");
     872:	4825      	ldr	r0, [pc, #148]	; (908 <CONFIG_BT_RX_STACK_SIZE+0x70>)
     874:	f046 0102 	orr.w	r1, r6, #2
			BT_WARN("Failed to read supported vendor features");
     878:	f010 fa1c 	bl	10cb4 <log_0>
		err = bt_conn_init();
     87c:	f007 feda 	bl	8634 <bt_conn_init>
		if (err) {
     880:	4604      	mov	r4, r0
     882:	2800      	cmp	r0, #0
     884:	f47f aeb1 	bne.w	5ea <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x102>
 * @return N/A
 */
static inline void k_delayed_work_init(struct k_delayed_work *work,
				       k_work_handler_t handler)
{
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
     888:	4601      	mov	r1, r0
     88a:	2230      	movs	r2, #48	; 0x30
     88c:	481f      	ldr	r0, [pc, #124]	; (90c <CONFIG_BT_RX_STACK_SIZE+0x74>)
     88e:	f011 fd6f 	bl	12370 <memset>
     892:	4b1f      	ldr	r3, [pc, #124]	; (910 <CONFIG_BT_RX_STACK_SIZE+0x78>)
     894:	f8c5 314c 	str.w	r3, [r5, #332]	; 0x14c
		if (!bt_dev.id_count) {
     898:	79eb      	ldrb	r3, [r5, #7]
     89a:	2b00      	cmp	r3, #0
     89c:	f040 80ae 	bne.w	9fc <CONFIG_BT_RX_STACK_SIZE+0x164>
			BT_INFO("No ID address. App must call settings_load()");
     8a0:	481c      	ldr	r0, [pc, #112]	; (914 <CONFIG_BT_RX_STACK_SIZE+0x7c>)
     8a2:	f046 0103 	orr.w	r1, r6, #3
     8a6:	f010 fa05 	bl	10cb4 <log_0>
			return 0;
     8aa:	e69e      	b.n	5ea <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x102>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
     8ac:	2102      	movs	r1, #2
     8ae:	f640 406d 	movw	r0, #3181	; 0xc6d
     8b2:	f005 f959 	bl	5b68 <bt_hci_cmd_create>
		if (!buf) {
     8b6:	4604      	mov	r4, r0
     8b8:	2800      	cmp	r0, #0
     8ba:	f43f ae68 	beq.w	58e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xa6>
     8be:	2102      	movs	r1, #2
     8c0:	3008      	adds	r0, #8
     8c2:	f013 fbcb 	bl	1405c <net_buf_simple_add>
		cp_le->le = 0x01;
     8c6:	2301      	movs	r3, #1
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
     8c8:	4621      	mov	r1, r4
		cp_le->le = 0x01;
     8ca:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
     8cc:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
     8ce:	4632      	mov	r2, r6
     8d0:	f640 406d 	movw	r0, #3181	; 0xc6d
     8d4:	f005 f980 	bl	5bd8 <bt_hci_cmd_send_sync>
		if (err) {
     8d8:	4604      	mov	r4, r0
     8da:	2800      	cmp	r0, #0
     8dc:	f43f aec8 	beq.w	670 <CONFIG_BT_COMPANY_ID+0x7f>
     8e0:	e683      	b.n	5ea <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x102>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
     8e2:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
     8e6:	480c      	ldr	r0, [pc, #48]	; (918 <CONFIG_BT_RX_STACK_SIZE+0x80>)
     8e8:	e7aa      	b.n	840 <CONFIG_ISR_STACK_SIZE+0x40>
     8ea:	bf00      	nop
     8ec:	f3af 8000 	nop.w
     8f0:	02008890 	.word	0x02008890
     8f4:	20008000 	.word	0x20008000
     8f8:	20000098 	.word	0x20000098
     8fc:	200000c8 	.word	0x200000c8
     900:	00015a30 	.word	0x00015a30
     904:	00015a00 	.word	0x00015a00
     908:	00017d6f 	.word	0x00017d6f
     90c:	20000148 	.word	0x20000148
     910:	00005f21 	.word	0x00005f21
     914:	00017e43 	.word	0x00017e43
     918:	02008810 	.word	0x02008810
	rp.info = (void *)rsp->data;
     91c:	9b02      	ldr	r3, [sp, #8]
	BT_INFO("HW Platform: %s (0x%04x)",
     91e:	483b      	ldr	r0, [pc, #236]	; (a0c <CONFIG_BT_RX_STACK_SIZE+0x174>)
	rp.info = (void *)rsp->data;
     920:	689c      	ldr	r4, [r3, #8]
	BT_INFO("HW Platform: %s (0x%04x)",
     922:	f046 0303 	orr.w	r3, r6, #3
     926:	f8b4 2001 	ldrh.w	r2, [r4, #1]
	if (platform < ARRAY_SIZE(plat_str)) {
     92a:	2a03      	cmp	r2, #3
		return plat_str[platform];
     92c:	bf96      	itet	ls
     92e:	4938      	ldrls	r1, [pc, #224]	; (a10 <CONFIG_BT_RX_STACK_SIZE+0x178>)
	return "unknown";
     930:	4938      	ldrhi	r1, [pc, #224]	; (a14 <CONFIG_BT_RX_STACK_SIZE+0x17c>)
		return plat_str[platform];
     932:	f851 1022 	ldrls.w	r1, [r1, r2, lsl #2]
	BT_INFO("HW Platform: %s (0x%04x)",
     936:	f010 f9de 	bl	10cf6 <log_2>
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
     93a:	f8b4 1001 	ldrh.w	r1, [r4, #1]
	BT_INFO("HW Variant: %s (0x%04x)",
     93e:	f8b4 2003 	ldrh.w	r2, [r4, #3]
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
     942:	2902      	cmp	r1, #2
	BT_INFO("HW Variant: %s (0x%04x)",
     944:	f046 0303 	orr.w	r3, r6, #3
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
     948:	d12e      	bne.n	9a8 <CONFIG_BT_RX_STACK_SIZE+0x110>
	if (variant < ARRAY_SIZE(nordic_str)) {
     94a:	2a03      	cmp	r2, #3
     94c:	d82c      	bhi.n	9a8 <CONFIG_BT_RX_STACK_SIZE+0x110>
		return nordic_str[variant];
     94e:	4932      	ldr	r1, [pc, #200]	; (a18 <CONFIG_BT_RX_STACK_SIZE+0x180>)
     950:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
	BT_INFO("HW Variant: %s (0x%04x)",
     954:	4831      	ldr	r0, [pc, #196]	; (a1c <CONFIG_BT_RX_STACK_SIZE+0x184>)
     956:	f010 f9ce 	bl	10cf6 <log_2>
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
     95a:	7962      	ldrb	r2, [r4, #5]
     95c:	f046 0303 	orr.w	r3, r6, #3
	if (variant < ARRAY_SIZE(var_str)) {
     960:	2a03      	cmp	r2, #3
		return var_str[variant];
     962:	bf96      	itet	ls
     964:	492e      	ldrls	r1, [pc, #184]	; (a20 <CONFIG_BT_RX_STACK_SIZE+0x188>)
	return "unknown";
     966:	492b      	ldrhi	r1, [pc, #172]	; (a14 <CONFIG_BT_RX_STACK_SIZE+0x17c>)
		return var_str[variant];
     968:	f851 1022 	ldrls.w	r1, [r1, r2, lsl #2]
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
     96c:	482d      	ldr	r0, [pc, #180]	; (a24 <CONFIG_BT_RX_STACK_SIZE+0x18c>)
     96e:	e9cd 1203 	strd	r1, r2, [sp, #12]
     972:	79a2      	ldrb	r2, [r4, #6]
     974:	a903      	add	r1, sp, #12
     976:	9205      	str	r2, [sp, #20]
     978:	f8b4 2007 	ldrh.w	r2, [r4, #7]
     97c:	9206      	str	r2, [sp, #24]
     97e:	f8d4 2009 	ldr.w	r2, [r4, #9]
     982:	9207      	str	r2, [sp, #28]
     984:	2205      	movs	r2, #5
     986:	f010 f9eb 	bl	10d60 <log_n>
	net_buf_unref(rsp);
     98a:	9802      	ldr	r0, [sp, #8]
     98c:	f00c fc5c 	bl	d248 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
     990:	2100      	movs	r1, #0
     992:	f64f 4002 	movw	r0, #64514	; 0xfc02
     996:	aa02      	add	r2, sp, #8
     998:	f005 f91e 	bl	5bd8 <bt_hci_cmd_send_sync>
	if (err) {
     99c:	4604      	mov	r4, r0
     99e:	b128      	cbz	r0, 9ac <CONFIG_BT_RX_STACK_SIZE+0x114>
		BT_WARN("Failed to read supported vendor commands");
     9a0:	4821      	ldr	r0, [pc, #132]	; (a28 <CONFIG_BT_RX_STACK_SIZE+0x190>)
     9a2:	f046 0102 	orr.w	r1, r6, #2
     9a6:	e767      	b.n	878 <CONFIG_ISR_STACK_SIZE+0x78>
		return "unknown";
     9a8:	491a      	ldr	r1, [pc, #104]	; (a14 <CONFIG_BT_RX_STACK_SIZE+0x17c>)
     9aa:	e7d3      	b.n	954 <CONFIG_BT_RX_STACK_SIZE+0xbc>
	rp.cmds = (void *)rsp->data;
     9ac:	9b02      	ldr	r3, [sp, #8]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
     9ae:	4f1f      	ldr	r7, [pc, #124]	; (a2c <CONFIG_BT_RX_STACK_SIZE+0x194>)
     9b0:	6899      	ldr	r1, [r3, #8]
     9b2:	2202      	movs	r2, #2
     9b4:	3101      	adds	r1, #1
     9b6:	f107 0085 	add.w	r0, r7, #133	; 0x85
     9ba:	f011 fcae 	bl	1231a <memcpy>
	net_buf_unref(rsp);
     9be:	9802      	ldr	r0, [sp, #8]
     9c0:	f00c fc42 	bl	d248 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
     9c4:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
     9c8:	075b      	lsls	r3, r3, #29
     9ca:	f57f af57 	bpl.w	87c <CONFIG_ISR_STACK_SIZE+0x7c>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
     9ce:	4621      	mov	r1, r4
     9d0:	f64f 4003 	movw	r0, #64515	; 0xfc03
     9d4:	aa02      	add	r2, sp, #8
     9d6:	f005 f8ff 	bl	5bd8 <bt_hci_cmd_send_sync>
		if (err) {
     9da:	b118      	cbz	r0, 9e4 <CONFIG_BT_RX_STACK_SIZE+0x14c>
			BT_WARN("Failed to read supported vendor features");
     9dc:	4814      	ldr	r0, [pc, #80]	; (a30 <CONFIG_BT_RX_STACK_SIZE+0x198>)
     9de:	f046 0102 	orr.w	r1, r6, #2
     9e2:	e749      	b.n	878 <CONFIG_ISR_STACK_SIZE+0x78>
		memcpy(bt_dev.vs_features, rp.feat->features,
     9e4:	2201      	movs	r2, #1
		rp.feat = (void *)rsp->data;
     9e6:	9b02      	ldr	r3, [sp, #8]
		memcpy(bt_dev.vs_features, rp.feat->features,
     9e8:	f107 0084 	add.w	r0, r7, #132	; 0x84
     9ec:	6899      	ldr	r1, [r3, #8]
     9ee:	4411      	add	r1, r2
     9f0:	f011 fc93 	bl	1231a <memcpy>
		net_buf_unref(rsp);
     9f4:	9802      	ldr	r0, [sp, #8]
     9f6:	f00c fc27 	bl	d248 <net_buf_unref>
     9fa:	e73f      	b.n	87c <CONFIG_ISR_STACK_SIZE+0x7c>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
     9fc:	2104      	movs	r1, #4
     9fe:	480d      	ldr	r0, [pc, #52]	; (a34 <CONFIG_BT_RX_STACK_SIZE+0x19c>)
     a00:	f011 fddf 	bl	125c2 <atomic_or>
	bt_finalize_init();
     a04:	f006 f95a 	bl	6cbc <bt_finalize_init>
	return 0;
     a08:	e5ef      	b.n	5ea <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x102>
     a0a:	bf00      	nop
     a0c:	00017d93 	.word	0x00017d93
     a10:	00015ff0 	.word	0x00015ff0
     a14:	000176aa 	.word	0x000176aa
     a18:	00015fb0 	.word	0x00015fb0
     a1c:	00017dac 	.word	0x00017dac
     a20:	00016028 	.word	0x00016028
     a24:	00017dc4 	.word	0x00017dc4
     a28:	00017df1 	.word	0x00017df1
     a2c:	20000000 	.word	0x20000000
     a30:	00017e1a 	.word	0x00017e1a
     a34:	20000094 	.word	0x20000094

00000a38 <disconnected>:
	}
}

static void disconnected(struct bt_conn *conn, uint8_t reason)
{
	printk("Disconnected (reason 0x%02x)\n", reason);
     a38:	4801      	ldr	r0, [pc, #4]	; (a40 <disconnected+0x8>)
     a3a:	f00f bd14 	b.w	10466 <printk>
     a3e:	bf00      	nop
     a40:	000164fc 	.word	0x000164fc

00000a44 <connected>:
	if (err) {
     a44:	b111      	cbz	r1, a4c <connected+0x8>
		printk("Connection failed (err 0x%02x)\n", err);
     a46:	4803      	ldr	r0, [pc, #12]	; (a54 <connected+0x10>)
     a48:	f00f bd0d 	b.w	10466 <printk>
		printk("Connected\n");
     a4c:	4802      	ldr	r0, [pc, #8]	; (a58 <connected+0x14>)
     a4e:	f00f bd0a 	b.w	10466 <printk>
     a52:	bf00      	nop
     a54:	0001651a 	.word	0x0001651a
     a58:	0001653a 	.word	0x0001653a

00000a5c <write_otown>:
{
     a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     a5e:	460d      	mov	r5, r1
     a60:	f8bd 0018 	ldrh.w	r0, [sp, #24]
     a64:	461c      	mov	r4, r3
	if (offset + len > sizeof(otown_value)) {
     a66:	461e      	mov	r6, r3
     a68:	18c3      	adds	r3, r0, r3
     a6a:	2b06      	cmp	r3, #6
{
     a6c:	4611      	mov	r1, r2
	uint8_t *value = attr->user_data;
     a6e:	68ed      	ldr	r5, [r5, #12]
	if (offset + len > sizeof(otown_value)) {
     a70:	dc29      	bgt.n	ac6 <write_otown+0x6a>
	memcpy(value + offset, buf, len);
     a72:	4622      	mov	r2, r4
     a74:	4428      	add	r0, r5
     a76:	f011 fc50 	bl	1231a <memcpy>
	int value_int = (int)*value; 
     a7a:	782f      	ldrb	r7, [r5, #0]
	if(value_int >= 9){
     a7c:	4b13      	ldr	r3, [pc, #76]	; (acc <write_otown+0x70>)
     a7e:	2f08      	cmp	r7, #8
     a80:	dd13      	ble.n	aaa <write_otown+0x4e>
		gpio_pin_set(dev, PIN, true);
     a82:	2101      	movs	r1, #1
     a84:	6818      	ldr	r0, [r3, #0]
     a86:	f00f fc2a 	bl	102de <gpio_pin_set.constprop.0>
		printk("value_int = %i \n",value_int);
     a8a:	4639      	mov	r1, r7
     a8c:	4810      	ldr	r0, [pc, #64]	; (ad0 <write_otown+0x74>)
     a8e:	f00f fcea 	bl	10466 <printk>
	printk("Value = ");
     a92:	4810      	ldr	r0, [pc, #64]	; (ad4 <write_otown+0x78>)
     a94:	f00f fce7 	bl	10466 <printk>
		printk("%c", *value++);	
     a98:	4f0f      	ldr	r7, [pc, #60]	; (ad8 <write_otown+0x7c>)
     a9a:	442c      	add	r4, r5
	for (size_t i = 0; i < len; i++){
     a9c:	42a5      	cmp	r5, r4
     a9e:	d10c      	bne.n	aba <write_otown+0x5e>
	}   printk("\n");
     aa0:	480e      	ldr	r0, [pc, #56]	; (adc <write_otown+0x80>)
     aa2:	f00f fce0 	bl	10466 <printk>
}
     aa6:	4630      	mov	r0, r6
     aa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		gpio_pin_set(dev, PIN, false);
     aaa:	2100      	movs	r1, #0
     aac:	6818      	ldr	r0, [r3, #0]
     aae:	f00f fc16 	bl	102de <gpio_pin_set.constprop.0>
		printk("else \n");
     ab2:	480b      	ldr	r0, [pc, #44]	; (ae0 <write_otown+0x84>)
     ab4:	f00f fcd7 	bl	10466 <printk>
     ab8:	e7eb      	b.n	a92 <write_otown+0x36>
		printk("%c", *value++);	
     aba:	4638      	mov	r0, r7
     abc:	f815 1b01 	ldrb.w	r1, [r5], #1
     ac0:	f00f fcd1 	bl	10466 <printk>
	for (size_t i = 0; i < len; i++){
     ac4:	e7ea      	b.n	a9c <write_otown+0x40>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
     ac6:	f06f 0606 	mvn.w	r6, #6
     aca:	e7ec      	b.n	aa6 <write_otown+0x4a>
     acc:	20001178 	.word	0x20001178
     ad0:	00016545 	.word	0x00016545
     ad4:	0001655d 	.word	0x0001655d
     ad8:	00016566 	.word	0x00016566
     adc:	00016745 	.word	0x00016745
     ae0:	00016556 	.word	0x00016556

00000ae4 <gpio_init>:
//GPIO setup
const struct device *dev; 
int ret;
//

void gpio_init(){
     ae4:	b510      	push	{r4, lr}
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
     ae6:	480d      	ldr	r0, [pc, #52]	; (b1c <gpio_init+0x38>)
     ae8:	f00d ffbc 	bl	ea64 <z_impl_device_get_binding>
    dev = device_get_binding(LED0);
     aec:	4a0c      	ldr	r2, [pc, #48]	; (b20 <gpio_init+0x3c>)
     aee:	6010      	str	r0, [r2, #0]
	if (dev == NULL) {
     af0:	b920      	cbnz	r0, afc <gpio_init+0x18>
	}
	ret = gpio_pin_configure(dev, PIN, GPIO_OUTPUT | FLAGS);
	if (ret < 0) {
		return;
	}
}
     af2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printk("error in dev=device_get_binding");
     af6:	480b      	ldr	r0, [pc, #44]	; (b24 <gpio_init+0x40>)
     af8:	f00f bcb5 	b.w	10466 <printk>
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
     afc:	68c4      	ldr	r4, [r0, #12]
	return api->pin_configure(port, pin, flags);
     afe:	6883      	ldr	r3, [r0, #8]
     b00:	f240 2201 	movw	r2, #513	; 0x201
     b04:	211c      	movs	r1, #28
     b06:	681b      	ldr	r3, [r3, #0]
     b08:	4798      	blx	r3
	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	ret = gpio_config(port, pin, flags);
	if (ret != 0) {
     b0a:	b918      	cbnz	r0, b14 <gpio_init+0x30>
		return ret;
	}

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
     b0c:	6823      	ldr	r3, [r4, #0]
     b0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
     b12:	6023      	str	r3, [r4, #0]
	ret = gpio_pin_configure(dev, PIN, GPIO_OUTPUT | FLAGS);
     b14:	4b04      	ldr	r3, [pc, #16]	; (b28 <gpio_init+0x44>)
     b16:	6018      	str	r0, [r3, #0]
}
     b18:	bd10      	pop	{r4, pc}
     b1a:	bf00      	nop
     b1c:	00016569 	.word	0x00016569
     b20:	20001178 	.word	0x20001178
     b24:	00016570 	.word	0x00016570
     b28:	2000117c 	.word	0x2000117c

00000b2c <main>:


//Zephyr bluetooth stack: https://docs.zephyrproject.org/latest/guides/bluetooth/bluetooth-arch.html

void main(void)
{
     b2c:	b570      	push	{r4, r5, r6, lr}
	int err;
	err = bt_enable(NULL);
     b2e:	2000      	movs	r0, #0
{
     b30:	b088      	sub	sp, #32
	err = bt_enable(NULL);
     b32:	f006 f93b 	bl	6dac <bt_enable>
	if (err) {
     b36:	4606      	mov	r6, r0
     b38:	b128      	cbz	r0, b46 <main+0x1a>
		printk("Bluetooth init failed (err %d)\n", err);
     b3a:	4601      	mov	r1, r0
     b3c:	4815      	ldr	r0, [pc, #84]	; (b94 <main+0x68>)
     b3e:	f00f fc92 	bl	10466 <printk>
	gpio_init();

	while (1) {
		k_sleep(K_SECONDS(1));
	}
}
     b42:	b008      	add	sp, #32
     b44:	bd70      	pop	{r4, r5, r6, pc}

static void bt_ready(void)
{
	int err;

	printk("Bluetooth initialized\n");
     b46:	4814      	ldr	r0, [pc, #80]	; (b98 <main+0x6c>)
		settings_load();
	}

	bt_conn_cb_register(&conn_callbacks);

	err = bt_le_adv_start(BT_LE_ADV_CONN_NAME, ad, ARRAY_SIZE(ad), NULL, 0); //Advertising parameters, data to be advertised and used for response
     b48:	4d14      	ldr	r5, [pc, #80]	; (b9c <main+0x70>)
	printk("Bluetooth initialized\n");
     b4a:	f00f fc8c 	bl	10466 <printk>
	err = bt_le_adv_start(BT_LE_ADV_CONN_NAME, ad, ARRAY_SIZE(ad), NULL, 0); //Advertising parameters, data to be advertised and used for response
     b4e:	ac03      	add	r4, sp, #12
		settings_load();
     b50:	f010 fd40 	bl	115d4 <settings_load>
	bt_conn_cb_register(&conn_callbacks);
     b54:	4812      	ldr	r0, [pc, #72]	; (ba0 <main+0x74>)
     b56:	f007 f8fd 	bl	7d54 <bt_conn_cb_register>
	err = bt_le_adv_start(BT_LE_ADV_CONN_NAME, ad, ARRAY_SIZE(ad), NULL, 0); //Advertising parameters, data to be advertised and used for response
     b5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
     b5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
     b5e:	682b      	ldr	r3, [r5, #0]
     b60:	4910      	ldr	r1, [pc, #64]	; (ba4 <main+0x78>)
     b62:	6023      	str	r3, [r4, #0]
     b64:	2202      	movs	r2, #2
     b66:	4633      	mov	r3, r6
     b68:	9600      	str	r6, [sp, #0]
     b6a:	a803      	add	r0, sp, #12
     b6c:	f006 fc92 	bl	7494 <bt_le_adv_start>
	if (err) {
     b70:	4601      	mov	r1, r0
     b72:	b150      	cbz	r0, b8a <main+0x5e>
		printk("Advertising failed to start (err %d)\n", err);
     b74:	480c      	ldr	r0, [pc, #48]	; (ba8 <main+0x7c>)
     b76:	f00f fc76 	bl	10466 <printk>
	gpio_init();
     b7a:	f7ff ffb3 	bl	ae4 <gpio_init>
	return z_impl_k_sleep(timeout);
     b7e:	2100      	movs	r1, #0
     b80:	f44f 4000 	mov.w	r0, #32768	; 0x8000
     b84:	f00e fdd0 	bl	f728 <z_impl_k_sleep>
	while (1) {
     b88:	e7f9      	b.n	b7e <main+0x52>
		return;
	}
	printk("Advertising successfully started\n");
     b8a:	4808      	ldr	r0, [pc, #32]	; (bac <main+0x80>)
     b8c:	f00f fc6b 	bl	10466 <printk>
     b90:	e7f3      	b.n	b7a <main+0x4e>
     b92:	bf00      	nop
     b94:	00016590 	.word	0x00016590
     b98:	000165b0 	.word	0x000165b0
     b9c:	00015b00 	.word	0x00015b00
     ba0:	200001e0 	.word	0x200001e0
     ba4:	00015bc8 	.word	0x00015bc8
     ba8:	000165c7 	.word	0x000165c7
     bac:	000165ed 	.word	0x000165ed

00000bb0 <crc8_ccitt>:
	0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15,
	0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d
};

uint8_t crc8_ccitt(uint8_t val, const void *buf, size_t cnt)
{
     bb0:	b530      	push	{r4, r5, lr}
	size_t i;
	const uint8_t *p = buf;

	for (i = 0; i < cnt; i++) {
		val ^= p[i];
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
     bb2:	4c0a      	ldr	r4, [pc, #40]	; (bdc <crc8_ccitt+0x2c>)
     bb4:	440a      	add	r2, r1
	for (i = 0; i < cnt; i++) {
     bb6:	4291      	cmp	r1, r2
     bb8:	d100      	bne.n	bbc <crc8_ccitt+0xc>
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
	}
	return val;
}
     bba:	bd30      	pop	{r4, r5, pc}
		val ^= p[i];
     bbc:	f811 3b01 	ldrb.w	r3, [r1], #1
     bc0:	4058      	eors	r0, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
     bc2:	0903      	lsrs	r3, r0, #4
     bc4:	5ce3      	ldrb	r3, [r4, r3]
     bc6:	ea83 1300 	eor.w	r3, r3, r0, lsl #4
     bca:	b2dd      	uxtb	r5, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
     bcc:	f3c3 1303 	ubfx	r3, r3, #4, #4
     bd0:	5ce0      	ldrb	r0, [r4, r3]
     bd2:	ea80 1005 	eor.w	r0, r0, r5, lsl #4
     bd6:	b2c0      	uxtb	r0, r0
	for (i = 0; i < cnt; i++) {
     bd8:	e7ed      	b.n	bb6 <crc8_ccitt+0x6>
     bda:	bf00      	nop
     bdc:	0001660f 	.word	0x0001660f

00000be0 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
     be0:	680b      	ldr	r3, [r1, #0]
     be2:	3301      	adds	r3, #1
     be4:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     be6:	4b01      	ldr	r3, [pc, #4]	; (bec <char_out+0xc>)
     be8:	681b      	ldr	r3, [r3, #0]
     bea:	4718      	bx	r3
     bec:	200001fc 	.word	0x200001fc

00000bf0 <__printk_hook_install>:
	_char_out = fn;
     bf0:	4b01      	ldr	r3, [pc, #4]	; (bf8 <__printk_hook_install+0x8>)
     bf2:	6018      	str	r0, [r3, #0]
}
     bf4:	4770      	bx	lr
     bf6:	bf00      	nop
     bf8:	200001fc 	.word	0x200001fc

00000bfc <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
     bfc:	b507      	push	{r0, r1, r2, lr}
     bfe:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
     c00:	2100      	movs	r1, #0
{
     c02:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
     c04:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
     c06:	4803      	ldr	r0, [pc, #12]	; (c14 <vprintk+0x18>)
     c08:	a901      	add	r1, sp, #4
     c0a:	f000 f8ff 	bl	e0c <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
     c0e:	b003      	add	sp, #12
     c10:	f85d fb04 	ldr.w	pc, [sp], #4
     c14:	00000be1 	.word	0x00000be1

00000c18 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
     c18:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
     c1a:	2500      	movs	r5, #0
{
     c1c:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
     c1e:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
     c22:	4604      	mov	r4, r0

	cbvprintf(str_out, &ctx, fmt, ap);
     c24:	a901      	add	r1, sp, #4
     c26:	4805      	ldr	r0, [pc, #20]	; (c3c <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
     c28:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
     c2a:	f000 f8ef 	bl	e0c <cbvprintf>

	if (ctx.count < ctx.max) {
     c2e:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
     c32:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
     c34:	bfb8      	it	lt
     c36:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
     c38:	b005      	add	sp, #20
     c3a:	bd30      	pop	{r4, r5, pc}
     c3c:	00010441 	.word	0x00010441

00000c40 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     c40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     c44:	f8b0 9018 	ldrh.w	r9, [r0, #24]
{
     c48:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     c4a:	f019 0808 	ands.w	r8, r9, #8
{
     c4e:	4693      	mov	fp, r2
	if (processing) {
     c50:	d00d      	beq.n	c6e <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
     c52:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     c54:	bf0c      	ite	eq
     c56:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
     c5a:	f049 0920 	orrne.w	r9, r9, #32
     c5e:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     c62:	f38b 8811 	msr	BASEPRI, fp
     c66:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
     c6a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     c6e:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
     c72:	2902      	cmp	r1, #2
     c74:	d107      	bne.n	c86 <process_event+0x46>
			evt = process_recheck(mgr);
     c76:	4620      	mov	r0, r4
     c78:	f00f fc0f 	bl	1049a <process_recheck>
		if (evt == EVT_NOP) {
     c7c:	2800      	cmp	r0, #0
     c7e:	d0f0      	beq.n	c62 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
     c80:	2801      	cmp	r0, #1
     c82:	8b23      	ldrh	r3, [r4, #24]
     c84:	d150      	bne.n	d28 <process_event+0xe8>
			res = mgr->last_res;
     c86:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     c88:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
     c8a:	2f00      	cmp	r7, #0
     c8c:	da15      	bge.n	cba <process_event+0x7a>
		*clients = mgr->clients;
     c8e:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     c90:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
     c94:	e9c4 8800 	strd	r8, r8, [r4]
     c98:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
     c9c:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
     c9e:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     ca0:	8b21      	ldrh	r1, [r4, #24]
     ca2:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     ca6:	45ca      	cmp	sl, r9
     ca8:	d002      	beq.n	cb0 <process_event+0x70>
		if (do_monitors
     caa:	68a3      	ldr	r3, [r4, #8]
     cac:	2b00      	cmp	r3, #0
     cae:	d15c      	bne.n	d6a <process_event+0x12a>
		    || !sys_slist_is_empty(&clients)
     cb0:	b90d      	cbnz	r5, cb6 <process_event+0x76>
		    || (transit != NULL)) {
     cb2:	2e00      	cmp	r6, #0
     cb4:	d074      	beq.n	da0 <process_event+0x160>
     cb6:	2300      	movs	r3, #0
     cb8:	e058      	b.n	d6c <process_event+0x12c>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     cba:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
     cbe:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
     cc0:	2a01      	cmp	r2, #1
     cc2:	d820      	bhi.n	d06 <process_event+0xc6>
		*clients = mgr->clients;
     cc4:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
     cc8:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
     cca:	6825      	ldr	r5, [r4, #0]
	list->head = NULL;
     ccc:	b289      	uxth	r1, r1
	list->tail = NULL;
     cce:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
     cd2:	d10c      	bne.n	cee <process_event+0xae>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     cd4:	2d00      	cmp	r5, #0
     cd6:	462b      	mov	r3, r5
     cd8:	bf38      	it	cc
     cda:	2300      	movcc	r3, #0
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     cdc:	b12b      	cbz	r3, cea <process_event+0xaa>
				mgr->refs += 1U;
     cde:	8b62      	ldrh	r2, [r4, #26]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
     ce0:	681b      	ldr	r3, [r3, #0]
     ce2:	3201      	adds	r2, #1
     ce4:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     ce6:	2b00      	cmp	r3, #0
     ce8:	d1f8      	bne.n	cdc <process_event+0x9c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     cea:	f041 0102 	orr.w	r1, r1, #2
		if (process_recheck(mgr) != EVT_NOP) {
     cee:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
     cf0:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     cf2:	f00f fbd2 	bl	1049a <process_recheck>
     cf6:	4606      	mov	r6, r0
     cf8:	2800      	cmp	r0, #0
     cfa:	d0d1      	beq.n	ca0 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     cfc:	8b23      	ldrh	r3, [r4, #24]
     cfe:	f043 0320 	orr.w	r3, r3, #32
     d02:	8323      	strh	r3, [r4, #24]
     d04:	e7cb      	b.n	c9e <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
     d06:	2b04      	cmp	r3, #4
     d08:	d10c      	bne.n	d24 <process_event+0xe4>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     d0a:	f021 0107 	bic.w	r1, r1, #7
     d0e:	b289      	uxth	r1, r1
		if (process_recheck(mgr) != EVT_NOP) {
     d10:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
     d12:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     d14:	f00f fbc1 	bl	1049a <process_recheck>
     d18:	4605      	mov	r5, r0
     d1a:	2800      	cmp	r0, #0
     d1c:	d0bf      	beq.n	c9e <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     d1e:	f041 0120 	orr.w	r1, r1, #32
     d22:	8321      	strh	r1, [r4, #24]
     d24:	2500      	movs	r5, #0
     d26:	e7ba      	b.n	c9e <process_event+0x5e>
		} else if (evt == EVT_START) {
     d28:	2803      	cmp	r0, #3
     d2a:	d109      	bne.n	d40 <process_event+0x100>
			transit = mgr->transitions->start;
     d2c:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     d2e:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
     d32:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     d34:	f043 0306 	orr.w	r3, r3, #6
}
     d38:	2500      	movs	r5, #0
	mgr->flags = (state & ONOFF_STATE_MASK)
     d3a:	8323      	strh	r3, [r4, #24]
		res = 0;
     d3c:	462f      	mov	r7, r5
     d3e:	e7af      	b.n	ca0 <process_event+0x60>
		} else if (evt == EVT_STOP) {
     d40:	2804      	cmp	r0, #4
     d42:	d106      	bne.n	d52 <process_event+0x112>
			transit = mgr->transitions->stop;
     d44:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     d46:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
     d4a:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     d4c:	f043 0304 	orr.w	r3, r3, #4
     d50:	e7f2      	b.n	d38 <process_event+0xf8>
		} else if (evt == EVT_RESET) {
     d52:	2805      	cmp	r0, #5
     d54:	d106      	bne.n	d64 <process_event+0x124>
			transit = mgr->transitions->reset;
     d56:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     d58:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
     d5c:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     d5e:	f043 0305 	orr.w	r3, r3, #5
     d62:	e7e9      	b.n	d38 <process_event+0xf8>
     d64:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
     d66:	462e      	mov	r6, r5
     d68:	e7e8      	b.n	d3c <process_event+0xfc>
				   && !sys_slist_is_empty(&mgr->monitors);
     d6a:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     d6c:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     d70:	8321      	strh	r1, [r4, #24]
     d72:	f38b 8811 	msr	BASEPRI, fp
     d76:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
     d7a:	bb03      	cbnz	r3, dbe <process_event+0x17e>
	while (!sys_slist_is_empty(list)) {
     d7c:	2d00      	cmp	r5, #0
     d7e:	d133      	bne.n	de8 <process_event+0x1a8>
			if (transit != NULL) {
     d80:	b116      	cbz	r6, d88 <process_event+0x148>
				transit(mgr, transition_complete);
     d82:	4620      	mov	r0, r4
     d84:	4920      	ldr	r1, [pc, #128]	; (e08 <process_event+0x1c8>)
     d86:	47b0      	blx	r6
	__asm__ volatile(
     d88:	f04f 0320 	mov.w	r3, #32
     d8c:	f3ef 8b11 	mrs	fp, BASEPRI
     d90:	f383 8811 	msr	BASEPRI, r3
     d94:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     d98:	8b23      	ldrh	r3, [r4, #24]
     d9a:	f023 0308 	bic.w	r3, r3, #8
     d9e:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     da0:	8b23      	ldrh	r3, [r4, #24]
     da2:	06da      	lsls	r2, r3, #27
     da4:	d528      	bpl.n	df8 <process_event+0x1b8>
			evt = EVT_COMPLETE;
     da6:	2101      	movs	r1, #1
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     da8:	f023 0310 	bic.w	r3, r3, #16
     dac:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
     dae:	f8b4 9018 	ldrh.w	r9, [r4, #24]
     db2:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
     db6:	2900      	cmp	r1, #0
     db8:	f47f af5b 	bne.w	c72 <process_event+0x32>
out:
     dbc:	e751      	b.n	c62 <process_event+0x22>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     dbe:	68a1      	ldr	r1, [r4, #8]
     dc0:	2900      	cmp	r1, #0
     dc2:	d0db      	beq.n	d7c <process_event+0x13c>
	return node->next;
     dc4:	680b      	ldr	r3, [r1, #0]
     dc6:	2b00      	cmp	r3, #0
     dc8:	bf38      	it	cc
     dca:	2300      	movcc	r3, #0
     dcc:	4699      	mov	r9, r3
		mon->callback(mgr, mon, state, res);
     dce:	4652      	mov	r2, sl
     dd0:	463b      	mov	r3, r7
     dd2:	4620      	mov	r0, r4
     dd4:	f8d1 b004 	ldr.w	fp, [r1, #4]
     dd8:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     dda:	f1b9 0f00 	cmp.w	r9, #0
     dde:	d0cd      	beq.n	d7c <process_event+0x13c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
     de0:	4649      	mov	r1, r9
     de2:	f8d9 3000 	ldr.w	r3, [r9]
     de6:	e7ee      	b.n	dc6 <process_event+0x186>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
     de8:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
     dea:	463b      	mov	r3, r7
     dec:	4652      	mov	r2, sl
     dee:	4620      	mov	r0, r4
     df0:	682d      	ldr	r5, [r5, #0]
     df2:	f00f fb6e 	bl	104d2 <notify_one>
     df6:	e7c1      	b.n	d7c <process_event+0x13c>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     df8:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     dfc:	bf1e      	ittt	ne
     dfe:	f023 0320 	bicne.w	r3, r3, #32
			evt = EVT_RECHECK;
     e02:	2102      	movne	r1, #2
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     e04:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
     e06:	e7d2      	b.n	dae <process_event+0x16e>
     e08:	000104ff 	.word	0x000104ff

00000e0c <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
     e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     e10:	468b      	mov	fp, r1
     e12:	4692      	mov	sl, r2
     e14:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     e16:	2500      	movs	r5, #0
{
     e18:	b091      	sub	sp, #68	; 0x44
     e1a:	9002      	str	r0, [sp, #8]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     e1c:	f89a 0000 	ldrb.w	r0, [sl]
     e20:	b908      	cbnz	r0, e26 <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
     e22:	4628      	mov	r0, r5
     e24:	e35e      	b.n	14e4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x15c>
		if (*fp != '%') {
     e26:	2825      	cmp	r0, #37	; 0x25
     e28:	f10a 0701 	add.w	r7, sl, #1
     e2c:	d007      	beq.n	e3e <cbvprintf+0x32>
			OUTC('%');
     e2e:	4659      	mov	r1, fp
     e30:	9b02      	ldr	r3, [sp, #8]
     e32:	4798      	blx	r3
     e34:	2800      	cmp	r0, #0
     e36:	f2c0 8355 	blt.w	14e4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x15c>
     e3a:	3501      	adds	r5, #1
			break;
     e3c:	e210      	b.n	1260 <CONFIG_HEAP_MEM_POOL_SIZE+0x260>
		} state = {
     e3e:	2218      	movs	r2, #24
     e40:	2100      	movs	r1, #0
     e42:	a80a      	add	r0, sp, #40	; 0x28
     e44:	f011 fa94 	bl	12370 <memset>
	if (*sp == '%') {
     e48:	f89a 3001 	ldrb.w	r3, [sl, #1]
     e4c:	2b25      	cmp	r3, #37	; 0x25
     e4e:	d078      	beq.n	f42 <cbvprintf+0x136>
     e50:	2200      	movs	r2, #0
     e52:	4694      	mov	ip, r2
     e54:	4616      	mov	r6, r2
     e56:	4696      	mov	lr, r2
     e58:	4610      	mov	r0, r2
     e5a:	4639      	mov	r1, r7
		switch (*sp) {
     e5c:	f817 3b01 	ldrb.w	r3, [r7], #1
     e60:	2b2b      	cmp	r3, #43	; 0x2b
     e62:	f000 809d 	beq.w	fa0 <cbvprintf+0x194>
     e66:	f200 8094 	bhi.w	f92 <cbvprintf+0x186>
     e6a:	2b20      	cmp	r3, #32
     e6c:	f000 809b 	beq.w	fa6 <cbvprintf+0x19a>
     e70:	2b23      	cmp	r3, #35	; 0x23
     e72:	f000 809a 	beq.w	faa <cbvprintf+0x19e>
     e76:	b128      	cbz	r0, e84 <cbvprintf+0x78>
     e78:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     e7c:	f040 0004 	orr.w	r0, r0, #4
     e80:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     e84:	f1be 0f00 	cmp.w	lr, #0
     e88:	d005      	beq.n	e96 <cbvprintf+0x8a>
     e8a:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     e8e:	f040 0008 	orr.w	r0, r0, #8
     e92:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     e96:	b12e      	cbz	r6, ea4 <cbvprintf+0x98>
     e98:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     e9c:	f040 0010 	orr.w	r0, r0, #16
     ea0:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     ea4:	f1bc 0f00 	cmp.w	ip, #0
     ea8:	d005      	beq.n	eb6 <cbvprintf+0xaa>
     eaa:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     eae:	f040 0020 	orr.w	r0, r0, #32
     eb2:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     eb6:	b12a      	cbz	r2, ec4 <cbvprintf+0xb8>
     eb8:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     ebc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
     ec0:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
     ec4:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     ec8:	f002 0044 	and.w	r0, r2, #68	; 0x44
     ecc:	2844      	cmp	r0, #68	; 0x44
     ece:	d103      	bne.n	ed8 <cbvprintf+0xcc>
		conv->flag_zero = false;
     ed0:	f36f 1286 	bfc	r2, #6, #1
     ed4:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
     ed8:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     edc:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
     ede:	f042 0280 	orr.w	r2, r2, #128	; 0x80
     ee2:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     ee6:	d17b      	bne.n	fe0 <cbvprintf+0x1d4>
		conv->width_star = true;
     ee8:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     eec:	1c4b      	adds	r3, r1, #1
     eee:	f042 0201 	orr.w	r2, r2, #1
     ef2:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
     ef6:	781a      	ldrb	r2, [r3, #0]
     ef8:	2a2e      	cmp	r2, #46	; 0x2e
     efa:	bf0c      	ite	eq
     efc:	2101      	moveq	r1, #1
     efe:	2100      	movne	r1, #0
     f00:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     f04:	f361 0241 	bfi	r2, r1, #1, #1
     f08:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
     f0c:	d174      	bne.n	ff8 <cbvprintf+0x1ec>
	if (*sp == '*') {
     f0e:	785a      	ldrb	r2, [r3, #1]
     f10:	2a2a      	cmp	r2, #42	; 0x2a
     f12:	d06a      	beq.n	fea <cbvprintf+0x1de>
	size_t val = 0;
     f14:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
     f16:	260a      	movs	r6, #10
     f18:	3301      	adds	r3, #1
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
     f1a:	4618      	mov	r0, r3
     f1c:	f810 2b01 	ldrb.w	r2, [r0], #1
     f20:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     f24:	2f09      	cmp	r7, #9
     f26:	f240 808e 	bls.w	1046 <CONFIG_HEAP_MEM_POOL_SIZE+0x46>
	conv->unsupported |= ((conv->prec_value < 0)
     f2a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
     f2e:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
     f30:	f3c2 0040 	ubfx	r0, r2, #1, #1
     f34:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
     f38:	f361 0241 	bfi	r2, r1, #1, #1
     f3c:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
     f40:	e05a      	b.n	ff8 <cbvprintf+0x1ec>
		conv->specifier = *sp++;
     f42:	f10a 0702 	add.w	r7, sl, #2
     f46:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
     f4a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     f4e:	07d9      	lsls	r1, r3, #31
     f50:	f140 8149 	bpl.w	11e6 <CONFIG_HEAP_MEM_POOL_SIZE+0x1e6>
			width = va_arg(ap, int);
     f54:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
     f58:	f1b9 0f00 	cmp.w	r9, #0
     f5c:	da07      	bge.n	f6e <cbvprintf+0x162>
				conv->flag_dash = true;
     f5e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				width = -width;
     f62:	f1c9 0900 	rsb	r9, r9, #0
				conv->flag_dash = true;
     f66:	f042 0204 	orr.w	r2, r2, #4
     f6a:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
		if (conv->prec_star) {
     f6e:	075a      	lsls	r2, r3, #29
     f70:	f140 8142 	bpl.w	11f8 <CONFIG_HEAP_MEM_POOL_SIZE+0x1f8>
			int arg = va_arg(ap, int);
     f74:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
     f78:	f1b8 0f00 	cmp.w	r8, #0
     f7c:	f280 8141 	bge.w	1202 <CONFIG_HEAP_MEM_POOL_SIZE+0x202>
				conv->prec_present = false;
     f80:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     f84:	f36f 0341 	bfc	r3, #1, #1
     f88:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
     f8c:	f04f 38ff 	mov.w	r8, #4294967295
     f90:	e137      	b.n	1202 <CONFIG_HEAP_MEM_POOL_SIZE+0x202>
		switch (*sp) {
     f92:	2b2d      	cmp	r3, #45	; 0x2d
     f94:	d00c      	beq.n	fb0 <cbvprintf+0x1a4>
     f96:	2b30      	cmp	r3, #48	; 0x30
     f98:	f47f af6d 	bne.w	e76 <cbvprintf+0x6a>
			conv->flag_zero = true;
     f9c:	2201      	movs	r2, #1
	} while (loop);
     f9e:	e75c      	b.n	e5a <cbvprintf+0x4e>
			conv->flag_plus = true;
     fa0:	f04f 0e01 	mov.w	lr, #1
     fa4:	e759      	b.n	e5a <cbvprintf+0x4e>
			conv->flag_space = true;
     fa6:	2601      	movs	r6, #1
     fa8:	e757      	b.n	e5a <cbvprintf+0x4e>
			conv->flag_hash = true;
     faa:	f04f 0c01 	mov.w	ip, #1
     fae:	e754      	b.n	e5a <cbvprintf+0x4e>
		switch (*sp) {
     fb0:	2001      	movs	r0, #1
     fb2:	e752      	b.n	e5a <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
     fb4:	4633      	mov	r3, r6
     fb6:	fb0c 0202 	mla	r2, ip, r2, r0
     fba:	3a30      	subs	r2, #48	; 0x30
     fbc:	461e      	mov	r6, r3
     fbe:	f816 0b01 	ldrb.w	r0, [r6], #1
     fc2:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     fc6:	2f09      	cmp	r7, #9
     fc8:	d9f4      	bls.n	fb4 <cbvprintf+0x1a8>
	if (sp != wp) {
     fca:	4299      	cmp	r1, r3
     fcc:	d093      	beq.n	ef6 <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
     fce:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
     fd2:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
     fd4:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
     fd6:	f362 0141 	bfi	r1, r2, #1, #1
     fda:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
     fde:	e78a      	b.n	ef6 <cbvprintf+0xea>
     fe0:	460b      	mov	r3, r1
	size_t val = 0;
     fe2:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
     fe4:	f04f 0c0a 	mov.w	ip, #10
     fe8:	e7e8      	b.n	fbc <cbvprintf+0x1b0>
		conv->prec_star = true;
     fea:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		return ++sp;
     fee:	3302      	adds	r3, #2
		conv->prec_star = true;
     ff0:	f042 0204 	orr.w	r2, r2, #4
     ff4:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	switch (*sp) {
     ff8:	461f      	mov	r7, r3
     ffa:	f817 2b01 	ldrb.w	r2, [r7], #1
     ffe:	2a6c      	cmp	r2, #108	; 0x6c
    1000:	d041      	beq.n	1086 <CONFIG_HEAP_MEM_POOL_SIZE+0x86>
    1002:	d825      	bhi.n	1050 <CONFIG_HEAP_MEM_POOL_SIZE+0x50>
    1004:	2a68      	cmp	r2, #104	; 0x68
    1006:	d02b      	beq.n	1060 <CONFIG_HEAP_MEM_POOL_SIZE+0x60>
    1008:	2a6a      	cmp	r2, #106	; 0x6a
    100a:	d046      	beq.n	109a <CONFIG_HEAP_MEM_POOL_SIZE+0x9a>
    100c:	2a4c      	cmp	r2, #76	; 0x4c
    100e:	d04c      	beq.n	10aa <CONFIG_HEAP_MEM_POOL_SIZE+0xaa>
    1010:	461f      	mov	r7, r3
	conv->specifier = *sp++;
    1012:	f817 2b01 	ldrb.w	r2, [r7], #1
    1016:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	switch (conv->specifier) {
    101a:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
    101c:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
    1020:	f200 80d9 	bhi.w	11d6 <CONFIG_HEAP_MEM_POOL_SIZE+0x1d6>
    1024:	2a57      	cmp	r2, #87	; 0x57
    1026:	d84d      	bhi.n	10c4 <CONFIG_HEAP_MEM_POOL_SIZE+0xc4>
    1028:	2a41      	cmp	r2, #65	; 0x41
    102a:	d003      	beq.n	1034 <CONFIG_HEAP_MEM_POOL_SIZE+0x34>
    102c:	3a45      	subs	r2, #69	; 0x45
    102e:	2a02      	cmp	r2, #2
    1030:	f200 80d1 	bhi.w	11d6 <CONFIG_HEAP_MEM_POOL_SIZE+0x1d6>
		conv->specifier_cat = SPECIFIER_FP;
    1034:	2204      	movs	r2, #4
    1036:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    103a:	f362 0302 	bfi	r3, r2, #0, #3
    103e:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
    1042:	2301      	movs	r3, #1
			break;
    1044:	e09e      	b.n	1184 <CONFIG_HEAP_MEM_POOL_SIZE+0x184>
		val = 10U * val + *sp++ - '0';
    1046:	fb06 2101 	mla	r1, r6, r1, r2
    104a:	4603      	mov	r3, r0
    104c:	3930      	subs	r1, #48	; 0x30
    104e:	e764      	b.n	f1a <cbvprintf+0x10e>
	switch (*sp) {
    1050:	2a74      	cmp	r2, #116	; 0x74
    1052:	d026      	beq.n	10a2 <CONFIG_HEAP_MEM_POOL_SIZE+0xa2>
    1054:	2a7a      	cmp	r2, #122	; 0x7a
    1056:	d1db      	bne.n	1010 <CONFIG_HEAP_MEM_POOL_SIZE+0x10>
		conv->length_mod = LENGTH_Z;
    1058:	2206      	movs	r2, #6
    105a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    105e:	e00d      	b.n	107c <CONFIG_HEAP_MEM_POOL_SIZE+0x7c>
		if (*++sp == 'h') {
    1060:	785a      	ldrb	r2, [r3, #1]
    1062:	2a68      	cmp	r2, #104	; 0x68
    1064:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    1068:	d106      	bne.n	1078 <CONFIG_HEAP_MEM_POOL_SIZE+0x78>
			conv->length_mod = LENGTH_HH;
    106a:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    106c:	f361 02c6 	bfi	r2, r1, #3, #4
    1070:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
    1074:	1c9f      	adds	r7, r3, #2
    1076:	e7cc      	b.n	1012 <CONFIG_HEAP_MEM_POOL_SIZE+0x12>
			conv->length_mod = LENGTH_H;
    1078:	4613      	mov	r3, r2
    107a:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
    107c:	f362 03c6 	bfi	r3, r2, #3, #4
    1080:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
    1084:	e7c5      	b.n	1012 <CONFIG_HEAP_MEM_POOL_SIZE+0x12>
		if (*++sp == 'l') {
    1086:	785a      	ldrb	r2, [r3, #1]
    1088:	2a6c      	cmp	r2, #108	; 0x6c
    108a:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    108e:	d101      	bne.n	1094 <CONFIG_HEAP_MEM_POOL_SIZE+0x94>
			conv->length_mod = LENGTH_LL;
    1090:	2104      	movs	r1, #4
    1092:	e7eb      	b.n	106c <CONFIG_HEAP_MEM_POOL_SIZE+0x6c>
			conv->length_mod = LENGTH_L;
    1094:	4613      	mov	r3, r2
    1096:	2203      	movs	r2, #3
    1098:	e7f0      	b.n	107c <CONFIG_HEAP_MEM_POOL_SIZE+0x7c>
		conv->length_mod = LENGTH_J;
    109a:	2205      	movs	r2, #5
    109c:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    10a0:	e7ec      	b.n	107c <CONFIG_HEAP_MEM_POOL_SIZE+0x7c>
		conv->length_mod = LENGTH_T;
    10a2:	2207      	movs	r2, #7
    10a4:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    10a8:	e7e8      	b.n	107c <CONFIG_HEAP_MEM_POOL_SIZE+0x7c>
		conv->unsupported = true;
    10aa:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    10ae:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    10b2:	f023 0302 	bic.w	r3, r3, #2
    10b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    10ba:	f043 0302 	orr.w	r3, r3, #2
    10be:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
    10c2:	e7a6      	b.n	1012 <CONFIG_HEAP_MEM_POOL_SIZE+0x12>
    10c4:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
    10c8:	2920      	cmp	r1, #32
    10ca:	f200 8084 	bhi.w	11d6 <CONFIG_HEAP_MEM_POOL_SIZE+0x1d6>
    10ce:	a001      	add	r0, pc, #4	; (adr r0, 10d4 <CONFIG_HEAP_MEM_POOL_SIZE+0xd4>)
    10d0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
    10d4:	00001199 	.word	0x00001199
    10d8:	000011d7 	.word	0x000011d7
    10dc:	000011d7 	.word	0x000011d7
    10e0:	000011d7 	.word	0x000011d7
    10e4:	000011d7 	.word	0x000011d7
    10e8:	000011d7 	.word	0x000011d7
    10ec:	000011d7 	.word	0x000011d7
    10f0:	000011d7 	.word	0x000011d7
    10f4:	000011d7 	.word	0x000011d7
    10f8:	00001035 	.word	0x00001035
    10fc:	000011d7 	.word	0x000011d7
    1100:	00001199 	.word	0x00001199
    1104:	00001159 	.word	0x00001159
    1108:	00001035 	.word	0x00001035
    110c:	00001035 	.word	0x00001035
    1110:	00001035 	.word	0x00001035
    1114:	000011d7 	.word	0x000011d7
    1118:	00001159 	.word	0x00001159
    111c:	000011d7 	.word	0x000011d7
    1120:	000011d7 	.word	0x000011d7
    1124:	000011d7 	.word	0x000011d7
    1128:	000011d7 	.word	0x000011d7
    112c:	000011a1 	.word	0x000011a1
    1130:	00001199 	.word	0x00001199
    1134:	000011bd 	.word	0x000011bd
    1138:	000011d7 	.word	0x000011d7
    113c:	000011d7 	.word	0x000011d7
    1140:	000011bd 	.word	0x000011bd
    1144:	000011d7 	.word	0x000011d7
    1148:	00001199 	.word	0x00001199
    114c:	000011d7 	.word	0x000011d7
    1150:	000011d7 	.word	0x000011d7
    1154:	00001199 	.word	0x00001199
		conv->specifier_cat = SPECIFIER_SINT;
    1158:	2001      	movs	r0, #1
    115a:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    115e:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    1162:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    1166:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    1168:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
    116c:	bf02      	ittt	eq
    116e:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
    1172:	f041 0101 	orreq.w	r1, r1, #1
    1176:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
    117a:	2a63      	cmp	r2, #99	; 0x63
    117c:	d131      	bne.n	11e2 <CONFIG_HEAP_MEM_POOL_SIZE+0x1e2>
			unsupported = (conv->length_mod != LENGTH_NONE);
    117e:	3b00      	subs	r3, #0
    1180:	bf18      	it	ne
    1182:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    1184:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    1188:	f3c2 0140 	ubfx	r1, r2, #1, #1
    118c:	430b      	orrs	r3, r1
    118e:	f363 0241 	bfi	r2, r3, #1, #1
    1192:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    1196:	e6d8      	b.n	f4a <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
    1198:	2002      	movs	r0, #2
    119a:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    119e:	e7de      	b.n	115e <CONFIG_HEAP_MEM_POOL_SIZE+0x15e>
		conv->specifier_cat = SPECIFIER_PTR;
    11a0:	2103      	movs	r1, #3
    11a2:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    11a6:	f003 0378 	and.w	r3, r3, #120	; 0x78
    11aa:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
    11ae:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    11b2:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
    11b4:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    11b8:	4143      	adcs	r3, r0
    11ba:	e7e3      	b.n	1184 <CONFIG_HEAP_MEM_POOL_SIZE+0x184>
		conv->specifier_cat = SPECIFIER_PTR;
    11bc:	2103      	movs	r1, #3
    11be:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
    11c2:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    11c6:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
    11ca:	bf14      	ite	ne
    11cc:	2301      	movne	r3, #1
    11ce:	2300      	moveq	r3, #0
		conv->specifier_cat = SPECIFIER_PTR;
    11d0:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
    11d4:	e7d6      	b.n	1184 <CONFIG_HEAP_MEM_POOL_SIZE+0x184>
		conv->invalid = true;
    11d6:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    11da:	f043 0301 	orr.w	r3, r3, #1
    11de:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
    11e2:	2300      	movs	r3, #0
    11e4:	e7ce      	b.n	1184 <CONFIG_HEAP_MEM_POOL_SIZE+0x184>
		} else if (conv->width_present) {
    11e6:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
    11ea:	2a00      	cmp	r2, #0
		int width = -1;
    11ec:	bfac      	ite	ge
    11ee:	f04f 39ff 	movge.w	r9, #4294967295
			width = conv->width_value;
    11f2:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
    11f6:	e6ba      	b.n	f6e <cbvprintf+0x162>
		} else if (conv->prec_present) {
    11f8:	079b      	lsls	r3, r3, #30
    11fa:	f57f aec7 	bpl.w	f8c <cbvprintf+0x180>
			precision = conv->prec_value;
    11fe:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
		conv->pad0_value = 0;
    1202:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    1204:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
    1208:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
			= (enum length_mod_enum)conv->length_mod;
    120c:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		enum specifier_cat_enum specifier_cat
    1210:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    1214:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    1216:	f3c2 02c3 	ubfx	r2, r2, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    121a:	d136      	bne.n	128a <CONFIG_HEAP_MEM_POOL_SIZE+0x28a>
			switch (length_mod) {
    121c:	1ed3      	subs	r3, r2, #3
    121e:	2b04      	cmp	r3, #4
    1220:	d820      	bhi.n	1264 <CONFIG_HEAP_MEM_POOL_SIZE+0x264>
    1222:	e8df f003 	tbb	[pc, r3]
    1226:	0703      	.short	0x0703
    1228:	1f07      	.short	0x1f07
    122a:	1f          	.byte	0x1f
    122b:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    122c:	f854 0b04 	ldr.w	r0, [r4], #4
				value->sint = (short)value->sint;
    1230:	17c1      	asrs	r1, r0, #31
    1232:	e004      	b.n	123e <CONFIG_HEAP_MEM_POOL_SIZE+0x23e>
					(sint_value_type)va_arg(ap, intmax_t);
    1234:	3407      	adds	r4, #7
    1236:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    123a:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->sint = (short)value->sint;
    123e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
    1242:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    1246:	f013 0603 	ands.w	r6, r3, #3
    124a:	d054      	beq.n	12f6 <CONFIG_HEAP_MEM_POOL_SIZE+0x2f6>
			OUTS(sp, fp);
    124c:	463b      	mov	r3, r7
    124e:	4652      	mov	r2, sl
    1250:	4659      	mov	r1, fp
    1252:	9802      	ldr	r0, [sp, #8]
    1254:	f00f fcd2 	bl	10bfc <outs>
    1258:	2800      	cmp	r0, #0
    125a:	f2c0 8143 	blt.w	14e4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x15c>
    125e:	4405      	add	r5, r0
			continue;
    1260:	46ba      	mov	sl, r7
    1262:	e5db      	b.n	e1c <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    1264:	f854 0b04 	ldr.w	r0, [r4], #4
			if (length_mod == LENGTH_HH) {
    1268:	2a01      	cmp	r2, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    126a:	ea4f 71e0 	mov.w	r1, r0, asr #31
    126e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    1272:	d105      	bne.n	1280 <CONFIG_HEAP_MEM_POOL_SIZE+0x280>
				value->uint = (unsigned char)value->uint;
    1274:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
    1278:	930a      	str	r3, [sp, #40]	; 0x28
    127a:	2300      	movs	r3, #0
    127c:	930b      	str	r3, [sp, #44]	; 0x2c
    127e:	e7e0      	b.n	1242 <CONFIG_HEAP_MEM_POOL_SIZE+0x242>
			} else if (length_mod == LENGTH_H) {
    1280:	2a02      	cmp	r2, #2
    1282:	d1de      	bne.n	1242 <CONFIG_HEAP_MEM_POOL_SIZE+0x242>
				value->sint = (short)value->sint;
    1284:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
    1288:	e7d2      	b.n	1230 <CONFIG_HEAP_MEM_POOL_SIZE+0x230>
		} else if (specifier_cat == SPECIFIER_UINT) {
    128a:	2b02      	cmp	r3, #2
    128c:	d123      	bne.n	12d6 <CONFIG_HEAP_MEM_POOL_SIZE+0x2d6>
			switch (length_mod) {
    128e:	1ed3      	subs	r3, r2, #3
    1290:	2b04      	cmp	r3, #4
    1292:	d813      	bhi.n	12bc <CONFIG_HEAP_MEM_POOL_SIZE+0x2bc>
    1294:	e8df f003 	tbb	[pc, r3]
    1298:	120a0a03 	.word	0x120a0a03
    129c:	12          	.byte	0x12
    129d:	00          	.byte	0x00
				if ((!WCHAR_IS_SIGNED)
    129e:	2100      	movs	r1, #0
					value->uint = (wchar_t)va_arg(ap,
    12a0:	6820      	ldr	r0, [r4, #0]
    12a2:	1d23      	adds	r3, r4, #4
    12a4:	900a      	str	r0, [sp, #40]	; 0x28
    12a6:	910b      	str	r1, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
    12a8:	461c      	mov	r4, r3
    12aa:	e7ca      	b.n	1242 <CONFIG_HEAP_MEM_POOL_SIZE+0x242>
					(uint_value_type)va_arg(ap,
    12ac:	3407      	adds	r4, #7
    12ae:	f024 0307 	bic.w	r3, r4, #7
				value->uint =
    12b2:	e8f3 0102 	ldrd	r0, r1, [r3], #8
    12b6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
				break;
    12ba:	e7f5      	b.n	12a8 <CONFIG_HEAP_MEM_POOL_SIZE+0x2a8>
					(uint_value_type)va_arg(ap, size_t);
    12bc:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    12c0:	2a01      	cmp	r2, #1
					(uint_value_type)va_arg(ap, size_t);
    12c2:	930a      	str	r3, [sp, #40]	; 0x28
    12c4:	f04f 0300 	mov.w	r3, #0
    12c8:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
    12ca:	d0d3      	beq.n	1274 <CONFIG_HEAP_MEM_POOL_SIZE+0x274>
			} else if (length_mod == LENGTH_H) {
    12cc:	2a02      	cmp	r2, #2
    12ce:	d1b8      	bne.n	1242 <CONFIG_HEAP_MEM_POOL_SIZE+0x242>
				value->uint = (unsigned short)value->uint;
    12d0:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    12d4:	e7d0      	b.n	1278 <CONFIG_HEAP_MEM_POOL_SIZE+0x278>
		} else if (specifier_cat == SPECIFIER_FP) {
    12d6:	2b04      	cmp	r3, #4
    12d8:	d107      	bne.n	12ea <CONFIG_HEAP_MEM_POOL_SIZE+0x2ea>
			if (length_mod == LENGTH_UPPER_L) {
    12da:	3407      	adds	r4, #7
    12dc:	f024 0407 	bic.w	r4, r4, #7
    12e0:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->ldbl = va_arg(ap, long double);
    12e4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    12e8:	e7ab      	b.n	1242 <CONFIG_HEAP_MEM_POOL_SIZE+0x242>
		} else if (specifier_cat == SPECIFIER_PTR) {
    12ea:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    12ec:	bf04      	itt	eq
    12ee:	f854 3b04 	ldreq.w	r3, [r4], #4
    12f2:	930a      	streq	r3, [sp, #40]	; 0x28
    12f4:	e7a5      	b.n	1242 <CONFIG_HEAP_MEM_POOL_SIZE+0x242>
		switch (conv->specifier) {
    12f6:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    12fa:	2878      	cmp	r0, #120	; 0x78
    12fc:	d8b0      	bhi.n	1260 <CONFIG_HEAP_MEM_POOL_SIZE+0x260>
    12fe:	2862      	cmp	r0, #98	; 0x62
    1300:	d822      	bhi.n	1348 <CONFIG_HEAP_MEM_POOL_SIZE+0x348>
    1302:	2825      	cmp	r0, #37	; 0x25
    1304:	f43f ad93 	beq.w	e2e <cbvprintf+0x22>
    1308:	2858      	cmp	r0, #88	; 0x58
    130a:	d1a9      	bne.n	1260 <CONFIG_HEAP_MEM_POOL_SIZE+0x260>
			bps = encode_uint(value->uint, conv, buf, bpe);
    130c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    1310:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    1314:	9300      	str	r3, [sp, #0]
    1316:	aa0c      	add	r2, sp, #48	; 0x30
    1318:	ab04      	add	r3, sp, #16
    131a:	f00f fc24 	bl	10b66 <encode_uint>
    131e:	4682      	mov	sl, r0
			if (precision >= 0) {
    1320:	f1b8 0f00 	cmp.w	r8, #0
    1324:	f10d 0026 	add.w	r0, sp, #38	; 0x26
    1328:	db0c      	blt.n	1344 <CONFIG_HEAP_MEM_POOL_SIZE+0x344>
				conv->flag_zero = false;
    132a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
    132e:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
    1332:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    1336:	4598      	cmp	r8, r3
				conv->flag_zero = false;
    1338:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
    133c:	d902      	bls.n	1344 <CONFIG_HEAP_MEM_POOL_SIZE+0x344>
					conv->pad0_value = precision - (int)len;
    133e:	eba8 0303 	sub.w	r3, r8, r3
    1342:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
    1344:	4680      	mov	r8, r0
    1346:	e03d      	b.n	13c4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3c>
    1348:	3863      	subs	r0, #99	; 0x63
    134a:	2815      	cmp	r0, #21
    134c:	d888      	bhi.n	1260 <CONFIG_HEAP_MEM_POOL_SIZE+0x260>
    134e:	a101      	add	r1, pc, #4	; (adr r1, 1354 <CONFIG_HEAP_MEM_POOL_SIZE+0x354>)
    1350:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
    1354:	000013d5 	.word	0x000013d5
    1358:	00001439 	.word	0x00001439
    135c:	00001261 	.word	0x00001261
    1360:	00001261 	.word	0x00001261
    1364:	00001261 	.word	0x00001261
    1368:	00001261 	.word	0x00001261
    136c:	00001439 	.word	0x00001439
    1370:	00001261 	.word	0x00001261
    1374:	00001261 	.word	0x00001261
    1378:	00001261 	.word	0x00001261
    137c:	00001261 	.word	0x00001261
    1380:	00001497 	.word	0x00001497
    1384:	00001465 	.word	0x00001465
    1388:	00001469 	.word	0x00001469
    138c:	00001261 	.word	0x00001261
    1390:	00001261 	.word	0x00001261
    1394:	000013ad 	.word	0x000013ad
    1398:	00001261 	.word	0x00001261
    139c:	00001465 	.word	0x00001465
    13a0:	00001261 	.word	0x00001261
    13a4:	00001261 	.word	0x00001261
    13a8:	00001465 	.word	0x00001465
			if (precision >= 0) {
    13ac:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
    13b0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
    13b4:	db0a      	blt.n	13cc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x44>
				len = strnlen(bps, precision);
    13b6:	4641      	mov	r1, r8
    13b8:	4650      	mov	r0, sl
    13ba:	f010 ff7a 	bl	122b2 <strnlen>
		char sign = 0;
    13be:	2600      	movs	r6, #0
			bpe = bps + len;
    13c0:	eb0a 0800 	add.w	r8, sl, r0
		if (bps == NULL) {
    13c4:	f1ba 0f00 	cmp.w	sl, #0
    13c8:	d10c      	bne.n	13e4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5c>
    13ca:	e749      	b.n	1260 <CONFIG_HEAP_MEM_POOL_SIZE+0x260>
				len = strlen(bps);
    13cc:	4650      	mov	r0, sl
    13ce:	f010 ff69 	bl	122a4 <strlen>
    13d2:	e7f4      	b.n	13be <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x36>
			break;
    13d4:	2600      	movs	r6, #0
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    13d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			bpe = buf + 1;
    13d8:	f10d 0811 	add.w	r8, sp, #17
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    13dc:	f88d 3010 	strb.w	r3, [sp, #16]
			bps = buf;
    13e0:	f10d 0a10 	add.w	sl, sp, #16
		size_t nj_len = (bpe - bps);
    13e4:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
    13e8:	b106      	cbz	r6, 13ec <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x64>
			nj_len += 1U;
    13ea:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    13ec:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    13f0:	06d0      	lsls	r0, r2, #27
    13f2:	d56b      	bpl.n	14cc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x144>
			nj_len += 2U;
    13f4:	3302      	adds	r3, #2
		if (conv->pad_fp) {
    13f6:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
    13f8:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
    13fa:	bf48      	it	mi
    13fc:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
    13fe:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    1400:	bf48      	it	mi
    1402:	189b      	addmi	r3, r3, r2
		if (width > 0) {
    1404:	f1b9 0f00 	cmp.w	r9, #0
    1408:	dd79      	ble.n	14fe <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x176>
			if (!conv->flag_dash) {
    140a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
    140e:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
    1412:	f3c2 0380 	ubfx	r3, r2, #2, #1
    1416:	9303      	str	r3, [sp, #12]
    1418:	0753      	lsls	r3, r2, #29
    141a:	d470      	bmi.n	14fe <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x176>
				if (conv->flag_zero) {
    141c:	0650      	lsls	r0, r2, #25
    141e:	d564      	bpl.n	14ea <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x162>
					if (sign != 0) {
    1420:	b146      	cbz	r6, 1434 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xac>
						OUTC(sign);
    1422:	4659      	mov	r1, fp
    1424:	4630      	mov	r0, r6
    1426:	9b02      	ldr	r3, [sp, #8]
    1428:	4798      	blx	r3
    142a:	2800      	cmp	r0, #0
    142c:	db5a      	blt.n	14e4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x15c>
						sign = 0;
    142e:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
    1430:	3501      	adds	r5, #1
						sign = 0;
    1432:	461e      	mov	r6, r3
					pad = '0';
    1434:	2330      	movs	r3, #48	; 0x30
    1436:	e059      	b.n	14ec <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x164>
			if (conv->flag_plus) {
    1438:	071e      	lsls	r6, r3, #28
    143a:	d411      	bmi.n	1460 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xd8>
				sign = ' ';
    143c:	f013 0610 	ands.w	r6, r3, #16
    1440:	bf18      	it	ne
    1442:	2620      	movne	r6, #32
			if (value->sint < 0) {
    1444:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    1448:	2a00      	cmp	r2, #0
    144a:	f173 0100 	sbcs.w	r1, r3, #0
    144e:	f6bf af5d 	bge.w	130c <CONFIG_HEAP_MEM_POOL_SIZE+0x30c>
				value->uint = (uint_value_type)-value->sint;
    1452:	4252      	negs	r2, r2
    1454:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
    1458:	262d      	movs	r6, #45	; 0x2d
				value->uint = (uint_value_type)-value->sint;
    145a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    145e:	e755      	b.n	130c <CONFIG_HEAP_MEM_POOL_SIZE+0x30c>
				sign = '+';
    1460:	262b      	movs	r6, #43	; 0x2b
    1462:	e7ef      	b.n	1444 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xbc>
		switch (conv->specifier) {
    1464:	2600      	movs	r6, #0
    1466:	e751      	b.n	130c <CONFIG_HEAP_MEM_POOL_SIZE+0x30c>
			if (value->ptr != NULL) {
    1468:	980a      	ldr	r0, [sp, #40]	; 0x28
    146a:	b348      	cbz	r0, 14c0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x138>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    146c:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    1470:	9300      	str	r3, [sp, #0]
    1472:	2100      	movs	r1, #0
    1474:	ab04      	add	r3, sp, #16
    1476:	aa0c      	add	r2, sp, #48	; 0x30
    1478:	f00f fb75 	bl	10b66 <encode_uint>
				conv->altform_0c = true;
    147c:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
				bps = encode_uint((uintptr_t)value->ptr, conv,
    1480:	4682      	mov	sl, r0
				conv->altform_0c = true;
    1482:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    1486:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    148a:	f043 0310 	orr.w	r3, r3, #16
		char sign = 0;
    148e:	2600      	movs	r6, #0
				conv->altform_0c = true;
    1490:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
				goto prec_int_pad0;
    1494:	e744      	b.n	1320 <CONFIG_HEAP_MEM_POOL_SIZE+0x320>
				store_count(conv, value->ptr, count);
    1496:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
    1498:	2a07      	cmp	r2, #7
    149a:	f63f aee1 	bhi.w	1260 <CONFIG_HEAP_MEM_POOL_SIZE+0x260>
    149e:	e8df f002 	tbb	[pc, r2]
    14a2:	040d      	.short	0x040d
    14a4:	08080d06 	.word	0x08080d06
    14a8:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
    14aa:	701d      	strb	r5, [r3, #0]
		break;
    14ac:	e6d8      	b.n	1260 <CONFIG_HEAP_MEM_POOL_SIZE+0x260>
		*(short *)dp = (short)count;
    14ae:	801d      	strh	r5, [r3, #0]
		break;
    14b0:	e6d6      	b.n	1260 <CONFIG_HEAP_MEM_POOL_SIZE+0x260>
		*(intmax_t *)dp = (intmax_t)count;
    14b2:	4628      	mov	r0, r5
    14b4:	17e9      	asrs	r1, r5, #31
    14b6:	e9c3 0100 	strd	r0, r1, [r3]
		break;
    14ba:	e6d1      	b.n	1260 <CONFIG_HEAP_MEM_POOL_SIZE+0x260>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    14bc:	601d      	str	r5, [r3, #0]
		break;
    14be:	e6cf      	b.n	1260 <CONFIG_HEAP_MEM_POOL_SIZE+0x260>
			bpe = bps + 5;
    14c0:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 1588 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x200>
    14c4:	4606      	mov	r6, r0
			bps = "(nil)";
    14c6:	f1a8 0a05 	sub.w	sl, r8, #5
    14ca:	e78b      	b.n	13e4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5c>
		} else if (conv->altform_0) {
    14cc:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
    14ce:	bf48      	it	mi
    14d0:	3301      	addmi	r3, #1
    14d2:	e790      	b.n	13f6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6e>
					OUTC(pad);
    14d4:	4618      	mov	r0, r3
    14d6:	9303      	str	r3, [sp, #12]
    14d8:	4659      	mov	r1, fp
    14da:	9b02      	ldr	r3, [sp, #8]
    14dc:	4798      	blx	r3
    14de:	2800      	cmp	r0, #0
    14e0:	9b03      	ldr	r3, [sp, #12]
    14e2:	da04      	bge.n	14ee <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x166>
#undef OUTS
#undef OUTC
}
    14e4:	b011      	add	sp, #68	; 0x44
    14e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    14ea:	2320      	movs	r3, #32
    14ec:	444d      	add	r5, r9
    14ee:	464a      	mov	r2, r9
				while (width-- > 0) {
    14f0:	2a00      	cmp	r2, #0
    14f2:	eba5 0109 	sub.w	r1, r5, r9
    14f6:	f109 39ff 	add.w	r9, r9, #4294967295
    14fa:	dceb      	bgt.n	14d4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x14c>
    14fc:	460d      	mov	r5, r1
		if (sign != 0) {
    14fe:	b136      	cbz	r6, 150e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x186>
			OUTC(sign);
    1500:	4659      	mov	r1, fp
    1502:	4630      	mov	r0, r6
    1504:	9b02      	ldr	r3, [sp, #8]
    1506:	4798      	blx	r3
    1508:	2800      	cmp	r0, #0
    150a:	dbeb      	blt.n	14e4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x15c>
    150c:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    150e:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    1512:	06d9      	lsls	r1, r3, #27
    1514:	d401      	bmi.n	151a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x192>
    1516:	071a      	lsls	r2, r3, #28
    1518:	d506      	bpl.n	1528 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1a0>
				OUTC('0');
    151a:	4659      	mov	r1, fp
    151c:	2030      	movs	r0, #48	; 0x30
    151e:	9b02      	ldr	r3, [sp, #8]
    1520:	4798      	blx	r3
    1522:	2800      	cmp	r0, #0
    1524:	dbde      	blt.n	14e4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x15c>
    1526:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    1528:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    152c:	06db      	lsls	r3, r3, #27
    152e:	d507      	bpl.n	1540 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1b8>
				OUTC(conv->specifier);
    1530:	4659      	mov	r1, fp
    1532:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    1536:	9b02      	ldr	r3, [sp, #8]
    1538:	4798      	blx	r3
    153a:	2800      	cmp	r0, #0
    153c:	dbd2      	blt.n	14e4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x15c>
    153e:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    1540:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    1542:	442e      	add	r6, r5
    1544:	1b73      	subs	r3, r6, r5
    1546:	2b00      	cmp	r3, #0
    1548:	dc16      	bgt.n	1578 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1f0>
			OUTS(bps, bpe);
    154a:	4643      	mov	r3, r8
    154c:	4652      	mov	r2, sl
    154e:	4659      	mov	r1, fp
    1550:	9802      	ldr	r0, [sp, #8]
    1552:	f00f fb53 	bl	10bfc <outs>
    1556:	2800      	cmp	r0, #0
    1558:	dbc4      	blt.n	14e4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x15c>
    155a:	4405      	add	r5, r0
		while (width > 0) {
    155c:	44a9      	add	r9, r5
    155e:	eba9 0305 	sub.w	r3, r9, r5
    1562:	2b00      	cmp	r3, #0
    1564:	f77f ae7c 	ble.w	1260 <CONFIG_HEAP_MEM_POOL_SIZE+0x260>
			OUTC(' ');
    1568:	4659      	mov	r1, fp
    156a:	2020      	movs	r0, #32
    156c:	9b02      	ldr	r3, [sp, #8]
    156e:	4798      	blx	r3
    1570:	2800      	cmp	r0, #0
    1572:	dbb7      	blt.n	14e4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x15c>
    1574:	3501      	adds	r5, #1
			--width;
    1576:	e7f2      	b.n	155e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1d6>
				OUTC('0');
    1578:	4659      	mov	r1, fp
    157a:	2030      	movs	r0, #48	; 0x30
    157c:	9b02      	ldr	r3, [sp, #8]
    157e:	4798      	blx	r3
    1580:	2800      	cmp	r0, #0
    1582:	dbaf      	blt.n	14e4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x15c>
    1584:	3501      	adds	r5, #1
    1586:	e7dd      	b.n	1544 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1bc>
    1588:	00016624 	.word	0x00016624

0000158c <check_erratum19>:
    #ifndef NRF53_SERIES
        return false;
    #else
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined(NRF_APPLICATION)
                uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    158c:	4b13      	ldr	r3, [pc, #76]	; (15dc <check_erratum19+0x50>)
#if defined(CONFIG_SOC_NRF5340_CPUAPP) && \
	!defined(CONFIG_TRUSTED_EXECUTION_NONSECURE) && \
	!defined(CONFIG_NRF5340_CPUAPP_ERRATUM19)

static int check_erratum19(const struct device *arg)
{
    158e:	b510      	push	{r4, lr}
                uint32_t var2 = *(uint32_t *)0x00FF0134ul;
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    1590:	681b      	ldr	r3, [r3, #0]
    1592:	2b07      	cmp	r3, #7
    1594:	d120      	bne.n	15d8 <check_erratum19+0x4c>
                uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    1596:	4b12      	ldr	r3, [pc, #72]	; (15e0 <check_erratum19+0x54>)
    1598:	681b      	ldr	r3, [r3, #0]
    159a:	3b02      	subs	r3, #2
    159c:	2b03      	cmp	r3, #3
    159e:	d81b      	bhi.n	15d8 <check_erratum19+0x4c>
	ARG_UNUSED(arg);
	if (nrf53_errata_19()) {
    15a0:	4a10      	ldr	r2, [pc, #64]	; (15e4 <check_erratum19+0x58>)
    15a2:	5cd3      	ldrb	r3, [r2, r3]
    15a4:	b1c3      	cbz	r3, 15d8 <check_erratum19+0x4c>
    15a6:	4b10      	ldr	r3, [pc, #64]	; (15e8 <check_erratum19+0x5c>)
    15a8:	4c10      	ldr	r4, [pc, #64]	; (15ec <check_erratum19+0x60>)
		LOG_ERR("This device is affected by nRF53 Erratum 19,");
    15aa:	4811      	ldr	r0, [pc, #68]	; (15f0 <check_erratum19+0x64>)
    15ac:	1ae4      	subs	r4, r4, r3
    15ae:	08e4      	lsrs	r4, r4, #3
    15b0:	01a4      	lsls	r4, r4, #6
    15b2:	f044 0401 	orr.w	r4, r4, #1
    15b6:	4621      	mov	r1, r4
    15b8:	f00f fb7c 	bl	10cb4 <log_0>
		LOG_ERR("but workarounds have not been enabled.");
    15bc:	4621      	mov	r1, r4
    15be:	480d      	ldr	r0, [pc, #52]	; (15f4 <check_erratum19+0x68>)
    15c0:	f00f fb78 	bl	10cb4 <log_0>
		LOG_ERR("See CONFIG_NRF5340_CPUAPP_ERRATUM19.");
    15c4:	4621      	mov	r1, r4
    15c6:	480c      	ldr	r0, [pc, #48]	; (15f8 <check_erratum19+0x6c>)
    15c8:	f00f fb74 	bl	10cb4 <log_0>
		k_panic();
    15cc:	4040      	eors	r0, r0
    15ce:	f380 8811 	msr	BASEPRI, r0
    15d2:	f04f 0004 	mov.w	r0, #4
    15d6:	df02      	svc	2
	}

	return 0;
}
    15d8:	2000      	movs	r0, #0
    15da:	bd10      	pop	{r4, pc}
    15dc:	00ff0130 	.word	0x00ff0130
    15e0:	00ff0134 	.word	0x00ff0134
    15e4:	000166a2 	.word	0x000166a2
    15e8:	00015a00 	.word	0x00015a00
    15ec:	00015ae0 	.word	0x00015ae0
    15f0:	00016625 	.word	0x00016625
    15f4:	00016652 	.word	0x00016652
    15f8:	00016679 	.word	0x00016679

000015fc <nrf_gpio_pin_mcu_select.constprop.0>:
        /* FALLTHROUGH */
        case 0: return NRF_P0;
#endif
#if defined(P1_FEATURE_PINS_PRESENT)
        /* FALLTHROUGH */
        case 1: return NRF_P1;
    15fc:	4b09      	ldr	r3, [pc, #36]	; (1624 <nrf_gpio_pin_mcu_select.constprop.0+0x28>)
    15fe:	490a      	ldr	r1, [pc, #40]	; (1628 <nrf_gpio_pin_mcu_select.constprop.0+0x2c>)
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    1600:	f000 021f 	and.w	r2, r0, #31

    return pin_number >> 5;
    1604:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
    1606:	2801      	cmp	r0, #1
    1608:	bf08      	it	eq
    160a:	460b      	moveq	r3, r1
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_MCUSEL_Msk;
    160c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    1610:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    1614:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
    reg->PIN_CNF[pin_number] = cnf | (mcu << GPIO_PIN_CNF_MCUSEL_Pos);
    1618:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
    161c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
    1620:	4770      	bx	lr
    1622:	bf00      	nop
    1624:	50842500 	.word	0x50842500
    1628:	50842800 	.word	0x50842800

0000162c <nordicsemi_nrf53_init>:
{
    162c:	b570      	push	{r4, r5, r6, lr}
    162e:	f04f 0320 	mov.w	r3, #32
    1632:	f3ef 8611 	mrs	r6, BASEPRI
    1636:	f383 8811 	msr	BASEPRI, r3
    163a:	f3bf 8f6f 	isb	sy

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_cache_enable(NRF_CACHE_Type * p_reg)
{
    p_reg->ENABLE = CACHE_ENABLE_ENABLE_Enabled;
    163e:	2401      	movs	r4, #1
}

NRF_STATIC_INLINE void nrf_oscillators_lfxo_cap_set(NRF_OSCILLATORS_Type *     p_reg,
                                                    nrf_oscillators_lfxo_cap_t cap)
{
    p_reg->XOSC32KI.INTCAP = (uint32_t)cap;
    1640:	4d0b      	ldr	r5, [pc, #44]	; (1670 <nordicsemi_nrf53_init+0x44>)
    1642:	4b0c      	ldr	r3, [pc, #48]	; (1674 <nordicsemi_nrf53_init+0x48>)
	nrf_gpio_pin_mcu_select(PIN_XL1, NRF_GPIO_PIN_MCUSEL_PERIPHERAL);
    1644:	2000      	movs	r0, #0
    1646:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
    164a:	f8c5 46d0 	str.w	r4, [r5, #1744]	; 0x6d0
    164e:	f7ff ffd5 	bl	15fc <nrf_gpio_pin_mcu_select.constprop.0>
	nrf_gpio_pin_mcu_select(PIN_XL2, NRF_GPIO_PIN_MCUSEL_PERIPHERAL);
    1652:	4620      	mov	r0, r4
    1654:	f7ff ffd2 	bl	15fc <nrf_gpio_pin_mcu_select.constprop.0>
NRF_STATIC_INLINE void nrf_regulators_dcdcen_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
#if defined(REGULATORS_DCDCEN_DCDCEN_Msk)
    p_reg->DCDCEN = (enable ? REGULATORS_DCDCEN_DCDCEN_Msk : 0);
#else
    p_reg->VREGMAIN.DCDCEN = (enable ? REGULATORS_VREGMAIN_DCDCEN_DCDCEN_Msk : 0);
    1658:	f8c5 4704 	str.w	r4, [r5, #1796]	; 0x704
#endif

#if NRF_REGULATORS_HAS_DCDCEN_RADIO
NRF_STATIC_INLINE void nrf_regulators_dcdcen_radio_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
    p_reg->VREGRADIO.DCDCEN = (enable) ? REGULATORS_VREGRADIO_DCDCEN_DCDCEN_Enabled :
    165c:	f8c5 4904 	str.w	r4, [r5, #2308]	; 0x904
    p_reg->VREGH.DCDCEN = (enable) ? REGULATORS_VREGH_DCDCEN_DCDCEN_Enabled :
    1660:	f8c5 4b00 	str.w	r4, [r5, #2816]	; 0xb00
	__asm__ volatile(
    1664:	f386 8811 	msr	BASEPRI, r6
    1668:	f3bf 8f6f 	isb	sy
}
    166c:	2000      	movs	r0, #0
    166e:	bd70      	pop	{r4, r5, r6, pc}
    1670:	50004000 	.word	0x50004000
    1674:	50001000 	.word	0x50001000

00001678 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    1678:	b148      	cbz	r0, 168e <arch_busy_wait+0x16>

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    167a:	4b05      	ldr	r3, [pc, #20]	; (1690 <arch_busy_wait+0x18>)
    167c:	681a      	ldr	r2, [r3, #0]
    167e:	4b05      	ldr	r3, [pc, #20]	; (1694 <arch_busy_wait+0x1c>)
    1680:	fbb2 f2f3 	udiv	r2, r2, r3
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    1684:	4b04      	ldr	r3, [pc, #16]	; (1698 <arch_busy_wait+0x20>)
    delay_cycles(cycles);
    1686:	4350      	muls	r0, r2
    1688:	f043 0301 	orr.w	r3, r3, #1
    168c:	4718      	bx	r3
}
    168e:	4770      	bx	lr
    1690:	200003b8 	.word	0x200003b8
    1694:	000f4240 	.word	0x000f4240
    1698:	00015bc0 	.word	0x00015bc0

0000169c <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    169c:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    169e:	2200      	movs	r2, #0
{
    16a0:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
    16a2:	490f      	ldr	r1, [pc, #60]	; (16e0 <enable_logger+0x44>)
    16a4:	480f      	ldr	r0, [pc, #60]	; (16e4 <enable_logger+0x48>)
    16a6:	f013 fe3c 	bl	15322 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    16aa:	2200      	movs	r2, #0
    16ac:	2300      	movs	r3, #0
    16ae:	2400      	movs	r4, #0
    16b0:	e9cd 2306 	strd	r2, r3, [sp, #24]
    16b4:	230e      	movs	r3, #14
    16b6:	4d0c      	ldr	r5, [pc, #48]	; (16e8 <enable_logger+0x4c>)
    16b8:	e9cd 3403 	strd	r3, r4, [sp, #12]
    16bc:	f44f 7240 	mov.w	r2, #768	; 0x300
    16c0:	4628      	mov	r0, r5
    16c2:	e9cd 4401 	strd	r4, r4, [sp, #4]
    16c6:	4b09      	ldr	r3, [pc, #36]	; (16ec <enable_logger+0x50>)
    16c8:	4909      	ldr	r1, [pc, #36]	; (16f0 <enable_logger+0x54>)
    16ca:	9400      	str	r4, [sp, #0]
    16cc:	f00e f8ec 	bl	f8a8 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    16d0:	4908      	ldr	r1, [pc, #32]	; (16f4 <enable_logger+0x58>)
    16d2:	4628      	mov	r0, r5
    16d4:	f013 fd43 	bl	1515e <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
    16d8:	4620      	mov	r0, r4
    16da:	b009      	add	sp, #36	; 0x24
    16dc:	bd30      	pop	{r4, r5, pc}
    16de:	bf00      	nop
    16e0:	000016f9 	.word	0x000016f9
    16e4:	20000810 	.word	0x20000810
    16e8:	20000848 	.word	0x20000848
    16ec:	00001ae1 	.word	0x00001ae1
    16f0:	20002e20 	.word	0x20002e20
    16f4:	000166a6 	.word	0x000166a6

000016f8 <log_process_thread_timer_expiry_fn>:
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    16f8:	4801      	ldr	r0, [pc, #4]	; (1700 <log_process_thread_timer_expiry_fn+0x8>)
    16fa:	f00e b83d 	b.w	f778 <z_impl_k_sem_give>
    16fe:	bf00      	nop
    1700:	20000688 	.word	0x20000688

00001704 <log_core_init>:
{
    1704:	b508      	push	{r3, lr}
		log_msg_pool_init();
    1706:	f000 fa49 	bl	1b9c <log_msg_pool_init>
		log_list_init(&list);
    170a:	4809      	ldr	r0, [pc, #36]	; (1730 <log_core_init+0x2c>)
    170c:	f00f fa8f 	bl	10c2e <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
    1710:	2304      	movs	r3, #4
    1712:	2228      	movs	r2, #40	; 0x28
    1714:	4907      	ldr	r1, [pc, #28]	; (1734 <log_core_init+0x30>)
    1716:	4808      	ldr	r0, [pc, #32]	; (1738 <log_core_init+0x34>)
    1718:	f013 fb1c 	bl	14d54 <k_mem_slab_init>
		timestamp_func = k_cycle_get_32_wrapper;
    171c:	4b07      	ldr	r3, [pc, #28]	; (173c <log_core_init+0x38>)
    171e:	4a08      	ldr	r2, [pc, #32]	; (1740 <log_core_init+0x3c>)
	log_output_timestamp_freq_set(freq);
    1720:	f44f 4000 	mov.w	r0, #32768	; 0x8000
		timestamp_func = k_cycle_get_32_wrapper;
    1724:	601a      	str	r2, [r3, #0]
}
    1726:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	log_output_timestamp_freq_set(freq);
    172a:	f000 bc7f 	b.w	202c <log_output_timestamp_freq_set>
    172e:	bf00      	nop
    1730:	2000118c 	.word	0x2000118c
    1734:	20005c28 	.word	0x20005c28
    1738:	20001194 	.word	0x20001194
    173c:	20000200 	.word	0x20000200
    1740:	00010c6d 	.word	0x00010c6d

00001744 <dropped_notify>:
{
    1744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    1746:	2500      	movs	r5, #0
    1748:	4b0c      	ldr	r3, [pc, #48]	; (177c <dropped_notify+0x38>)
    174a:	e8d3 7fef 	ldaex	r7, [r3]
    174e:	e8c3 5fe2 	stlex	r2, r5, [r3]
    1752:	2a00      	cmp	r2, #0
    1754:	d1f9      	bne.n	174a <dropped_notify+0x6>
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    1756:	4c0a      	ldr	r4, [pc, #40]	; (1780 <dropped_notify+0x3c>)
    1758:	4e0a      	ldr	r6, [pc, #40]	; (1784 <dropped_notify+0x40>)
    175a:	1b36      	subs	r6, r6, r4
    175c:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    175e:	42b5      	cmp	r5, r6
    1760:	db00      	blt.n	1764 <dropped_notify+0x20>
}
    1762:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    1764:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    1766:	795b      	ldrb	r3, [r3, #5]
    1768:	b12b      	cbz	r3, 1776 <dropped_notify+0x32>
	if (backend->api->dropped != NULL) {
    176a:	6823      	ldr	r3, [r4, #0]
    176c:	68db      	ldr	r3, [r3, #12]
    176e:	b113      	cbz	r3, 1776 <dropped_notify+0x32>
		backend->api->dropped(backend, cnt);
    1770:	4639      	mov	r1, r7
    1772:	4620      	mov	r0, r4
    1774:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    1776:	3501      	adds	r5, #1
    1778:	3410      	adds	r4, #16
    177a:	e7f0      	b.n	175e <dropped_notify+0x1a>
    177c:	20001184 	.word	0x20001184
    1780:	00015af0 	.word	0x00015af0
    1784:	00015b00 	.word	0x00015b00

00001788 <log_dropped>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    1788:	4b04      	ldr	r3, [pc, #16]	; (179c <log_dropped+0x14>)
    178a:	e8d3 2fef 	ldaex	r2, [r3]
    178e:	3201      	adds	r2, #1
    1790:	e8c3 2fe1 	stlex	r1, r2, [r3]
    1794:	2900      	cmp	r1, #0
    1796:	d1f8      	bne.n	178a <log_dropped+0x2>
}
    1798:	4770      	bx	lr
    179a:	bf00      	nop
    179c:	20001184 	.word	0x20001184

000017a0 <log_source_name_get>:
    17a0:	4a04      	ldr	r2, [pc, #16]	; (17b4 <log_source_name_get+0x14>)
    17a2:	4b05      	ldr	r3, [pc, #20]	; (17b8 <log_source_name_get+0x18>)
    17a4:	1a9b      	subs	r3, r3, r2
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    17a6:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    17aa:	bf34      	ite	cc
    17ac:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
    17b0:	2000      	movcs	r0, #0
}
    17b2:	4770      	bx	lr
    17b4:	00015a00 	.word	0x00015a00
    17b8:	00015af0 	.word	0x00015af0

000017bc <log_backend_enable>:
	id += backend - log_backend_get(0);
    17bc:	4b09      	ldr	r3, [pc, #36]	; (17e4 <log_backend_enable+0x28>)
	log_backend_id_set(backend, id);
    17be:	6842      	ldr	r2, [r0, #4]
	id += backend - log_backend_get(0);
    17c0:	1ac3      	subs	r3, r0, r3
    17c2:	111b      	asrs	r3, r3, #4
    17c4:	3301      	adds	r3, #1
{
    17c6:	b510      	push	{r4, lr}
	log_backend_id_set(backend, id);
    17c8:	7113      	strb	r3, [r2, #4]
	backend->cb->active = true;
    17ca:	2201      	movs	r2, #1
	log_backend_activate(backend, ctx);
    17cc:	6843      	ldr	r3, [r0, #4]
	if (!backend_attached) {
    17ce:	4c06      	ldr	r4, [pc, #24]	; (17e8 <log_backend_enable+0x2c>)
    17d0:	715a      	strb	r2, [r3, #5]
    17d2:	7822      	ldrb	r2, [r4, #0]
	backend->cb->ctx = ctx;
    17d4:	6019      	str	r1, [r3, #0]
    17d6:	b912      	cbnz	r2, 17de <log_backend_enable+0x22>
    17d8:	4804      	ldr	r0, [pc, #16]	; (17ec <log_backend_enable+0x30>)
    17da:	f00d ffcd 	bl	f778 <z_impl_k_sem_give>
	backend_attached = true;
    17de:	2301      	movs	r3, #1
    17e0:	7023      	strb	r3, [r4, #0]
}
    17e2:	bd10      	pop	{r4, pc}
    17e4:	00015af0 	.word	0x00015af0
    17e8:	20002d12 	.word	0x20002d12
    17ec:	20000688 	.word	0x20000688

000017f0 <log_init>:
{
    17f0:	b570      	push	{r4, r5, r6, lr}
    17f2:	4b0f      	ldr	r3, [pc, #60]	; (1830 <log_init+0x40>)
    17f4:	e8d3 5fef 	ldaex	r5, [r3]
    17f8:	1c6a      	adds	r2, r5, #1
    17fa:	e8c3 2fe1 	stlex	r1, r2, [r3]
    17fe:	2900      	cmp	r1, #0
    1800:	d1f8      	bne.n	17f4 <log_init+0x4>
	if (atomic_inc(&initialized) != 0) {
    1802:	b92d      	cbnz	r5, 1810 <log_init+0x20>
	return __log_backends_end - __log_backends_start;
    1804:	4c0b      	ldr	r4, [pc, #44]	; (1834 <log_init+0x44>)
    1806:	4e0c      	ldr	r6, [pc, #48]	; (1838 <log_init+0x48>)
    1808:	1b36      	subs	r6, r6, r4
    180a:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
    180c:	42b5      	cmp	r5, r6
    180e:	db00      	blt.n	1812 <log_init+0x22>
}
    1810:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
    1812:	7b23      	ldrb	r3, [r4, #12]
    1814:	b143      	cbz	r3, 1828 <log_init+0x38>
			if (backend->api->init != NULL) {
    1816:	6823      	ldr	r3, [r4, #0]
    1818:	695b      	ldr	r3, [r3, #20]
    181a:	b103      	cbz	r3, 181e <log_init+0x2e>
				backend->api->init();
    181c:	4798      	blx	r3
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
    181e:	2204      	movs	r2, #4
    1820:	2100      	movs	r1, #0
    1822:	4620      	mov	r0, r4
    1824:	f7ff ffca 	bl	17bc <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    1828:	3501      	adds	r5, #1
    182a:	3410      	adds	r4, #16
    182c:	e7ee      	b.n	180c <log_init+0x1c>
    182e:	bf00      	nop
    1830:	20001188 	.word	0x20001188
    1834:	00015af0 	.word	0x00015af0
    1838:	00015b00 	.word	0x00015b00

0000183c <log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
    183c:	4b14      	ldr	r3, [pc, #80]	; (1890 <log_strdup+0x54>)
{
    183e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	return (((const char *)addr >= (const char *)RO_START) &&
    1840:	4298      	cmp	r0, r3
{
    1842:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    1844:	d302      	bcc.n	184c <log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
    1846:	4b13      	ldr	r3, [pc, #76]	; (1894 <log_strdup+0x58>)
    1848:	4298      	cmp	r0, r3
    184a:	d31c      	bcc.n	1886 <log_strdup+0x4a>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
    184c:	2200      	movs	r2, #0
    184e:	2300      	movs	r3, #0
    1850:	4811      	ldr	r0, [pc, #68]	; (1898 <log_strdup+0x5c>)
    1852:	a901      	add	r1, sp, #4
    1854:	f00d faa0 	bl	ed98 <k_mem_slab_alloc>
	if (err != 0) {
    1858:	4605      	mov	r5, r0
    185a:	b9b8      	cbnz	r0, 188c <log_strdup+0x50>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    185c:	2201      	movs	r2, #1
    185e:	9b01      	ldr	r3, [sp, #4]
    1860:	e8d3 1fef 	ldaex	r1, [r3]
    1864:	e8c3 2fe0 	stlex	r0, r2, [r3]
    1868:	2800      	cmp	r0, #0
    186a:	d1f9      	bne.n	1860 <log_strdup+0x24>
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
    186c:	9801      	ldr	r0, [sp, #4]
    186e:	4621      	mov	r1, r4
    1870:	221f      	movs	r2, #31
    1872:	3004      	adds	r0, #4
    1874:	f010 fd03 	bl	1227e <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
    1878:	237e      	movs	r3, #126	; 0x7e
    187a:	9c01      	ldr	r4, [sp, #4]
    187c:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	dup->buf[sizeof(dup->buf) - 1] = '\0';
    1880:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
	return dup->buf;
    1884:	3404      	adds	r4, #4
}
    1886:	4620      	mov	r0, r4
    1888:	b003      	add	sp, #12
    188a:	bd30      	pop	{r4, r5, pc}
		return (char *)log_strdup_fail_msg;
    188c:	4c03      	ldr	r4, [pc, #12]	; (189c <log_strdup+0x60>)
    188e:	e7fa      	b.n	1886 <log_strdup+0x4a>
    1890:	00015674 	.word	0x00015674
    1894:	000191b8 	.word	0x000191b8
    1898:	20001194 	.word	0x20001194
    189c:	000166ae 	.word	0x000166ae

000018a0 <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
    18a0:	b148      	cbz	r0, 18b6 <log_is_strdup+0x16>
    18a2:	4b05      	ldr	r3, [pc, #20]	; (18b8 <log_is_strdup+0x18>)
    18a4:	4298      	cmp	r0, r3
    18a6:	d305      	bcc.n	18b4 <log_is_strdup+0x14>
    18a8:	33a0      	adds	r3, #160	; 0xa0
    18aa:	4298      	cmp	r0, r3
    18ac:	bf2c      	ite	cs
    18ae:	2000      	movcs	r0, #0
    18b0:	2001      	movcc	r0, #1
    18b2:	4770      	bx	lr
    18b4:	2000      	movs	r0, #0
}
    18b6:	4770      	bx	lr
    18b8:	20005c28 	.word	0x20005c28

000018bc <z_impl_log_process>:
{
    18bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!backend_attached && !bypass) {
    18c0:	4b4a      	ldr	r3, [pc, #296]	; (19ec <z_impl_log_process+0x130>)
{
    18c2:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
    18c4:	781b      	ldrb	r3, [r3, #0]
{
    18c6:	b085      	sub	sp, #20
	if (!backend_attached && !bypass) {
    18c8:	b903      	cbnz	r3, 18cc <z_impl_log_process+0x10>
    18ca:	b340      	cbz	r0, 191e <z_impl_log_process+0x62>
	__asm__ volatile(
    18cc:	f04f 0320 	mov.w	r3, #32
    18d0:	f3ef 8611 	mrs	r6, BASEPRI
    18d4:	f383 8811 	msr	BASEPRI, r3
    18d8:	f3bf 8f6f 	isb	sy
	msg = log_list_head_get(&list);
    18dc:	4844      	ldr	r0, [pc, #272]	; (19f0 <z_impl_log_process+0x134>)
    18de:	f00f f9b6 	bl	10c4e <log_list_head_get>
    18e2:	4605      	mov	r5, r0
	__asm__ volatile(
    18e4:	f386 8811 	msr	BASEPRI, r6
    18e8:	f3bf 8f6f 	isb	sy
	if (msg != NULL) {
    18ec:	b158      	cbz	r0, 1906 <z_impl_log_process+0x4a>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    18ee:	4b41      	ldr	r3, [pc, #260]	; (19f4 <z_impl_log_process+0x138>)
    18f0:	e8d3 2fef 	ldaex	r2, [r3]
    18f4:	3a01      	subs	r2, #1
    18f6:	e8c3 2fe1 	stlex	r1, r2, [r3]
    18fa:	2900      	cmp	r1, #0
    18fc:	d1f8      	bne.n	18f0 <z_impl_log_process+0x34>
	if (!bypass) {
    18fe:	b194      	cbz	r4, 1926 <z_impl_log_process+0x6a>
	log_msg_put(msg);
    1900:	4628      	mov	r0, r5
    1902:	f00f fab9 	bl	10e78 <log_msg_put>
	if (!bypass && dropped_cnt) {
    1906:	b924      	cbnz	r4, 1912 <z_impl_log_process+0x56>
    1908:	4b3b      	ldr	r3, [pc, #236]	; (19f8 <z_impl_log_process+0x13c>)
    190a:	681b      	ldr	r3, [r3, #0]
    190c:	b10b      	cbz	r3, 1912 <z_impl_log_process+0x56>
		dropped_notify();
    190e:	f7ff ff19 	bl	1744 <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
    1912:	4837      	ldr	r0, [pc, #220]	; (19f0 <z_impl_log_process+0x134>)
    1914:	f00f f999 	bl	10c4a <log_list_head_peek>
    1918:	1e04      	subs	r4, r0, #0
    191a:	bf18      	it	ne
    191c:	2401      	movne	r4, #1
}
    191e:	4620      	mov	r0, r4
    1920:	b005      	add	sp, #20
    1922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !panic_mode) {
    1926:	4b35      	ldr	r3, [pc, #212]	; (19fc <z_impl_log_process+0x140>)
		if (IS_ENABLED(CONFIG_LOG_DETECT_MISSED_STRDUP) &&
    1928:	781b      	ldrb	r3, [r3, #0]
    192a:	b9cb      	cbnz	r3, 1960 <z_impl_log_process+0xa4>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    192c:	7a2b      	ldrb	r3, [r5, #8]
	if (!log_msg_is_std(msg)) {
    192e:	07db      	lsls	r3, r3, #31
    1930:	d416      	bmi.n	1960 <z_impl_log_process+0xa4>
	msg_str = log_msg_str_get(msg);
    1932:	f00f fab0 	bl	10e96 <log_msg_str_get>
    1936:	4680      	mov	r8, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
    1938:	4628      	mov	r0, r5
    193a:	f00f fa7b 	bl	10e34 <log_msg_nargs_get>
    193e:	4601      	mov	r1, r0
    1940:	4640      	mov	r0, r8
    1942:	f00f f997 	bl	10c74 <z_log_get_s_mask>
    1946:	4606      	mov	r6, r0
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    1948:	4f2d      	ldr	r7, [pc, #180]	; (1a00 <z_impl_log_process+0x144>)
    194a:	4b2e      	ldr	r3, [pc, #184]	; (1a04 <z_impl_log_process+0x148>)
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
    194c:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 1a20 <z_impl_log_process+0x164>
    1950:	1bdb      	subs	r3, r3, r7
    1952:	08db      	lsrs	r3, r3, #3
    1954:	9303      	str	r3, [sp, #12]
    1956:	4b2c      	ldr	r3, [pc, #176]	; (1a08 <z_impl_log_process+0x14c>)
    1958:	1bdb      	subs	r3, r3, r7
    195a:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
	while (mask) {
    195e:	b936      	cbnz	r6, 196e <z_impl_log_process+0xb2>
    1960:	4e2a      	ldr	r6, [pc, #168]	; (1a0c <z_impl_log_process+0x150>)
    1962:	4f2b      	ldr	r7, [pc, #172]	; (1a10 <z_impl_log_process+0x154>)
    1964:	f04f 0800 	mov.w	r8, #0
    1968:	1bbf      	subs	r7, r7, r6
    196a:	113f      	asrs	r7, r7, #4
    196c:	e03a      	b.n	19e4 <z_impl_log_process+0x128>
		idx = 31 - __builtin_clz(mask);
    196e:	fab6 f186 	clz	r1, r6
    1972:	f1c1 091f 	rsb	r9, r1, #31
		str = (const char *)log_msg_arg_get(msg, idx);
    1976:	4649      	mov	r1, r9
    1978:	4628      	mov	r0, r5
    197a:	f00f fa5e 	bl	10e3a <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
    197e:	4b25      	ldr	r3, [pc, #148]	; (1a14 <z_impl_log_process+0x158>)
		str = (const char *)log_msg_arg_get(msg, idx);
    1980:	4601      	mov	r1, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    1982:	4298      	cmp	r0, r3
    1984:	d302      	bcc.n	198c <z_impl_log_process+0xd0>
		if (!is_rodata(str) && !log_is_strdup(str) &&
    1986:	4b24      	ldr	r3, [pc, #144]	; (1a18 <z_impl_log_process+0x15c>)
    1988:	4298      	cmp	r0, r3
    198a:	d31a      	bcc.n	19c2 <z_impl_log_process+0x106>
    198c:	4608      	mov	r0, r1
    198e:	f7ff ff87 	bl	18a0 <log_is_strdup>
    1992:	4602      	mov	r2, r0
    1994:	b9a8      	cbnz	r0, 19c2 <z_impl_log_process+0x106>
    1996:	4b21      	ldr	r3, [pc, #132]	; (1a1c <z_impl_log_process+0x160>)
    1998:	4299      	cmp	r1, r3
    199a:	d012      	beq.n	19c2 <z_impl_log_process+0x106>
	return msg->hdr.ids.source_id;
    199c:	896b      	ldrh	r3, [r5, #10]
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    199e:	9903      	ldr	r1, [sp, #12]
    19a0:	f3c3 1389 	ubfx	r3, r3, #6, #10
    19a4:	428b      	cmp	r3, r1
	return __log_const_start[source_id].name;
    19a6:	bf38      	it	cc
    19a8:	f857 2033 	ldrcc.w	r2, [r7, r3, lsl #3]
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
    19ac:	ea4f 138a 	mov.w	r3, sl, lsl #6
    19b0:	f043 0301 	orr.w	r3, r3, #1
    19b4:	f8ad 3000 	strh.w	r3, [sp]
    19b8:	4649      	mov	r1, r9
    19ba:	4643      	mov	r3, r8
    19bc:	4658      	mov	r0, fp
    19be:	f00f f9b3 	bl	10d28 <log_3>
		mask &= ~BIT(idx);
    19c2:	2101      	movs	r1, #1
    19c4:	fa01 f109 	lsl.w	r1, r1, r9
    19c8:	ea26 0601 	bic.w	r6, r6, r1
    19cc:	e7c7      	b.n	195e <z_impl_log_process+0xa2>
	return backend->cb->active;
    19ce:	6873      	ldr	r3, [r6, #4]
			if (log_backend_is_active(backend) &&
    19d0:	795b      	ldrb	r3, [r3, #5]
    19d2:	b123      	cbz	r3, 19de <z_impl_log_process+0x122>
	backend->api->put(backend, msg);
    19d4:	6833      	ldr	r3, [r6, #0]
    19d6:	4629      	mov	r1, r5
    19d8:	4630      	mov	r0, r6
    19da:	681b      	ldr	r3, [r3, #0]
    19dc:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
    19de:	f108 0801 	add.w	r8, r8, #1
    19e2:	3610      	adds	r6, #16
    19e4:	45b8      	cmp	r8, r7
    19e6:	dbf2      	blt.n	19ce <z_impl_log_process+0x112>
    19e8:	e78a      	b.n	1900 <z_impl_log_process+0x44>
    19ea:	bf00      	nop
    19ec:	20002d12 	.word	0x20002d12
    19f0:	2000118c 	.word	0x2000118c
    19f4:	20001180 	.word	0x20001180
    19f8:	20001184 	.word	0x20001184
    19fc:	20002d13 	.word	0x20002d13
    1a00:	00015a00 	.word	0x00015a00
    1a04:	00015af0 	.word	0x00015af0
    1a08:	00015a98 	.word	0x00015a98
    1a0c:	00015af0 	.word	0x00015af0
    1a10:	00015b00 	.word	0x00015b00
    1a14:	00015674 	.word	0x00015674
    1a18:	000191b8 	.word	0x000191b8
    1a1c:	000166ae 	.word	0x000166ae
    1a20:	000166c8 	.word	0x000166c8

00001a24 <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
    1a24:	4b27      	ldr	r3, [pc, #156]	; (1ac4 <msg_finalize+0xa0>)
{
    1a26:	b573      	push	{r0, r1, r4, r5, r6, lr}
	msg->hdr.timestamp = timestamp_func();
    1a28:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
    1a2a:	8141      	strh	r1, [r0, #10]
{
    1a2c:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    1a2e:	4798      	blx	r3
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    1a30:	4d25      	ldr	r5, [pc, #148]	; (1ac8 <msg_finalize+0xa4>)
    1a32:	60e0      	str	r0, [r4, #12]
    1a34:	e8d5 3fef 	ldaex	r3, [r5]
    1a38:	3301      	adds	r3, #1
    1a3a:	e8c5 3fe2 	stlex	r2, r3, [r5]
    1a3e:	2a00      	cmp	r2, #0
    1a40:	d1f8      	bne.n	1a34 <msg_finalize+0x10>
	__asm__ volatile(
    1a42:	f04f 0320 	mov.w	r3, #32
    1a46:	f3ef 8611 	mrs	r6, BASEPRI
    1a4a:	f383 8811 	msr	BASEPRI, r3
    1a4e:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    1a52:	481e      	ldr	r0, [pc, #120]	; (1acc <msg_finalize+0xa8>)
    1a54:	4621      	mov	r1, r4
    1a56:	f00f f8ee 	bl	10c36 <log_list_add_tail>
	__asm__ volatile(
    1a5a:	f386 8811 	msr	BASEPRI, r6
    1a5e:	f3bf 8f6f 	isb	sy
	if (panic_mode) {
    1a62:	4b1b      	ldr	r3, [pc, #108]	; (1ad0 <msg_finalize+0xac>)
    1a64:	781b      	ldrb	r3, [r3, #0]
    1a66:	b183      	cbz	r3, 1a8a <msg_finalize+0x66>
	__asm__ volatile(
    1a68:	f04f 0320 	mov.w	r3, #32
    1a6c:	f3ef 8411 	mrs	r4, BASEPRI
    1a70:	f383 8811 	msr	BASEPRI, r3
    1a74:	f3bf 8f6f 	isb	sy
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
    1a78:	2000      	movs	r0, #0
    1a7a:	f7ff ff1f 	bl	18bc <z_impl_log_process>
	__asm__ volatile(
    1a7e:	f384 8811 	msr	BASEPRI, r4
    1a82:	f3bf 8f6f 	isb	sy
}
    1a86:	b002      	add	sp, #8
    1a88:	bd70      	pop	{r4, r5, r6, pc}
	} else if (proc_tid != NULL && buffered_cnt == 1) {
    1a8a:	4a12      	ldr	r2, [pc, #72]	; (1ad4 <msg_finalize+0xb0>)
    1a8c:	682b      	ldr	r3, [r5, #0]
    1a8e:	6812      	ldr	r2, [r2, #0]
    1a90:	2a00      	cmp	r2, #0
    1a92:	d0f8      	beq.n	1a86 <msg_finalize+0x62>
    1a94:	2b01      	cmp	r3, #1
    1a96:	d10a      	bne.n	1aae <msg_finalize+0x8a>
	z_impl_k_timer_start(timer, duration, period);
    1a98:	2200      	movs	r2, #0
    1a9a:	2300      	movs	r3, #0
    1a9c:	480e      	ldr	r0, [pc, #56]	; (1ad8 <msg_finalize+0xb4>)
    1a9e:	e9cd 2300 	strd	r2, r3, [sp]
    1aa2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    1aa6:	2300      	movs	r3, #0
    1aa8:	f00e f9b0 	bl	fe0c <z_impl_k_timer_start>
    1aac:	e7eb      	b.n	1a86 <msg_finalize+0x62>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    1aae:	2b0a      	cmp	r3, #10
    1ab0:	d1e9      	bne.n	1a86 <msg_finalize+0x62>
	z_impl_k_timer_stop(timer);
    1ab2:	4809      	ldr	r0, [pc, #36]	; (1ad8 <msg_finalize+0xb4>)
    1ab4:	f013 fc41 	bl	1533a <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    1ab8:	4808      	ldr	r0, [pc, #32]	; (1adc <msg_finalize+0xb8>)
}
    1aba:	b002      	add	sp, #8
    1abc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1ac0:	f00d be5a 	b.w	f778 <z_impl_k_sem_give>
    1ac4:	20000200 	.word	0x20000200
    1ac8:	20001180 	.word	0x20001180
    1acc:	2000118c 	.word	0x2000118c
    1ad0:	20002d13 	.word	0x20002d13
    1ad4:	200011b0 	.word	0x200011b0
    1ad8:	20000810 	.word	0x20000810
    1adc:	20000688 	.word	0x20000688

00001ae0 <log_process_thread_func>:
{
    1ae0:	b510      	push	{r4, lr}
	log_init();
    1ae2:	f7ff fe85 	bl	17f0 <log_init>
	return z_impl_k_current_get();
    1ae6:	f00d fe41 	bl	f76c <z_impl_k_current_get>
	proc_tid = process_tid;
    1aea:	4b0c      	ldr	r3, [pc, #48]	; (1b1c <log_process_thread_func+0x3c>)
    1aec:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    1aee:	b130      	cbz	r0, 1afe <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    1af0:	4b0b      	ldr	r3, [pc, #44]	; (1b20 <log_process_thread_func+0x40>)
	    process_tid &&
    1af2:	681b      	ldr	r3, [r3, #0]
    1af4:	2b09      	cmp	r3, #9
    1af6:	dd02      	ble.n	1afe <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
    1af8:	480a      	ldr	r0, [pc, #40]	; (1b24 <log_process_thread_func+0x44>)
    1afa:	f00d fe3d 	bl	f778 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
    1afe:	4c09      	ldr	r4, [pc, #36]	; (1b24 <log_process_thread_func+0x44>)
    1b00:	2000      	movs	r0, #0
    1b02:	f7ff fedb 	bl	18bc <z_impl_log_process>
		if (log_process(false) == false) {
    1b06:	2800      	cmp	r0, #0
    1b08:	d1fa      	bne.n	1b00 <log_process_thread_func+0x20>
    1b0a:	f04f 32ff 	mov.w	r2, #4294967295
    1b0e:	f04f 33ff 	mov.w	r3, #4294967295
    1b12:	4620      	mov	r0, r4
    1b14:	f00d fe56 	bl	f7c4 <z_impl_k_sem_take>
    1b18:	e7f2      	b.n	1b00 <log_process_thread_func+0x20>
    1b1a:	bf00      	nop
    1b1c:	200011b0 	.word	0x200011b0
    1b20:	20001180 	.word	0x20001180
    1b24:	20000688 	.word	0x20000688

00001b28 <z_impl_log_panic>:
{
    1b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    1b2a:	4f0e      	ldr	r7, [pc, #56]	; (1b64 <z_impl_log_panic+0x3c>)
    1b2c:	783d      	ldrb	r5, [r7, #0]
    1b2e:	b975      	cbnz	r5, 1b4e <z_impl_log_panic+0x26>
	log_init();
    1b30:	f7ff fe5e 	bl	17f0 <log_init>
	return __log_backends_end - __log_backends_start;
    1b34:	4c0c      	ldr	r4, [pc, #48]	; (1b68 <z_impl_log_panic+0x40>)
    1b36:	4e0d      	ldr	r6, [pc, #52]	; (1b6c <z_impl_log_panic+0x44>)
    1b38:	1b36      	subs	r6, r6, r4
    1b3a:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    1b3c:	42b5      	cmp	r5, r6
    1b3e:	db07      	blt.n	1b50 <z_impl_log_panic+0x28>
    1b40:	2000      	movs	r0, #0
    1b42:	f7ff febb 	bl	18bc <z_impl_log_process>
		while (log_process(false) == true) {
    1b46:	2800      	cmp	r0, #0
    1b48:	d1fa      	bne.n	1b40 <z_impl_log_panic+0x18>
	panic_mode = true;
    1b4a:	2301      	movs	r3, #1
    1b4c:	703b      	strb	r3, [r7, #0]
}
    1b4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
    1b50:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    1b52:	795b      	ldrb	r3, [r3, #5]
    1b54:	b11b      	cbz	r3, 1b5e <z_impl_log_panic+0x36>
	backend->api->panic(backend);
    1b56:	6823      	ldr	r3, [r4, #0]
    1b58:	4620      	mov	r0, r4
    1b5a:	691b      	ldr	r3, [r3, #16]
    1b5c:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    1b5e:	3501      	adds	r5, #1
    1b60:	3410      	adds	r4, #16
    1b62:	e7eb      	b.n	1b3c <z_impl_log_panic+0x14>
    1b64:	20002d13 	.word	0x20002d13
    1b68:	00015af0 	.word	0x00015af0
    1b6c:	00015b00 	.word	0x00015b00

00001b70 <log_free>:
{
    1b70:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
    1b72:	3804      	subs	r0, #4
    1b74:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    1b76:	e8d0 3fef 	ldaex	r3, [r0]
    1b7a:	1e5a      	subs	r2, r3, #1
    1b7c:	e8c0 2fe1 	stlex	r1, r2, [r0]
    1b80:	2900      	cmp	r1, #0
    1b82:	d1f8      	bne.n	1b76 <log_free+0x6>
	if (atomic_dec(&dup->refcount) == 1) {
    1b84:	2b01      	cmp	r3, #1
    1b86:	d103      	bne.n	1b90 <log_free+0x20>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
    1b88:	4803      	ldr	r0, [pc, #12]	; (1b98 <log_free+0x28>)
    1b8a:	a901      	add	r1, sp, #4
    1b8c:	f00d f936 	bl	edfc <k_mem_slab_free>
}
    1b90:	b003      	add	sp, #12
    1b92:	f85d fb04 	ldr.w	pc, [sp], #4
    1b96:	bf00      	nop
    1b98:	20001194 	.word	0x20001194

00001b9c <log_msg_pool_init>:
static uint8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
    1b9c:	2320      	movs	r3, #32
    1b9e:	4902      	ldr	r1, [pc, #8]	; (1ba8 <log_msg_pool_init+0xc>)
    1ba0:	461a      	mov	r2, r3
    1ba2:	4802      	ldr	r0, [pc, #8]	; (1bac <log_msg_pool_init+0x10>)
    1ba4:	f013 b8d6 	b.w	14d54 <k_mem_slab_init>
    1ba8:	20005cc8 	.word	0x20005cc8
    1bac:	200011b4 	.word	0x200011b4

00001bb0 <log_msg_no_space_handle>:
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
	union log_msg_chunk *msg = NULL;
    1bb0:	2300      	movs	r3, #0
{
    1bb2:	b537      	push	{r0, r1, r2, r4, r5, lr}

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
    1bb4:	4d09      	ldr	r5, [pc, #36]	; (1bdc <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
    1bb6:	9301      	str	r3, [sp, #4]
    1bb8:	2001      	movs	r0, #1
    1bba:	f7ff fe7f 	bl	18bc <z_impl_log_process>
    1bbe:	4604      	mov	r4, r0
			log_dropped();
    1bc0:	f7ff fde2 	bl	1788 <log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
    1bc4:	2200      	movs	r2, #0
    1bc6:	2300      	movs	r3, #0
    1bc8:	4628      	mov	r0, r5
    1bca:	a901      	add	r1, sp, #4
    1bcc:	f00d f8e4 	bl	ed98 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
    1bd0:	b108      	cbz	r0, 1bd6 <log_msg_no_space_handle+0x26>
    1bd2:	2c00      	cmp	r4, #0
    1bd4:	d1f0      	bne.n	1bb8 <log_msg_no_space_handle+0x8>
	} else {
		log_dropped();
	}
	return msg;

}
    1bd6:	9801      	ldr	r0, [sp, #4]
    1bd8:	b003      	add	sp, #12
    1bda:	bd30      	pop	{r4, r5, pc}
    1bdc:	200011b4 	.word	0x200011b4

00001be0 <log_msg_chunk_alloc>:
	union log_msg_chunk *msg = NULL;
    1be0:	2300      	movs	r3, #0
{
    1be2:	b507      	push	{r0, r1, r2, lr}
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    1be4:	2200      	movs	r2, #0
	union log_msg_chunk *msg = NULL;
    1be6:	9301      	str	r3, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    1be8:	4806      	ldr	r0, [pc, #24]	; (1c04 <log_msg_chunk_alloc+0x24>)
    1bea:	2300      	movs	r3, #0
    1bec:	a901      	add	r1, sp, #4
    1bee:	f00d f8d3 	bl	ed98 <k_mem_slab_alloc>
	if (err != 0) {
    1bf2:	b110      	cbz	r0, 1bfa <log_msg_chunk_alloc+0x1a>
		msg = log_msg_no_space_handle();
    1bf4:	f7ff ffdc 	bl	1bb0 <log_msg_no_space_handle>
    1bf8:	9001      	str	r0, [sp, #4]
}
    1bfa:	9801      	ldr	r0, [sp, #4]
    1bfc:	b003      	add	sp, #12
    1bfe:	f85d fb04 	ldr.w	pc, [sp], #4
    1c02:	bf00      	nop
    1c04:	200011b4 	.word	0x200011b4

00001c08 <msg_free>:
{
    1c08:	b5f0      	push	{r4, r5, r6, r7, lr}
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    1c0a:	7a03      	ldrb	r3, [r0, #8]
	}
}

uint32_t log_msg_nargs_get(struct log_msg *msg)
{
	return msg->hdr.params.std.nargs;
    1c0c:	7a45      	ldrb	r5, [r0, #9]
{
    1c0e:	b085      	sub	sp, #20
    1c10:	9001      	str	r0, [sp, #4]
	if (log_msg_is_std(msg) && nargs) {
    1c12:	07d8      	lsls	r0, r3, #31
	return msg->hdr.params.std.nargs;
    1c14:	ea4f 1515 	mov.w	r5, r5, lsr #4
	if (log_msg_is_std(msg) && nargs) {
    1c18:	d41c      	bmi.n	1c54 <msg_free+0x4c>
    1c1a:	b1dd      	cbz	r5, 1c54 <msg_free+0x4c>
		uint32_t smask = 0;
    1c1c:	2400      	movs	r4, #0
		for (i = 0; i < nargs; i++) {
    1c1e:	4626      	mov	r6, r4
			void *buf = (void *)log_msg_arg_get(msg, i);
    1c20:	4631      	mov	r1, r6
    1c22:	9801      	ldr	r0, [sp, #4]
    1c24:	f00f f909 	bl	10e3a <log_msg_arg_get>
    1c28:	4607      	mov	r7, r0
			if (log_is_strdup(buf)) {
    1c2a:	f7ff fe39 	bl	18a0 <log_is_strdup>
    1c2e:	b170      	cbz	r0, 1c4e <msg_free+0x46>
				if (smask == 0) {
    1c30:	b934      	cbnz	r4, 1c40 <msg_free+0x38>
					smask = z_log_get_s_mask(
    1c32:	9b01      	ldr	r3, [sp, #4]
    1c34:	4629      	mov	r1, r5
    1c36:	6918      	ldr	r0, [r3, #16]
    1c38:	f00f f81c 	bl	10c74 <z_log_get_s_mask>
					if (smask == 0) {
    1c3c:	4604      	mov	r4, r0
    1c3e:	b148      	cbz	r0, 1c54 <msg_free+0x4c>
				if (smask & BIT(i)) {
    1c40:	fa24 f306 	lsr.w	r3, r4, r6
    1c44:	07d9      	lsls	r1, r3, #31
    1c46:	d502      	bpl.n	1c4e <msg_free+0x46>
					log_free(buf);
    1c48:	4638      	mov	r0, r7
    1c4a:	f7ff ff91 	bl	1b70 <log_free>
		for (i = 0; i < nargs; i++) {
    1c4e:	3601      	adds	r6, #1
    1c50:	42ae      	cmp	r6, r5
    1c52:	d3e5      	bcc.n	1c20 <msg_free+0x18>
	if (msg->hdr.params.generic.ext == 1) {
    1c54:	9b01      	ldr	r3, [sp, #4]
    1c56:	7a1a      	ldrb	r2, [r3, #8]
    1c58:	0792      	lsls	r2, r2, #30
    1c5a:	d504      	bpl.n	1c66 <msg_free+0x5e>
		cont_free(msg->payload.ext.next);
    1c5c:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    1c5e:	4c08      	ldr	r4, [pc, #32]	; (1c80 <msg_free+0x78>)
    1c60:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
    1c62:	9b03      	ldr	r3, [sp, #12]
    1c64:	b92b      	cbnz	r3, 1c72 <msg_free+0x6a>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
    1c66:	4806      	ldr	r0, [pc, #24]	; (1c80 <msg_free+0x78>)
    1c68:	a901      	add	r1, sp, #4
    1c6a:	f00d f8c7 	bl	edfc <k_mem_slab_free>
}
    1c6e:	b005      	add	sp, #20
    1c70:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next = cont->next;
    1c72:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    1c74:	4620      	mov	r0, r4
    1c76:	a903      	add	r1, sp, #12
    1c78:	f00d f8c0 	bl	edfc <k_mem_slab_free>
		cont = next;
    1c7c:	9503      	str	r5, [sp, #12]
    1c7e:	e7f0      	b.n	1c62 <msg_free+0x5a>
    1c80:	200011b4 	.word	0x200011b4

00001c84 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *log_output,
			   const char *fmt, ...)
{
    1c84:	b40e      	push	{r1, r2, r3}
    1c86:	b503      	push	{r0, r1, lr}
    1c88:	ab03      	add	r3, sp, #12
    1c8a:	f853 2b04 	ldr.w	r2, [r3], #4
    1c8e:	4601      	mov	r1, r0
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)log_output, fmt, args);
    1c90:	4804      	ldr	r0, [pc, #16]	; (1ca4 <print_formatted+0x20>)
	va_start(args, fmt);
    1c92:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)log_output, fmt, args);
    1c94:	f7ff f8ba 	bl	e0c <cbvprintf>
	va_end(args);

	return length;
}
    1c98:	b002      	add	sp, #8
    1c9a:	f85d eb04 	ldr.w	lr, [sp], #4
    1c9e:	b003      	add	sp, #12
    1ca0:	4770      	bx	lr
    1ca2:	bf00      	nop
    1ca4:	0001123f 	.word	0x0001123f

00001ca8 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *log_output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, uint16_t source_id)
{
    1ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
    1cac:	f011 0402 	ands.w	r4, r1, #2
{
    1cb0:	b085      	sub	sp, #20
    1cb2:	4690      	mov	r8, r2
    1cb4:	4606      	mov	r6, r0
    1cb6:	461a      	mov	r2, r3
    1cb8:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    1cbc:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    1cc0:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
    1cc4:	d007      	beq.n	1cd6 <prefix_print+0x2e>
	if (!format) {
    1cc6:	f011 0f44 	tst.w	r1, #68	; 0x44
    1cca:	d137      	bne.n	1d3c <prefix_print+0x94>
		length = print_formatted(log_output, "[%08lu] ", timestamp);
    1ccc:	4932      	ldr	r1, [pc, #200]	; (1d98 <prefix_print+0xf0>)
    1cce:	f7ff ffd9 	bl	1c84 <print_formatted>
			length = print_formatted(log_output,
    1cd2:	4601      	mov	r1, r0
		length += timestamp_print(log_output, flags, timestamp);
    1cd4:	460c      	mov	r4, r1
	if (color) {
    1cd6:	f1b9 0f00 	cmp.w	r9, #0
    1cda:	d00a      	beq.n	1cf2 <prefix_print+0x4a>
		const char *log_color = start && (colors[level] != NULL) ?
    1cdc:	4b2f      	ldr	r3, [pc, #188]	; (1d9c <prefix_print+0xf4>)
		print_formatted(log_output, "%s", log_color);
    1cde:	4630      	mov	r0, r6
		const char *log_color = start && (colors[level] != NULL) ?
    1ce0:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
		print_formatted(log_output, "%s", log_color);
    1ce4:	4b2e      	ldr	r3, [pc, #184]	; (1da0 <prefix_print+0xf8>)
    1ce6:	492f      	ldr	r1, [pc, #188]	; (1da4 <prefix_print+0xfc>)
    1ce8:	2a00      	cmp	r2, #0
    1cea:	bf08      	it	eq
    1cec:	461a      	moveq	r2, r3
    1cee:	f7ff ffc9 	bl	1c84 <print_formatted>
	if (level_on) {
    1cf2:	b13d      	cbz	r5, 1d04 <prefix_print+0x5c>
		total += print_formatted(log_output, "<%s> ", severity[level]);
    1cf4:	4b2c      	ldr	r3, [pc, #176]	; (1da8 <prefix_print+0x100>)
    1cf6:	4630      	mov	r0, r6
    1cf8:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
    1cfc:	492b      	ldr	r1, [pc, #172]	; (1dac <prefix_print+0x104>)
    1cfe:	f7ff ffc1 	bl	1c84 <print_formatted>
    1d02:	4605      	mov	r5, r0
	total += print_formatted(log_output,
    1d04:	f1b8 0f00 	cmp.w	r8, #0
    1d08:	d043      	beq.n	1d92 <prefix_print+0xea>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    1d0a:	2301      	movs	r3, #1
    1d0c:	fa03 f707 	lsl.w	r7, r3, r7
	total += print_formatted(log_output,
    1d10:	4b27      	ldr	r3, [pc, #156]	; (1db0 <prefix_print+0x108>)
    1d12:	f017 0f10 	tst.w	r7, #16
    1d16:	4f27      	ldr	r7, [pc, #156]	; (1db4 <prefix_print+0x10c>)
    1d18:	bf18      	it	ne
    1d1a:	461f      	movne	r7, r3
    1d1c:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
    1d20:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    1d24:	f7ff fd3c 	bl	17a0 <log_source_name_get>
    1d28:	4639      	mov	r1, r7
    1d2a:	4602      	mov	r2, r0
    1d2c:	4630      	mov	r0, r6
    1d2e:	f7ff ffa9 	bl	1c84 <print_formatted>
    1d32:	4428      	add	r0, r5

	length += ids_print(log_output, level_on, func_on,
			domain_id, source_id, level);

	return length;
}
    1d34:	4420      	add	r0, r4
    1d36:	b005      	add	sp, #20
    1d38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
    1d3c:	4b1e      	ldr	r3, [pc, #120]	; (1db8 <prefix_print+0x110>)
    1d3e:	6819      	ldr	r1, [r3, #0]
    1d40:	2900      	cmp	r1, #0
    1d42:	d0c7      	beq.n	1cd4 <prefix_print+0x2c>
		timestamp /= timestamp_div;
    1d44:	4b1d      	ldr	r3, [pc, #116]	; (1dbc <prefix_print+0x114>)
    1d46:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
    1d4a:	681b      	ldr	r3, [r3, #0]
		ms = (remainder * 1000U) / freq;
    1d4c:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
		timestamp /= timestamp_div;
    1d50:	fbb2 f3f3 	udiv	r3, r2, r3
		total_seconds = timestamp / freq;
    1d54:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
    1d58:	fbb4 f2fe 	udiv	r2, r4, lr
    1d5c:	fb0e 4e12 	mls	lr, lr, r2, r4
		remainder = timestamp % freq;
    1d60:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
    1d64:	fb0c f404 	mul.w	r4, ip, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    1d68:	fbb4 fbf1 	udiv	fp, r4, r1
		mins = seconds / 60U;
    1d6c:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    1d70:	fb01 441b 	mls	r4, r1, fp, r4
    1d74:	fb0c f404 	mul.w	r4, ip, r4
		mins = seconds / 60U;
    1d78:	fbbe f3fa 	udiv	r3, lr, sl
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    1d7c:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(log_output,
    1d80:	e9cd b101 	strd	fp, r1, [sp, #4]
    1d84:	fb0a e113 	mls	r1, sl, r3, lr
    1d88:	9100      	str	r1, [sp, #0]
    1d8a:	490d      	ldr	r1, [pc, #52]	; (1dc0 <prefix_print+0x118>)
    1d8c:	f7ff ff7a 	bl	1c84 <print_formatted>
    1d90:	e79f      	b.n	1cd2 <prefix_print+0x2a>
	total += print_formatted(log_output,
    1d92:	4f08      	ldr	r7, [pc, #32]	; (1db4 <prefix_print+0x10c>)
    1d94:	e7c2      	b.n	1d1c <prefix_print+0x74>
    1d96:	bf00      	nop
    1d98:	00016719 	.word	0x00016719
    1d9c:	00015c28 	.word	0x00015c28
    1da0:	0001670b 	.word	0x0001670b
    1da4:	00017cb5 	.word	0x00017cb5
    1da8:	00015c3c 	.word	0x00015c3c
    1dac:	0001673e 	.word	0x0001673e
    1db0:	00016715 	.word	0x00016715
    1db4:	00016710 	.word	0x00016710
    1db8:	200011d0 	.word	0x200011d0
    1dbc:	200011d4 	.word	0x200011d4
    1dc0:	00016722 	.word	0x00016722

00001dc4 <postfix_print>:

static void postfix_print(const struct log_output *log_output,
			  uint32_t flags, uint8_t level)
{
    1dc4:	b538      	push	{r3, r4, r5, lr}
    1dc6:	460c      	mov	r4, r1
	if (color) {
    1dc8:	07e1      	lsls	r1, r4, #31
{
    1dca:	4605      	mov	r5, r0
	if (color) {
    1dcc:	d503      	bpl.n	1dd6 <postfix_print+0x12>
		print_formatted(log_output, "%s", log_color);
    1dce:	4a08      	ldr	r2, [pc, #32]	; (1df0 <postfix_print+0x2c>)
    1dd0:	4908      	ldr	r1, [pc, #32]	; (1df4 <postfix_print+0x30>)
    1dd2:	f7ff ff57 	bl	1c84 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    1dd6:	06e2      	lsls	r2, r4, #27
    1dd8:	d408      	bmi.n	1dec <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    1dda:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
    1ddc:	4628      	mov	r0, r5
	color_postfix(log_output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(log_output, flags);
}
    1dde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\n");
    1de2:	bf4c      	ite	mi
    1de4:	4904      	ldrmi	r1, [pc, #16]	; (1df8 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
    1de6:	4905      	ldrpl	r1, [pc, #20]	; (1dfc <postfix_print+0x38>)
    1de8:	f7ff bf4c 	b.w	1c84 <print_formatted>
}
    1dec:	bd38      	pop	{r3, r4, r5, pc}
    1dee:	bf00      	nop
    1df0:	0001670b 	.word	0x0001670b
    1df4:	00017cb5 	.word	0x00017cb5
    1df8:	00016745 	.word	0x00016745
    1dfc:	00016744 	.word	0x00016744

00001e00 <hexdump_line_print>:
{
    1e00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1e04:	461d      	mov	r5, r3
    1e06:	9b08      	ldr	r3, [sp, #32]
    1e08:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    1e0a:	06da      	lsls	r2, r3, #27
{
    1e0c:	4604      	mov	r4, r0
    1e0e:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    1e10:	d405      	bmi.n	1e1e <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    1e12:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
    1e14:	bf4c      	ite	mi
    1e16:	492a      	ldrmi	r1, [pc, #168]	; (1ec0 <hexdump_line_print+0xc0>)
		print_formatted(ctx, "\r\n");
    1e18:	492a      	ldrpl	r1, [pc, #168]	; (1ec4 <hexdump_line_print+0xc4>)
    1e1a:	f7ff ff33 	bl	1c84 <print_formatted>
{
    1e1e:	f04f 0800 	mov.w	r8, #0
		print_formatted(log_output, " ");
    1e22:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 1ecc <hexdump_line_print+0xcc>
	for (int i = 0; i < prefix_offset; i++) {
    1e26:	45a8      	cmp	r8, r5
    1e28:	db2a      	blt.n	1e80 <hexdump_line_print+0x80>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1e2a:	2500      	movs	r5, #0
			print_formatted(log_output, "   ");
    1e2c:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 1ed0 <hexdump_line_print+0xd0>
			print_formatted(log_output, "%02x ", data[i]);
    1e30:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 1ed4 <hexdump_line_print+0xd4>
			print_formatted(log_output, " ");
    1e34:	f8df a094 	ldr.w	sl, [pc, #148]	; 1ecc <hexdump_line_print+0xcc>
		if (i < length) {
    1e38:	42bd      	cmp	r5, r7
    1e3a:	d22f      	bcs.n	1e9c <hexdump_line_print+0x9c>
			print_formatted(log_output, "%02x ", data[i]);
    1e3c:	4649      	mov	r1, r9
    1e3e:	4620      	mov	r0, r4
    1e40:	5d72      	ldrb	r2, [r6, r5]
    1e42:	f7ff ff1f 	bl	1c84 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1e46:	3501      	adds	r5, #1
    1e48:	2d10      	cmp	r5, #16
    1e4a:	d120      	bne.n	1e8e <hexdump_line_print+0x8e>
	print_formatted(log_output, "|");
    1e4c:	4620      	mov	r0, r4
    1e4e:	491e      	ldr	r1, [pc, #120]	; (1ec8 <hexdump_line_print+0xc8>)
    1e50:	f7ff ff18 	bl	1c84 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1e54:	2500      	movs	r5, #0
			print_formatted(log_output, " ");
    1e56:	f8df 8074 	ldr.w	r8, [pc, #116]	; 1ecc <hexdump_line_print+0xcc>
			print_formatted(log_output, "%c",
    1e5a:	f8df 907c 	ldr.w	r9, [pc, #124]	; 1ed8 <hexdump_line_print+0xd8>
		if (i < length) {
    1e5e:	42af      	cmp	r7, r5
    1e60:	d928      	bls.n	1eb4 <hexdump_line_print+0xb4>
			char c = (char)data[i];
    1e62:	5d72      	ldrb	r2, [r6, r5]
			print_formatted(log_output, "%c",
    1e64:	4649      	mov	r1, r9
	return (int)((((unsigned)c) >= ' ') &&
    1e66:	f1a2 0320 	sub.w	r3, r2, #32
    1e6a:	2b5f      	cmp	r3, #95	; 0x5f
    1e6c:	bf28      	it	cs
    1e6e:	222e      	movcs	r2, #46	; 0x2e
    1e70:	4620      	mov	r0, r4
    1e72:	f7ff ff07 	bl	1c84 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1e76:	3501      	adds	r5, #1
    1e78:	2d10      	cmp	r5, #16
    1e7a:	d114      	bne.n	1ea6 <hexdump_line_print+0xa6>
}
    1e7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, " ");
    1e80:	4649      	mov	r1, r9
    1e82:	4620      	mov	r0, r4
    1e84:	f7ff fefe 	bl	1c84 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    1e88:	f108 0801 	add.w	r8, r8, #1
    1e8c:	e7cb      	b.n	1e26 <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
    1e8e:	076a      	lsls	r2, r5, #29
    1e90:	d1d2      	bne.n	1e38 <hexdump_line_print+0x38>
			print_formatted(log_output, " ");
    1e92:	4651      	mov	r1, sl
    1e94:	4620      	mov	r0, r4
    1e96:	f7ff fef5 	bl	1c84 <print_formatted>
    1e9a:	e7cd      	b.n	1e38 <hexdump_line_print+0x38>
			print_formatted(log_output, "   ");
    1e9c:	4641      	mov	r1, r8
    1e9e:	4620      	mov	r0, r4
    1ea0:	f7ff fef0 	bl	1c84 <print_formatted>
    1ea4:	e7cf      	b.n	1e46 <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
    1ea6:	076b      	lsls	r3, r5, #29
    1ea8:	d1d9      	bne.n	1e5e <hexdump_line_print+0x5e>
			print_formatted(log_output, " ");
    1eaa:	4641      	mov	r1, r8
    1eac:	4620      	mov	r0, r4
    1eae:	f7ff fee9 	bl	1c84 <print_formatted>
    1eb2:	e7d4      	b.n	1e5e <hexdump_line_print+0x5e>
			print_formatted(log_output, " ");
    1eb4:	4641      	mov	r1, r8
    1eb6:	4620      	mov	r0, r4
    1eb8:	f7ff fee4 	bl	1c84 <print_formatted>
    1ebc:	e7db      	b.n	1e76 <hexdump_line_print+0x76>
    1ebe:	bf00      	nop
    1ec0:	00016745 	.word	0x00016745
    1ec4:	00016744 	.word	0x00016744
    1ec8:	0001674d 	.word	0x0001674d
    1ecc:	00019089 	.word	0x00019089
    1ed0:	00019087 	.word	0x00019087
    1ed4:	00016747 	.word	0x00016747
    1ed8:	00016566 	.word	0x00016566

00001edc <log_output_msg_process>:

void log_output_msg_process(const struct log_output *log_output,
			    struct log_msg *msg,
			    uint32_t flags)
{
    1edc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.ids.level;
    1ee0:	7a8b      	ldrb	r3, [r1, #10]
    1ee2:	4617      	mov	r7, r2
		log_output_msg_syst_process(log_output, msg, flags);
		return;
	}

	prefix_offset = raw_string ?
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    1ee4:	f013 0807 	ands.w	r8, r3, #7
{
    1ee8:	4605      	mov	r5, r0
    1eea:	460e      	mov	r6, r1
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    1eec:	7a0a      	ldrb	r2, [r1, #8]
    1eee:	b08a      	sub	sp, #40	; 0x28
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    1ef0:	d021      	beq.n	1f36 <log_output_msg_process+0x5a>
    1ef2:	43d2      	mvns	r2, r2
	return msg->hdr.ids.source_id;
    1ef4:	8949      	ldrh	r1, [r1, #10]
    1ef6:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    1efa:	f3c1 1189 	ubfx	r1, r1, #6, #10
    1efe:	e9cd 8300 	strd	r8, r3, [sp]
    1f02:	9102      	str	r1, [sp, #8]
    1f04:	68f3      	ldr	r3, [r6, #12]
    1f06:	4639      	mov	r1, r7
    1f08:	f002 0201 	and.w	r2, r2, #1
    1f0c:	f7ff fecc 	bl	1ca8 <prefix_print>
    1f10:	4681      	mov	r9, r0
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    1f12:	7a34      	ldrb	r4, [r6, #8]
    1f14:	43e4      	mvns	r4, r4
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
    1f16:	f014 0401 	ands.w	r4, r4, #1
    1f1a:	d00e      	beq.n	1f3a <log_output_msg_process+0x5e>
		std_print(msg, log_output);
    1f1c:	4629      	mov	r1, r5
    1f1e:	4630      	mov	r0, r6
    1f20:	f00f f823 	bl	10f6a <std_print>
		raw_string_print(msg, log_output);
	} else {
		hexdump_print(msg, log_output, prefix_offset, flags);
	}

	if (!raw_string) {
    1f24:	f1b8 0f00 	cmp.w	r8, #0
    1f28:	d02b      	beq.n	1f82 <log_output_msg_process+0xa6>
		postfix_print(log_output, flags, level);
    1f2a:	4642      	mov	r2, r8
    1f2c:	4639      	mov	r1, r7
    1f2e:	4628      	mov	r0, r5
    1f30:	f7ff ff48 	bl	1dc4 <postfix_print>
    1f34:	e025      	b.n	1f82 <log_output_msg_process+0xa6>
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    1f36:	46c1      	mov	r9, r8
    1f38:	e7eb      	b.n	1f12 <log_output_msg_process+0x36>
	} else if (raw_string) {
    1f3a:	f1b8 0f00 	cmp.w	r8, #0
    1f3e:	d126      	bne.n	1f8e <log_output_msg_process+0xb2>
	size_t offset = 0;
    1f40:	4627      	mov	r7, r4
		length = log_output->size;
    1f42:	68eb      	ldr	r3, [r5, #12]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
    1f44:	aa06      	add	r2, sp, #24
		length = log_output->size;
    1f46:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
    1f48:	4630      	mov	r0, r6
    1f4a:	463b      	mov	r3, r7
    1f4c:	68a9      	ldr	r1, [r5, #8]
    1f4e:	f00e fff8 	bl	10f42 <log_msg_hexdump_data_get>
		log_output->control_block->offset = length;
    1f52:	9a06      	ldr	r2, [sp, #24]
    1f54:	686b      	ldr	r3, [r5, #4]
    1f56:	601a      	str	r2, [r3, #0]
		if (length != 0) {
    1f58:	b13a      	cbz	r2, 1f6a <log_output_msg_process+0x8e>
			eol = (log_output->buf[length - 1] == '\n');
    1f5a:	68ab      	ldr	r3, [r5, #8]
    1f5c:	4413      	add	r3, r2
    1f5e:	f813 4c01 	ldrb.w	r4, [r3, #-1]
    1f62:	f1a4 030a 	sub.w	r3, r4, #10
    1f66:	425c      	negs	r4, r3
    1f68:	415c      	adcs	r4, r3
		log_output_flush(log_output);
    1f6a:	4628      	mov	r0, r5
    1f6c:	f00f f95a 	bl	11224 <log_output_flush>
		offset += length;
    1f70:	9b06      	ldr	r3, [sp, #24]
    1f72:	441f      	add	r7, r3
	} while (length > 0);
    1f74:	2b00      	cmp	r3, #0
    1f76:	d1e4      	bne.n	1f42 <log_output_msg_process+0x66>
	if (eol) {
    1f78:	b11c      	cbz	r4, 1f82 <log_output_msg_process+0xa6>
		print_formatted(log_output, "\r");
    1f7a:	4628      	mov	r0, r5
    1f7c:	4913      	ldr	r1, [pc, #76]	; (1fcc <log_output_msg_process+0xf0>)
    1f7e:	f7ff fe81 	bl	1c84 <print_formatted>
	}

	log_output_flush(log_output);
    1f82:	4628      	mov	r0, r5
    1f84:	f00f f94e 	bl	11224 <log_output_flush>
}
    1f88:	b00a      	add	sp, #40	; 0x28
    1f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	print_formatted(log_output, "%s", log_msg_str_get(msg));
    1f8e:	4630      	mov	r0, r6
    1f90:	f00e ff81 	bl	10e96 <log_msg_str_get>
    1f94:	490e      	ldr	r1, [pc, #56]	; (1fd0 <log_output_msg_process+0xf4>)
    1f96:	4602      	mov	r2, r0
    1f98:	4628      	mov	r0, r5
    1f9a:	f7ff fe73 	bl	1c84 <print_formatted>
		length = sizeof(buf);
    1f9e:	f04f 0a10 	mov.w	sl, #16
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    1fa2:	aa05      	add	r2, sp, #20
    1fa4:	4623      	mov	r3, r4
    1fa6:	4630      	mov	r0, r6
    1fa8:	a906      	add	r1, sp, #24
		length = sizeof(buf);
    1faa:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    1fae:	f00e ffc8 	bl	10f42 <log_msg_hexdump_data_get>
		if (length) {
    1fb2:	9a05      	ldr	r2, [sp, #20]
    1fb4:	2a00      	cmp	r2, #0
    1fb6:	d0b8      	beq.n	1f2a <log_output_msg_process+0x4e>
			hexdump_line_print(log_output, buf, length,
    1fb8:	464b      	mov	r3, r9
    1fba:	4628      	mov	r0, r5
    1fbc:	9700      	str	r7, [sp, #0]
    1fbe:	a906      	add	r1, sp, #24
    1fc0:	f7ff ff1e 	bl	1e00 <hexdump_line_print>
			offset += length;
    1fc4:	9b05      	ldr	r3, [sp, #20]
    1fc6:	441c      	add	r4, r3
		length = sizeof(buf);
    1fc8:	e7eb      	b.n	1fa2 <log_output_msg_process+0xc6>
    1fca:	bf00      	nop
    1fcc:	0001674f 	.word	0x0001674f
    1fd0:	00017cb5 	.word	0x00017cb5

00001fd4 <log_output_dropped_process>:
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = log_output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    1fd4:	f242 730f 	movw	r3, #9999	; 0x270f
{
    1fd8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    1fda:	428b      	cmp	r3, r1
    1fdc:	bf28      	it	cs
    1fde:	460b      	movcs	r3, r1
	log_output_func_t outf = log_output->func;
    1fe0:	6805      	ldr	r5, [r0, #0]
{
    1fe2:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    1fe4:	2105      	movs	r1, #5
    1fe6:	4668      	mov	r0, sp
    1fe8:	4a0d      	ldr	r2, [pc, #52]	; (2020 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x20>)
    1fea:	f00e fa49 	bl	10480 <snprintk>
    1fee:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    1ff0:	6863      	ldr	r3, [r4, #4]
    1ff2:	4628      	mov	r0, r5
    1ff4:	220b      	movs	r2, #11
    1ff6:	685b      	ldr	r3, [r3, #4]
    1ff8:	490a      	ldr	r1, [pc, #40]	; (2024 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x24>)
    1ffa:	f00e ffa9 	bl	10f50 <buffer_write>
		     log_output->control_block->ctx);
	buffer_write(outf, buf, len, log_output->control_block->ctx);
    1ffe:	6863      	ldr	r3, [r4, #4]
    2000:	4632      	mov	r2, r6
    2002:	4669      	mov	r1, sp
    2004:	4628      	mov	r0, r5
    2006:	685b      	ldr	r3, [r3, #4]
    2008:	f00e ffa2 	bl	10f50 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    200c:	6863      	ldr	r3, [r4, #4]
    200e:	221b      	movs	r2, #27
    2010:	4628      	mov	r0, r5
    2012:	685b      	ldr	r3, [r3, #4]
    2014:	4904      	ldr	r1, [pc, #16]	; (2028 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x28>)
    2016:	f00e ff9b 	bl	10f50 <buffer_write>
		     log_output->control_block->ctx);
}
    201a:	b002      	add	sp, #8
    201c:	bd70      	pop	{r4, r5, r6, pc}
    201e:	bf00      	nop
    2020:	000186c5 	.word	0x000186c5
    2024:	0001678d 	.word	0x0001678d
    2028:	00016771 	.word	0x00016771

0000202c <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    202c:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    202e:	2100      	movs	r1, #0
	timestamp_div = 1U;
    2030:	4a07      	ldr	r2, [pc, #28]	; (2050 <log_output_timestamp_freq_set+0x24>)
{
    2032:	b510      	push	{r4, lr}
	while (frequency > 1000000) {
    2034:	4c07      	ldr	r4, [pc, #28]	; (2054 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
    2036:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    2038:	42a0      	cmp	r0, r4
    203a:	d804      	bhi.n	2046 <log_output_timestamp_freq_set+0x1a>
    203c:	b101      	cbz	r1, 2040 <log_output_timestamp_freq_set+0x14>
    203e:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    2040:	4b05      	ldr	r3, [pc, #20]	; (2058 <log_output_timestamp_freq_set+0x2c>)
    2042:	6018      	str	r0, [r3, #0]
}
    2044:	bd10      	pop	{r4, pc}
		timestamp_div *= 2U;
    2046:	2101      	movs	r1, #1
		frequency /= 2U;
    2048:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    204a:	005b      	lsls	r3, r3, #1
    204c:	e7f4      	b.n	2038 <log_output_timestamp_freq_set+0xc>
    204e:	bf00      	nop
    2050:	200011d4 	.word	0x200011d4
    2054:	000f4240 	.word	0x000f4240
    2058:	200011d0 	.word	0x200011d0

0000205c <char_out>:
#include <sys/__assert.h>

static const struct device *uart_dev;

static int char_out(uint8_t *data, size_t length, void *ctx)
{
    205c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    205e:	460d      	mov	r5, r1
    2060:	4604      	mov	r4, r0
	ARG_UNUSED(ctx);

	for (size_t i = 0; i < length; i++) {
		uart_poll_out(uart_dev, data[i]);
    2062:	4f06      	ldr	r7, [pc, #24]	; (207c <char_out+0x20>)
    2064:	1846      	adds	r6, r0, r1
	for (size_t i = 0; i < length; i++) {
    2066:	42b4      	cmp	r4, r6
    2068:	d101      	bne.n	206e <char_out+0x12>
	}

	return length;
}
    206a:	4628      	mov	r0, r5
    206c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uart_poll_out(uart_dev, data[i]);
    206e:	6838      	ldr	r0, [r7, #0]
    2070:	f814 1b01 	ldrb.w	r1, [r4], #1
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    2074:	6883      	ldr	r3, [r0, #8]
    2076:	685b      	ldr	r3, [r3, #4]
    2078:	4798      	blx	r3
	for (size_t i = 0; i < length; i++) {
    207a:	e7f4      	b.n	2066 <char_out+0xa>
    207c:	200011ec 	.word	0x200011ec

00002080 <panic>:
 * @param log_output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const log_output)
{
	log_output_flush(log_output);
    2080:	4801      	ldr	r0, [pc, #4]	; (2088 <panic+0x8>)
    2082:	f00f b8cf 	b.w	11224 <log_output_flush>
    2086:	bf00      	nop
    2088:	00015c68 	.word	0x00015c68

0000208c <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const log_output, uint32_t cnt)
{
	log_output_dropped_process(log_output, cnt);
    208c:	4801      	ldr	r0, [pc, #4]	; (2094 <dropped+0x8>)
    208e:	f7ff bfa1 	b.w	1fd4 <log_output_dropped_process>
    2092:	bf00      	nop
    2094:	00015c68 	.word	0x00015c68

00002098 <log_backend_uart_init>:

	log_backend_std_put(&log_output_uart, flag, msg);
}

static void log_backend_uart_init(void)
{
    2098:	b508      	push	{r3, lr}
    209a:	4803      	ldr	r0, [pc, #12]	; (20a8 <log_backend_uart_init+0x10>)
    209c:	f00c fce2 	bl	ea64 <z_impl_device_get_binding>
	uart_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    20a0:	4b02      	ldr	r3, [pc, #8]	; (20ac <log_backend_uart_init+0x14>)
    20a2:	6018      	str	r0, [r3, #0]
	__ASSERT_NO_MSG((void *)uart_dev);
}
    20a4:	bd08      	pop	{r3, pc}
    20a6:	bf00      	nop
    20a8:	00016799 	.word	0x00016799
    20ac:	200011ec 	.word	0x200011ec

000020b0 <put>:
{
    20b0:	b510      	push	{r4, lr}
    20b2:	460c      	mov	r4, r1
	log_msg_get(msg);
    20b4:	4608      	mov	r0, r1
    20b6:	f00e feb4 	bl	10e22 <log_msg_get>
	log_output_msg_process(log_output, msg, flags);
    20ba:	4621      	mov	r1, r4
    20bc:	4804      	ldr	r0, [pc, #16]	; (20d0 <put+0x20>)
    20be:	220f      	movs	r2, #15
    20c0:	f7ff ff0c 	bl	1edc <log_output_msg_process>
	log_msg_put(msg);
    20c4:	4620      	mov	r0, r4
}
    20c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    20ca:	f00e bed5 	b.w	10e78 <log_msg_put>
    20ce:	bf00      	nop
    20d0:	00015c68 	.word	0x00015c68

000020d4 <read_pnp_id>:

#if CONFIG_BT_DIS_PNP
static ssize_t read_pnp_id(struct bt_conn *conn,
			   const struct bt_gatt_attr *attr, void *buf,
			   uint16_t len, uint16_t offset)
{
    20d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &dis_pnp_id,
    20d6:	2407      	movs	r4, #7
    20d8:	9402      	str	r4, [sp, #8]
    20da:	4c04      	ldr	r4, [pc, #16]	; (20ec <read_pnp_id+0x18>)
    20dc:	9401      	str	r4, [sp, #4]
    20de:	f8bd 4018 	ldrh.w	r4, [sp, #24]
    20e2:	9400      	str	r4, [sp, #0]
    20e4:	f011 fb01 	bl	136ea <bt_gatt_attr_read>
				 sizeof(dis_pnp_id));
}
    20e8:	b004      	add	sp, #16
    20ea:	bd10      	pop	{r4, pc}
    20ec:	2000051d 	.word	0x2000051d

000020f0 <nvs_recover_last_ate>:
 *
 * addr should point to the faulty closing ate and will be updated to the last
 * valid ate. If no valid ate is found it will be left untouched.
 */
static int nvs_recover_last_ate(struct nvs_fs *fs, uint32_t *addr)
{
    20f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    20f4:	460e      	mov	r6, r1
    20f6:	4680      	mov	r8, r0
	int rc;

	LOG_DBG("Recovering last ate from sector %d",
		(*addr >> ADDR_SECT_SHIFT));

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    20f8:	2108      	movs	r1, #8
    20fa:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    20fc:	f00f f945 	bl	1138a <nvs_al_size.isra.0>

	*addr -= ate_size;
	ate_end_addr = *addr;
	data_end_addr = *addr & ADDR_SECT_MASK;
    2100:	4b12      	ldr	r3, [pc, #72]	; (214c <nvs_recover_last_ate+0x5c>)
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    2102:	4607      	mov	r7, r0
		if (rc) {
			return rc;
		}
		if (!nvs_ate_crc8_check(&end_ate)) {
			/* found a valid ate, update data_end_addr and *addr */
			data_end_addr &= ADDR_SECT_MASK;
    2104:	4699      	mov	r9, r3
	*addr -= ate_size;
    2106:	6834      	ldr	r4, [r6, #0]
    2108:	1a24      	subs	r4, r4, r0
    210a:	6034      	str	r4, [r6, #0]
	data_end_addr = *addr & ADDR_SECT_MASK;
    210c:	ea04 0503 	and.w	r5, r4, r3
	while (ate_end_addr > data_end_addr) {
    2110:	42ac      	cmp	r4, r5
    2112:	d803      	bhi.n	211c <nvs_recover_last_ate+0x2c>
			*addr = ate_end_addr;
		}
		ate_end_addr -= ate_size;
	}

	return 0;
    2114:	2000      	movs	r0, #0
}
    2116:	b003      	add	sp, #12
    2118:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    211c:	2308      	movs	r3, #8
    211e:	466a      	mov	r2, sp
    2120:	4621      	mov	r1, r4
    2122:	4640      	mov	r0, r8
    2124:	f00f f8bf 	bl	112a6 <nvs_flash_rd>
		if (rc) {
    2128:	2800      	cmp	r0, #0
    212a:	d1f4      	bne.n	2116 <nvs_recover_last_ate+0x26>
		if (!nvs_ate_crc8_check(&end_ate)) {
    212c:	4668      	mov	r0, sp
    212e:	f00f f917 	bl	11360 <nvs_ate_crc8_check>
    2132:	b940      	cbnz	r0, 2146 <nvs_recover_last_ate+0x56>
			data_end_addr += end_ate.offset + end_ate.len;
    2134:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    2138:	f8bd 2004 	ldrh.w	r2, [sp, #4]
			data_end_addr &= ADDR_SECT_MASK;
    213c:	ea05 0509 	and.w	r5, r5, r9
			data_end_addr += end_ate.offset + end_ate.len;
    2140:	4413      	add	r3, r2
    2142:	441d      	add	r5, r3
			*addr = ate_end_addr;
    2144:	6034      	str	r4, [r6, #0]
		ate_end_addr -= ate_size;
    2146:	1be4      	subs	r4, r4, r7
    2148:	e7e2      	b.n	2110 <nvs_recover_last_ate+0x20>
    214a:	bf00      	nop
    214c:	ffff0000 	.word	0xffff0000

00002150 <nvs_gc>:
/* garbage collection: the address ate_wra has been updated to the new sector
 * that has just been started. The data to gc is in the sector after this new
 * sector.
 */
static int nvs_gc(struct nvs_fs *fs)
{
    2150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct nvs_ate close_ate, gc_ate, wlk_ate;
	uint32_t sec_addr, gc_addr, gc_prev_addr, wlk_addr, wlk_prev_addr,
	      data_addr, stop_addr;
	size_t ate_size;

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    2154:	2108      	movs	r1, #8
{
    2156:	b095      	sub	sp, #84	; 0x54
    2158:	4605      	mov	r5, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    215a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    215c:	f00f f915 	bl	1138a <nvs_al_size.isra.0>
    2160:	4680      	mov	r8, r0

	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
    2162:	686b      	ldr	r3, [r5, #4]
	nvs_sector_advance(fs, &sec_addr);
    2164:	89e8      	ldrh	r0, [r5, #14]
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
    2166:	0c1b      	lsrs	r3, r3, #16
    2168:	041b      	lsls	r3, r3, #16
	nvs_sector_advance(fs, &sec_addr);
    216a:	a903      	add	r1, sp, #12
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
    216c:	9303      	str	r3, [sp, #12]
	nvs_sector_advance(fs, &sec_addr);
    216e:	f00f f916 	bl	1139e <nvs_sector_advance.isra.0>
	gc_addr = sec_addr + fs->sector_size - ate_size;
    2172:	9b03      	ldr	r3, [sp, #12]
    2174:	89a9      	ldrh	r1, [r5, #12]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    2176:	ae06      	add	r6, sp, #24
	gc_addr = sec_addr + fs->sector_size - ate_size;
    2178:	4419      	add	r1, r3
    217a:	eba1 0108 	sub.w	r1, r1, r8
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    217e:	2308      	movs	r3, #8
    2180:	4632      	mov	r2, r6
    2182:	4628      	mov	r0, r5
	gc_addr = sec_addr + fs->sector_size - ate_size;
    2184:	9104      	str	r1, [sp, #16]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    2186:	f00f f88e 	bl	112a6 <nvs_flash_rd>

	/* if the sector is not closed don't do gc */
	rc = nvs_flash_ate_rd(fs, gc_addr, &close_ate);
	if (rc < 0) {
    218a:	1e04      	subs	r4, r0, #0
    218c:	f2c0 8099 	blt.w	22c2 <nvs_gc+0x172>
		/* flash error */
		return rc;
	}

	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
    2190:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    2192:	791a      	ldrb	r2, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    2194:	2300      	movs	r3, #0
		if (data8[i] != value) {
    2196:	5cf1      	ldrb	r1, [r6, r3]
    2198:	4291      	cmp	r1, r2
    219a:	f040 8081 	bne.w	22a0 <nvs_gc+0x150>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    219e:	3301      	adds	r3, #1
    21a0:	2b08      	cmp	r3, #8
    21a2:	d1f8      	bne.n	2196 <nvs_gc+0x46>
	if (!rc) {
		rc = nvs_flash_erase_sector(fs, sec_addr);
    21a4:	4628      	mov	r0, r5
    21a6:	9903      	ldr	r1, [sp, #12]
    21a8:	f00f f904 	bl	113b4 <nvs_flash_erase_sector>
    21ac:	4604      	mov	r4, r0
		if (rc) {
    21ae:	e088      	b.n	22c2 <nvs_gc+0x172>
	}

	stop_addr = gc_addr - ate_size;

	if (!nvs_ate_crc8_check(&close_ate)) {
		gc_addr &= ADDR_SECT_MASK;
    21b0:	9b04      	ldr	r3, [sp, #16]
		gc_addr += close_ate.offset;
    21b2:	f8bd 201a 	ldrh.w	r2, [sp, #26]
		gc_addr &= ADDR_SECT_MASK;
    21b6:	0c1b      	lsrs	r3, r3, #16
    21b8:	041b      	lsls	r3, r3, #16
		gc_addr += close_ate.offset;
    21ba:	4413      	add	r3, r2
    21bc:	9304      	str	r3, [sp, #16]
		 */
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
			/* copy needed */
			LOG_DBG("Moving %d, len %d", gc_ate.id, gc_ate.len);

			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
    21be:	f8df b10c 	ldr.w	fp, [pc, #268]	; 22cc <nvs_gc+0x17c>
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
    21c2:	4628      	mov	r0, r5
    21c4:	aa08      	add	r2, sp, #32
    21c6:	a904      	add	r1, sp, #16
		gc_prev_addr = gc_addr;
    21c8:	f8dd a010 	ldr.w	sl, [sp, #16]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
    21cc:	f00f f91a 	bl	11404 <nvs_prev_ate>
		if (rc) {
    21d0:	4604      	mov	r4, r0
    21d2:	2800      	cmp	r0, #0
    21d4:	d175      	bne.n	22c2 <nvs_gc+0x172>
		if (nvs_ate_crc8_check(&gc_ate)) {
    21d6:	a808      	add	r0, sp, #32
    21d8:	f00f f8c2 	bl	11360 <nvs_ate_crc8_check>
    21dc:	2800      	cmp	r0, #0
    21de:	d136      	bne.n	224e <nvs_gc+0xfe>
		wlk_addr = fs->ate_wra;
    21e0:	686b      	ldr	r3, [r5, #4]
    21e2:	9305      	str	r3, [sp, #20]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    21e4:	4628      	mov	r0, r5
    21e6:	aa0a      	add	r2, sp, #40	; 0x28
    21e8:	a905      	add	r1, sp, #20
			wlk_prev_addr = wlk_addr;
    21ea:	9e05      	ldr	r6, [sp, #20]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    21ec:	f00f f90a 	bl	11404 <nvs_prev_ate>
			if (rc) {
    21f0:	4604      	mov	r4, r0
    21f2:	2800      	cmp	r0, #0
    21f4:	d165      	bne.n	22c2 <nvs_gc+0x172>
			if ((wlk_ate.id == gc_ate.id) &&
    21f6:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
    21fa:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    21fe:	429a      	cmp	r2, r3
    2200:	d028      	beq.n	2254 <nvs_gc+0x104>
		} while (wlk_addr != fs->ate_wra);
    2202:	686a      	ldr	r2, [r5, #4]
    2204:	9b05      	ldr	r3, [sp, #20]
    2206:	429a      	cmp	r2, r3
    2208:	d1ec      	bne.n	21e4 <nvs_gc+0x94>
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
    220a:	4556      	cmp	r6, sl
    220c:	d11f      	bne.n	224e <nvs_gc+0xfe>
    220e:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    2212:	b1e3      	cbz	r3, 224e <nvs_gc+0xfe>
			data_addr += gc_ate.offset;
    2214:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
    2218:	ea0a 070b 	and.w	r7, sl, fp
			data_addr += gc_ate.offset;
    221c:	441f      	add	r7, r3

			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
    221e:	68ab      	ldr	r3, [r5, #8]
			nvs_ate_crc8_update(&gc_ate);
    2220:	a808      	add	r0, sp, #32
			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
    2222:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
			nvs_ate_crc8_update(&gc_ate);
    2226:	f00f f8a7 	bl	11378 <nvs_ate_crc8_update>
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
    222a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c

			rc = nvs_flash_block_move(fs, data_addr, gc_ate.len);
    222c:	f8bd 9024 	ldrh.w	r9, [sp, #36]	; 0x24
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
    2230:	681e      	ldr	r6, [r3, #0]
    2232:	4276      	negs	r6, r6
	block_size =
    2234:	f006 0320 	and.w	r3, r6, #32
    2238:	9301      	str	r3, [sp, #4]
	while (len) {
    223a:	f1b9 0f00 	cmp.w	r9, #0
    223e:	d10f      	bne.n	2260 <nvs_gc+0x110>
			if (rc) {
				return rc;
			}

			rc = nvs_flash_ate_wrt(fs, &gc_ate);
    2240:	4628      	mov	r0, r5
    2242:	a908      	add	r1, sp, #32
    2244:	f00f f976 	bl	11534 <nvs_flash_ate_wrt>
			if (rc) {
    2248:	4604      	mov	r4, r0
    224a:	2800      	cmp	r0, #0
    224c:	d139      	bne.n	22c2 <nvs_gc+0x172>
				return rc;
			}
		}
	} while (gc_prev_addr != stop_addr);
    224e:	45c2      	cmp	sl, r8
    2250:	d1b7      	bne.n	21c2 <nvs_gc+0x72>
    2252:	e7a7      	b.n	21a4 <nvs_gc+0x54>
			    (!nvs_ate_crc8_check(&wlk_ate))) {
    2254:	a80a      	add	r0, sp, #40	; 0x28
    2256:	f00f f883 	bl	11360 <nvs_ate_crc8_check>
			if ((wlk_ate.id == gc_ate.id) &&
    225a:	2800      	cmp	r0, #0
    225c:	d1d1      	bne.n	2202 <nvs_gc+0xb2>
    225e:	e7d4      	b.n	220a <nvs_gc+0xba>
		bytes_to_copy = MIN(block_size, len);
    2260:	9b01      	ldr	r3, [sp, #4]
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_copy);
    2262:	4639      	mov	r1, r7
		bytes_to_copy = MIN(block_size, len);
    2264:	454b      	cmp	r3, r9
    2266:	bf28      	it	cs
    2268:	464b      	movcs	r3, r9
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_copy);
    226a:	4628      	mov	r0, r5
    226c:	aa0c      	add	r2, sp, #48	; 0x30
		bytes_to_copy = MIN(block_size, len);
    226e:	461e      	mov	r6, r3
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_copy);
    2270:	f00f f819 	bl	112a6 <nvs_flash_rd>
		if (rc) {
    2274:	4604      	mov	r4, r0
    2276:	bb20      	cbnz	r0, 22c2 <nvs_gc+0x172>
	if (!len) {
    2278:	b136      	cbz	r6, 2288 <nvs_gc+0x138>
    227a:	4633      	mov	r3, r6
    227c:	4628      	mov	r0, r5
    227e:	68a9      	ldr	r1, [r5, #8]
    2280:	aa0c      	add	r2, sp, #48	; 0x30
    2282:	f00f f90f 	bl	114a4 <nvs_flash_al_wrt.part.0>
    2286:	4604      	mov	r4, r0
	fs->data_wra += nvs_al_size(fs, len);
    2288:	4631      	mov	r1, r6
    228a:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    228c:	f00f f87d 	bl	1138a <nvs_al_size.isra.0>
    2290:	68aa      	ldr	r2, [r5, #8]
    2292:	4402      	add	r2, r0
    2294:	60aa      	str	r2, [r5, #8]
		if (rc) {
    2296:	b9a4      	cbnz	r4, 22c2 <nvs_gc+0x172>
		len -= bytes_to_copy;
    2298:	eba9 0906 	sub.w	r9, r9, r6
		addr += bytes_to_copy;
    229c:	4437      	add	r7, r6
    229e:	e7cc      	b.n	223a <nvs_gc+0xea>
	stop_addr = gc_addr - ate_size;
    22a0:	9804      	ldr	r0, [sp, #16]
    22a2:	eba0 0808 	sub.w	r8, r0, r8
	if (!nvs_ate_crc8_check(&close_ate)) {
    22a6:	4630      	mov	r0, r6
    22a8:	f00f f85a 	bl	11360 <nvs_ate_crc8_check>
    22ac:	2800      	cmp	r0, #0
    22ae:	f43f af7f 	beq.w	21b0 <nvs_gc+0x60>
		rc = nvs_recover_last_ate(fs, &gc_addr);
    22b2:	4628      	mov	r0, r5
    22b4:	a904      	add	r1, sp, #16
    22b6:	f7ff ff1b 	bl	20f0 <nvs_recover_last_ate>
		if (rc) {
    22ba:	4604      	mov	r4, r0
    22bc:	2800      	cmp	r0, #0
    22be:	f43f af7e 	beq.w	21be <nvs_gc+0x6e>
	rc = nvs_flash_erase_sector(fs, sec_addr);
	if (rc) {
		return rc;
	}
	return 0;
}
    22c2:	4620      	mov	r0, r4
    22c4:	b015      	add	sp, #84	; 0x54
    22c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    22ca:	bf00      	nop
    22cc:	ffff0000 	.word	0xffff0000

000022d0 <nvs_init>:
	}
	return 0;
}

int nvs_init(struct nvs_fs *fs, const char *dev_name)
{
    22d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    22d4:	4604      	mov	r4, r0
    22d6:	460d      	mov	r5, r1
    22d8:	b086      	sub	sp, #24

	int rc;
	struct flash_pages_info info;
	size_t write_block_size;

	k_mutex_init(&fs->nvs_lock);
    22da:	f100 0614 	add.w	r6, r0, #20
	return z_impl_k_mutex_init(mutex);
    22de:	4630      	mov	r0, r6
    22e0:	f012 fd53 	bl	14d8a <z_impl_k_mutex_init>
    22e4:	4628      	mov	r0, r5
    22e6:	f00c fbbd 	bl	ea64 <z_impl_device_get_binding>

	fs->flash_device = device_get_binding(dev_name);
    22ea:	62a0      	str	r0, [r4, #40]	; 0x28
	if (!fs->flash_device) {
    22ec:	b978      	cbnz	r0, 230e <nvs_init+0x3e>
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    22ee:	4b9f      	ldr	r3, [pc, #636]	; (256c <nvs_init+0x29c>)
    22f0:	499f      	ldr	r1, [pc, #636]	; (2570 <nvs_init+0x2a0>)
		LOG_ERR("No valid flash device found");
    22f2:	48a0      	ldr	r0, [pc, #640]	; (2574 <nvs_init+0x2a4>)
    22f4:	1ac9      	subs	r1, r1, r3
    22f6:	08c9      	lsrs	r1, r1, #3
    22f8:	0189      	lsls	r1, r1, #6
    22fa:	f041 0101 	orr.w	r1, r1, #1
    22fe:	f00e fcd9 	bl	10cb4 <log_0>
		return -ENXIO;
    2302:	f06f 0505 	mvn.w	r5, #5
	LOG_INF("data wra: %d, %x",
		(fs->data_wra >> ADDR_SECT_SHIFT),
		(fs->data_wra & ADDR_OFFS_MASK));

	return 0;
}
    2306:	4628      	mov	r0, r5
    2308:	b006      	add	sp, #24
    230a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
    230e:	6883      	ldr	r3, [r0, #8]
    2310:	691b      	ldr	r3, [r3, #16]
    2312:	4798      	blx	r3
	fs->flash_parameters = flash_get_parameters(fs->flash_device);
    2314:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (fs->flash_parameters == NULL) {
    2316:	b960      	cbnz	r0, 2332 <nvs_init+0x62>
    2318:	4995      	ldr	r1, [pc, #596]	; (2570 <nvs_init+0x2a0>)
    231a:	4b94      	ldr	r3, [pc, #592]	; (256c <nvs_init+0x29c>)
		LOG_ERR("Could not obtain flash parameters");
    231c:	4896      	ldr	r0, [pc, #600]	; (2578 <nvs_init+0x2a8>)
    231e:	1ac9      	subs	r1, r1, r3
    2320:	08c9      	lsrs	r1, r1, #3
    2322:	0189      	lsls	r1, r1, #6
    2324:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("Configuration error - sector count");
    2328:	f00e fcc4 	bl	10cb4 <log_0>
		return -EINVAL;
    232c:	f06f 0515 	mvn.w	r5, #21
    2330:	e7e9      	b.n	2306 <nvs_init+0x36>
	write_block_size = flash_get_write_block_size(fs->flash_device);
    2332:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return api->get_parameters(dev)->write_block_size;
    2334:	6883      	ldr	r3, [r0, #8]
    2336:	691b      	ldr	r3, [r3, #16]
    2338:	4798      	blx	r3
	if (write_block_size > NVS_BLOCK_SIZE || write_block_size == 0) {
    233a:	6803      	ldr	r3, [r0, #0]
    233c:	3b01      	subs	r3, #1
    233e:	2b1f      	cmp	r3, #31
    2340:	d908      	bls.n	2354 <nvs_init+0x84>
    2342:	498b      	ldr	r1, [pc, #556]	; (2570 <nvs_init+0x2a0>)
    2344:	4b89      	ldr	r3, [pc, #548]	; (256c <nvs_init+0x29c>)
		LOG_ERR("Unsupported write block size");
    2346:	488d      	ldr	r0, [pc, #564]	; (257c <nvs_init+0x2ac>)
    2348:	1ac9      	subs	r1, r1, r3
    234a:	08c9      	lsrs	r1, r1, #3
    234c:	0189      	lsls	r1, r1, #6
    234e:	f041 0101 	orr.w	r1, r1, #1
    2352:	e7e9      	b.n	2328 <nvs_init+0x58>
	rc = flash_get_page_info_by_offs(fs->flash_device, fs->offset, &info);
    2354:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    2356:	6821      	ldr	r1, [r4, #0]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&dev, *(uintptr_t *)&offset, *(uintptr_t *)&info, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
    2358:	aa03      	add	r2, sp, #12
    235a:	f011 ffe4 	bl	14326 <z_impl_flash_get_page_info_by_offs>
	if (rc) {
    235e:	b140      	cbz	r0, 2372 <nvs_init+0xa2>
    2360:	4983      	ldr	r1, [pc, #524]	; (2570 <nvs_init+0x2a0>)
    2362:	4b82      	ldr	r3, [pc, #520]	; (256c <nvs_init+0x29c>)
		LOG_ERR("Unable to get page info");
    2364:	4886      	ldr	r0, [pc, #536]	; (2580 <nvs_init+0x2b0>)
    2366:	1ac9      	subs	r1, r1, r3
    2368:	08c9      	lsrs	r1, r1, #3
    236a:	0189      	lsls	r1, r1, #6
    236c:	f041 0101 	orr.w	r1, r1, #1
    2370:	e7da      	b.n	2328 <nvs_init+0x58>
	if (!fs->sector_size || fs->sector_size % info.size) {
    2372:	89a3      	ldrh	r3, [r4, #12]
    2374:	b12b      	cbz	r3, 2382 <nvs_init+0xb2>
    2376:	9a04      	ldr	r2, [sp, #16]
    2378:	fbb3 f5f2 	udiv	r5, r3, r2
    237c:	fb02 3515 	mls	r5, r2, r5, r3
    2380:	b145      	cbz	r5, 2394 <nvs_init+0xc4>
    2382:	497b      	ldr	r1, [pc, #492]	; (2570 <nvs_init+0x2a0>)
    2384:	4b79      	ldr	r3, [pc, #484]	; (256c <nvs_init+0x29c>)
		LOG_ERR("Invalid sector size");
    2386:	487f      	ldr	r0, [pc, #508]	; (2584 <nvs_init+0x2b4>)
    2388:	1ac9      	subs	r1, r1, r3
    238a:	08c9      	lsrs	r1, r1, #3
    238c:	0189      	lsls	r1, r1, #6
    238e:	f041 0101 	orr.w	r1, r1, #1
    2392:	e7c9      	b.n	2328 <nvs_init+0x58>
	if (fs->sector_count < 2) {
    2394:	89e3      	ldrh	r3, [r4, #14]
    2396:	2b01      	cmp	r3, #1
    2398:	d808      	bhi.n	23ac <nvs_init+0xdc>
    239a:	4975      	ldr	r1, [pc, #468]	; (2570 <nvs_init+0x2a0>)
    239c:	4b73      	ldr	r3, [pc, #460]	; (256c <nvs_init+0x29c>)
		LOG_ERR("Configuration error - sector count");
    239e:	487a      	ldr	r0, [pc, #488]	; (2588 <nvs_init+0x2b8>)
    23a0:	1ac9      	subs	r1, r1, r3
    23a2:	08c9      	lsrs	r1, r1, #3
    23a4:	0189      	lsls	r1, r1, #6
    23a6:	f041 0101 	orr.w	r1, r1, #1
    23aa:	e7bd      	b.n	2328 <nvs_init+0x58>
	uint8_t erase_value = fs->flash_parameters->erase_value;
    23ac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	uint32_t addr = 0U;
    23ae:	9500      	str	r5, [sp, #0]
	uint8_t erase_value = fs->flash_parameters->erase_value;
    23b0:	f893 9004 	ldrb.w	r9, [r3, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
    23b4:	f04f 32ff 	mov.w	r2, #4294967295
    23b8:	f04f 33ff 	mov.w	r3, #4294967295
    23bc:	4630      	mov	r0, r6
    23be:	f00c fd49 	bl	ee54 <z_impl_k_mutex_lock>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    23c2:	2108      	movs	r1, #8
    23c4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    23c6:	f00e ffe0 	bl	1138a <nvs_al_size.isra.0>
	uint16_t i, closed_sectors = 0;
    23ca:	462f      	mov	r7, r5
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    23cc:	4680      	mov	r8, r0
	for (i = 0; i < fs->sector_count; i++) {
    23ce:	89e3      	ldrh	r3, [r4, #14]
    23d0:	fa1f fa85 	uxth.w	sl, r5
    23d4:	4553      	cmp	r3, sl
    23d6:	d86d      	bhi.n	24b4 <nvs_init+0x1e4>
	if (closed_sectors == fs->sector_count) {
    23d8:	89e3      	ldrh	r3, [r4, #14]
    23da:	42bb      	cmp	r3, r7
    23dc:	f000 80a9 	beq.w	2532 <nvs_init+0x262>
	if (i == fs->sector_count) {
    23e0:	459a      	cmp	sl, r3
    23e2:	d10c      	bne.n	23fe <nvs_init+0x12e>
		rc = nvs_flash_cmp_const(fs, addr - ate_size, erase_value,
    23e4:	9900      	ldr	r1, [sp, #0]
    23e6:	2308      	movs	r3, #8
    23e8:	464a      	mov	r2, r9
    23ea:	4620      	mov	r0, r4
    23ec:	eba1 0108 	sub.w	r1, r1, r8
    23f0:	f00e ff91 	bl	11316 <nvs_flash_cmp_const>
		if (!rc) {
    23f4:	b918      	cbnz	r0, 23fe <nvs_init+0x12e>
			nvs_sector_advance(fs, &addr);
    23f6:	4669      	mov	r1, sp
    23f8:	89e0      	ldrh	r0, [r4, #14]
    23fa:	f00e ffd0 	bl	1139e <nvs_sector_advance.isra.0>
	fs->ate_wra = addr - ate_size;
    23fe:	9b00      	ldr	r3, [sp, #0]
	fs->data_wra = addr & ADDR_SECT_MASK;
    2400:	4f62      	ldr	r7, [pc, #392]	; (258c <nvs_init+0x2bc>)
	fs->ate_wra = addr - ate_size;
    2402:	eba3 0208 	sub.w	r2, r3, r8
	fs->data_wra = addr & ADDR_SECT_MASK;
    2406:	403b      	ands	r3, r7
	fs->ate_wra = addr - ate_size;
    2408:	6062      	str	r2, [r4, #4]
	fs->data_wra = addr & ADDR_SECT_MASK;
    240a:	60a3      	str	r3, [r4, #8]
	while (fs->ate_wra >= fs->data_wra) {
    240c:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
    2410:	4299      	cmp	r1, r3
    2412:	d30f      	bcc.n	2434 <nvs_init+0x164>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    2414:	2308      	movs	r3, #8
    2416:	4620      	mov	r0, r4
    2418:	aa01      	add	r2, sp, #4
    241a:	f00e ff44 	bl	112a6 <nvs_flash_rd>
		if (rc) {
    241e:	4605      	mov	r5, r0
    2420:	bb20      	cbnz	r0, 246c <nvs_init+0x19c>
    2422:	ab01      	add	r3, sp, #4
		if (data8[i] != value) {
    2424:	f813 2b01 	ldrb.w	r2, [r3], #1
    2428:	4591      	cmp	r9, r2
    242a:	f040 8085 	bne.w	2538 <nvs_init+0x268>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    242e:	3501      	adds	r5, #1
    2430:	2d08      	cmp	r5, #8
    2432:	d1f7      	bne.n	2424 <nvs_init+0x154>
	while (fs->ate_wra > fs->data_wra) {
    2434:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
    2438:	428b      	cmp	r3, r1
    243a:	d907      	bls.n	244c <nvs_init+0x17c>
		rc = nvs_flash_cmp_const(fs, fs->data_wra, erase_value,
    243c:	464a      	mov	r2, r9
    243e:	4620      	mov	r0, r4
    2440:	1a5b      	subs	r3, r3, r1
    2442:	f00e ff68 	bl	11316 <nvs_flash_cmp_const>
		if (rc < 0) {
    2446:	1e05      	subs	r5, r0, #0
    2448:	db10      	blt.n	246c <nvs_init+0x19c>
		if (!rc) {
    244a:	d156      	bne.n	24fa <nvs_init+0x22a>
	addr = fs->ate_wra & ADDR_SECT_MASK;
    244c:	6863      	ldr	r3, [r4, #4]
    244e:	4f4f      	ldr	r7, [pc, #316]	; (258c <nvs_init+0x2bc>)
	nvs_sector_advance(fs, &addr);
    2450:	4669      	mov	r1, sp
	addr = fs->ate_wra & ADDR_SECT_MASK;
    2452:	403b      	ands	r3, r7
	nvs_sector_advance(fs, &addr);
    2454:	89e0      	ldrh	r0, [r4, #14]
	addr = fs->ate_wra & ADDR_SECT_MASK;
    2456:	9300      	str	r3, [sp, #0]
	nvs_sector_advance(fs, &addr);
    2458:	f00e ffa1 	bl	1139e <nvs_sector_advance.isra.0>
	rc = nvs_flash_cmp_const(fs, addr, erase_value, fs->sector_size);
    245c:	464a      	mov	r2, r9
    245e:	4620      	mov	r0, r4
    2460:	89a3      	ldrh	r3, [r4, #12]
    2462:	9900      	ldr	r1, [sp, #0]
    2464:	f00e ff57 	bl	11316 <nvs_flash_cmp_const>
	if (rc < 0) {
    2468:	1e05      	subs	r5, r0, #0
    246a:	da4c      	bge.n	2506 <nvs_init+0x236>
	return z_impl_k_mutex_unlock(mutex);
    246c:	4630      	mov	r0, r6
    246e:	f00c fd69 	bl	ef44 <z_impl_k_mutex_unlock>
	if (rc) {
    2472:	2d00      	cmp	r5, #0
    2474:	f47f af47 	bne.w	2306 <nvs_init+0x36>
	fs->ready = true;
    2478:	2301      	movs	r3, #1
    247a:	4e3d      	ldr	r6, [pc, #244]	; (2570 <nvs_init+0x2a0>)
    247c:	7423      	strb	r3, [r4, #16]
    247e:	4b3b      	ldr	r3, [pc, #236]	; (256c <nvs_init+0x29c>)
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
    2480:	89a2      	ldrh	r2, [r4, #12]
    2482:	1af6      	subs	r6, r6, r3
    2484:	08f6      	lsrs	r6, r6, #3
    2486:	01b6      	lsls	r6, r6, #6
    2488:	f046 0603 	orr.w	r6, r6, #3
    248c:	4633      	mov	r3, r6
    248e:	89e1      	ldrh	r1, [r4, #14]
    2490:	483f      	ldr	r0, [pc, #252]	; (2590 <nvs_init+0x2c0>)
    2492:	f00e fc30 	bl	10cf6 <log_2>
	LOG_INF("alloc wra: %d, %x",
    2496:	6861      	ldr	r1, [r4, #4]
    2498:	4633      	mov	r3, r6
    249a:	b28a      	uxth	r2, r1
    249c:	483d      	ldr	r0, [pc, #244]	; (2594 <nvs_init+0x2c4>)
    249e:	0c09      	lsrs	r1, r1, #16
    24a0:	f00e fc29 	bl	10cf6 <log_2>
	LOG_INF("data wra: %d, %x",
    24a4:	68a1      	ldr	r1, [r4, #8]
    24a6:	4633      	mov	r3, r6
    24a8:	b28a      	uxth	r2, r1
    24aa:	483b      	ldr	r0, [pc, #236]	; (2598 <nvs_init+0x2c8>)
    24ac:	0c09      	lsrs	r1, r1, #16
    24ae:	f00e fc22 	bl	10cf6 <log_2>
	return 0;
    24b2:	e728      	b.n	2306 <nvs_init+0x36>
		       (uint16_t)(fs->sector_size - ate_size);
    24b4:	89a1      	ldrh	r1, [r4, #12]
		addr = (i << ADDR_SECT_SHIFT) +
    24b6:	042b      	lsls	r3, r5, #16
		       (uint16_t)(fs->sector_size - ate_size);
    24b8:	eba1 0108 	sub.w	r1, r1, r8
		addr = (i << ADDR_SECT_SHIFT) +
    24bc:	fa13 f181 	uxtah	r1, r3, r1
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
    24c0:	464a      	mov	r2, r9
    24c2:	2308      	movs	r3, #8
    24c4:	4620      	mov	r0, r4
		addr = (i << ADDR_SECT_SHIFT) +
    24c6:	9100      	str	r1, [sp, #0]
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
    24c8:	f00e ff25 	bl	11316 <nvs_flash_cmp_const>
		if (rc) {
    24cc:	b170      	cbz	r0, 24ec <nvs_init+0x21c>
			nvs_sector_advance(fs, &addr);
    24ce:	4669      	mov	r1, sp
    24d0:	89e0      	ldrh	r0, [r4, #14]
    24d2:	f00e ff64 	bl	1139e <nvs_sector_advance.isra.0>
			closed_sectors++;
    24d6:	3701      	adds	r7, #1
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
    24d8:	2308      	movs	r3, #8
    24da:	464a      	mov	r2, r9
    24dc:	4620      	mov	r0, r4
    24de:	9900      	ldr	r1, [sp, #0]
			closed_sectors++;
    24e0:	b2bf      	uxth	r7, r7
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
    24e2:	f00e ff18 	bl	11316 <nvs_flash_cmp_const>
			if (!rc) {
    24e6:	2800      	cmp	r0, #0
    24e8:	f43f af76 	beq.w	23d8 <nvs_init+0x108>
	for (i = 0; i < fs->sector_count; i++) {
    24ec:	3501      	adds	r5, #1
    24ee:	e76e      	b.n	23ce <nvs_init+0xfe>
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
    24f0:	2d00      	cmp	r5, #0
    24f2:	d036      	beq.n	2562 <nvs_init+0x292>
				rc = -ESPIPE;
    24f4:	f06f 051c 	mvn.w	r5, #28
    24f8:	e7b8      	b.n	246c <nvs_init+0x19c>
		fs->data_wra += fs->flash_parameters->write_block_size;
    24fa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    24fc:	68a3      	ldr	r3, [r4, #8]
    24fe:	6812      	ldr	r2, [r2, #0]
    2500:	4413      	add	r3, r2
    2502:	60a3      	str	r3, [r4, #8]
    2504:	e796      	b.n	2434 <nvs_init+0x164>
	if (rc) {
    2506:	d0b1      	beq.n	246c <nvs_init+0x19c>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
    2508:	4620      	mov	r0, r4
    250a:	6861      	ldr	r1, [r4, #4]
    250c:	f00e ff52 	bl	113b4 <nvs_flash_erase_sector>
		if (rc) {
    2510:	4605      	mov	r5, r0
    2512:	2800      	cmp	r0, #0
    2514:	d1aa      	bne.n	246c <nvs_init+0x19c>
		fs->ate_wra &= ADDR_SECT_MASK;
    2516:	6863      	ldr	r3, [r4, #4]
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
    2518:	89a0      	ldrh	r0, [r4, #12]
		fs->ate_wra &= ADDR_SECT_MASK;
    251a:	403b      	ands	r3, r7
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
    251c:	4403      	add	r3, r0
    251e:	eba3 0048 	sub.w	r0, r3, r8, lsl #1
    2522:	6060      	str	r0, [r4, #4]
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
    2524:	4038      	ands	r0, r7
    2526:	60a0      	str	r0, [r4, #8]
		rc = nvs_gc(fs);
    2528:	4620      	mov	r0, r4
    252a:	f7ff fe11 	bl	2150 <nvs_gc>
    252e:	4605      	mov	r5, r0
end:
    2530:	e79c      	b.n	246c <nvs_init+0x19c>
		rc = -EDEADLK;
    2532:	f06f 0520 	mvn.w	r5, #32
    2536:	e799      	b.n	246c <nvs_init+0x19c>
		if (!nvs_ate_crc8_check(&last_ate)) {
    2538:	a801      	add	r0, sp, #4
    253a:	f00e ff11 	bl	11360 <nvs_ate_crc8_check>
    253e:	6862      	ldr	r2, [r4, #4]
    2540:	b978      	cbnz	r0, 2562 <nvs_init+0x292>
			fs->data_wra = addr & ADDR_SECT_MASK;
    2542:	9b00      	ldr	r3, [sp, #0]
			fs->data_wra += last_ate.offset;
    2544:	f8bd 0006 	ldrh.w	r0, [sp, #6]
			fs->data_wra += nvs_al_size(fs, last_ate.len);
    2548:	f8bd 5008 	ldrh.w	r5, [sp, #8]
			fs->data_wra = addr & ADDR_SECT_MASK;
    254c:	403b      	ands	r3, r7
			fs->data_wra += last_ate.offset;
    254e:	4403      	add	r3, r0
    2550:	60a3      	str	r3, [r4, #8]
			fs->data_wra += nvs_al_size(fs, last_ate.len);
    2552:	4629      	mov	r1, r5
    2554:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    2556:	f00e ff18 	bl	1138a <nvs_al_size.isra.0>
    255a:	4403      	add	r3, r0
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
    255c:	4293      	cmp	r3, r2
			fs->data_wra += nvs_al_size(fs, last_ate.len);
    255e:	60a3      	str	r3, [r4, #8]
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
    2560:	d0c6      	beq.n	24f0 <nvs_init+0x220>
		fs->ate_wra -= ate_size;
    2562:	eba2 0208 	sub.w	r2, r2, r8
    2566:	6062      	str	r2, [r4, #4]
    2568:	e750      	b.n	240c <nvs_init+0x13c>
    256a:	bf00      	nop
    256c:	00015a00 	.word	0x00015a00
    2570:	00015a88 	.word	0x00015a88
    2574:	000167ed 	.word	0x000167ed
    2578:	00016809 	.word	0x00016809
    257c:	0001682b 	.word	0x0001682b
    2580:	00016848 	.word	0x00016848
    2584:	00016860 	.word	0x00016860
    2588:	00016874 	.word	0x00016874
    258c:	ffff0000 	.word	0xffff0000
    2590:	00016897 	.word	0x00016897
    2594:	000168ae 	.word	0x000168ae
    2598:	000168c0 	.word	0x000168c0

0000259c <nvs_write>:

ssize_t nvs_write(struct nvs_fs *fs, uint16_t id, const void *data, size_t len)
{
    259c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    25a0:	461e      	mov	r6, r3
	struct nvs_ate wlk_ate;
	uint32_t wlk_addr, rd_addr;
	uint16_t required_space = 0U; /* no space, appropriate for delete ate */
	bool prev_found = false;

	if (!fs->ready) {
    25a2:	7c03      	ldrb	r3, [r0, #16]
{
    25a4:	4604      	mov	r4, r0
    25a6:	4689      	mov	r9, r1
    25a8:	4690      	mov	r8, r2
    25aa:	b089      	sub	sp, #36	; 0x24
	if (!fs->ready) {
    25ac:	b97b      	cbnz	r3, 25ce <nvs_write+0x32>
    25ae:	4b69      	ldr	r3, [pc, #420]	; (2754 <nvs_write+0x1b8>)
    25b0:	4969      	ldr	r1, [pc, #420]	; (2758 <nvs_write+0x1bc>)
		LOG_ERR("NVS not initialized");
    25b2:	486a      	ldr	r0, [pc, #424]	; (275c <nvs_write+0x1c0>)
    25b4:	1ac9      	subs	r1, r1, r3
    25b6:	08c9      	lsrs	r1, r1, #3
    25b8:	0189      	lsls	r1, r1, #6
    25ba:	f041 0101 	orr.w	r1, r1, #1
    25be:	f00e fb79 	bl	10cb4 <log_0>
		return -EACCES;
    25c2:	f06f 050c 	mvn.w	r5, #12
	}
	rc = len;
end:
	k_mutex_unlock(&fs->nvs_lock);
	return rc;
}
    25c6:	4628      	mov	r0, r5
    25c8:	b009      	add	sp, #36	; 0x24
    25ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    25ce:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    25d0:	2108      	movs	r1, #8
    25d2:	4618      	mov	r0, r3
    25d4:	f00e fed9 	bl	1138a <nvs_al_size.isra.0>
    25d8:	4682      	mov	sl, r0
	data_size = nvs_al_size(fs, len);
    25da:	4631      	mov	r1, r6
    25dc:	4618      	mov	r0, r3
    25de:	f00e fed4 	bl	1138a <nvs_al_size.isra.0>
	if ((len > (fs->sector_size - 3 * ate_size)) ||
    25e2:	89a3      	ldrh	r3, [r4, #12]
    25e4:	eb0a 024a 	add.w	r2, sl, sl, lsl #1
    25e8:	1a9b      	subs	r3, r3, r2
    25ea:	42b3      	cmp	r3, r6
	data_size = nvs_al_size(fs, len);
    25ec:	4607      	mov	r7, r0
	if ((len > (fs->sector_size - 3 * ate_size)) ||
    25ee:	f0c0 80ab 	bcc.w	2748 <nvs_write+0x1ac>
    25f2:	b11e      	cbz	r6, 25fc <nvs_write+0x60>
	    ((len > 0) && (data == NULL))) {
    25f4:	f1b8 0f00 	cmp.w	r8, #0
    25f8:	f000 80a6 	beq.w	2748 <nvs_write+0x1ac>
	wlk_addr = fs->ate_wra;
    25fc:	6863      	ldr	r3, [r4, #4]
    25fe:	9303      	str	r3, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    2600:	4620      	mov	r0, r4
    2602:	aa04      	add	r2, sp, #16
    2604:	a903      	add	r1, sp, #12
		rd_addr = wlk_addr;
    2606:	f8dd b00c 	ldr.w	fp, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    260a:	f00e fefb 	bl	11404 <nvs_prev_ate>
		if (rc) {
    260e:	4605      	mov	r5, r0
    2610:	2800      	cmp	r0, #0
    2612:	d1d8      	bne.n	25c6 <nvs_write+0x2a>
		if ((wlk_ate.id == id) && (!nvs_ate_crc8_check(&wlk_ate))) {
    2614:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    2618:	454b      	cmp	r3, r9
    261a:	d005      	beq.n	2628 <nvs_write+0x8c>
		if (wlk_addr == fs->ate_wra) {
    261c:	6862      	ldr	r2, [r4, #4]
    261e:	9b03      	ldr	r3, [sp, #12]
    2620:	429a      	cmp	r2, r3
    2622:	d1ed      	bne.n	2600 <nvs_write+0x64>
		if (len == 0) {
    2624:	b9de      	cbnz	r6, 265e <nvs_write+0xc2>
    2626:	e7ce      	b.n	25c6 <nvs_write+0x2a>
		if ((wlk_ate.id == id) && (!nvs_ate_crc8_check(&wlk_ate))) {
    2628:	a804      	add	r0, sp, #16
    262a:	f00e fe99 	bl	11360 <nvs_ate_crc8_check>
    262e:	2800      	cmp	r0, #0
    2630:	d1f4      	bne.n	261c <nvs_write+0x80>
		if (len == 0) {
    2632:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    2636:	b186      	cbz	r6, 265a <nvs_write+0xbe>
		} else if (len == wlk_ate.len) {
    2638:	42b3      	cmp	r3, r6
    263a:	d110      	bne.n	265e <nvs_write+0xc2>
		rd_addr += wlk_ate.offset;
    263c:	f8bd 0012 	ldrh.w	r0, [sp, #18]
		rd_addr &= ADDR_SECT_MASK;
    2640:	ea4f 411b 	mov.w	r1, fp, lsr #16
    2644:	0409      	lsls	r1, r1, #16
			rc = nvs_flash_block_cmp(fs, rd_addr, data, len);
    2646:	4401      	add	r1, r0
    2648:	4633      	mov	r3, r6
    264a:	4642      	mov	r2, r8
    264c:	4620      	mov	r0, r4
    264e:	f00e fe38 	bl	112c2 <nvs_flash_block_cmp>
			if (rc <= 0) {
    2652:	2800      	cmp	r0, #0
    2654:	dc03      	bgt.n	265e <nvs_write+0xc2>
    2656:	4605      	mov	r5, r0
    2658:	e7b5      	b.n	25c6 <nvs_write+0x2a>
			if (wlk_ate.len == 0U) {
    265a:	2b00      	cmp	r3, #0
    265c:	d0b3      	beq.n	25c6 <nvs_write+0x2a>
	if (data_size) {
    265e:	2f00      	cmp	r7, #0
    2660:	d13f      	bne.n	26e2 <nvs_write+0x146>
	k_mutex_lock(&fs->nvs_lock, K_FOREVER);
    2662:	f104 0a14 	add.w	sl, r4, #20
	return z_impl_k_mutex_lock(mutex, timeout);
    2666:	f04f 32ff 	mov.w	r2, #4294967295
    266a:	f04f 33ff 	mov.w	r3, #4294967295
    266e:	4650      	mov	r0, sl
    2670:	f00c fbf0 	bl	ee54 <z_impl_k_mutex_lock>
	gc_count = 0;
    2674:	2200      	movs	r2, #0
	fs->ate_wra &= ADDR_SECT_MASK;
    2676:	f8df b0e8 	ldr.w	fp, [pc, #232]	; 2760 <nvs_write+0x1c4>
		if (gc_count == fs->sector_count) {
    267a:	89e3      	ldrh	r3, [r4, #14]
    267c:	429a      	cmp	r2, r3
    267e:	d060      	beq.n	2742 <nvs_write+0x1a6>
		if (fs->ate_wra >= fs->data_wra + required_space) {
    2680:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
    2684:	1878      	adds	r0, r7, r1
    2686:	4283      	cmp	r3, r0
    2688:	d32e      	bcc.n	26e8 <nvs_write+0x14c>
	entry.part = 0xff;
    268a:	23ff      	movs	r3, #255	; 0xff
	nvs_ate_crc8_update(&entry);
    268c:	a806      	add	r0, sp, #24
	entry.id = id;
    268e:	f8ad 9018 	strh.w	r9, [sp, #24]
	entry.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
    2692:	f8ad 101a 	strh.w	r1, [sp, #26]
	entry.len = (uint16_t)len;
    2696:	f8ad 601c 	strh.w	r6, [sp, #28]
	entry.part = 0xff;
    269a:	f88d 301e 	strb.w	r3, [sp, #30]
	nvs_ate_crc8_update(&entry);
    269e:	f00e fe6b 	bl	11378 <nvs_ate_crc8_update>
	if (!len) {
    26a2:	b136      	cbz	r6, 26b2 <nvs_write+0x116>
    26a4:	4633      	mov	r3, r6
    26a6:	4642      	mov	r2, r8
    26a8:	4620      	mov	r0, r4
    26aa:	68a1      	ldr	r1, [r4, #8]
    26ac:	f00e fefa 	bl	114a4 <nvs_flash_al_wrt.part.0>
    26b0:	4605      	mov	r5, r0
	fs->data_wra += nvs_al_size(fs, len);
    26b2:	4631      	mov	r1, r6
    26b4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    26b6:	f00e fe68 	bl	1138a <nvs_al_size.isra.0>
    26ba:	68a3      	ldr	r3, [r4, #8]
    26bc:	4403      	add	r3, r0
    26be:	60a3      	str	r3, [r4, #8]
	if (rc) {
    26c0:	2d00      	cmp	r5, #0
    26c2:	d144      	bne.n	274e <nvs_write+0x1b2>
	rc = nvs_flash_ate_wrt(fs, &entry);
    26c4:	4620      	mov	r0, r4
    26c6:	a906      	add	r1, sp, #24
    26c8:	f00e ff34 	bl	11534 <nvs_flash_ate_wrt>
	if (rc) {
    26cc:	4605      	mov	r5, r0
    26ce:	2800      	cmp	r0, #0
    26d0:	d13d      	bne.n	274e <nvs_write+0x1b2>
	rc = len;
    26d2:	4633      	mov	r3, r6
    26d4:	9301      	str	r3, [sp, #4]
	return z_impl_k_mutex_unlock(mutex);
    26d6:	4650      	mov	r0, sl
    26d8:	f00c fc34 	bl	ef44 <z_impl_k_mutex_unlock>
	return rc;
    26dc:	9b01      	ldr	r3, [sp, #4]
    26de:	461d      	mov	r5, r3
    26e0:	e771      	b.n	25c6 <nvs_write+0x2a>
		required_space = data_size + ate_size;
    26e2:	4457      	add	r7, sl
    26e4:	b2bf      	uxth	r7, r7
    26e6:	e7bc      	b.n	2662 <nvs_write+0xc6>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    26e8:	2108      	movs	r1, #8
    26ea:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    26ec:	9201      	str	r2, [sp, #4]
    26ee:	f00e fe4c 	bl	1138a <nvs_al_size.isra.0>
	close_ate.id = 0xFFFF;
    26f2:	f64f 71ff 	movw	r1, #65535	; 0xffff
    26f6:	f8ad 1018 	strh.w	r1, [sp, #24]
	close_ate.len = 0U;
    26fa:	2100      	movs	r1, #0
    26fc:	f8ad 101c 	strh.w	r1, [sp, #28]
	close_ate.offset = (uint16_t)((fs->ate_wra + ate_size) & ADDR_OFFS_MASK);
    2700:	1819      	adds	r1, r3, r0
    2702:	f8ad 101a 	strh.w	r1, [sp, #26]
	fs->ate_wra += (fs->sector_size - ate_size);
    2706:	89a1      	ldrh	r1, [r4, #12]
	fs->ate_wra &= ADDR_SECT_MASK;
    2708:	ea03 030b 	and.w	r3, r3, fp
	fs->ate_wra += (fs->sector_size - ate_size);
    270c:	440b      	add	r3, r1
    270e:	1a18      	subs	r0, r3, r0
    2710:	6060      	str	r0, [r4, #4]
	nvs_ate_crc8_update(&close_ate);
    2712:	a806      	add	r0, sp, #24
    2714:	f00e fe30 	bl	11378 <nvs_ate_crc8_update>
	rc = nvs_flash_ate_wrt(fs, &close_ate);
    2718:	a906      	add	r1, sp, #24
    271a:	4620      	mov	r0, r4
    271c:	f00e ff0a 	bl	11534 <nvs_flash_ate_wrt>
	nvs_sector_advance(fs, &fs->ate_wra);
    2720:	89e0      	ldrh	r0, [r4, #14]
    2722:	1d21      	adds	r1, r4, #4
    2724:	f00e fe3b 	bl	1139e <nvs_sector_advance.isra.0>
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
    2728:	6863      	ldr	r3, [r4, #4]
		rc = nvs_gc(fs);
    272a:	4620      	mov	r0, r4
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
    272c:	ea03 030b 	and.w	r3, r3, fp
    2730:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
    2732:	f7ff fd0d 	bl	2150 <nvs_gc>
		if (rc) {
    2736:	4603      	mov	r3, r0
    2738:	2800      	cmp	r0, #0
    273a:	d1cb      	bne.n	26d4 <nvs_write+0x138>
		gc_count++;
    273c:	9a01      	ldr	r2, [sp, #4]
    273e:	3201      	adds	r2, #1
		if (gc_count == fs->sector_count) {
    2740:	e79b      	b.n	267a <nvs_write+0xde>
			rc = -ENOSPC;
    2742:	f06f 031b 	mvn.w	r3, #27
    2746:	e7c5      	b.n	26d4 <nvs_write+0x138>
		return -EINVAL;
    2748:	f06f 0515 	mvn.w	r5, #21
    274c:	e73b      	b.n	25c6 <nvs_write+0x2a>
			if (rc) {
    274e:	462b      	mov	r3, r5
    2750:	e7c0      	b.n	26d4 <nvs_write+0x138>
    2752:	bf00      	nop
    2754:	00015a00 	.word	0x00015a00
    2758:	00015a88 	.word	0x00015a88
    275c:	000167d9 	.word	0x000167d9
    2760:	ffff0000 	.word	0xffff0000

00002764 <nvs_read_hist>:
	return nvs_write(fs, id, NULL, 0);
}

ssize_t nvs_read_hist(struct nvs_fs *fs, uint16_t id, void *data, size_t len,
		      uint16_t cnt)
{
    2764:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    2768:	461e      	mov	r6, r3
	uint32_t wlk_addr, rd_addr;
	uint16_t cnt_his;
	struct nvs_ate wlk_ate;
	size_t ate_size;

	if (!fs->ready) {
    276a:	7c03      	ldrb	r3, [r0, #16]
{
    276c:	4604      	mov	r4, r0
    276e:	460f      	mov	r7, r1
    2770:	4690      	mov	r8, r2
    2772:	f8bd 9030 	ldrh.w	r9, [sp, #48]	; 0x30
	if (!fs->ready) {
    2776:	b973      	cbnz	r3, 2796 <nvs_read_hist+0x32>
    2778:	4b2b      	ldr	r3, [pc, #172]	; (2828 <nvs_read_hist+0xc4>)
    277a:	492c      	ldr	r1, [pc, #176]	; (282c <nvs_read_hist+0xc8>)
		LOG_ERR("NVS not initialized");
    277c:	482c      	ldr	r0, [pc, #176]	; (2830 <nvs_read_hist+0xcc>)
    277e:	1ac9      	subs	r1, r1, r3
    2780:	08c9      	lsrs	r1, r1, #3
    2782:	0189      	lsls	r1, r1, #6
    2784:	f041 0101 	orr.w	r1, r1, #1
    2788:	f00e fa94 	bl	10cb4 <log_0>
		return -EACCES;
    278c:	f06f 000c 	mvn.w	r0, #12

	return wlk_ate.len;

err:
	return rc;
}
    2790:	b004      	add	sp, #16
    2792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    2796:	2108      	movs	r1, #8
    2798:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    279a:	f00e fdf6 	bl	1138a <nvs_al_size.isra.0>
	if (len > (fs->sector_size - 2 * ate_size)) {
    279e:	89a3      	ldrh	r3, [r4, #12]
    27a0:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
    27a4:	42b3      	cmp	r3, r6
    27a6:	d33b      	bcc.n	2820 <nvs_read_hist+0xbc>
	cnt_his = 0U;
    27a8:	f04f 0a00 	mov.w	sl, #0
	wlk_addr = fs->ate_wra;
    27ac:	6863      	ldr	r3, [r4, #4]
    27ae:	9301      	str	r3, [sp, #4]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    27b0:	4620      	mov	r0, r4
    27b2:	aa02      	add	r2, sp, #8
    27b4:	a901      	add	r1, sp, #4
		rd_addr = wlk_addr;
    27b6:	9d01      	ldr	r5, [sp, #4]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    27b8:	f00e fe24 	bl	11404 <nvs_prev_ate>
		if (rc) {
    27bc:	2800      	cmp	r0, #0
    27be:	d1e7      	bne.n	2790 <nvs_read_hist+0x2c>
		if ((wlk_ate.id == id) &&  (!nvs_ate_crc8_check(&wlk_ate))) {
    27c0:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    27c4:	42bb      	cmp	r3, r7
    27c6:	d107      	bne.n	27d8 <nvs_read_hist+0x74>
    27c8:	a802      	add	r0, sp, #8
    27ca:	f00e fdc9 	bl	11360 <nvs_ate_crc8_check>
    27ce:	b918      	cbnz	r0, 27d8 <nvs_read_hist+0x74>
			cnt_his++;
    27d0:	f10a 0a01 	add.w	sl, sl, #1
    27d4:	fa1f fa8a 	uxth.w	sl, sl
		if (wlk_addr == fs->ate_wra) {
    27d8:	6862      	ldr	r2, [r4, #4]
    27da:	9b01      	ldr	r3, [sp, #4]
    27dc:	429a      	cmp	r2, r3
    27de:	d018      	beq.n	2812 <nvs_read_hist+0xae>
	while (cnt_his <= cnt) {
    27e0:	45ca      	cmp	sl, r9
    27e2:	d9e5      	bls.n	27b0 <nvs_read_hist+0x4c>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
    27e4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
    27e8:	b1bb      	cbz	r3, 281a <nvs_read_hist+0xb6>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
    27ea:	45ca      	cmp	sl, r9
    27ec:	d315      	bcc.n	281a <nvs_read_hist+0xb6>
	rd_addr += wlk_ate.offset;
    27ee:	f8bd 100a 	ldrh.w	r1, [sp, #10]
	rd_addr &= ADDR_SECT_MASK;
    27f2:	0c2d      	lsrs	r5, r5, #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
    27f4:	42b3      	cmp	r3, r6
	rd_addr &= ADDR_SECT_MASK;
    27f6:	ea4f 4505 	mov.w	r5, r5, lsl #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
    27fa:	bf28      	it	cs
    27fc:	4633      	movcs	r3, r6
    27fe:	4642      	mov	r2, r8
    2800:	4620      	mov	r0, r4
    2802:	4429      	add	r1, r5
    2804:	f00e fd4f 	bl	112a6 <nvs_flash_rd>
	if (rc) {
    2808:	2800      	cmp	r0, #0
    280a:	d1c1      	bne.n	2790 <nvs_read_hist+0x2c>
	return wlk_ate.len;
    280c:	f8bd 000c 	ldrh.w	r0, [sp, #12]
    2810:	e7be      	b.n	2790 <nvs_read_hist+0x2c>
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
    2812:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    2816:	42bb      	cmp	r3, r7
    2818:	d0e4      	beq.n	27e4 <nvs_read_hist+0x80>
		return -ENOENT;
    281a:	f06f 0001 	mvn.w	r0, #1
    281e:	e7b7      	b.n	2790 <nvs_read_hist+0x2c>
		return -EINVAL;
    2820:	f06f 0015 	mvn.w	r0, #21
    2824:	e7b4      	b.n	2790 <nvs_read_hist+0x2c>
    2826:	bf00      	nop
    2828:	00015a00 	.word	0x00015a00
    282c:	00015a88 	.word	0x00015a88
    2830:	000167d9 	.word	0x000167d9

00002834 <virtio_set_status>:
	return *(volatile uint8_t *)addr;
}

static ALWAYS_INLINE void sys_write8(uint8_t data, mem_addr_t addr)
{
	*(volatile uint8_t *)addr = data;
    2834:	4b01      	ldr	r3, [pc, #4]	; (283c <virtio_set_status+0x8>)
    2836:	7019      	strb	r1, [r3, #0]
}

static void virtio_set_status(struct virtio_device *vdev, unsigned char status)
{
	sys_write8(status, VDEV_STATUS_ADDR);
}
    2838:	4770      	bx	lr
    283a:	bf00      	nop
    283c:	20070000 	.word	0x20070000

00002840 <init_status_flag>:
    2840:	2000      	movs	r0, #0
    2842:	4b01      	ldr	r3, [pc, #4]	; (2848 <init_status_flag+0x8>)
    2844:	7018      	strb	r0, [r3, #0]
int init_status_flag(const struct device *arg)
{
	virtio_set_status(NULL, 0);

	return 0;
}
    2846:	4770      	bx	lr
    2848:	20070000 	.word	0x20070000

0000284c <ipm_callback_process>:
	virtqueue_notification(vq[VIRTQUEUE_ID]);
    284c:	4b01      	ldr	r3, [pc, #4]	; (2854 <ipm_callback_process+0x8>)
    284e:	6818      	ldr	r0, [r3, #0]
    2850:	f012 b896 	b.w	14980 <virtqueue_notification>
    2854:	20001200 	.word	0x20001200

00002858 <virtio_notify>:
	status = ipm_send(ipm_tx_handle, 0, 0, NULL, 0);
    2858:	4b0d      	ldr	r3, [pc, #52]	; (2890 <virtio_notify+0x38>)
{
    285a:	b513      	push	{r0, r1, r4, lr}
	status = ipm_send(ipm_tx_handle, 0, 0, NULL, 0);
    285c:	6818      	ldr	r0, [r3, #0]
				  const void *data, int size)
{
	const struct ipm_driver_api *api =
		(const struct ipm_driver_api *)ipmdev->api;

	return api->send(ipmdev, wait, id, data, size);
    285e:	2300      	movs	r3, #0
    2860:	6882      	ldr	r2, [r0, #8]
    2862:	9300      	str	r3, [sp, #0]
    2864:	4619      	mov	r1, r3
    2866:	6814      	ldr	r4, [r2, #0]
    2868:	461a      	mov	r2, r3
    286a:	47a0      	blx	r4
	if (status != 0) {
    286c:	4601      	mov	r1, r0
    286e:	b160      	cbz	r0, 288a <virtio_notify+0x32>
    2870:	4b08      	ldr	r3, [pc, #32]	; (2894 <virtio_notify+0x3c>)
    2872:	4a09      	ldr	r2, [pc, #36]	; (2898 <virtio_notify+0x40>)
		LOG_ERR("ipm_send failed to notify: %d", status);
    2874:	4809      	ldr	r0, [pc, #36]	; (289c <virtio_notify+0x44>)
    2876:	1ad2      	subs	r2, r2, r3
    2878:	08d2      	lsrs	r2, r2, #3
    287a:	0192      	lsls	r2, r2, #6
    287c:	f042 0201 	orr.w	r2, r2, #1
}
    2880:	b002      	add	sp, #8
    2882:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		LOG_ERR("ipm_send failed to notify: %d", status);
    2886:	f00e ba22 	b.w	10cce <log_1>
}
    288a:	b002      	add	sp, #8
    288c:	bd10      	pop	{r4, pc}
    288e:	bf00      	nop
    2890:	200011f0 	.word	0x200011f0
    2894:	00015a00 	.word	0x00015a00
    2898:	00015ac8 	.word	0x00015ac8
    289c:	000168d8 	.word	0x000168d8

000028a0 <ipm_callback>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    28a0:	4907      	ldr	r1, [pc, #28]	; (28c0 <ipm_callback+0x20>)
    28a2:	e8d1 3fef 	ldaex	r3, [r1]
    28a6:	f043 0201 	orr.w	r2, r3, #1
    28aa:	e8c1 2fe0 	stlex	r0, r2, [r1]
    28ae:	2800      	cmp	r0, #0
    28b0:	d1f7      	bne.n	28a2 <ipm_callback+0x2>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    28b2:	07db      	lsls	r3, r3, #31
    28b4:	d403      	bmi.n	28be <ipm_callback+0x1e>
		k_queue_append(&work_q->queue, work);
    28b6:	4803      	ldr	r0, [pc, #12]	; (28c4 <ipm_callback+0x24>)
    28b8:	3908      	subs	r1, #8
    28ba:	f012 baea 	b.w	14e92 <k_queue_append>
}
    28be:	4770      	bx	lr
    28c0:	200011fc 	.word	0x200011fc
    28c4:	200008d0 	.word	0x200008d0

000028c8 <rpmsg_backend_init>:
{
    28c8:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
    28ca:	4b5f      	ldr	r3, [pc, #380]	; (2a48 <rpmsg_backend_init+0x180>)
{
    28cc:	b085      	sub	sp, #20
	struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
    28ce:	9302      	str	r3, [sp, #8]
    28d0:	2306      	movs	r3, #6
{
    28d2:	4606      	mov	r6, r0
	struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
    28d4:	f88d 300c 	strb.w	r3, [sp, #12]
{
    28d8:	460d      	mov	r5, r1
	k_work_q_start(&ipm_work_q, ipm_stack_area,
    28da:	f04f 33ff 	mov.w	r3, #4294967295
    28de:	f44f 6200 	mov.w	r2, #2048	; 0x800
    28e2:	495a      	ldr	r1, [pc, #360]	; (2a4c <rpmsg_backend_init+0x184>)
    28e4:	485a      	ldr	r0, [pc, #360]	; (2a50 <rpmsg_backend_init+0x188>)
    28e6:	f00d f87d 	bl	f9e4 <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
    28ea:	495a      	ldr	r1, [pc, #360]	; (2a54 <rpmsg_backend_init+0x18c>)
    28ec:	485a      	ldr	r0, [pc, #360]	; (2a58 <rpmsg_backend_init+0x190>)
    28ee:	f012 fc36 	bl	1515e <z_impl_k_thread_name_set>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    28f2:	2200      	movs	r2, #0
    28f4:	4b59      	ldr	r3, [pc, #356]	; (2a5c <rpmsg_backend_init+0x194>)
    28f6:	495a      	ldr	r1, [pc, #360]	; (2a60 <rpmsg_backend_init+0x198>)
	err = metal_init(&metal_params);
    28f8:	a802      	add	r0, sp, #8
    28fa:	e9c3 1201 	strd	r1, r2, [r3, #4]
    28fe:	601a      	str	r2, [r3, #0]
    2900:	f00b fd92 	bl	e428 <metal_init>
	if (err) {
    2904:	4604      	mov	r4, r0
    2906:	b168      	cbz	r0, 2924 <rpmsg_backend_init+0x5c>
    2908:	4a56      	ldr	r2, [pc, #344]	; (2a64 <rpmsg_backend_init+0x19c>)
    290a:	4b57      	ldr	r3, [pc, #348]	; (2a68 <rpmsg_backend_init+0x1a0>)
		LOG_ERR("metal_init: failed - error code %d", err);
    290c:	4601      	mov	r1, r0
    290e:	1ad2      	subs	r2, r2, r3
    2910:	08d2      	lsrs	r2, r2, #3
    2912:	0192      	lsls	r2, r2, #6
    2914:	4855      	ldr	r0, [pc, #340]	; (2a6c <rpmsg_backend_init+0x1a4>)
    2916:	f042 0201 	orr.w	r2, r2, #1
		LOG_ERR("Couldn't register shared memory device: %d", err);
    291a:	f00e f9d8 	bl	10cce <log_1>
}
    291e:	4620      	mov	r0, r4
    2920:	b005      	add	sp, #20
    2922:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = metal_register_generic_device(&shm_device);
    2924:	4852      	ldr	r0, [pc, #328]	; (2a70 <rpmsg_backend_init+0x1a8>)
    2926:	f00b fd5f 	bl	e3e8 <metal_register_generic_device>
	if (err) {
    292a:	4604      	mov	r4, r0
    292c:	b148      	cbz	r0, 2942 <rpmsg_backend_init+0x7a>
    292e:	4a4d      	ldr	r2, [pc, #308]	; (2a64 <rpmsg_backend_init+0x19c>)
    2930:	4b4d      	ldr	r3, [pc, #308]	; (2a68 <rpmsg_backend_init+0x1a0>)
		LOG_ERR("Couldn't register shared memory device: %d", err);
    2932:	4601      	mov	r1, r0
    2934:	1ad2      	subs	r2, r2, r3
    2936:	08d2      	lsrs	r2, r2, #3
    2938:	0192      	lsls	r2, r2, #6
    293a:	484e      	ldr	r0, [pc, #312]	; (2a74 <rpmsg_backend_init+0x1ac>)
    293c:	f042 0201 	orr.w	r2, r2, #1
    2940:	e7eb      	b.n	291a <rpmsg_backend_init+0x52>
	err = metal_device_open("generic", SHM_DEVICE_NAME, &device);
    2942:	494d      	ldr	r1, [pc, #308]	; (2a78 <rpmsg_backend_init+0x1b0>)
    2944:	484d      	ldr	r0, [pc, #308]	; (2a7c <rpmsg_backend_init+0x1b4>)
    2946:	aa01      	add	r2, sp, #4
    2948:	f011 fd93 	bl	14472 <metal_device_open>
	if (err) {
    294c:	4604      	mov	r4, r0
    294e:	b148      	cbz	r0, 2964 <rpmsg_backend_init+0x9c>
    2950:	4a44      	ldr	r2, [pc, #272]	; (2a64 <rpmsg_backend_init+0x19c>)
    2952:	4b45      	ldr	r3, [pc, #276]	; (2a68 <rpmsg_backend_init+0x1a0>)
		LOG_ERR("metal_device_open failed: %d", err);
    2954:	4601      	mov	r1, r0
    2956:	1ad2      	subs	r2, r2, r3
    2958:	08d2      	lsrs	r2, r2, #3
    295a:	0192      	lsls	r2, r2, #6
    295c:	4848      	ldr	r0, [pc, #288]	; (2a80 <rpmsg_backend_init+0x1b8>)
    295e:	f042 0201 	orr.w	r2, r2, #1
    2962:	e7da      	b.n	291a <rpmsg_backend_init+0x52>
	*io = metal_device_io_region(device, 0);
    2964:	9b01      	ldr	r3, [sp, #4]
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned int index)
{
	return (index < device->num_regions
		? &device->regions[index]
		: NULL);
    2966:	689a      	ldr	r2, [r3, #8]
    2968:	b95a      	cbnz	r2, 2982 <rpmsg_backend_init+0xba>
    296a:	6030      	str	r0, [r6, #0]
    296c:	4b3e      	ldr	r3, [pc, #248]	; (2a68 <rpmsg_backend_init+0x1a0>)
    296e:	493d      	ldr	r1, [pc, #244]	; (2a64 <rpmsg_backend_init+0x19c>)
		LOG_ERR("metal_device_io_region failed to get region");
    2970:	4844      	ldr	r0, [pc, #272]	; (2a84 <rpmsg_backend_init+0x1bc>)
    2972:	1ac9      	subs	r1, r1, r3
    2974:	08c9      	lsrs	r1, r1, #3
    2976:	0189      	lsls	r1, r1, #6
    2978:	f041 0101 	orr.w	r1, r1, #1
    297c:	f00e f99a 	bl	10cb4 <log_0>
		return err;
    2980:	e7cd      	b.n	291e <rpmsg_backend_init+0x56>
    2982:	330c      	adds	r3, #12
	*io = metal_device_io_region(device, 0);
    2984:	6033      	str	r3, [r6, #0]
	if (!*io) {
    2986:	2b00      	cmp	r3, #0
    2988:	d0f0      	beq.n	296c <rpmsg_backend_init+0xa4>
    298a:	483f      	ldr	r0, [pc, #252]	; (2a88 <rpmsg_backend_init+0x1c0>)
    298c:	f00c f86a 	bl	ea64 <z_impl_device_get_binding>
	ipm_tx_handle = device_get_binding(CONFIG_RPMSG_SERVICE_IPM_TX_NAME);
    2990:	4f3e      	ldr	r7, [pc, #248]	; (2a8c <rpmsg_backend_init+0x1c4>)
    2992:	6038      	str	r0, [r7, #0]
    2994:	483e      	ldr	r0, [pc, #248]	; (2a90 <rpmsg_backend_init+0x1c8>)
    2996:	f00c f865 	bl	ea64 <z_impl_device_get_binding>
	if (!ipm_tx_handle) {
    299a:	683a      	ldr	r2, [r7, #0]
    299c:	b962      	cbnz	r2, 29b8 <rpmsg_backend_init+0xf0>
    299e:	4931      	ldr	r1, [pc, #196]	; (2a64 <rpmsg_backend_init+0x19c>)
    29a0:	4b31      	ldr	r3, [pc, #196]	; (2a68 <rpmsg_backend_init+0x1a0>)
		LOG_ERR("Could not get TX IPM device handle");
    29a2:	483c      	ldr	r0, [pc, #240]	; (2a94 <rpmsg_backend_init+0x1cc>)
    29a4:	1ac9      	subs	r1, r1, r3
    29a6:	08c9      	lsrs	r1, r1, #3
    29a8:	0189      	lsls	r1, r1, #6
    29aa:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("Could not get RX IPM device handle");
    29ae:	f00e f981 	bl	10cb4 <log_0>
		return -ENODEV;
    29b2:	f06f 0412 	mvn.w	r4, #18
    29b6:	e7b2      	b.n	291e <rpmsg_backend_init+0x56>
	if (!ipm_rx_handle) {
    29b8:	b940      	cbnz	r0, 29cc <rpmsg_backend_init+0x104>
    29ba:	492a      	ldr	r1, [pc, #168]	; (2a64 <rpmsg_backend_init+0x19c>)
    29bc:	4b2a      	ldr	r3, [pc, #168]	; (2a68 <rpmsg_backend_init+0x1a0>)
		LOG_ERR("Could not get RX IPM device handle");
    29be:	4836      	ldr	r0, [pc, #216]	; (2a98 <rpmsg_backend_init+0x1d0>)
    29c0:	1ac9      	subs	r1, r1, r3
    29c2:	08c9      	lsrs	r1, r1, #3
    29c4:	0189      	lsls	r1, r1, #6
    29c6:	f041 0101 	orr.w	r1, r1, #1
    29ca:	e7f0      	b.n	29ae <rpmsg_backend_init+0xe6>
					 ipm_callback_t cb, void *user_data)
{
	const struct ipm_driver_api *api =
		(const struct ipm_driver_api *)ipmdev->api;

	api->register_callback(ipmdev, cb, user_data);
    29cc:	6883      	ldr	r3, [r0, #8]
    29ce:	4622      	mov	r2, r4
    29d0:	685b      	ldr	r3, [r3, #4]
    29d2:	4932      	ldr	r1, [pc, #200]	; (2a9c <rpmsg_backend_init+0x1d4>)
    29d4:	4798      	blx	r3
	vq[0] = virtqueue_allocate(VRING_SIZE);
    29d6:	f00e fdce 	bl	11576 <virtqueue_allocate.constprop.0>
    29da:	4f31      	ldr	r7, [pc, #196]	; (2aa0 <rpmsg_backend_init+0x1d8>)
    29dc:	6038      	str	r0, [r7, #0]
	if (!vq[0]) {
    29de:	b960      	cbnz	r0, 29fa <rpmsg_backend_init+0x132>
    29e0:	4920      	ldr	r1, [pc, #128]	; (2a64 <rpmsg_backend_init+0x19c>)
    29e2:	4b21      	ldr	r3, [pc, #132]	; (2a68 <rpmsg_backend_init+0x1a0>)
		LOG_ERR("virtqueue_allocate failed to alloc vq[0]");
    29e4:	482f      	ldr	r0, [pc, #188]	; (2aa4 <rpmsg_backend_init+0x1dc>)
    29e6:	1ac9      	subs	r1, r1, r3
    29e8:	08c9      	lsrs	r1, r1, #3
    29ea:	0189      	lsls	r1, r1, #6
    29ec:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("virtqueue_allocate failed to alloc vq[1]");
    29f0:	f00e f960 	bl	10cb4 <log_0>
		return -ENOMEM;
    29f4:	f06f 040b 	mvn.w	r4, #11
    29f8:	e791      	b.n	291e <rpmsg_backend_init+0x56>
	vq[1] = virtqueue_allocate(VRING_SIZE);
    29fa:	f00e fdbc 	bl	11576 <virtqueue_allocate.constprop.0>
    29fe:	6078      	str	r0, [r7, #4]
	if (!vq[1]) {
    2a00:	b940      	cbnz	r0, 2a14 <rpmsg_backend_init+0x14c>
    2a02:	4918      	ldr	r1, [pc, #96]	; (2a64 <rpmsg_backend_init+0x19c>)
    2a04:	4b18      	ldr	r3, [pc, #96]	; (2a68 <rpmsg_backend_init+0x1a0>)
		LOG_ERR("virtqueue_allocate failed to alloc vq[1]");
    2a06:	4828      	ldr	r0, [pc, #160]	; (2aa8 <rpmsg_backend_init+0x1e0>)
    2a08:	1ac9      	subs	r1, r1, r3
    2a0a:	08c9      	lsrs	r1, r1, #3
    2a0c:	0189      	lsls	r1, r1, #6
    2a0e:	f041 0101 	orr.w	r1, r1, #1
    2a12:	e7ed      	b.n	29f0 <rpmsg_backend_init+0x128>
	rvrings[0].io = *io;
    2a14:	6832      	ldr	r2, [r6, #0]
    2a16:	4b25      	ldr	r3, [pc, #148]	; (2aac <rpmsg_backend_init+0x1e4>)
	rvrings[0].info.num_descs = VRING_SIZE;
    2a18:	2110      	movs	r1, #16
	rvrings[0].io = *io;
    2a1a:	615a      	str	r2, [r3, #20]
	rvrings[0].info.vaddr = (void *)VRING_TX_ADDRESS;
    2a1c:	4a24      	ldr	r2, [pc, #144]	; (2ab0 <rpmsg_backend_init+0x1e8>)
	rvrings[0].vq = vq[0];
    2a1e:	683f      	ldr	r7, [r7, #0]
	rvrings[0].info.vaddr = (void *)VRING_TX_ADDRESS;
    2a20:	605a      	str	r2, [r3, #4]
	rvrings[0].info.align = VRING_ALIGNMENT;
    2a22:	2204      	movs	r2, #4
	rvrings[1].io = *io;
    2a24:	6836      	ldr	r6, [r6, #0]
	rvrings[0].info.align = VRING_ALIGNMENT;
    2a26:	609a      	str	r2, [r3, #8]
	rvrings[1].info.align = VRING_ALIGNMENT;
    2a28:	621a      	str	r2, [r3, #32]
	vdev->vrings_num = VRING_COUNT;
    2a2a:	2202      	movs	r2, #2
	rvrings[1].io = *io;
    2a2c:	62de      	str	r6, [r3, #44]	; 0x2c
	rvrings[1].info.vaddr = (void *)VRING_RX_ADDRESS;
    2a2e:	4e21      	ldr	r6, [pc, #132]	; (2ab4 <rpmsg_backend_init+0x1ec>)
	vdev->vrings_num = VRING_COUNT;
    2a30:	62aa      	str	r2, [r5, #40]	; 0x28
	vdev->func = &dispatch;
    2a32:	4a21      	ldr	r2, [pc, #132]	; (2ab8 <rpmsg_backend_init+0x1f0>)
	rvrings[1].info.num_descs = VRING_SIZE;
    2a34:	8499      	strh	r1, [r3, #36]	; 0x24
	rvrings[1].info.vaddr = (void *)VRING_RX_ADDRESS;
    2a36:	61de      	str	r6, [r3, #28]
	rvrings[1].vq = vq[1];
    2a38:	6198      	str	r0, [r3, #24]
	rvrings[0].info.num_descs = VRING_SIZE;
    2a3a:	8199      	strh	r1, [r3, #12]
	rvrings[0].vq = vq[0];
    2a3c:	601f      	str	r7, [r3, #0]
	vdev->role = RPMSG_ROLE;
    2a3e:	61ac      	str	r4, [r5, #24]
	vdev->func = &dispatch;
    2a40:	622a      	str	r2, [r5, #32]
	vdev->vrings_info = &rvrings[0];
    2a42:	62eb      	str	r3, [r5, #44]	; 0x2c
	return 0;
    2a44:	e76b      	b.n	291e <rpmsg_backend_init+0x56>
    2a46:	bf00      	nop
    2a48:	0000e479 	.word	0x0000e479
    2a4c:	20003120 	.word	0x20003120
    2a50:	200008d0 	.word	0x200008d0
    2a54:	000168f6 	.word	0x000168f6
    2a58:	200008e8 	.word	0x200008e8
    2a5c:	200011f4 	.word	0x200011f4
    2a60:	0000284d 	.word	0x0000284d
    2a64:	00015ac8 	.word	0x00015ac8
    2a68:	00015a00 	.word	0x00015a00
    2a6c:	00016901 	.word	0x00016901
    2a70:	2000024c 	.word	0x2000024c
    2a74:	00016924 	.word	0x00016924
    2a78:	0001694f 	.word	0x0001694f
    2a7c:	00016959 	.word	0x00016959
    2a80:	00016961 	.word	0x00016961
    2a84:	0001697e 	.word	0x0001697e
    2a88:	00018ea0 	.word	0x00018ea0
    2a8c:	200011f0 	.word	0x200011f0
    2a90:	000169aa 	.word	0x000169aa
    2a94:	000169b0 	.word	0x000169b0
    2a98:	000169d3 	.word	0x000169d3
    2a9c:	000028a1 	.word	0x000028a1
    2aa0:	20001200 	.word	0x20001200
    2aa4:	000169f6 	.word	0x000169f6
    2aa8:	00016a1f 	.word	0x00016a1f
    2aac:	2000021c 	.word	0x2000021c
    2ab0:	2007fc00 	.word	0x2007fc00
    2ab4:	2007f800 	.word	0x2007f800
    2ab8:	00015d04 	.word	0x00015d04

00002abc <ns_bind_cb>:
#if MASTER

static void ns_bind_cb(struct rpmsg_device *rdev,
					const char *name,
					uint32_t dest)
{
    2abc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    2ac0:	460d      	mov	r5, r1
	int err;

	for (int i = 0; i < CONFIG_RPMSG_SERVICE_NUM_ENDPOINTS; ++i) {
		if (strcmp(name, endpoints[i].name) == 0) {
    2ac2:	4c22      	ldr	r4, [pc, #136]	; (2b4c <ns_bind_cb+0x90>)
{
    2ac4:	4606      	mov	r6, r0
		if (strcmp(name, endpoints[i].name) == 0) {
    2ac6:	6821      	ldr	r1, [r4, #0]
    2ac8:	4628      	mov	r0, r5
{
    2aca:	4617      	mov	r7, r2
		if (strcmp(name, endpoints[i].name) == 0) {
    2acc:	f00f fbfa 	bl	122c4 <strcmp>
    2ad0:	46a0      	mov	r8, r4
    2ad2:	b198      	cbz	r0, 2afc <ns_bind_cb+0x40>
    2ad4:	4628      	mov	r0, r5
    2ad6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    2ad8:	f00f fbf4 	bl	122c4 <strcmp>
    2adc:	b168      	cbz	r0, 2afa <ns_bind_cb+0x3e>

			return;
		}
	}

	LOG_ERR("Remote endpoint %s not registered locally", name);
    2ade:	4629      	mov	r1, r5
    2ae0:	4b1b      	ldr	r3, [pc, #108]	; (2b50 <ns_bind_cb+0x94>)
    2ae2:	4a1c      	ldr	r2, [pc, #112]	; (2b54 <ns_bind_cb+0x98>)
    2ae4:	481c      	ldr	r0, [pc, #112]	; (2b58 <ns_bind_cb+0x9c>)
    2ae6:	1ad2      	subs	r2, r2, r3
    2ae8:	08d2      	lsrs	r2, r2, #3
    2aea:	0192      	lsls	r2, r2, #6
    2aec:	f042 0201 	orr.w	r2, r2, #1
}
    2af0:	b004      	add	sp, #16
    2af2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	LOG_ERR("Remote endpoint %s not registered locally", name);
    2af6:	f00e b8ea 	b.w	10cce <log_1>
	for (int i = 0; i < CONFIG_RPMSG_SERVICE_NUM_ENDPOINTS; ++i) {
    2afa:	2001      	movs	r0, #1
			err = rpmsg_create_ept(&endpoints[i].ep,
    2afc:	244c      	movs	r4, #76	; 0x4c
    2afe:	4344      	muls	r4, r0
    2b00:	4b16      	ldr	r3, [pc, #88]	; (2b5c <ns_bind_cb+0xa0>)
    2b02:	f104 0008 	add.w	r0, r4, #8
    2b06:	9302      	str	r3, [sp, #8]
    2b08:	4444      	add	r4, r8
    2b0a:	6863      	ldr	r3, [r4, #4]
    2b0c:	462a      	mov	r2, r5
    2b0e:	e9cd 7300 	strd	r7, r3, [sp]
    2b12:	4631      	mov	r1, r6
    2b14:	f04f 33ff 	mov.w	r3, #4294967295
    2b18:	4440      	add	r0, r8
    2b1a:	f00b fd49 	bl	e5b0 <rpmsg_create_ept>
			if (err != 0) {
    2b1e:	4602      	mov	r2, r0
    2b20:	b168      	cbz	r0, 2b3e <ns_bind_cb+0x82>
    2b22:	490b      	ldr	r1, [pc, #44]	; (2b50 <ns_bind_cb+0x94>)
    2b24:	4b0b      	ldr	r3, [pc, #44]	; (2b54 <ns_bind_cb+0x98>)
				LOG_ERR("Creating remote endpoint %s"
    2b26:	480e      	ldr	r0, [pc, #56]	; (2b60 <ns_bind_cb+0xa4>)
    2b28:	1a5b      	subs	r3, r3, r1
    2b2a:	4629      	mov	r1, r5
    2b2c:	08db      	lsrs	r3, r3, #3
    2b2e:	019b      	lsls	r3, r3, #6
    2b30:	f043 0301 	orr.w	r3, r3, #1
}
    2b34:	b004      	add	sp, #16
    2b36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				LOG_ERR("Creating remote endpoint %s"
    2b3a:	f00e b8dc 	b.w	10cf6 <log_2>
				endpoints[i].bound = true;
    2b3e:	2301      	movs	r3, #1
    2b40:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
}
    2b44:	b004      	add	sp, #16
    2b46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2b4a:	bf00      	nop
    2b4c:	20001208 	.word	0x20001208
    2b50:	00015a00 	.word	0x00015a00
    2b54:	00015ad0 	.word	0x00015ad0
    2b58:	00016a56 	.word	0x00016a56
    2b5c:	00011591 	.word	0x00011591
    2b60:	00016a80 	.word	0x00016a80

00002b64 <rpmsg_service_init>:

#endif

static int rpmsg_service_init(const struct device *dev)
{
    2b64:	b537      	push	{r0, r1, r2, r4, r5, lr}

	(void)dev;

	LOG_DBG("RPMsg service initialization start");

	err = rpmsg_backend_init(&io, &vdev);
    2b66:	4d19      	ldr	r5, [pc, #100]	; (2bcc <rpmsg_service_init+0x68>)
    2b68:	4919      	ldr	r1, [pc, #100]	; (2bd0 <rpmsg_service_init+0x6c>)
    2b6a:	4628      	mov	r0, r5
    2b6c:	f7ff feac 	bl	28c8 <rpmsg_backend_init>
	if (err) {
    2b70:	4604      	mov	r4, r0
    2b72:	b168      	cbz	r0, 2b90 <rpmsg_service_init+0x2c>
    2b74:	4a17      	ldr	r2, [pc, #92]	; (2bd4 <rpmsg_service_init+0x70>)
    2b76:	4b18      	ldr	r3, [pc, #96]	; (2bd8 <rpmsg_service_init+0x74>)
		LOG_ERR("RPMsg backend init failed with error %d", err);
    2b78:	4601      	mov	r1, r0
    2b7a:	1ad2      	subs	r2, r2, r3
    2b7c:	08d2      	lsrs	r2, r2, #3
    2b7e:	0192      	lsls	r2, r2, #6
    2b80:	4816      	ldr	r0, [pc, #88]	; (2bdc <rpmsg_service_init+0x78>)
    2b82:	f042 0201 	orr.w	r2, r2, #1
#else
	err = rpmsg_init_vdev(&rvdev, &vdev, NULL, io, NULL);
#endif

	if (err) {
		LOG_ERR("rpmsg_init_vdev failed %d", err);
    2b86:	f00e f8a2 	bl	10cce <log_1>
#endif

	LOG_DBG("RPMsg service initialized");

	return 0;
}
    2b8a:	4620      	mov	r0, r4
    2b8c:	b003      	add	sp, #12
    2b8e:	bd30      	pop	{r4, r5, pc}
	rpmsg_virtio_init_shm_pool(&shpool, (void *)SHM_START_ADDR, SHM_SIZE);
    2b90:	4c13      	ldr	r4, [pc, #76]	; (2be0 <rpmsg_service_init+0x7c>)
    2b92:	f44f 427c 	mov.w	r2, #64512	; 0xfc00
    2b96:	4620      	mov	r0, r4
    2b98:	4912      	ldr	r1, [pc, #72]	; (2be4 <rpmsg_service_init+0x80>)
    2b9a:	f012 f868 	bl	14c6e <rpmsg_virtio_init_shm_pool>
	err = rpmsg_init_vdev(&rvdev, &vdev, ns_bind_cb, io, &shpool);
    2b9e:	9400      	str	r4, [sp, #0]
    2ba0:	682b      	ldr	r3, [r5, #0]
    2ba2:	4a11      	ldr	r2, [pc, #68]	; (2be8 <rpmsg_service_init+0x84>)
    2ba4:	490a      	ldr	r1, [pc, #40]	; (2bd0 <rpmsg_service_init+0x6c>)
    2ba6:	4811      	ldr	r0, [pc, #68]	; (2bec <rpmsg_service_init+0x88>)
    2ba8:	f00b fe3c 	bl	e824 <rpmsg_init_vdev>
	if (err) {
    2bac:	4604      	mov	r4, r0
    2bae:	b148      	cbz	r0, 2bc4 <rpmsg_service_init+0x60>
    2bb0:	4a08      	ldr	r2, [pc, #32]	; (2bd4 <rpmsg_service_init+0x70>)
    2bb2:	4b09      	ldr	r3, [pc, #36]	; (2bd8 <rpmsg_service_init+0x74>)
		LOG_ERR("rpmsg_init_vdev failed %d", err);
    2bb4:	4601      	mov	r1, r0
    2bb6:	1ad2      	subs	r2, r2, r3
    2bb8:	08d2      	lsrs	r2, r2, #3
    2bba:	0192      	lsls	r2, r2, #6
    2bbc:	480c      	ldr	r0, [pc, #48]	; (2bf0 <rpmsg_service_init+0x8c>)
    2bbe:	f042 0201 	orr.w	r2, r2, #1
    2bc2:	e7e0      	b.n	2b86 <rpmsg_service_init+0x22>
	ep_crt_started = true;
    2bc4:	2201      	movs	r2, #1
    2bc6:	4b0b      	ldr	r3, [pc, #44]	; (2bf4 <rpmsg_service_init+0x90>)
    2bc8:	701a      	strb	r2, [r3, #0]
	return 0;
    2bca:	e7de      	b.n	2b8a <rpmsg_service_init+0x26>
    2bcc:	200012a0 	.word	0x200012a0
    2bd0:	20000970 	.word	0x20000970
    2bd4:	00015ad0 	.word	0x00015ad0
    2bd8:	00015a00 	.word	0x00015a00
    2bdc:	00016ab1 	.word	0x00016ab1
    2be0:	20001334 	.word	0x20001334
    2be4:	20070400 	.word	0x20070400
    2be8:	00002abd 	.word	0x00002abd
    2bec:	200012a4 	.word	0x200012a4
    2bf0:	00016ad9 	.word	0x00016ad9
    2bf4:	20002d15 	.word	0x20002d15

00002bf8 <rpmsg_service_register_endpoint>:

int rpmsg_service_register_endpoint(const char *name, rpmsg_ept_cb cb)
{
    2bf8:	b538      	push	{r3, r4, r5, lr}
	if (ep_crt_started) {
    2bfa:	4b11      	ldr	r3, [pc, #68]	; (2c40 <rpmsg_service_register_endpoint+0x48>)
{
    2bfc:	4604      	mov	r4, r0
	if (ep_crt_started) {
    2bfe:	781b      	ldrb	r3, [r3, #0]
    2c00:	b9d3      	cbnz	r3, 2c38 <rpmsg_service_register_endpoint+0x40>
		return -EINPROGRESS;
	}

	for (int i = 0; i < CONFIG_RPMSG_SERVICE_NUM_ENDPOINTS; ++i) {
		if (!endpoints[i].name) {
    2c02:	4b10      	ldr	r3, [pc, #64]	; (2c44 <rpmsg_service_register_endpoint+0x4c>)
    2c04:	6818      	ldr	r0, [r3, #0]
    2c06:	461a      	mov	r2, r3
    2c08:	b180      	cbz	r0, 2c2c <rpmsg_service_register_endpoint+0x34>
    2c0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    2c0c:	b16b      	cbz	r3, 2c2a <rpmsg_service_register_endpoint+0x32>
    2c0e:	4b0e      	ldr	r3, [pc, #56]	; (2c48 <rpmsg_service_register_endpoint+0x50>)
    2c10:	4a0e      	ldr	r2, [pc, #56]	; (2c4c <rpmsg_service_register_endpoint+0x54>)

			return i;
		}
	}

	LOG_ERR("No free slots to register endpoint %s", name);
    2c12:	480f      	ldr	r0, [pc, #60]	; (2c50 <rpmsg_service_register_endpoint+0x58>)
    2c14:	1ad2      	subs	r2, r2, r3
    2c16:	08d2      	lsrs	r2, r2, #3
    2c18:	0192      	lsls	r2, r2, #6
    2c1a:	4621      	mov	r1, r4
    2c1c:	f042 0201 	orr.w	r2, r2, #1
    2c20:	f00e f855 	bl	10cce <log_1>

	return -ENOMEM;
    2c24:	f06f 000b 	mvn.w	r0, #11
}
    2c28:	bd38      	pop	{r3, r4, r5, pc}
	for (int i = 0; i < CONFIG_RPMSG_SERVICE_NUM_ENDPOINTS; ++i) {
    2c2a:	2001      	movs	r0, #1
			endpoints[i].name = name;
    2c2c:	234c      	movs	r3, #76	; 0x4c
    2c2e:	4343      	muls	r3, r0
    2c30:	18d5      	adds	r5, r2, r3
    2c32:	50d4      	str	r4, [r2, r3]
			endpoints[i].cb = cb;
    2c34:	6069      	str	r1, [r5, #4]
			return i;
    2c36:	e7f7      	b.n	2c28 <rpmsg_service_register_endpoint+0x30>
		return -EINPROGRESS;
    2c38:	f06f 0043 	mvn.w	r0, #67	; 0x43
    2c3c:	e7f4      	b.n	2c28 <rpmsg_service_register_endpoint+0x30>
    2c3e:	bf00      	nop
    2c40:	20002d15 	.word	0x20002d15
    2c44:	20001208 	.word	0x20001208
    2c48:	00015a00 	.word	0x00015a00
    2c4c:	00015ad0 	.word	0x00015ad0
    2c50:	00016af3 	.word	0x00016af3

00002c54 <rpmsg_service_endpoint_is_bound>:

bool rpmsg_service_endpoint_is_bound(int endpoint_id)
{
	return endpoints[endpoint_id].bound;
    2c54:	224c      	movs	r2, #76	; 0x4c
    2c56:	4b03      	ldr	r3, [pc, #12]	; (2c64 <rpmsg_service_endpoint_is_bound+0x10>)
    2c58:	fb02 3000 	mla	r0, r2, r0, r3
    2c5c:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
}
    2c60:	4770      	bx	lr
    2c62:	bf00      	nop
    2c64:	20001208 	.word	0x20001208

00002c68 <rpmsg_service_send>:

int rpmsg_service_send(int endpoint_id, const void *data, size_t len)
{
    2c68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 * Returns number of bytes it has sent or negative error value on failure.
 */
static inline int rpmsg_send(struct rpmsg_endpoint *ept, const void *data,
			     int len)
{
	return rpmsg_send_offchannel_raw(ept, ept->addr, ept->dest_addr, data,
    2c6a:	244c      	movs	r4, #76	; 0x4c
    2c6c:	460b      	mov	r3, r1
    2c6e:	2101      	movs	r1, #1
    2c70:	4344      	muls	r4, r0
    2c72:	e9cd 2100 	strd	r2, r1, [sp]
    2c76:	4d05      	ldr	r5, [pc, #20]	; (2c8c <rpmsg_service_send+0x24>)
    2c78:	1928      	adds	r0, r5, r4
	return rpmsg_send(&endpoints[endpoint_id].ep, data, len);
    2c7a:	3408      	adds	r4, #8
    2c7c:	e9d0 120b 	ldrd	r1, r2, [r0, #44]	; 0x2c
    2c80:	1928      	adds	r0, r5, r4
    2c82:	f00b fc83 	bl	e58c <rpmsg_send_offchannel_raw>
}
    2c86:	b003      	add	sp, #12
    2c88:	bd30      	pop	{r4, r5, pc}
    2c8a:	bf00      	nop
    2c8c:	20001208 	.word	0x20001208

00002c90 <get_flash_area_from_id>:
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
    2c90:	4b09      	ldr	r3, [pc, #36]	; (2cb8 <get_flash_area_from_id+0x28>)
{
    2c92:	b530      	push	{r4, r5, lr}
	for (int i = 0; i < flash_map_entries; i++) {
    2c94:	681d      	ldr	r5, [r3, #0]
		if (flash_map[i].fa_id == idx) {
    2c96:	4b09      	ldr	r3, [pc, #36]	; (2cbc <get_flash_area_from_id+0x2c>)
{
    2c98:	4602      	mov	r2, r0
		if (flash_map[i].fa_id == idx) {
    2c9a:	681c      	ldr	r4, [r3, #0]
	for (int i = 0; i < flash_map_entries; i++) {
    2c9c:	2300      	movs	r3, #0
    2c9e:	429d      	cmp	r5, r3
    2ca0:	dc01      	bgt.n	2ca6 <get_flash_area_from_id+0x16>
			return &flash_map[i];
		}
	}

	return NULL;
    2ca2:	2000      	movs	r0, #0
}
    2ca4:	bd30      	pop	{r4, r5, pc}
		if (flash_map[i].fa_id == idx) {
    2ca6:	0119      	lsls	r1, r3, #4
    2ca8:	5c61      	ldrb	r1, [r4, r1]
    2caa:	eb04 1003 	add.w	r0, r4, r3, lsl #4
    2cae:	4291      	cmp	r1, r2
    2cb0:	d0f8      	beq.n	2ca4 <get_flash_area_from_id+0x14>
	for (int i = 0; i < flash_map_entries; i++) {
    2cb2:	3301      	adds	r3, #1
    2cb4:	e7f3      	b.n	2c9e <get_flash_area_from_id+0xe>
    2cb6:	bf00      	nop
    2cb8:	00015d48 	.word	0x00015d48
    2cbc:	200002a4 	.word	0x200002a4

00002cc0 <flash_area_open>:

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
    2cc0:	4b08      	ldr	r3, [pc, #32]	; (2ce4 <flash_area_open+0x24>)
{
    2cc2:	b510      	push	{r4, lr}
	if (flash_map == NULL) {
    2cc4:	681b      	ldr	r3, [r3, #0]
{
    2cc6:	460c      	mov	r4, r1
	if (flash_map == NULL) {
    2cc8:	b12b      	cbz	r3, 2cd6 <flash_area_open+0x16>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
    2cca:	f7ff ffe1 	bl	2c90 <get_flash_area_from_id>
	if (area == NULL) {
    2cce:	b128      	cbz	r0, 2cdc <flash_area_open+0x1c>
		return -ENOENT;
	}

	*fap = area;
    2cd0:	6020      	str	r0, [r4, #0]
	return 0;
    2cd2:	2000      	movs	r0, #0
}
    2cd4:	bd10      	pop	{r4, pc}
		return -EACCES;
    2cd6:	f06f 000c 	mvn.w	r0, #12
    2cda:	e7fb      	b.n	2cd4 <flash_area_open+0x14>
		return -ENOENT;
    2cdc:	f06f 0001 	mvn.w	r0, #1
    2ce0:	e7f8      	b.n	2cd4 <flash_area_open+0x14>
    2ce2:	bf00      	nop
    2ce4:	200002a4 	.word	0x200002a4

00002ce8 <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, uint32_t *cnt, struct flash_sector *ret)
{
    2ce8:	b530      	push	{r4, r5, lr}
    2cea:	b089      	sub	sp, #36	; 0x24
    2cec:	460c      	mov	r4, r1
    2cee:	4615      	mov	r5, r2
	cb_data->area_idx = idx;
    2cf0:	9001      	str	r0, [sp, #4]
	fa = get_flash_area_from_id(idx);
    2cf2:	f7ff ffcd 	bl	2c90 <get_flash_area_from_id>
	if (fa == NULL) {
    2cf6:	b1b8      	cbz	r0, 2d28 <flash_area_get_sectors+0x40>
	cb_data->area_off = fa->fa_off;
    2cf8:	6843      	ldr	r3, [r0, #4]
	cb_data->ret_len = *cnt;
    2cfa:	6822      	ldr	r2, [r4, #0]
	cb_data->area_off = fa->fa_off;
    2cfc:	9302      	str	r3, [sp, #8]
	cb_data->area_len = fa->fa_size;
    2cfe:	6883      	ldr	r3, [r0, #8]
	flash_dev = device_get_binding(fa->fa_dev_name);
    2d00:	68c0      	ldr	r0, [r0, #12]
	cb_data->ret = ret;
    2d02:	e9cd 3503 	strd	r3, r5, [sp, #12]
	cb_data->ret_idx = 0U;
    2d06:	2300      	movs	r3, #0
	cb_data->status = 0;
    2d08:	e9cd 2306 	strd	r2, r3, [sp, #24]
	cb_data->ret_idx = 0U;
    2d0c:	9305      	str	r3, [sp, #20]
	flash_dev = device_get_binding(fa->fa_dev_name);
    2d0e:	f00e fc41 	bl	11594 <device_get_binding>
	if (flash_dev == NULL) {
    2d12:	b160      	cbz	r0, 2d2e <flash_area_get_sectors+0x46>
	flash_page_foreach(flash_dev, cb, cb_data);
    2d14:	4907      	ldr	r1, [pc, #28]	; (2d34 <flash_area_get_sectors+0x4c>)
    2d16:	aa01      	add	r2, sp, #4
    2d18:	f011 fb09 	bl	1432e <flash_page_foreach>
	if (cb_data->status == 0) {
    2d1c:	9807      	ldr	r0, [sp, #28]
    2d1e:	b908      	cbnz	r0, 2d24 <flash_area_get_sectors+0x3c>
		*cnt = cb_data->ret_idx;
    2d20:	9b05      	ldr	r3, [sp, #20]
    2d22:	6023      	str	r3, [r4, #0]
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
}
    2d24:	b009      	add	sp, #36	; 0x24
    2d26:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
    2d28:	f06f 0015 	mvn.w	r0, #21
    2d2c:	e7fa      	b.n	2d24 <flash_area_get_sectors+0x3c>
		return -ENODEV;
    2d2e:	f06f 0012 	mvn.w	r0, #18
	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
    2d32:	e7f7      	b.n	2d24 <flash_area_get_sectors+0x3c>
    2d34:	00011599 	.word	0x00011599

00002d38 <settings_save_one>:
int settings_save_one(const char *name, const void *value, size_t val_len)
{
	int rc;
	struct settings_store *cs;

	cs = settings_save_dst;
    2d38:	4b10      	ldr	r3, [pc, #64]	; (2d7c <settings_save_one+0x44>)
{
    2d3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	cs = settings_save_dst;
    2d3e:	681c      	ldr	r4, [r3, #0]
{
    2d40:	4605      	mov	r5, r0
    2d42:	460e      	mov	r6, r1
    2d44:	4617      	mov	r7, r2
	if (!cs) {
    2d46:	b1ac      	cbz	r4, 2d74 <settings_save_one+0x3c>
	return z_impl_k_mutex_lock(mutex, timeout);
    2d48:	f04f 32ff 	mov.w	r2, #4294967295
    2d4c:	f04f 33ff 	mov.w	r3, #4294967295
    2d50:	480b      	ldr	r0, [pc, #44]	; (2d80 <settings_save_one+0x48>)
    2d52:	f00c f87f 	bl	ee54 <z_impl_k_mutex_lock>
		return -ENOENT;
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	rc = cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
    2d56:	6863      	ldr	r3, [r4, #4]
    2d58:	4632      	mov	r2, r6
    2d5a:	f8d3 8008 	ldr.w	r8, [r3, #8]
    2d5e:	4629      	mov	r1, r5
    2d60:	463b      	mov	r3, r7
    2d62:	4620      	mov	r0, r4
    2d64:	47c0      	blx	r8
    2d66:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
    2d68:	4805      	ldr	r0, [pc, #20]	; (2d80 <settings_save_one+0x48>)
    2d6a:	f00c f8eb 	bl	ef44 <z_impl_k_mutex_unlock>

	k_mutex_unlock(&settings_lock);

	return rc;
}
    2d6e:	4620      	mov	r0, r4
    2d70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOENT;
    2d74:	f06f 0401 	mvn.w	r4, #1
    2d78:	e7f9      	b.n	2d6e <settings_save_one+0x36>
    2d7a:	bf00      	nop
    2d7c:	20001348 	.word	0x20001348
    2d80:	20000660 	.word	0x20000660

00002d84 <settings_src_register>:
	parent->next = child;
    2d84:	2300      	movs	r3, #0
    2d86:	6003      	str	r3, [r0, #0]
Z_GENLIST_APPEND(slist, snode)
    2d88:	4b04      	ldr	r3, [pc, #16]	; (2d9c <settings_src_register+0x18>)
    2d8a:	685a      	ldr	r2, [r3, #4]
    2d8c:	b912      	cbnz	r2, 2d94 <settings_src_register+0x10>
	list->head = node;
    2d8e:	e9c3 0000 	strd	r0, r0, [r3]
}
    2d92:	4770      	bx	lr
	parent->next = child;
    2d94:	6010      	str	r0, [r2, #0]
	list->tail = node;
    2d96:	6058      	str	r0, [r3, #4]
}
    2d98:	4770      	bx	lr
    2d9a:	bf00      	nop
    2d9c:	20001340 	.word	0x20001340

00002da0 <settings_dst_register>:
	settings_save_dst = cs;
    2da0:	4b01      	ldr	r3, [pc, #4]	; (2da8 <settings_dst_register+0x8>)
    2da2:	6018      	str	r0, [r3, #0]
}
    2da4:	4770      	bx	lr
    2da6:	bf00      	nop
    2da8:	20001348 	.word	0x20001348

00002dac <settings_load_subtree>:
	const struct settings_load_arg arg = {
    2dac:	2300      	movs	r3, #0
{
    2dae:	b530      	push	{r4, r5, lr}
    2db0:	b085      	sub	sp, #20
    2db2:	4605      	mov	r5, r0
	const struct settings_load_arg arg = {
    2db4:	e9cd 3302 	strd	r3, r3, [sp, #8]
    2db8:	9001      	str	r0, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
    2dba:	f04f 33ff 	mov.w	r3, #4294967295
    2dbe:	f04f 32ff 	mov.w	r2, #4294967295
    2dc2:	480d      	ldr	r0, [pc, #52]	; (2df8 <settings_load_subtree+0x4c>)
    2dc4:	f00c f846 	bl	ee54 <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    2dc8:	4b0c      	ldr	r3, [pc, #48]	; (2dfc <settings_load_subtree+0x50>)
    2dca:	681c      	ldr	r4, [r3, #0]
    2dcc:	2c00      	cmp	r4, #0
    2dce:	bf38      	it	cc
    2dd0:	2400      	movcc	r4, #0
    2dd2:	b13c      	cbz	r4, 2de4 <settings_load_subtree+0x38>
		cs->cs_itf->csi_load(cs, &arg);
    2dd4:	6863      	ldr	r3, [r4, #4]
    2dd6:	4620      	mov	r0, r4
    2dd8:	681b      	ldr	r3, [r3, #0]
    2dda:	a901      	add	r1, sp, #4
    2ddc:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    2dde:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    2de0:	2c00      	cmp	r4, #0
    2de2:	d1f6      	bne.n	2dd2 <settings_load_subtree+0x26>
	rc = settings_commit_subtree(subtree);
    2de4:	4628      	mov	r0, r5
    2de6:	f000 f8d7 	bl	2f98 <settings_commit_subtree>
    2dea:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
    2dec:	4802      	ldr	r0, [pc, #8]	; (2df8 <settings_load_subtree+0x4c>)
    2dee:	f00c f8a9 	bl	ef44 <z_impl_k_mutex_unlock>
}
    2df2:	4620      	mov	r0, r4
    2df4:	b005      	add	sp, #20
    2df6:	bd30      	pop	{r4, r5, pc}
    2df8:	20000660 	.word	0x20000660
    2dfc:	20001340 	.word	0x20001340

00002e00 <settings_load_subtree_direct>:
{
    2e00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct settings_load_arg arg = {
    2e02:	e9cd 0101 	strd	r0, r1, [sp, #4]
    2e06:	9203      	str	r2, [sp, #12]
	return z_impl_k_mutex_lock(mutex, timeout);
    2e08:	f04f 33ff 	mov.w	r3, #4294967295
    2e0c:	f04f 32ff 	mov.w	r2, #4294967295
    2e10:	480b      	ldr	r0, [pc, #44]	; (2e40 <settings_load_subtree_direct+0x40>)
    2e12:	f00c f81f 	bl	ee54 <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    2e16:	4b0b      	ldr	r3, [pc, #44]	; (2e44 <settings_load_subtree_direct+0x44>)
    2e18:	681c      	ldr	r4, [r3, #0]
    2e1a:	2c00      	cmp	r4, #0
    2e1c:	bf38      	it	cc
    2e1e:	2400      	movcc	r4, #0
    2e20:	b13c      	cbz	r4, 2e32 <settings_load_subtree_direct+0x32>
		cs->cs_itf->csi_load(cs, &arg);
    2e22:	6863      	ldr	r3, [r4, #4]
    2e24:	4620      	mov	r0, r4
    2e26:	681b      	ldr	r3, [r3, #0]
    2e28:	a901      	add	r1, sp, #4
    2e2a:	4798      	blx	r3
    2e2c:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    2e2e:	2c00      	cmp	r4, #0
    2e30:	d1f6      	bne.n	2e20 <settings_load_subtree_direct+0x20>
	return z_impl_k_mutex_unlock(mutex);
    2e32:	4803      	ldr	r0, [pc, #12]	; (2e40 <settings_load_subtree_direct+0x40>)
    2e34:	f00c f886 	bl	ef44 <z_impl_k_mutex_unlock>
}
    2e38:	2000      	movs	r0, #0
    2e3a:	b004      	add	sp, #16
    2e3c:	bd10      	pop	{r4, pc}
    2e3e:	bf00      	nop
    2e40:	20000660 	.word	0x20000660
    2e44:	20001340 	.word	0x20001340

00002e48 <settings_store_init>:
	list->head = NULL;
    2e48:	2200      	movs	r2, #0
    2e4a:	4b02      	ldr	r3, [pc, #8]	; (2e54 <settings_store_init+0xc>)
	list->tail = NULL;
    2e4c:	e9c3 2200 	strd	r2, r2, [r3]
}

void settings_store_init(void)
{
	sys_slist_init(&settings_load_srcs);
}
    2e50:	4770      	bx	lr
    2e52:	bf00      	nop
    2e54:	20001340 	.word	0x20001340

00002e58 <settings_init>:
	list->head = NULL;
    2e58:	2200      	movs	r2, #0
    2e5a:	4b02      	ldr	r3, [pc, #8]	; (2e64 <settings_init+0xc>)
	list->tail = NULL;
    2e5c:	e9c3 2200 	strd	r2, r2, [r3]
void settings_init(void)
{
#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	sys_slist_init(&settings_handlers);
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	settings_store_init();
    2e60:	f7ff bff2 	b.w	2e48 <settings_store_init>
    2e64:	2000134c 	.word	0x2000134c

00002e68 <settings_parse_and_lookup>:
	return rc;
}

struct settings_handler_static *settings_parse_and_lookup(const char *name,
							const char **next)
{
    2e68:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    2e6c:	4607      	mov	r7, r0
	struct settings_handler_static *bestmatch;
	const char *tmpnext;

	bestmatch = NULL;
	if (next) {
    2e6e:	460e      	mov	r6, r1
    2e70:	b109      	cbz	r1, 2e76 <settings_parse_and_lookup+0xe>
		*next = NULL;
    2e72:	2300      	movs	r3, #0
    2e74:	600b      	str	r3, [r1, #0]
    2e76:	2500      	movs	r5, #0
    2e78:	4c1d      	ldr	r4, [pc, #116]	; (2ef0 <settings_parse_and_lookup+0x88>)
	}

	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    2e7a:	f8df 807c 	ldr.w	r8, [pc, #124]	; 2ef8 <settings_parse_and_lookup+0x90>
    2e7e:	4544      	cmp	r4, r8
    2e80:	d308      	bcc.n	2e94 <settings_parse_and_lookup+0x2c>
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;

	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
    2e82:	4b1c      	ldr	r3, [pc, #112]	; (2ef4 <settings_parse_and_lookup+0x8c>)
    2e84:	681c      	ldr	r4, [r3, #0]
    2e86:	b10c      	cbz	r4, 2e8c <settings_parse_and_lookup+0x24>
    2e88:	3c14      	subs	r4, #20
    2e8a:	b9c4      	cbnz	r4, 2ebe <settings_parse_and_lookup+0x56>
			}
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	return bestmatch;
}
    2e8c:	4628      	mov	r0, r5
    2e8e:	b002      	add	sp, #8
    2e90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
    2e94:	4638      	mov	r0, r7
    2e96:	6821      	ldr	r1, [r4, #0]
    2e98:	aa01      	add	r2, sp, #4
    2e9a:	f00e fba2 	bl	115e2 <settings_name_steq>
    2e9e:	b160      	cbz	r0, 2eba <settings_parse_and_lookup+0x52>
		if (!bestmatch) {
    2ea0:	b925      	cbnz	r5, 2eac <settings_parse_and_lookup+0x44>
			if (next) {
    2ea2:	b10e      	cbz	r6, 2ea8 <settings_parse_and_lookup+0x40>
				*next = tmpnext;
    2ea4:	9b01      	ldr	r3, [sp, #4]
    2ea6:	6033      	str	r3, [r6, #0]
    2ea8:	4625      	mov	r5, r4
    2eaa:	e006      	b.n	2eba <settings_parse_and_lookup+0x52>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
    2eac:	2200      	movs	r2, #0
    2eae:	6829      	ldr	r1, [r5, #0]
    2eb0:	6820      	ldr	r0, [r4, #0]
    2eb2:	f00e fb96 	bl	115e2 <settings_name_steq>
    2eb6:	2800      	cmp	r0, #0
    2eb8:	d1f3      	bne.n	2ea2 <settings_parse_and_lookup+0x3a>
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    2eba:	3414      	adds	r4, #20
    2ebc:	e7df      	b.n	2e7e <settings_parse_and_lookup+0x16>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
    2ebe:	4638      	mov	r0, r7
    2ec0:	6821      	ldr	r1, [r4, #0]
    2ec2:	aa01      	add	r2, sp, #4
    2ec4:	f00e fb8d 	bl	115e2 <settings_name_steq>
    2ec8:	b160      	cbz	r0, 2ee4 <settings_parse_and_lookup+0x7c>
		if (!bestmatch) {
    2eca:	b925      	cbnz	r5, 2ed6 <settings_parse_and_lookup+0x6e>
			if (next) {
    2ecc:	b10e      	cbz	r6, 2ed2 <settings_parse_and_lookup+0x6a>
				*next = tmpnext;
    2ece:	9b01      	ldr	r3, [sp, #4]
    2ed0:	6033      	str	r3, [r6, #0]
    2ed2:	4625      	mov	r5, r4
    2ed4:	e006      	b.n	2ee4 <settings_parse_and_lookup+0x7c>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
    2ed6:	2200      	movs	r2, #0
    2ed8:	6829      	ldr	r1, [r5, #0]
    2eda:	6820      	ldr	r0, [r4, #0]
    2edc:	f00e fb81 	bl	115e2 <settings_name_steq>
    2ee0:	2800      	cmp	r0, #0
    2ee2:	d1f3      	bne.n	2ecc <settings_parse_and_lookup+0x64>
Z_GENLIST_PEEK_NEXT(slist, snode)
    2ee4:	f114 0f14 	cmn.w	r4, #20
    2ee8:	d0d0      	beq.n	2e8c <settings_parse_and_lookup+0x24>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    2eea:	6964      	ldr	r4, [r4, #20]
    2eec:	e7cb      	b.n	2e86 <settings_parse_and_lookup+0x1e>
    2eee:	bf00      	nop
    2ef0:	00015988 	.word	0x00015988
    2ef4:	2000134c 	.word	0x2000134c
    2ef8:	00015a00 	.word	0x00015a00

00002efc <settings_call_set_handler>:
int settings_call_set_handler(const char *name,
			      size_t len,
			      settings_read_cb read_cb,
			      void *read_cb_arg,
			      const struct settings_load_arg *load_arg)
{
    2efc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2f00:	b085      	sub	sp, #20
    2f02:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
    2f06:	4605      	mov	r5, r0
    2f08:	460c      	mov	r4, r1
    2f0a:	4616      	mov	r6, r2
    2f0c:	461f      	mov	r7, r3
	int rc;
	const char *name_key = name;
    2f0e:	9003      	str	r0, [sp, #12]

	if (load_arg && load_arg->subtree &&
    2f10:	f1b8 0f00 	cmp.w	r8, #0
    2f14:	d018      	beq.n	2f48 <settings_call_set_handler+0x4c>
    2f16:	f8d8 1000 	ldr.w	r1, [r8]
    2f1a:	b181      	cbz	r1, 2f3e <settings_call_set_handler+0x42>
	    !settings_name_steq(name, load_arg->subtree, &name_key)) {
    2f1c:	aa03      	add	r2, sp, #12
    2f1e:	f00e fb60 	bl	115e2 <settings_name_steq>
	if (load_arg && load_arg->subtree &&
    2f22:	b960      	cbnz	r0, 2f3e <settings_call_set_handler+0x42>

		if (rc != 0) {
			LOG_ERR("set-value failure. key: %s error(%d)",
				log_strdup(name), rc);
			/* Ignoring the error */
			rc = 0;
    2f24:	2000      	movs	r0, #0
    2f26:	e007      	b.n	2f38 <settings_call_set_handler+0x3c>
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
    2f28:	f8d8 3008 	ldr.w	r3, [r8, #8]
    2f2c:	4632      	mov	r2, r6
    2f2e:	9300      	str	r3, [sp, #0]
    2f30:	4621      	mov	r1, r4
    2f32:	463b      	mov	r3, r7
    2f34:	9803      	ldr	r0, [sp, #12]
    2f36:	47c8      	blx	r9
			LOG_DBG("set-value OK. key: %s",
				log_strdup(name));
		}
	}
	return rc;
}
    2f38:	b005      	add	sp, #20
    2f3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (load_arg && load_arg->cb) {
    2f3e:	f8d8 9004 	ldr.w	r9, [r8, #4]
    2f42:	f1b9 0f00 	cmp.w	r9, #0
    2f46:	d1ef      	bne.n	2f28 <settings_call_set_handler+0x2c>
		ch = settings_parse_and_lookup(name, &name_key);
    2f48:	4628      	mov	r0, r5
    2f4a:	a903      	add	r1, sp, #12
    2f4c:	f7ff ff8c 	bl	2e68 <settings_parse_and_lookup>
		if (!ch) {
    2f50:	2800      	cmp	r0, #0
    2f52:	d0e7      	beq.n	2f24 <settings_call_set_handler+0x28>
		rc = ch->h_set(name_key, len, read_cb, read_cb_arg);
    2f54:	4632      	mov	r2, r6
    2f56:	f8d0 8008 	ldr.w	r8, [r0, #8]
    2f5a:	463b      	mov	r3, r7
    2f5c:	4621      	mov	r1, r4
    2f5e:	9803      	ldr	r0, [sp, #12]
    2f60:	47c0      	blx	r8
		if (rc != 0) {
    2f62:	4606      	mov	r6, r0
    2f64:	2800      	cmp	r0, #0
    2f66:	d0dd      	beq.n	2f24 <settings_call_set_handler+0x28>
    2f68:	4b08      	ldr	r3, [pc, #32]	; (2f8c <settings_call_set_handler+0x90>)
    2f6a:	4c09      	ldr	r4, [pc, #36]	; (2f90 <settings_call_set_handler+0x94>)
			LOG_ERR("set-value failure. key: %s error(%d)",
    2f6c:	4628      	mov	r0, r5
    2f6e:	1ae4      	subs	r4, r4, r3
    2f70:	f7fe fc64 	bl	183c <log_strdup>
    2f74:	08e4      	lsrs	r4, r4, #3
    2f76:	01a4      	lsls	r4, r4, #6
    2f78:	f044 0401 	orr.w	r4, r4, #1
    2f7c:	4601      	mov	r1, r0
    2f7e:	4623      	mov	r3, r4
    2f80:	4632      	mov	r2, r6
    2f82:	4804      	ldr	r0, [pc, #16]	; (2f94 <settings_call_set_handler+0x98>)
    2f84:	f00d feb7 	bl	10cf6 <log_2>
    2f88:	e7cc      	b.n	2f24 <settings_call_set_handler+0x28>
    2f8a:	bf00      	nop
    2f8c:	00015a00 	.word	0x00015a00
    2f90:	00015ad8 	.word	0x00015ad8
    2f94:	00016b3a 	.word	0x00016b3a

00002f98 <settings_commit_subtree>:
{
	return settings_commit_subtree(NULL);
}

int settings_commit_subtree(const char *subtree)
{
    2f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2f9a:	4606      	mov	r6, r0
	int rc;
	int rc2;

	rc = 0;
    2f9c:	2500      	movs	r5, #0

	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    2f9e:	4c19      	ldr	r4, [pc, #100]	; (3004 <settings_commit_subtree+0x6c>)
    2fa0:	4f19      	ldr	r7, [pc, #100]	; (3008 <settings_commit_subtree+0x70>)
    2fa2:	42bc      	cmp	r4, r7
    2fa4:	d306      	bcc.n	2fb4 <settings_commit_subtree+0x1c>
		}
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
    2fa6:	4b19      	ldr	r3, [pc, #100]	; (300c <settings_commit_subtree+0x74>)
    2fa8:	681c      	ldr	r4, [r3, #0]
    2faa:	b10c      	cbz	r4, 2fb0 <settings_commit_subtree+0x18>
    2fac:	3c14      	subs	r4, #20
    2fae:	b99c      	cbnz	r4, 2fd8 <settings_commit_subtree+0x40>
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */

	return rc;
}
    2fb0:	4628      	mov	r0, r5
    2fb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    2fb4:	b91e      	cbnz	r6, 2fbe <settings_commit_subtree+0x26>
		if (ch->h_commit) {
    2fb6:	68e3      	ldr	r3, [r4, #12]
    2fb8:	b94b      	cbnz	r3, 2fce <settings_commit_subtree+0x36>
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    2fba:	3414      	adds	r4, #20
    2fbc:	e7f1      	b.n	2fa2 <settings_commit_subtree+0xa>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    2fbe:	2200      	movs	r2, #0
    2fc0:	4631      	mov	r1, r6
    2fc2:	6820      	ldr	r0, [r4, #0]
    2fc4:	f00e fb0d 	bl	115e2 <settings_name_steq>
    2fc8:	2800      	cmp	r0, #0
    2fca:	d1f4      	bne.n	2fb6 <settings_commit_subtree+0x1e>
    2fcc:	e7f5      	b.n	2fba <settings_commit_subtree+0x22>
			rc2 = ch->h_commit();
    2fce:	4798      	blx	r3
				rc = rc2;
    2fd0:	2d00      	cmp	r5, #0
    2fd2:	bf08      	it	eq
    2fd4:	4605      	moveq	r5, r0
    2fd6:	e7f0      	b.n	2fba <settings_commit_subtree+0x22>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    2fd8:	b936      	cbnz	r6, 2fe8 <settings_commit_subtree+0x50>
		if (ch->h_commit) {
    2fda:	68e3      	ldr	r3, [r4, #12]
    2fdc:	b963      	cbnz	r3, 2ff8 <settings_commit_subtree+0x60>
Z_GENLIST_PEEK_NEXT(slist, snode)
    2fde:	f114 0f14 	cmn.w	r4, #20
    2fe2:	d0e5      	beq.n	2fb0 <settings_commit_subtree+0x18>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    2fe4:	6964      	ldr	r4, [r4, #20]
    2fe6:	e7e0      	b.n	2faa <settings_commit_subtree+0x12>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    2fe8:	2200      	movs	r2, #0
    2fea:	4631      	mov	r1, r6
    2fec:	6820      	ldr	r0, [r4, #0]
    2fee:	f00e faf8 	bl	115e2 <settings_name_steq>
    2ff2:	2800      	cmp	r0, #0
    2ff4:	d1f1      	bne.n	2fda <settings_commit_subtree+0x42>
    2ff6:	e7f2      	b.n	2fde <settings_commit_subtree+0x46>
			rc2 = ch->h_commit();
    2ff8:	4798      	blx	r3
				rc = rc2;
    2ffa:	2d00      	cmp	r5, #0
    2ffc:	bf08      	it	eq
    2ffe:	4605      	moveq	r5, r0
    3000:	e7ed      	b.n	2fde <settings_commit_subtree+0x46>
    3002:	bf00      	nop
    3004:	00015988 	.word	0x00015988
    3008:	00015a00 	.word	0x00015a00
    300c:	2000134c 	.word	0x2000134c

00003010 <settings_subsys_init>:
void settings_init(void);

int settings_backend_init(void);

int settings_subsys_init(void)
{
    3010:	b510      	push	{r4, lr}

	int err = 0;

	if (settings_subsys_initialized) {
    3012:	4c06      	ldr	r4, [pc, #24]	; (302c <settings_subsys_init+0x1c>)
    3014:	7823      	ldrb	r3, [r4, #0]
    3016:	b93b      	cbnz	r3, 3028 <settings_subsys_init+0x18>
		return 0;
	}

	settings_init();
    3018:	f7ff ff1e 	bl	2e58 <settings_init>

	err = settings_backend_init(); /* func rises kernel panic once error */
    301c:	f000 f864 	bl	30e8 <settings_backend_init>

	if (!err) {
    3020:	b908      	cbnz	r0, 3026 <settings_subsys_init+0x16>
		settings_subsys_initialized = true;
    3022:	2301      	movs	r3, #1
    3024:	7023      	strb	r3, [r4, #0]
	}

	return err;
}
    3026:	bd10      	pop	{r4, pc}
		return 0;
    3028:	2000      	movs	r0, #0
    302a:	e7fc      	b.n	3026 <settings_subsys_init+0x16>
    302c:	20002d16 	.word	0x20002d16

00003030 <settings_nvs_load>:
	return 0;
}

static int settings_nvs_load(struct settings_store *cs,
			     const struct settings_load_arg *arg)
{
    3030:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3034:	4680      	mov	r8, r0
    3036:	4689      	mov	r9, r1
	char name[SETTINGS_MAX_NAME_LEN + SETTINGS_EXTRA_LEN + 1];
	char buf;
	ssize_t rc1, rc2;
	uint16_t name_id = NVS_NAMECNT_ID;

	name_id = cf->last_name_id + 1;
    3038:	8f04      	ldrh	r4, [r0, #56]	; 0x38
		/* Found a name, this might not include a trailing \0 */
		name[rc1] = '\0';
		read_fn_arg.fs = &cf->cf_nvs;
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;

		ret = settings_call_set_handler(
    303a:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 30e4 <settings_nvs_load+0xb4>
	name_id = cf->last_name_id + 1;
    303e:	3401      	adds	r4, #1
{
    3040:	b098      	sub	sp, #96	; 0x60
	name_id = cf->last_name_id + 1;
    3042:	b2a4      	uxth	r4, r4
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
    3044:	f100 0608 	add.w	r6, r0, #8
		name_id--;
    3048:	1e65      	subs	r5, r4, #1
    304a:	b2ad      	uxth	r5, r5
		if (name_id == NVS_NAMECNT_ID) {
    304c:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
    3050:	d045      	beq.n	30de <settings_nvs_load+0xae>
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
    3052:	234a      	movs	r3, #74	; 0x4a
    3054:	4629      	mov	r1, r5
    3056:	aa05      	add	r2, sp, #20
    3058:	4630      	mov	r0, r6
    305a:	f00e fa80 	bl	1155e <nvs_read>
    305e:	f504 547f 	add.w	r4, r4, #16320	; 0x3fc0
    3062:	343f      	adds	r4, #63	; 0x3f
    3064:	b2a4      	uxth	r4, r4
    3066:	4607      	mov	r7, r0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
    3068:	4621      	mov	r1, r4
    306a:	2301      	movs	r3, #1
    306c:	4630      	mov	r0, r6
    306e:	f10d 020b 	add.w	r2, sp, #11
    3072:	f00e fa74 	bl	1155e <nvs_read>
		if ((rc1 <= 0) && (rc2 <= 0)) {
    3076:	2f00      	cmp	r7, #0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
    3078:	4601      	mov	r1, r0
		if ((rc1 <= 0) && (rc2 <= 0)) {
    307a:	dc03      	bgt.n	3084 <settings_nvs_load+0x54>
    307c:	2800      	cmp	r0, #0
    307e:	dc03      	bgt.n	3088 <settings_nvs_load+0x58>
{
    3080:	462c      	mov	r4, r5
    3082:	e7e1      	b.n	3048 <settings_nvs_load+0x18>
		if ((rc1 <= 0) || (rc2 <= 0)) {
    3084:	2800      	cmp	r0, #0
    3086:	dc16      	bgt.n	30b6 <settings_nvs_load+0x86>
			if (name_id == cf->last_name_id) {
    3088:	f8b8 3038 	ldrh.w	r3, [r8, #56]	; 0x38
    308c:	42ab      	cmp	r3, r5
    308e:	d109      	bne.n	30a4 <settings_nvs_load+0x74>
				cf->last_name_id--;
    3090:	4642      	mov	r2, r8
    3092:	1e6b      	subs	r3, r5, #1
    3094:	f822 3f38 	strh.w	r3, [r2, #56]!
				nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
    3098:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    309c:	2302      	movs	r3, #2
    309e:	4630      	mov	r0, r6
    30a0:	f7ff fa7c 	bl	259c <nvs_write>
			nvs_delete(&cf->cf_nvs, name_id);
    30a4:	4629      	mov	r1, r5
    30a6:	4630      	mov	r0, r6
    30a8:	f00e fa55 	bl	11556 <nvs_delete>
			nvs_delete(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET);
    30ac:	4621      	mov	r1, r4
    30ae:	4630      	mov	r0, r6
    30b0:	f00e fa51 	bl	11556 <nvs_delete>
			continue;
    30b4:	e7e4      	b.n	3080 <settings_nvs_load+0x50>
		name[rc1] = '\0';
    30b6:	ab18      	add	r3, sp, #96	; 0x60
    30b8:	441f      	add	r7, r3
    30ba:	2300      	movs	r3, #0
		ret = settings_call_set_handler(
    30bc:	4652      	mov	r2, sl
		name[rc1] = '\0';
    30be:	f807 3c4c 	strb.w	r3, [r7, #-76]
		ret = settings_call_set_handler(
    30c2:	a805      	add	r0, sp, #20
    30c4:	f8cd 9000 	str.w	r9, [sp]
    30c8:	ab03      	add	r3, sp, #12
		read_fn_arg.fs = &cf->cf_nvs;
    30ca:	9603      	str	r6, [sp, #12]
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;
    30cc:	f8ad 4010 	strh.w	r4, [sp, #16]
		ret = settings_call_set_handler(
    30d0:	f7ff ff14 	bl	2efc <settings_call_set_handler>
			name, rc2,
			settings_nvs_read_fn, &read_fn_arg,
			(void *)arg);
		if (ret) {
    30d4:	2800      	cmp	r0, #0
    30d6:	d0d3      	beq.n	3080 <settings_nvs_load+0x50>
			break;
		}
	}
	return ret;
}
    30d8:	b018      	add	sp, #96	; 0x60
    30da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    30de:	2000      	movs	r0, #0
	return ret;
    30e0:	e7fa      	b.n	30d8 <settings_nvs_load+0xa8>
    30e2:	bf00      	nop
    30e4:	00011655 	.word	0x00011655

000030e8 <settings_backend_init>:
	LOG_DBG("Initialized");
	return 0;
}

int settings_backend_init(void)
{
    30e8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int rc;
	uint16_t cnt = 0;
	size_t nvs_sector_size, nvs_size = 0;
	const struct flash_area *fa;
	struct flash_sector hw_flash_sector;
	uint32_t sector_cnt = 1;
    30ea:	2501      	movs	r5, #1

	rc = flash_area_open(FLASH_AREA_ID(storage), &fa);
    30ec:	4669      	mov	r1, sp
    30ee:	4628      	mov	r0, r5
	uint32_t sector_cnt = 1;
    30f0:	9501      	str	r5, [sp, #4]
	rc = flash_area_open(FLASH_AREA_ID(storage), &fa);
    30f2:	f7ff fde5 	bl	2cc0 <flash_area_open>
	if (rc) {
    30f6:	4604      	mov	r4, r0
    30f8:	2800      	cmp	r0, #0
    30fa:	d136      	bne.n	316a <settings_backend_init+0x82>
		return rc;
	}

	rc = flash_area_get_sectors(FLASH_AREA_ID(storage), &sector_cnt,
    30fc:	4628      	mov	r0, r5
    30fe:	aa02      	add	r2, sp, #8
    3100:	a901      	add	r1, sp, #4
    3102:	f7ff fdf1 	bl	2ce8 <flash_area_get_sectors>
				    &hw_flash_sector);
	if (rc == -ENODEV) {
    3106:	f110 0f13 	cmn.w	r0, #19
	rc = flash_area_get_sectors(FLASH_AREA_ID(storage), &sector_cnt,
    310a:	4604      	mov	r4, r0
	if (rc == -ENODEV) {
    310c:	d02d      	beq.n	316a <settings_backend_init+0x82>
		return rc;
	} else if (rc != 0 && rc != -ENOMEM) {
    310e:	b138      	cbz	r0, 3120 <settings_backend_init+0x38>
    3110:	340c      	adds	r4, #12
    3112:	d005      	beq.n	3120 <settings_backend_init+0x38>
		k_panic();
    3114:	4040      	eors	r0, r0
    3116:	f380 8811 	msr	BASEPRI, r0
    311a:	f04f 0004 	mov.w	r0, #4
    311e:	df02      	svc	2
	}

	nvs_sector_size = CONFIG_SETTINGS_NVS_SECTOR_SIZE_MULT *
    3120:	9903      	ldr	r1, [sp, #12]
			  hw_flash_sector.fs_size;

	if (nvs_sector_size > UINT16_MAX) {
    3122:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
    3126:	d223      	bcs.n	3170 <settings_backend_init+0x88>
		return -EDOM;
	}

	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
		nvs_size += nvs_sector_size;
		if (nvs_size > fa->fa_size) {
    3128:	2300      	movs	r3, #0
	size_t nvs_sector_size, nvs_size = 0;
    312a:	4618      	mov	r0, r3
		if (nvs_size > fa->fa_size) {
    312c:	9a00      	ldr	r2, [sp, #0]
    312e:	6895      	ldr	r5, [r2, #8]
		nvs_size += nvs_sector_size;
    3130:	4408      	add	r0, r1
		if (nvs_size > fa->fa_size) {
    3132:	4285      	cmp	r5, r0
    3134:	b29c      	uxth	r4, r3
    3136:	d303      	bcc.n	3140 <settings_backend_init+0x58>
	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
    3138:	3301      	adds	r3, #1
    313a:	2b08      	cmp	r3, #8
    313c:	d1f8      	bne.n	3130 <settings_backend_init+0x48>
    313e:	461c      	mov	r4, r3
		}
		cnt++;
	}

	/* define the nvs file system using the page_info */
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
    3140:	4d0d      	ldr	r5, [pc, #52]	; (3178 <settings_backend_init+0x90>)
	default_settings_nvs.cf_nvs.sector_count = cnt;
	default_settings_nvs.cf_nvs.offset = fa->fa_off;
    3142:	6853      	ldr	r3, [r2, #4]
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;

	rc = settings_nvs_backend_init(&default_settings_nvs);
    3144:	4628      	mov	r0, r5
	default_settings_nvs.cf_nvs.offset = fa->fa_off;
    3146:	60ab      	str	r3, [r5, #8]
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;
    3148:	68d3      	ldr	r3, [r2, #12]
	default_settings_nvs.cf_nvs.sector_count = cnt;
    314a:	82ec      	strh	r4, [r5, #22]
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
    314c:	82a9      	strh	r1, [r5, #20]
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;
    314e:	63eb      	str	r3, [r5, #60]	; 0x3c
	rc = settings_nvs_backend_init(&default_settings_nvs);
    3150:	f00e fb17 	bl	11782 <settings_nvs_backend_init>
	if (rc) {
    3154:	4604      	mov	r4, r0
    3156:	b940      	cbnz	r0, 316a <settings_backend_init+0x82>
	cf->cf_store.cs_itf = &settings_nvs_itf;
    3158:	4e08      	ldr	r6, [pc, #32]	; (317c <settings_backend_init+0x94>)
	settings_src_register(&cf->cf_store);
    315a:	4628      	mov	r0, r5
	cf->cf_store.cs_itf = &settings_nvs_itf;
    315c:	606e      	str	r6, [r5, #4]
	settings_src_register(&cf->cf_store);
    315e:	f7ff fe11 	bl	2d84 <settings_src_register>
	settings_dst_register(&cf->cf_store);
    3162:	4628      	mov	r0, r5
	cf->cf_store.cs_itf = &settings_nvs_itf;
    3164:	606e      	str	r6, [r5, #4]
	settings_dst_register(&cf->cf_store);
    3166:	f7ff fe1b 	bl	2da0 <settings_dst_register>
	}

	rc = settings_nvs_dst(&default_settings_nvs);

	return rc;
}
    316a:	4620      	mov	r0, r4
    316c:	b004      	add	sp, #16
    316e:	bd70      	pop	{r4, r5, r6, pc}
		return -EDOM;
    3170:	f06f 0424 	mvn.w	r4, #36	; 0x24
    3174:	e7f9      	b.n	316a <settings_backend_init+0x82>
    3176:	bf00      	nop
    3178:	20001354 	.word	0x20001354
    317c:	200002a8 	.word	0x200002a8

00003180 <sys_reboot>:

extern void sys_arch_reboot(int type);
extern void sys_clock_disable(void);

void sys_reboot(int type)
{
    3180:	4604      	mov	r4, r0
    3182:	b508      	push	{r3, lr}
	__asm__ volatile(
    3184:	f04f 0220 	mov.w	r2, #32
    3188:	f3ef 8311 	mrs	r3, BASEPRI
    318c:	f382 8811 	msr	BASEPRI, r2
    3190:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
#ifdef CONFIG_SYS_CLOCK_EXISTS
	sys_clock_disable();
    3194:	f00e fbc4 	bl	11920 <sys_clock_disable>
#endif

	sys_arch_reboot(type);
    3198:	4620      	mov	r0, r4
    319a:	f001 fac3 	bl	4724 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    319e:	4803      	ldr	r0, [pc, #12]	; (31ac <sys_reboot+0x2c>)
    31a0:	f00d f961 	bl	10466 <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    31a4:	f000 ffe2 	bl	416c <arch_cpu_idle>
    31a8:	e7fc      	b.n	31a4 <sys_reboot+0x24>
    31aa:	bf00      	nop
    31ac:	00016b65 	.word	0x00016b65

000031b0 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    31b0:	b510      	push	{r4, lr}
    31b2:	4807      	ldr	r0, [pc, #28]	; (31d0 <uart_console_init+0x20>)
    31b4:	f00b fc56 	bl	ea64 <z_impl_device_get_binding>
	__stdout_hook_install(console_out);
    31b8:	4c06      	ldr	r4, [pc, #24]	; (31d4 <uart_console_init+0x24>)

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    31ba:	4b07      	ldr	r3, [pc, #28]	; (31d8 <uart_console_init+0x28>)
    31bc:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
    31be:	4620      	mov	r0, r4
    31c0:	f001 fc90 	bl	4ae4 <__stdout_hook_install>
	__printk_hook_install(console_out);
    31c4:	4620      	mov	r0, r4
    31c6:	f7fd fd13 	bl	bf0 <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
    31ca:	2000      	movs	r0, #0
    31cc:	bd10      	pop	{r4, pc}
    31ce:	bf00      	nop
    31d0:	00016799 	.word	0x00016799
    31d4:	000031dd 	.word	0x000031dd
    31d8:	20001394 	.word	0x20001394

000031dc <console_out>:
	if ('\n' == c) {
    31dc:	280a      	cmp	r0, #10
{
    31de:	b538      	push	{r3, r4, r5, lr}
    31e0:	4604      	mov	r4, r0
    31e2:	4d07      	ldr	r5, [pc, #28]	; (3200 <console_out+0x24>)
	if ('\n' == c) {
    31e4:	d104      	bne.n	31f0 <console_out+0x14>
    31e6:	6828      	ldr	r0, [r5, #0]
    31e8:	6883      	ldr	r3, [r0, #8]
    31ea:	210d      	movs	r1, #13
    31ec:	685b      	ldr	r3, [r3, #4]
    31ee:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    31f0:	6828      	ldr	r0, [r5, #0]
    31f2:	6883      	ldr	r3, [r0, #8]
    31f4:	b2e1      	uxtb	r1, r4
    31f6:	685b      	ldr	r3, [r3, #4]
    31f8:	4798      	blx	r3
}
    31fa:	4620      	mov	r0, r4
    31fc:	bd38      	pop	{r3, r4, r5, pc}
    31fe:	bf00      	nop
    3200:	20001394 	.word	0x20001394

00003204 <onoff_stop>:
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    3204:	b570      	push	{r4, r5, r6, lr}
    3206:	4604      	mov	r4, r0
	err = set_off_state(&subdata->flags, ctx);
    3208:	250c      	movs	r5, #12
	size_t offset = (size_t)(mgr - data->mgr);
    320a:	480d      	ldr	r0, [pc, #52]	; (3240 <onoff_stop+0x3c>)
{
    320c:	460e      	mov	r6, r1
	size_t offset = (size_t)(mgr - data->mgr);
    320e:	1a23      	subs	r3, r4, r0
    3210:	109a      	asrs	r2, r3, #2
    3212:	4b0c      	ldr	r3, [pc, #48]	; (3244 <onoff_stop+0x40>)
	err = set_off_state(&subdata->flags, ctx);
    3214:	2140      	movs	r1, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
    3216:	4353      	muls	r3, r2
    3218:	b2db      	uxtb	r3, r3
	err = set_off_state(&subdata->flags, ctx);
    321a:	435d      	muls	r5, r3
    321c:	f105 0378 	add.w	r3, r5, #120	; 0x78
    3220:	4418      	add	r0, r3
    3222:	f00e fad3 	bl	117cc <set_off_state>
	if (err < 0) {
    3226:	1e01      	subs	r1, r0, #0
    3228:	db04      	blt.n	3234 <onoff_stop+0x30>
	get_sub_config(dev, type)->stop();
    322a:	4b07      	ldr	r3, [pc, #28]	; (3248 <onoff_stop+0x44>)
    322c:	442b      	add	r3, r5
    322e:	685b      	ldr	r3, [r3, #4]
    3230:	4798      	blx	r3
	return 0;
    3232:	2100      	movs	r1, #0
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
	notify(mgr, res);
    3234:	4620      	mov	r0, r4
    3236:	4633      	mov	r3, r6
}
    3238:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    323c:	4718      	bx	r3
    323e:	bf00      	nop
    3240:	200013a8 	.word	0x200013a8
    3244:	b6db6db7 	.word	0xb6db6db7
    3248:	00015d60 	.word	0x00015d60

0000324c <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    324c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    3250:	4c0f      	ldr	r4, [pc, #60]	; (3290 <onoff_start+0x44>)
    3252:	4d10      	ldr	r5, [pc, #64]	; (3294 <onoff_start+0x48>)
    3254:	1b03      	subs	r3, r0, r4
    3256:	109b      	asrs	r3, r3, #2
    3258:	435d      	muls	r5, r3
    325a:	b2eb      	uxtb	r3, r5
	err = set_starting_state(&subdata->flags, ctx);
    325c:	250c      	movs	r5, #12
    325e:	435d      	muls	r5, r3
{
    3260:	4607      	mov	r7, r0
	err = set_starting_state(&subdata->flags, ctx);
    3262:	f105 0078 	add.w	r0, r5, #120	; 0x78
{
    3266:	460e      	mov	r6, r1
	err = set_starting_state(&subdata->flags, ctx);
    3268:	4420      	add	r0, r4
    326a:	2140      	movs	r1, #64	; 0x40
    326c:	f00e fac7 	bl	117fe <set_starting_state>
	if (err < 0) {
    3270:	1e01      	subs	r1, r0, #0
    3272:	db08      	blt.n	3286 <onoff_start+0x3a>
	subdata->cb = cb;
    3274:	4b08      	ldr	r3, [pc, #32]	; (3298 <onoff_start+0x4c>)
    3276:	442c      	add	r4, r5
	subdata->user_data = user_data;
    3278:	e9c4 361c 	strd	r3, r6, [r4, #112]	; 0x70
	 get_sub_config(dev, type)->start();
    327c:	4b07      	ldr	r3, [pc, #28]	; (329c <onoff_start+0x50>)
    327e:	595b      	ldr	r3, [r3, r5]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
    3280:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
    3284:	4718      	bx	r3
		notify(mgr, err);
    3286:	4638      	mov	r0, r7
    3288:	4633      	mov	r3, r6
}
    328a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
    328e:	4718      	bx	r3
    3290:	200013a8 	.word	0x200013a8
    3294:	b6db6db7 	.word	0xb6db6db7
    3298:	00011861 	.word	0x00011861
    329c:	00015d60 	.word	0x00015d60

000032a0 <clk_init>:
		break;
	}
}

static int clk_init(const struct device *dev)
{
    32a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    32a4:	2200      	movs	r2, #0
    32a6:	2101      	movs	r1, #1
{
    32a8:	4606      	mov	r6, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    32aa:	2005      	movs	r0, #5
    32ac:	f000 ff0c 	bl	40c8 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    32b0:	2005      	movs	r0, #5
    32b2:	f000 feeb 	bl	408c <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    32b6:	4811      	ldr	r0, [pc, #68]	; (32fc <clk_init+0x5c>)
    32b8:	f00a fde2 	bl	de80 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    32bc:	4b10      	ldr	r3, [pc, #64]	; (3300 <clk_init+0x60>)
    32be:	4298      	cmp	r0, r3
    32c0:	d119      	bne.n	32f6 <clk_init+0x56>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    32c2:	f011 f8bd 	bl	14440 <nrfx_clock_enable>
    32c6:	2400      	movs	r4, #0
	return &data->mgr[type];
    32c8:	f04f 081c 	mov.w	r8, #28
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    32cc:	270c      	movs	r7, #12
		err = onoff_manager_init(get_onoff_manager(dev, i),
    32ce:	f8df 9034 	ldr.w	r9, [pc, #52]	; 3304 <clk_init+0x64>
						get_sub_data(dev, i);
    32d2:	68f5      	ldr	r5, [r6, #12]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    32d4:	4649      	mov	r1, r9
    32d6:	fb08 5004 	mla	r0, r8, r4, r5
    32da:	f00d f92d 	bl	10538 <onoff_manager_init>
		if (err < 0) {
    32de:	2800      	cmp	r0, #0
    32e0:	db07      	blt.n	32f2 <clk_init+0x52>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    32e2:	2301      	movs	r3, #1
    32e4:	fb07 5504 	mla	r5, r7, r4, r5
    32e8:	441c      	add	r4, r3
	for (enum clock_control_nrf_type i = 0;
    32ea:	2c04      	cmp	r4, #4
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    32ec:	67ab      	str	r3, [r5, #120]	; 0x78
	for (enum clock_control_nrf_type i = 0;
    32ee:	d1f0      	bne.n	32d2 <clk_init+0x32>
	}

	return 0;
    32f0:	2000      	movs	r0, #0
}
    32f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
    32f6:	f06f 0004 	mvn.w	r0, #4
    32fa:	e7fa      	b.n	32f2 <clk_init+0x52>
    32fc:	0000333d 	.word	0x0000333d
    3300:	0bad0000 	.word	0x0bad0000
    3304:	00015d90 	.word	0x00015d90

00003308 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    3308:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    330a:	230c      	movs	r3, #12
	sub_data->cb = NULL;
    330c:	2200      	movs	r2, #0
	clock_control_cb_t callback = sub_data->cb;
    330e:	434b      	muls	r3, r1
    3310:	4808      	ldr	r0, [pc, #32]	; (3334 <clkstarted_handle.constprop.0+0x2c>)
static void clkstarted_handle(const struct device *dev,
    3312:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    3314:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
    3316:	3378      	adds	r3, #120	; 0x78
	void *user_data = sub_data->user_data;
    3318:	e9d4 561c 	ldrd	r5, r6, [r4, #112]	; 0x70
	set_on_state(&sub_data->flags);
    331c:	4418      	add	r0, r3
	sub_data->cb = NULL;
    331e:	6722      	str	r2, [r4, #112]	; 0x70
	set_on_state(&sub_data->flags);
    3320:	f00e fa8b 	bl	1183a <set_on_state>
	if (callback) {
    3324:	b12d      	cbz	r5, 3332 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    3326:	4632      	mov	r2, r6
    3328:	462b      	mov	r3, r5
}
    332a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    332e:	4802      	ldr	r0, [pc, #8]	; (3338 <clkstarted_handle.constprop.0+0x30>)
    3330:	4718      	bx	r3
}
    3332:	bd70      	pop	{r4, r5, r6, pc}
    3334:	200013a8 	.word	0x200013a8
    3338:	20000528 	.word	0x20000528

0000333c <clock_event_handler>:
	switch (event) {
    333c:	2805      	cmp	r0, #5
    333e:	d811      	bhi.n	3364 <clock_event_handler+0x28>
    3340:	e8df f000 	tbb	[pc, r0]
    3344:	10100e03 	.word	0x10100e03
    3348:	0a0c      	.short	0x0a0c
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    334a:	4b07      	ldr	r3, [pc, #28]	; (3368 <clock_event_handler+0x2c>)
    334c:	6f98      	ldr	r0, [r3, #120]	; 0x78
    334e:	f010 0007 	ands.w	r0, r0, #7
    3352:	d107      	bne.n	3364 <clock_event_handler+0x28>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    3354:	f7ff bfd8 	b.w	3308 <clkstarted_handle.constprop.0>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK192M);
    3358:	2002      	movs	r0, #2
    335a:	e7fb      	b.n	3354 <clock_event_handler+0x18>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLKAUDIO);
    335c:	2003      	movs	r0, #3
    335e:	e7f9      	b.n	3354 <clock_event_handler+0x18>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    3360:	2001      	movs	r0, #1
    3362:	e7f7      	b.n	3354 <clock_event_handler+0x18>
}
    3364:	4770      	bx	lr
    3366:	bf00      	nop
    3368:	200013a8 	.word	0x200013a8

0000336c <generic_hfclk_start>:
{
    336c:	b508      	push	{r3, lr}
    336e:	f04f 0320 	mov.w	r3, #32
    3372:	f3ef 8111 	mrs	r1, BASEPRI
    3376:	f383 8811 	msr	BASEPRI, r3
    337a:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    337e:	4a12      	ldr	r2, [pc, #72]	; (33c8 <generic_hfclk_start+0x5c>)
    3380:	6813      	ldr	r3, [r2, #0]
    3382:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    3386:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    338a:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    338c:	d00c      	beq.n	33a8 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    338e:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    3392:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    3396:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    339a:	f013 0301 	ands.w	r3, r3, #1
    339e:	d003      	beq.n	33a8 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    33a0:	480a      	ldr	r0, [pc, #40]	; (33cc <generic_hfclk_start+0x60>)
    33a2:	f00e fa4a 	bl	1183a <set_on_state>
			already_started = true;
    33a6:	2301      	movs	r3, #1
	__asm__ volatile(
    33a8:	f381 8811 	msr	BASEPRI, r1
    33ac:	f3bf 8f6f 	isb	sy
	if (already_started) {
    33b0:	b123      	cbz	r3, 33bc <generic_hfclk_start+0x50>
}
    33b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    33b6:	2000      	movs	r0, #0
    33b8:	f7ff bfa6 	b.w	3308 <clkstarted_handle.constprop.0>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    33bc:	2001      	movs	r0, #1
}
    33be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    33c2:	f00a bd6d 	b.w	dea0 <nrfx_clock_start>
    33c6:	bf00      	nop
    33c8:	20001448 	.word	0x20001448
    33cc:	20001420 	.word	0x20001420

000033d0 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    33d0:	4b07      	ldr	r3, [pc, #28]	; (33f0 <generic_hfclk_stop+0x20>)
    33d2:	e8d3 2fef 	ldaex	r2, [r3]
    33d6:	f022 0102 	bic.w	r1, r2, #2
    33da:	e8c3 1fe0 	stlex	r0, r1, [r3]
    33de:	2800      	cmp	r0, #0
    33e0:	d1f7      	bne.n	33d2 <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    33e2:	07d3      	lsls	r3, r2, #31
    33e4:	d402      	bmi.n	33ec <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    33e6:	2001      	movs	r0, #1
    33e8:	f00a bdae 	b.w	df48 <nrfx_clock_stop>
}
    33ec:	4770      	bx	lr
    33ee:	bf00      	nop
    33f0:	20001448 	.word	0x20001448

000033f4 <api_blocking_start>:
{
    33f4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    33f6:	2200      	movs	r2, #0
    33f8:	2301      	movs	r3, #1
    33fa:	e9cd 2302 	strd	r2, r3, [sp, #8]
    33fe:	ab04      	add	r3, sp, #16
    3400:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    3404:	4a09      	ldr	r2, [pc, #36]	; (342c <api_blocking_start+0x38>)
    3406:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    3408:	f8cd d000 	str.w	sp, [sp]
    340c:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    3410:	f00e fa58 	bl	118c4 <api_start>
	if (err < 0) {
    3414:	2800      	cmp	r0, #0
    3416:	db05      	blt.n	3424 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
    3418:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    341c:	2300      	movs	r3, #0
    341e:	4668      	mov	r0, sp
    3420:	f00c f9d0 	bl	f7c4 <z_impl_k_sem_take>
}
    3424:	b007      	add	sp, #28
    3426:	f85d fb04 	ldr.w	pc, [sp], #4
    342a:	bf00      	nop
    342c:	00011897 	.word	0x00011897

00003430 <z_nrf_clock_control_lf_on>:
{
    3430:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    3434:	2201      	movs	r2, #1
    3436:	4606      	mov	r6, r0
    3438:	4939      	ldr	r1, [pc, #228]	; (3520 <z_nrf_clock_control_lf_on+0xf0>)
    343a:	e8d1 3fef 	ldaex	r3, [r1]
    343e:	e8c1 2fe0 	stlex	r0, r2, [r1]
    3442:	2800      	cmp	r0, #0
    3444:	d1f9      	bne.n	343a <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
    3446:	b933      	cbnz	r3, 3456 <z_nrf_clock_control_lf_on+0x26>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    3448:	4936      	ldr	r1, [pc, #216]	; (3524 <z_nrf_clock_control_lf_on+0xf4>)
		err = onoff_request(mgr, &cli);
    344a:	4837      	ldr	r0, [pc, #220]	; (3528 <z_nrf_clock_control_lf_on+0xf8>)
    344c:	604b      	str	r3, [r1, #4]
    344e:	60cb      	str	r3, [r1, #12]
    3450:	608a      	str	r2, [r1, #8]
    3452:	f00d f884 	bl	1055e <onoff_request>
	switch (start_mode) {
    3456:	1e73      	subs	r3, r6, #1
    3458:	2b01      	cmp	r3, #1
    345a:	d832      	bhi.n	34c2 <z_nrf_clock_control_lf_on+0x92>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    345c:	2e01      	cmp	r6, #1
    345e:	d107      	bne.n	3470 <z_nrf_clock_control_lf_on+0x40>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    3460:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3464:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    3468:	f003 0303 	and.w	r3, r3, #3
    346c:	2b02      	cmp	r3, #2
    346e:	d028      	beq.n	34c2 <z_nrf_clock_control_lf_on+0x92>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    3470:	f011 fe6b 	bl	1514a <k_is_in_isr>
    3474:	4604      	mov	r4, r0
    3476:	b918      	cbnz	r0, 3480 <z_nrf_clock_control_lf_on+0x50>
	return !z_sys_post_kernel;
    3478:	4b2c      	ldr	r3, [pc, #176]	; (352c <z_nrf_clock_control_lf_on+0xfc>)
	int key = isr_mode ? irq_lock() : 0;
    347a:	781b      	ldrb	r3, [r3, #0]
    347c:	2b00      	cmp	r3, #0
    347e:	d147      	bne.n	3510 <z_nrf_clock_control_lf_on+0xe0>
	__asm__ volatile(
    3480:	f04f 0320 	mov.w	r3, #32
    3484:	f3ef 8511 	mrs	r5, BASEPRI
    3488:	f383 8811 	msr	BASEPRI, r3
    348c:	f3bf 8f6f 	isb	sy
    3490:	2401      	movs	r4, #1
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3492:	4f27      	ldr	r7, [pc, #156]	; (3530 <z_nrf_clock_control_lf_on+0x100>)
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3494:	f8df 809c 	ldr.w	r8, [pc, #156]	; 3534 <z_nrf_clock_control_lf_on+0x104>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3498:	f8df 909c 	ldr.w	r9, [pc, #156]	; 3538 <z_nrf_clock_control_lf_on+0x108>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    349c:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    34a0:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    34a4:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    34a8:	03d2      	lsls	r2, r2, #15
    34aa:	d50c      	bpl.n	34c6 <z_nrf_clock_control_lf_on+0x96>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    34ac:	f003 0303 	and.w	r3, r3, #3
    34b0:	2b02      	cmp	r3, #2
    34b2:	d001      	beq.n	34b8 <z_nrf_clock_control_lf_on+0x88>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    34b4:	2e01      	cmp	r6, #1
    34b6:	d106      	bne.n	34c6 <z_nrf_clock_control_lf_on+0x96>
	if (isr_mode) {
    34b8:	b324      	cbz	r4, 3504 <z_nrf_clock_control_lf_on+0xd4>
	__asm__ volatile(
    34ba:	f385 8811 	msr	BASEPRI, r5
    34be:	f3bf 8f6f 	isb	sy
}
    34c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode) {
    34c6:	b1c4      	cbz	r4, 34fa <z_nrf_clock_control_lf_on+0xca>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    34c8:	4628      	mov	r0, r5
    34ca:	f000 fe5d 	bl	4188 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    34ce:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    34d2:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    34d6:	b2db      	uxtb	r3, r3
    34d8:	2b01      	cmp	r3, #1
    34da:	d1df      	bne.n	349c <z_nrf_clock_control_lf_on+0x6c>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    34dc:	6839      	ldr	r1, [r7, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
    34de:	2900      	cmp	r1, #0
    34e0:	d0dc      	beq.n	349c <z_nrf_clock_control_lf_on+0x6c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    34e2:	2100      	movs	r1, #0
    34e4:	6039      	str	r1, [r7, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    34e6:	6839      	ldr	r1, [r7, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
    34e8:	2102      	movs	r1, #2
    34ea:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
    34ee:	2220      	movs	r2, #32
    34f0:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    34f4:	f8c9 3000 	str.w	r3, [r9]
}
    34f8:	e7d0      	b.n	349c <z_nrf_clock_control_lf_on+0x6c>
	return z_impl_k_sleep(timeout);
    34fa:	2100      	movs	r1, #0
    34fc:	2021      	movs	r0, #33	; 0x21
    34fe:	f00c f913 	bl	f728 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    3502:	e7e4      	b.n	34ce <z_nrf_clock_control_lf_on+0x9e>
    p_reg->INTENSET = mask;
    3504:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3508:	2202      	movs	r2, #2
    350a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    350e:	e7d8      	b.n	34c2 <z_nrf_clock_control_lf_on+0x92>
    p_reg->INTENCLR = mask;
    3510:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3514:	2202      	movs	r2, #2
	int key = isr_mode ? irq_lock() : 0;
    3516:	4605      	mov	r5, r0
    3518:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    351c:	e7b9      	b.n	3492 <z_nrf_clock_control_lf_on+0x62>
    351e:	bf00      	nop
    3520:	2000144c 	.word	0x2000144c
    3524:	20001398 	.word	0x20001398
    3528:	200013c4 	.word	0x200013c4
    352c:	20002e1b 	.word	0x20002e1b
    3530:	50005104 	.word	0x50005104
    3534:	e000e100 	.word	0xe000e100
    3538:	50005008 	.word	0x50005008

0000353c <bt_rpmsg_init>:
	.quirks         = BT_QUIRK_NO_AUTO_DLE,
#endif
};

static int bt_rpmsg_init(const struct device *unused)
{
    353c:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);

	int err;

	err = bt_rpmsg_platform_init();
    353e:	f000 f95b 	bl	37f8 <bt_rpmsg_platform_init>
	if (err < 0) {
    3542:	1e04      	subs	r4, r0, #0
    3544:	da0c      	bge.n	3560 <bt_rpmsg_init+0x24>
		BT_ERR("Failed to initialize BT RPMSG (err %d)", err);
    3546:	4621      	mov	r1, r4
    3548:	4a0d      	ldr	r2, [pc, #52]	; (3580 <bt_rpmsg_init+0x44>)
    354a:	4b0e      	ldr	r3, [pc, #56]	; (3584 <bt_rpmsg_init+0x48>)
    354c:	480e      	ldr	r0, [pc, #56]	; (3588 <bt_rpmsg_init+0x4c>)
    354e:	1ad2      	subs	r2, r2, r3
    3550:	08d2      	lsrs	r2, r2, #3
    3552:	0192      	lsls	r2, r2, #6
    3554:	f042 0201 	orr.w	r2, r2, #1
		return err;
	}

	err = bt_hci_driver_register(&drv);
	if (err < 0) {
		BT_ERR("Failed to register BT HIC driver (err %d)", err);
    3558:	f00d fbb9 	bl	10cce <log_1>
	}

	return err;
}
    355c:	4620      	mov	r0, r4
    355e:	bd10      	pop	{r4, pc}
	err = bt_hci_driver_register(&drv);
    3560:	480a      	ldr	r0, [pc, #40]	; (358c <bt_rpmsg_init+0x50>)
    3562:	f003 fb97 	bl	6c94 <bt_hci_driver_register>
	if (err < 0) {
    3566:	1e04      	subs	r4, r0, #0
    3568:	daf8      	bge.n	355c <bt_rpmsg_init+0x20>
    356a:	4a05      	ldr	r2, [pc, #20]	; (3580 <bt_rpmsg_init+0x44>)
    356c:	4b05      	ldr	r3, [pc, #20]	; (3584 <bt_rpmsg_init+0x48>)
		BT_ERR("Failed to register BT HIC driver (err %d)", err);
    356e:	4621      	mov	r1, r4
    3570:	1ad2      	subs	r2, r2, r3
    3572:	08d2      	lsrs	r2, r2, #3
    3574:	0192      	lsls	r2, r2, #6
    3576:	4806      	ldr	r0, [pc, #24]	; (3590 <bt_rpmsg_init+0x54>)
    3578:	f042 0201 	orr.w	r2, r2, #1
    357c:	e7ec      	b.n	3558 <bt_rpmsg_init+0x1c>
    357e:	bf00      	nop
    3580:	00015a38 	.word	0x00015a38
    3584:	00015a00 	.word	0x00015a00
    3588:	00016bc3 	.word	0x00016bc3
    358c:	00015d9c 	.word	0x00015d9c
    3590:	00016bea 	.word	0x00016bea

00003594 <bt_rpmsg_send>:
{
    3594:	b510      	push	{r4, lr}
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    3596:	7d01      	ldrb	r1, [r0, #20]
    3598:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    359a:	2902      	cmp	r1, #2
    359c:	d012      	beq.n	35c4 <bt_rpmsg_send+0x30>
    359e:	2904      	cmp	r1, #4
    35a0:	d00f      	beq.n	35c2 <bt_rpmsg_send+0x2e>
    35a2:	b309      	cbz	r1, 35e8 <bt_rpmsg_send+0x54>
    35a4:	4a11      	ldr	r2, [pc, #68]	; (35ec <bt_rpmsg_send+0x58>)
    35a6:	4b12      	ldr	r3, [pc, #72]	; (35f0 <bt_rpmsg_send+0x5c>)
		BT_ERR("Unknown type %u", bt_buf_get_type(buf));
    35a8:	4812      	ldr	r0, [pc, #72]	; (35f4 <bt_rpmsg_send+0x60>)
    35aa:	1ad2      	subs	r2, r2, r3
    35ac:	08d2      	lsrs	r2, r2, #3
    35ae:	0192      	lsls	r2, r2, #6
    35b0:	f042 0201 	orr.w	r2, r2, #1
		BT_ERR("Failed to send (err %d)", err);
    35b4:	f00d fb8b 	bl	10cce <log_1>
	net_buf_unref(buf);
    35b8:	4620      	mov	r0, r4
    35ba:	f009 fe45 	bl	d248 <net_buf_unref>
}
    35be:	2000      	movs	r0, #0
    35c0:	bd10      	pop	{r4, pc}
		pkt_indicator = RPMSG_ISO;
    35c2:	2105      	movs	r1, #5
 * @param buf Buffer to update.
 * @param val 8-bit value to be pushed to the buffer.
 */
static inline void net_buf_push_u8(struct net_buf *buf, uint8_t val)
{
	net_buf_simple_push_u8(&buf->b, val);
    35c4:	f104 0008 	add.w	r0, r4, #8
    35c8:	f010 fd67 	bl	1409a <net_buf_simple_push_u8>
	err = bt_rpmsg_platform_send(buf);
    35cc:	4620      	mov	r0, r4
    35ce:	f000 f939 	bl	3844 <bt_rpmsg_platform_send>
	if (err < 0) {
    35d2:	1e01      	subs	r1, r0, #0
    35d4:	daf0      	bge.n	35b8 <bt_rpmsg_send+0x24>
    35d6:	4a05      	ldr	r2, [pc, #20]	; (35ec <bt_rpmsg_send+0x58>)
    35d8:	4b05      	ldr	r3, [pc, #20]	; (35f0 <bt_rpmsg_send+0x5c>)
		BT_ERR("Failed to send (err %d)", err);
    35da:	4807      	ldr	r0, [pc, #28]	; (35f8 <bt_rpmsg_send+0x64>)
    35dc:	1ad2      	subs	r2, r2, r3
    35de:	08d2      	lsrs	r2, r2, #3
    35e0:	0192      	lsls	r2, r2, #6
    35e2:	f042 0201 	orr.w	r2, r2, #1
    35e6:	e7e5      	b.n	35b4 <bt_rpmsg_send+0x20>
	switch (bt_buf_get_type(buf)) {
    35e8:	2101      	movs	r1, #1
    35ea:	e7eb      	b.n	35c4 <bt_rpmsg_send+0x30>
    35ec:	00015a38 	.word	0x00015a38
    35f0:	00015a00 	.word	0x00015a00
    35f4:	00016c14 	.word	0x00016c14
    35f8:	00016c24 	.word	0x00016c24

000035fc <bt_rpmsg_rx>:
{
    35fc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	pkt_indicator = *data++;
    3600:	4680      	mov	r8, r0
{
    3602:	4606      	mov	r6, r0
	pkt_indicator = *data++;
    3604:	f818 0b01 	ldrb.w	r0, [r8], #1
{
    3608:	460d      	mov	r5, r1
	switch (pkt_indicator) {
    360a:	2804      	cmp	r0, #4
	remaining -= sizeof(pkt_indicator);
    360c:	f101 33ff 	add.w	r3, r1, #4294967295
	switch (pkt_indicator) {
    3610:	d010      	beq.n	3634 <bt_rpmsg_rx+0x38>
    3612:	2805      	cmp	r0, #5
    3614:	f000 8093 	beq.w	373e <bt_rpmsg_rx+0x142>
    3618:	2802      	cmp	r0, #2
    361a:	f040 80c9 	bne.w	37b0 <bt_rpmsg_rx+0x1b4>
	if (remaining < sizeof(hdr)) {
    361e:	2b03      	cmp	r3, #3
    3620:	d85c      	bhi.n	36dc <bt_rpmsg_rx+0xe0>
    3622:	4969      	ldr	r1, [pc, #420]	; (37c8 <bt_rpmsg_rx+0x1cc>)
    3624:	4b69      	ldr	r3, [pc, #420]	; (37cc <bt_rpmsg_rx+0x1d0>)
		BT_ERR("Not enough data for ACL header");
    3626:	486a      	ldr	r0, [pc, #424]	; (37d0 <bt_rpmsg_rx+0x1d4>)
    3628:	1ac9      	subs	r1, r1, r3
    362a:	08c9      	lsrs	r1, r1, #3
    362c:	0189      	lsls	r1, r1, #6
    362e:	f041 0101 	orr.w	r1, r1, #1
    3632:	e009      	b.n	3648 <bt_rpmsg_rx+0x4c>
	if (remaining < sizeof(hdr)) {
    3634:	2b01      	cmp	r3, #1
    3636:	d80c      	bhi.n	3652 <bt_rpmsg_rx+0x56>
    3638:	4963      	ldr	r1, [pc, #396]	; (37c8 <bt_rpmsg_rx+0x1cc>)
    363a:	4b64      	ldr	r3, [pc, #400]	; (37cc <bt_rpmsg_rx+0x1d0>)
		BT_ERR("Not enough data for event header");
    363c:	4865      	ldr	r0, [pc, #404]	; (37d4 <bt_rpmsg_rx+0x1d8>)
    363e:	1ac9      	subs	r1, r1, r3
    3640:	08c9      	lsrs	r1, r1, #3
    3642:	0189      	lsls	r1, r1, #6
    3644:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Event payload length is not correct");
    3648:	f00d fb34 	bl	10cb4 <log_0>
}
    364c:	b002      	add	sp, #8
    364e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (evt_type) {
    3652:	7873      	ldrb	r3, [r6, #1]
    3654:	2b3e      	cmp	r3, #62	; 0x3e
    3656:	d119      	bne.n	368c <bt_rpmsg_rx+0x90>
		uint8_t subevt_type = evt_data[sizeof(struct bt_hci_evt_hdr)];
    3658:	78f7      	ldrb	r7, [r6, #3]
		switch (subevt_type) {
    365a:	2f02      	cmp	r7, #2
    365c:	d018      	beq.n	3690 <bt_rpmsg_rx+0x94>
    365e:	f1a7 030d 	sub.w	r3, r7, #13
    3662:	425f      	negs	r7, r3
    3664:	415f      	adcs	r7, r3
	memcpy((void *)&hdr, data, sizeof(hdr));
    3666:	2202      	movs	r2, #2
    3668:	4641      	mov	r1, r8
    366a:	a801      	add	r0, sp, #4
    366c:	f00e fe55 	bl	1231a <memcpy>
	if (remaining != hdr.len) {
    3670:	f89d 3005 	ldrb.w	r3, [sp, #5]
	remaining -= sizeof(hdr);
    3674:	3d03      	subs	r5, #3
	if (remaining != hdr.len) {
    3676:	429d      	cmp	r5, r3
    3678:	d00c      	beq.n	3694 <bt_rpmsg_rx+0x98>
    367a:	4953      	ldr	r1, [pc, #332]	; (37c8 <bt_rpmsg_rx+0x1cc>)
    367c:	4b53      	ldr	r3, [pc, #332]	; (37cc <bt_rpmsg_rx+0x1d0>)
		BT_ERR("Event payload length is not correct");
    367e:	4856      	ldr	r0, [pc, #344]	; (37d8 <bt_rpmsg_rx+0x1dc>)
    3680:	1ac9      	subs	r1, r1, r3
    3682:	08c9      	lsrs	r1, r1, #3
    3684:	0189      	lsls	r1, r1, #6
    3686:	f041 0101 	orr.w	r1, r1, #1
    368a:	e7dd      	b.n	3648 <bt_rpmsg_rx+0x4c>
		return false;
    368c:	2700      	movs	r7, #0
    368e:	e7ea      	b.n	3666 <bt_rpmsg_rx+0x6a>
			return true;
    3690:	2701      	movs	r7, #1
    3692:	e7e8      	b.n	3666 <bt_rpmsg_rx+0x6a>
	buf = bt_buf_get_evt(hdr.evt, discardable, K_NO_WAIT);
    3694:	2200      	movs	r2, #0
    3696:	2300      	movs	r3, #0
    3698:	4639      	mov	r1, r7
    369a:	f89d 0004 	ldrb.w	r0, [sp, #4]
    369e:	f001 fc99 	bl	4fd4 <bt_buf_get_evt>
	if (!buf) {
    36a2:	4604      	mov	r4, r0
    36a4:	b950      	cbnz	r0, 36bc <bt_rpmsg_rx+0xc0>
		if (discardable) {
    36a6:	2f00      	cmp	r7, #0
    36a8:	d1d0      	bne.n	364c <bt_rpmsg_rx+0x50>
    36aa:	4947      	ldr	r1, [pc, #284]	; (37c8 <bt_rpmsg_rx+0x1cc>)
    36ac:	4b47      	ldr	r3, [pc, #284]	; (37cc <bt_rpmsg_rx+0x1d0>)
			BT_ERR("No available event buffers!");
    36ae:	484b      	ldr	r0, [pc, #300]	; (37dc <bt_rpmsg_rx+0x1e0>)
    36b0:	1ac9      	subs	r1, r1, r3
    36b2:	08c9      	lsrs	r1, r1, #3
    36b4:	0189      	lsls	r1, r1, #6
    36b6:	f041 0101 	orr.w	r1, r1, #1
    36ba:	e7c5      	b.n	3648 <bt_rpmsg_rx+0x4c>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    36bc:	f100 0708 	add.w	r7, r0, #8
    36c0:	2202      	movs	r2, #2
    36c2:	a901      	add	r1, sp, #4
    36c4:	4638      	mov	r0, r7
    36c6:	f010 fccf 	bl	14068 <net_buf_simple_add_mem>
    36ca:	462a      	mov	r2, r5
    36cc:	1cf1      	adds	r1, r6, #3
    36ce:	4638      	mov	r0, r7
    36d0:	f010 fcca 	bl	14068 <net_buf_simple_add_mem>
		bt_recv(buf);
    36d4:	4620      	mov	r0, r4
    36d6:	f003 faa9 	bl	6c2c <bt_recv>
		BT_HEXDUMP_DBG(buf->data, buf->len, "RX buf payload:");
    36da:	e7b7      	b.n	364c <bt_rpmsg_rx+0x50>
	buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_NO_WAIT);
    36dc:	2200      	movs	r2, #0
    36de:	2300      	movs	r3, #0
    36e0:	2003      	movs	r0, #3
    36e2:	f001 fc3b 	bl	4f5c <bt_buf_get_rx>
	if (buf) {
    36e6:	4604      	mov	r4, r0
    36e8:	b300      	cbz	r0, 372c <bt_rpmsg_rx+0x130>
		memcpy((void *)&hdr, data, sizeof(hdr));
    36ea:	2204      	movs	r2, #4
    36ec:	4641      	mov	r1, r8
    36ee:	eb0d 0002 	add.w	r0, sp, r2
    36f2:	f00e fe12 	bl	1231a <memcpy>
    36f6:	2204      	movs	r2, #4
    36f8:	f104 0708 	add.w	r7, r4, #8
    36fc:	4638      	mov	r0, r7
    36fe:	eb0d 0102 	add.w	r1, sp, r2
    3702:	f010 fcb1 	bl	14068 <net_buf_simple_add_mem>
	if (remaining != sys_le16_to_cpu(hdr.len)) {
    3706:	f8bd 3006 	ldrh.w	r3, [sp, #6]
		remaining -= sizeof(hdr);
    370a:	3d05      	subs	r5, #5
	if (remaining != sys_le16_to_cpu(hdr.len)) {
    370c:	429d      	cmp	r5, r3
    370e:	d04c      	beq.n	37aa <bt_rpmsg_rx+0x1ae>
    3710:	492d      	ldr	r1, [pc, #180]	; (37c8 <bt_rpmsg_rx+0x1cc>)
    3712:	4b2e      	ldr	r3, [pc, #184]	; (37cc <bt_rpmsg_rx+0x1d0>)
		BT_ERR("ACL payload length is not correct");
    3714:	4832      	ldr	r0, [pc, #200]	; (37e0 <bt_rpmsg_rx+0x1e4>)
    3716:	1ac9      	subs	r1, r1, r3
    3718:	08c9      	lsrs	r1, r1, #3
    371a:	0189      	lsls	r1, r1, #6
    371c:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("ISO payload length is not correct");
    3720:	f00d fac8 	bl	10cb4 <log_0>
		net_buf_unref(buf);
    3724:	4620      	mov	r0, r4
    3726:	f009 fd8f 	bl	d248 <net_buf_unref>
	if (buf) {
    372a:	e78f      	b.n	364c <bt_rpmsg_rx+0x50>
    372c:	4926      	ldr	r1, [pc, #152]	; (37c8 <bt_rpmsg_rx+0x1cc>)
    372e:	4b27      	ldr	r3, [pc, #156]	; (37cc <bt_rpmsg_rx+0x1d0>)
		BT_ERR("No available ACL buffers!");
    3730:	482c      	ldr	r0, [pc, #176]	; (37e4 <bt_rpmsg_rx+0x1e8>)
    3732:	1ac9      	subs	r1, r1, r3
    3734:	08c9      	lsrs	r1, r1, #3
    3736:	0189      	lsls	r1, r1, #6
    3738:	f041 0101 	orr.w	r1, r1, #1
    373c:	e784      	b.n	3648 <bt_rpmsg_rx+0x4c>
	if (remaining < sizeof(hdr)) {
    373e:	2b03      	cmp	r3, #3
    3740:	d808      	bhi.n	3754 <bt_rpmsg_rx+0x158>
    3742:	4921      	ldr	r1, [pc, #132]	; (37c8 <bt_rpmsg_rx+0x1cc>)
    3744:	4b21      	ldr	r3, [pc, #132]	; (37cc <bt_rpmsg_rx+0x1d0>)
		BT_ERR("Not enough data for ISO header");
    3746:	4828      	ldr	r0, [pc, #160]	; (37e8 <bt_rpmsg_rx+0x1ec>)
    3748:	1ac9      	subs	r1, r1, r3
    374a:	08c9      	lsrs	r1, r1, #3
    374c:	0189      	lsls	r1, r1, #6
    374e:	f041 0101 	orr.w	r1, r1, #1
    3752:	e779      	b.n	3648 <bt_rpmsg_rx+0x4c>
	buf = bt_buf_get_rx(BT_BUF_ISO_IN, K_NO_WAIT);
    3754:	2200      	movs	r2, #0
    3756:	2300      	movs	r3, #0
    3758:	f001 fc00 	bl	4f5c <bt_buf_get_rx>
	if (buf) {
    375c:	4604      	mov	r4, r0
    375e:	b1d8      	cbz	r0, 3798 <bt_rpmsg_rx+0x19c>
		memcpy((void *)&hdr, data, sizeof(hdr));
    3760:	2204      	movs	r2, #4
    3762:	4641      	mov	r1, r8
    3764:	eb0d 0002 	add.w	r0, sp, r2
    3768:	f00e fdd7 	bl	1231a <memcpy>
    376c:	2204      	movs	r2, #4
    376e:	f104 0708 	add.w	r7, r4, #8
    3772:	4638      	mov	r0, r7
    3774:	eb0d 0102 	add.w	r1, sp, r2
    3778:	f010 fc76 	bl	14068 <net_buf_simple_add_mem>
	if (remaining != sys_le16_to_cpu(hdr.len)) {
    377c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
		remaining -= sizeof(hdr);
    3780:	3d05      	subs	r5, #5
	if (remaining != sys_le16_to_cpu(hdr.len)) {
    3782:	429d      	cmp	r5, r3
    3784:	d011      	beq.n	37aa <bt_rpmsg_rx+0x1ae>
    3786:	4910      	ldr	r1, [pc, #64]	; (37c8 <bt_rpmsg_rx+0x1cc>)
    3788:	4b10      	ldr	r3, [pc, #64]	; (37cc <bt_rpmsg_rx+0x1d0>)
		BT_ERR("ISO payload length is not correct");
    378a:	4818      	ldr	r0, [pc, #96]	; (37ec <bt_rpmsg_rx+0x1f0>)
    378c:	1ac9      	subs	r1, r1, r3
    378e:	08c9      	lsrs	r1, r1, #3
    3790:	0189      	lsls	r1, r1, #6
    3792:	f041 0101 	orr.w	r1, r1, #1
    3796:	e7c3      	b.n	3720 <bt_rpmsg_rx+0x124>
    3798:	490b      	ldr	r1, [pc, #44]	; (37c8 <bt_rpmsg_rx+0x1cc>)
    379a:	4b0c      	ldr	r3, [pc, #48]	; (37cc <bt_rpmsg_rx+0x1d0>)
		BT_ERR("No available ISO buffers!");
    379c:	4814      	ldr	r0, [pc, #80]	; (37f0 <bt_rpmsg_rx+0x1f4>)
    379e:	1ac9      	subs	r1, r1, r3
    37a0:	08c9      	lsrs	r1, r1, #3
    37a2:	0189      	lsls	r1, r1, #6
    37a4:	f041 0101 	orr.w	r1, r1, #1
    37a8:	e74e      	b.n	3648 <bt_rpmsg_rx+0x4c>
    37aa:	462a      	mov	r2, r5
    37ac:	1d71      	adds	r1, r6, #5
    37ae:	e78e      	b.n	36ce <bt_rpmsg_rx+0xd2>
    37b0:	4b06      	ldr	r3, [pc, #24]	; (37cc <bt_rpmsg_rx+0x1d0>)
    37b2:	4a05      	ldr	r2, [pc, #20]	; (37c8 <bt_rpmsg_rx+0x1cc>)
		BT_ERR("Unknown HCI type %u", pkt_indicator);
    37b4:	4601      	mov	r1, r0
    37b6:	1ad2      	subs	r2, r2, r3
    37b8:	08d2      	lsrs	r2, r2, #3
    37ba:	0192      	lsls	r2, r2, #6
    37bc:	480d      	ldr	r0, [pc, #52]	; (37f4 <bt_rpmsg_rx+0x1f8>)
    37be:	f042 0201 	orr.w	r2, r2, #1
    37c2:	f00d fa84 	bl	10cce <log_1>
		BT_HEXDUMP_DBG(buf->data, buf->len, "RX buf payload:");
    37c6:	e741      	b.n	364c <bt_rpmsg_rx+0x50>
    37c8:	00015a38 	.word	0x00015a38
    37cc:	00015a00 	.word	0x00015a00
    37d0:	00016c9d 	.word	0x00016c9d
    37d4:	00016c3c 	.word	0x00016c3c
    37d8:	00016c5d 	.word	0x00016c5d
    37dc:	00016c81 	.word	0x00016c81
    37e0:	00016cd6 	.word	0x00016cd6
    37e4:	00016cbc 	.word	0x00016cbc
    37e8:	00016cf8 	.word	0x00016cf8
    37ec:	00016d31 	.word	0x00016d31
    37f0:	00016d17 	.word	0x00016d17
    37f4:	00016d53 	.word	0x00016d53

000037f8 <bt_rpmsg_platform_init>:

int bt_rpmsg_platform_init(void)
{
	int err;

	err = rpmsg_service_register_endpoint("nrf_bt_hci", endpoint_cb);
    37f8:	490b      	ldr	r1, [pc, #44]	; (3828 <bt_rpmsg_platform_init+0x30>)
{
    37fa:	b508      	push	{r3, lr}
	err = rpmsg_service_register_endpoint("nrf_bt_hci", endpoint_cb);
    37fc:	480b      	ldr	r0, [pc, #44]	; (382c <bt_rpmsg_platform_init+0x34>)
    37fe:	f7ff f9fb 	bl	2bf8 <rpmsg_service_register_endpoint>

	if (err < 0) {
    3802:	1e01      	subs	r1, r0, #0
    3804:	da0b      	bge.n	381e <bt_rpmsg_platform_init+0x26>
    3806:	4b0a      	ldr	r3, [pc, #40]	; (3830 <bt_rpmsg_platform_init+0x38>)
    3808:	4a0a      	ldr	r2, [pc, #40]	; (3834 <bt_rpmsg_platform_init+0x3c>)
		LOG_ERR("Registering endpoint failed with %d", err);
    380a:	480b      	ldr	r0, [pc, #44]	; (3838 <bt_rpmsg_platform_init+0x40>)
    380c:	1ad2      	subs	r2, r2, r3
    380e:	08d2      	lsrs	r2, r2, #3
    3810:	0192      	lsls	r2, r2, #6
    3812:	f042 0201 	orr.w	r2, r2, #1
    3816:	f00d fa5a 	bl	10cce <log_1>
		return RPMSG_ERR_INIT;
    381a:	4808      	ldr	r0, [pc, #32]	; (383c <bt_rpmsg_platform_init+0x44>)
	}

	endpoint_id = err;

	return RPMSG_SUCCESS;
}
    381c:	bd08      	pop	{r3, pc}
	endpoint_id = err;
    381e:	4b08      	ldr	r3, [pc, #32]	; (3840 <bt_rpmsg_platform_init+0x48>)
	return RPMSG_SUCCESS;
    3820:	2000      	movs	r0, #0
	endpoint_id = err;
    3822:	6019      	str	r1, [r3, #0]
	return RPMSG_SUCCESS;
    3824:	e7fa      	b.n	381c <bt_rpmsg_platform_init+0x24>
    3826:	bf00      	nop
    3828:	0001190f 	.word	0x0001190f
    382c:	00016d7b 	.word	0x00016d7b
    3830:	00015a00 	.word	0x00015a00
    3834:	00015a40 	.word	0x00015a40
    3838:	00016d86 	.word	0x00016d86
    383c:	fffff82a 	.word	0xfffff82a
    3840:	20001450 	.word	0x20001450

00003844 <bt_rpmsg_platform_send>:

int bt_rpmsg_platform_send(struct net_buf *buf)
{
	return rpmsg_service_send(endpoint_id, buf->data, buf->len);
    3844:	4b02      	ldr	r3, [pc, #8]	; (3850 <bt_rpmsg_platform_send+0xc>)
    3846:	8982      	ldrh	r2, [r0, #12]
    3848:	6881      	ldr	r1, [r0, #8]
    384a:	6818      	ldr	r0, [r3, #0]
    384c:	f7ff ba0c 	b.w	2c68 <rpmsg_service_send>
    3850:	20001450 	.word	0x20001450

00003854 <bt_rpmsg_platform_endpoint_is_bound>:
}

int bt_rpmsg_platform_endpoint_is_bound(void)
{
    3854:	b508      	push	{r3, lr}
	return rpmsg_service_endpoint_is_bound(endpoint_id);
    3856:	4b02      	ldr	r3, [pc, #8]	; (3860 <bt_rpmsg_platform_endpoint_is_bound+0xc>)
    3858:	6818      	ldr	r0, [r3, #0]
    385a:	f7ff f9fb 	bl	2c54 <rpmsg_service_endpoint_is_bound>
}
    385e:	bd08      	pop	{r3, pc}
    3860:	20001450 	.word	0x20001450

00003864 <sys_clock_timeout_handler>:

static void sys_clock_timeout_handler(uint32_t chan,
				      uint32_t cc_value,
				      void *user_data)
{
	uint32_t dticks = counter_sub(cc_value, last_count) / CYC_PER_TICK;
    3864:	4a04      	ldr	r2, [pc, #16]	; (3878 <sys_clock_timeout_handler+0x14>)
    3866:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    3868:	1ac8      	subs	r0, r1, r3
    386a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    386e:	4403      	add	r3, r0
    3870:	6013      	str	r3, [r2, #0]
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    3872:	f00c ba21 	b.w	fcb8 <z_clock_announce>
    3876:	bf00      	nop
    3878:	20001460 	.word	0x20001460

0000387c <set_absolute_alarm>:
{
    387c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3880:	f44f 3780 	mov.w	r7, #65536	; 0x10000
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE void nrf_rtc_event_clear(NRF_RTC_Type * p_reg, nrf_rtc_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3884:	f04f 0900 	mov.w	r9, #0
    3888:	0086      	lsls	r6, r0, #2
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    388a:	f100 0450 	add.w	r4, r0, #80	; 0x50
    388e:	f106 2650 	add.w	r6, r6, #1342197760	; 0x50005000
    3892:	00a4      	lsls	r4, r4, #2
    3894:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
    3898:	b2a4      	uxth	r4, r4
    389a:	f104 2450 	add.w	r4, r4, #1342197760	; 0x50005000
    return p_reg->CC[ch];
    389e:	f8d6 3540 	ldr.w	r3, [r6, #1344]	; 0x540
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    38a2:	f8df 806c 	ldr.w	r8, [pc, #108]	; 3910 <set_absolute_alarm+0x94>
	uint32_t cc_val = abs_val & COUNTER_MAX;
    38a6:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    38aa:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    38ae:	4087      	lsls	r7, r0
     return p_reg->COUNTER;
    38b0:	f8d8 a504 	ldr.w	sl, [r8, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    38b4:	eba3 030a 	sub.w	r3, r3, sl
    38b8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    38bc:	f02a 427f 	bic.w	r2, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    38c0:	2b01      	cmp	r3, #1
    p_reg->CC[ch] = cc_val;
    38c2:	f8c6 2540 	str.w	r2, [r6, #1344]	; 0x540
    38c6:	d102      	bne.n	38ce <set_absolute_alarm+0x52>
	z_impl_k_busy_wait(usec_to_wait);
    38c8:	2013      	movs	r0, #19
    38ca:	f011 fc44 	bl	15156 <z_impl_k_busy_wait>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    38ce:	f10a 0202 	add.w	r2, sl, #2
	return (a - b) & COUNTER_MAX;
    38d2:	1aab      	subs	r3, r5, r2
    38d4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
			cc_val = now + 2;
    38d8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    38dc:	bf88      	it	hi
    38de:	4615      	movhi	r5, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    38e0:	f8c4 9000 	str.w	r9, [r4]
    38e4:	6823      	ldr	r3, [r4, #0]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    38e6:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    38ea:	f8c8 7344 	str.w	r7, [r8, #836]	; 0x344
    p_reg->CC[ch] = cc_val;
    38ee:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
     return p_reg->COUNTER;
    38f2:	f8d8 3504 	ldr.w	r3, [r8, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    38f6:	459a      	cmp	sl, r3
    38f8:	d006      	beq.n	3908 <set_absolute_alarm+0x8c>
	return (a - b) & COUNTER_MAX;
    38fa:	1aeb      	subs	r3, r5, r3
    38fc:	3b02      	subs	r3, #2
    38fe:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    3902:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    3906:	d801      	bhi.n	390c <set_absolute_alarm+0x90>
}
    3908:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		prev_cc = cc_val;
    390c:	462b      	mov	r3, r5
    390e:	e7cf      	b.n	38b0 <set_absolute_alarm+0x34>
    3910:	50015000 	.word	0x50015000

00003914 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
    3914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(arg);

	for (uint32_t chan = 0; chan < CHAN_COUNT; chan++) {
    3916:	2400      	movs	r4, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3918:	4627      	mov	r7, r4
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    391a:	4e0f      	ldr	r6, [pc, #60]	; (3958 <rtc_nrf_isr+0x44>)
    391c:	4b0f      	ldr	r3, [pc, #60]	; (395c <rtc_nrf_isr+0x48>)
    return p_reg->INTENSET & mask;
    391e:	4a10      	ldr	r2, [pc, #64]	; (3960 <rtc_nrf_isr+0x4c>)
    3920:	4618      	mov	r0, r3
    3922:	681d      	ldr	r5, [r3, #0]
    3924:	b104      	cbz	r4, 3928 <rtc_nrf_isr+0x14>
				handler(chan, cc_val,
					cc_data[chan].user_context);
			}
		}
	}
}
    3926:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3928:	f8d2 1304 	ldr.w	r1, [r2, #772]	; 0x304
		if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan)) &&
    392c:	03c9      	lsls	r1, r1, #15
    392e:	d5fa      	bpl.n	3926 <rtc_nrf_isr+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3930:	6831      	ldr	r1, [r6, #0]
    3932:	2900      	cmp	r1, #0
    3934:	d0f7      	beq.n	3926 <rtc_nrf_isr+0x12>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3936:	6034      	str	r4, [r6, #0]
    3938:	6831      	ldr	r1, [r6, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    393a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    393e:	f8c2 1348 	str.w	r1, [r2, #840]	; 0x348
	for (uint32_t chan = 0; chan < CHAN_COUNT; chan++) {
    3942:	2401      	movs	r4, #1
    return p_reg->CC[ch];
    3944:	f8d2 1540 	ldr.w	r1, [r2, #1344]	; 0x540
			if (handler) {
    3948:	b125      	cbz	r5, 3954 <rtc_nrf_isr+0x40>
				handler(chan, cc_val,
    394a:	2000      	movs	r0, #0
    394c:	685a      	ldr	r2, [r3, #4]
    394e:	601f      	str	r7, [r3, #0]
    3950:	47a8      	blx	r5
    3952:	e7e3      	b.n	391c <rtc_nrf_isr+0x8>
    3954:	6005      	str	r5, [r0, #0]
}
    3956:	e7e6      	b.n	3926 <rtc_nrf_isr+0x12>
    3958:	50015140 	.word	0x50015140
    395c:	20001454 	.word	0x20001454
    3960:	50015000 	.word	0x50015000

00003964 <z_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int z_clock_driver_init(const struct device *device)
{
    3964:	b538      	push	{r3, r4, r5, lr}
    p_reg->PRESCALER = val;
    3966:	2400      	movs	r4, #0
    p_reg->INTENSET = mask;
    3968:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    396c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    p_reg->PRESCALER = val;
    3970:	4d0d      	ldr	r5, [pc, #52]	; (39a8 <z_clock_driver_init+0x44>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
	}

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    3972:	2101      	movs	r1, #1
    3974:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->INTENSET = mask;
    3978:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    397c:	4b0b      	ldr	r3, [pc, #44]	; (39ac <z_clock_driver_init+0x48>)
    397e:	2015      	movs	r0, #21
    3980:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    3984:	4622      	mov	r2, r4
    3986:	f000 fb9f 	bl	40c8 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    398a:	2015      	movs	r0, #21
    398c:	f000 fb7e 	bl	408c <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    3990:	2301      	movs	r3, #1
    3992:	4a07      	ldr	r2, [pc, #28]	; (39b0 <z_clock_driver_init+0x4c>)
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		compare_set(0, counter() + CYC_PER_TICK,
			    sys_clock_timeout_handler, NULL);
	}

	z_nrf_clock_control_lf_on(mode);
    3994:	2002      	movs	r0, #2
    3996:	6013      	str	r3, [r2, #0]
	int_mask = BIT_MASK(CHAN_COUNT);
    3998:	4a06      	ldr	r2, [pc, #24]	; (39b4 <z_clock_driver_init+0x50>)
    399a:	602b      	str	r3, [r5, #0]
    399c:	6013      	str	r3, [r2, #0]
	z_nrf_clock_control_lf_on(mode);
    399e:	f7ff fd47 	bl	3430 <z_nrf_clock_control_lf_on>

	return 0;
}
    39a2:	4620      	mov	r0, r4
    39a4:	bd38      	pop	{r3, r4, r5, pc}
    39a6:	bf00      	nop
    39a8:	50015000 	.word	0x50015000
    39ac:	e000e100 	.word	0xe000e100
    39b0:	50015008 	.word	0x50015008
    39b4:	2000145c 	.word	0x2000145c

000039b8 <z_clock_set_timeout>:

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    39b8:	4b13      	ldr	r3, [pc, #76]	; (3a08 <z_clock_set_timeout+0x50>)
    39ba:	f1b0 3fff 	cmp.w	r0, #4294967295
    39be:	bf08      	it	eq
    39c0:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    39c2:	3801      	subs	r0, #1
    39c4:	2800      	cmp	r0, #0
    39c6:	dd1c      	ble.n	3a02 <z_clock_set_timeout+0x4a>
    39c8:	4298      	cmp	r0, r3
    39ca:	bfa8      	it	ge
    39cc:	4618      	movge	r0, r3
     return p_reg->COUNTER;
    39ce:	4b0f      	ldr	r3, [pc, #60]	; (3a0c <z_clock_set_timeout+0x54>)
    39d0:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504

	uint32_t unannounced = counter_sub(counter(), last_count);
    39d4:	4b0e      	ldr	r3, [pc, #56]	; (3a10 <z_clock_set_timeout+0x58>)
    39d6:	6819      	ldr	r1, [r3, #0]
	return (a - b) & COUNTER_MAX;
    39d8:	1a52      	subs	r2, r2, r1
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
		ticks = 0;
    39da:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
    39de:	bf18      	it	ne
    39e0:	2000      	movne	r0, #0
	return (a - b) & COUNTER_MAX;
    39e2:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    39e6:	3301      	adds	r3, #1
	cc_data[chan].callback = handler;
    39e8:	4a0a      	ldr	r2, [pc, #40]	; (3a14 <z_clock_set_timeout+0x5c>)
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    39ea:	4403      	add	r3, r0
	cc_data[chan].callback = handler;
    39ec:	480a      	ldr	r0, [pc, #40]	; (3a18 <z_clock_set_timeout+0x60>)
    39ee:	6010      	str	r0, [r2, #0]
	cc_data[chan].user_context = user_data;
    39f0:	2000      	movs	r0, #0
    39f2:	6050      	str	r0, [r2, #4]
	set_absolute_alarm(chan, cc_value);
    39f4:	4a04      	ldr	r2, [pc, #16]	; (3a08 <z_clock_set_timeout+0x50>)
    39f6:	4293      	cmp	r3, r2
    39f8:	bf94      	ite	ls
    39fa:	18c9      	addls	r1, r1, r3
    39fc:	1889      	addhi	r1, r1, r2
    39fe:	f7ff bf3d 	b.w	387c <set_absolute_alarm>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    3a02:	2000      	movs	r0, #0
    3a04:	e7e3      	b.n	39ce <z_clock_set_timeout+0x16>
    3a06:	bf00      	nop
    3a08:	007fffff 	.word	0x007fffff
    3a0c:	50015000 	.word	0x50015000
    3a10:	20001460 	.word	0x20001460
    3a14:	20001454 	.word	0x20001454
    3a18:	00003865 	.word	0x00003865

00003a1c <z_clock_elapsed>:
	__asm__ volatile(
    3a1c:	f04f 0220 	mov.w	r2, #32
    3a20:	f3ef 8311 	mrs	r3, BASEPRI
    3a24:	f382 8811 	msr	BASEPRI, r2
    3a28:	f3bf 8f6f 	isb	sy
    3a2c:	4a06      	ldr	r2, [pc, #24]	; (3a48 <z_clock_elapsed+0x2c>)
    3a2e:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    3a32:	4a06      	ldr	r2, [pc, #24]	; (3a4c <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
    3a34:	6812      	ldr	r2, [r2, #0]
    3a36:	1a80      	subs	r0, r0, r2
    3a38:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
    3a3c:	f383 8811 	msr	BASEPRI, r3
    3a40:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    3a44:	4770      	bx	lr
    3a46:	bf00      	nop
    3a48:	50015000 	.word	0x50015000
    3a4c:	20001460 	.word	0x20001460

00003a50 <z_timer_cycle_get_32>:
	__asm__ volatile(
    3a50:	f04f 0320 	mov.w	r3, #32
    3a54:	f3ef 8211 	mrs	r2, BASEPRI
    3a58:	f383 8811 	msr	BASEPRI, r3
    3a5c:	f3bf 8f6f 	isb	sy

uint32_t z_timer_cycle_get_32(void)
{
	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) + last_count;
    3a60:	4906      	ldr	r1, [pc, #24]	; (3a7c <z_timer_cycle_get_32+0x2c>)
    3a62:	4b07      	ldr	r3, [pc, #28]	; (3a80 <z_timer_cycle_get_32+0x30>)
    3a64:	6808      	ldr	r0, [r1, #0]
    3a66:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	__asm__ volatile(
    3a6a:	f382 8811 	msr	BASEPRI, r2
    3a6e:	f3bf 8f6f 	isb	sy
	return (a - b) & COUNTER_MAX;
    3a72:	1a1b      	subs	r3, r3, r0
    3a74:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	k_spin_unlock(&lock, key);
	return ret;
}
    3a78:	4418      	add	r0, r3
    3a7a:	4770      	bx	lr
    3a7c:	20001460 	.word	0x20001460
    3a80:	50015000 	.word	0x50015000

00003a84 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    3a84:	4801      	ldr	r0, [pc, #4]	; (3a8c <nrf_cc3xx_platform_abort_init+0x8>)
    3a86:	f00c bb0f 	b.w	100a8 <nrf_cc3xx_platform_set_abort>
    3a8a:	bf00      	nop
    3a8c:	00015db0 	.word	0x00015db0

00003a90 <mutex_unlock_platform>:
    }
}

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    3a90:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    3a92:	b308      	cbz	r0, 3ad8 <mutex_unlock_platform+0x48>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    3a94:	6843      	ldr	r3, [r0, #4]
    3a96:	2b04      	cmp	r3, #4
    3a98:	d007      	beq.n	3aaa <mutex_unlock_platform+0x1a>
    3a9a:	2b08      	cmp	r3, #8
    3a9c:	d013      	beq.n	3ac6 <mutex_unlock_platform+0x36>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    3a9e:	b1f3      	cbz	r3, 3ade <mutex_unlock_platform+0x4e>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
    3aa0:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    3aa2:	f00b fa4f 	bl	ef44 <z_impl_k_mutex_unlock>

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    3aa6:	2000      	movs	r0, #0
    3aa8:	e00c      	b.n	3ac4 <mutex_unlock_platform+0x34>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    3aaa:	2200      	movs	r2, #0
    3aac:	6803      	ldr	r3, [r0, #0]
    3aae:	e8d3 1fef 	ldaex	r1, [r3]
    3ab2:	2901      	cmp	r1, #1
    3ab4:	d103      	bne.n	3abe <mutex_unlock_platform+0x2e>
    3ab6:	e8c3 2fe0 	stlex	r0, r2, [r3]
    3aba:	2800      	cmp	r0, #0
    3abc:	d1f7      	bne.n	3aae <mutex_unlock_platform+0x1e>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    3abe:	4809      	ldr	r0, [pc, #36]	; (3ae4 <mutex_unlock_platform+0x54>)
    3ac0:	bf08      	it	eq
    3ac2:	4610      	moveq	r0, r2
    }
}
    3ac4:	bd08      	pop	{r3, pc}
        nrf_mutex_unlock(NRF_MUTEX, *((uint8_t *)mutex->mutex));
    3ac6:	6803      	ldr	r3, [r0, #0]
    return (p_reg->MUTEX[mutex] == MUTEX_MUTEX_MUTEX_Unlocked);
}

NRF_STATIC_INLINE void nrf_mutex_unlock(NRF_MUTEX_Type * p_reg, uint8_t mutex)
{
    p_reg->MUTEX[mutex] = MUTEX_MUTEX_MUTEX_Unlocked;
    3ac8:	2000      	movs	r0, #0
    3aca:	781b      	ldrb	r3, [r3, #0]
    3acc:	4a06      	ldr	r2, [pc, #24]	; (3ae8 <mutex_unlock_platform+0x58>)
    3ace:	f503 7380 	add.w	r3, r3, #256	; 0x100
    3ad2:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
        return NRF_CC3XX_PLATFORM_SUCCESS;
    3ad6:	e7f5      	b.n	3ac4 <mutex_unlock_platform+0x34>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    3ad8:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    3adc:	e7f2      	b.n	3ac4 <mutex_unlock_platform+0x34>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    3ade:	4803      	ldr	r0, [pc, #12]	; (3aec <mutex_unlock_platform+0x5c>)
    3ae0:	e7f0      	b.n	3ac4 <mutex_unlock_platform+0x34>
    3ae2:	bf00      	nop
    3ae4:	ffff8fe9 	.word	0xffff8fe9
    3ae8:	50030000 	.word	0x50030000
    3aec:	ffff8fea 	.word	0xffff8fea

00003af0 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    3af0:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    3af2:	4604      	mov	r4, r0
    3af4:	b918      	cbnz	r0, 3afe <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    3af6:	4b0d      	ldr	r3, [pc, #52]	; (3b2c <mutex_free_platform+0x3c>)
    3af8:	480d      	ldr	r0, [pc, #52]	; (3b30 <mutex_free_platform+0x40>)
    3afa:	685b      	ldr	r3, [r3, #4]
    3afc:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    3afe:	6861      	ldr	r1, [r4, #4]
    3b00:	2908      	cmp	r1, #8
    3b02:	d00d      	beq.n	3b20 <mutex_free_platform+0x30>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    3b04:	f031 0304 	bics.w	r3, r1, #4
    3b08:	d00a      	beq.n	3b20 <mutex_free_platform+0x30>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    3b0a:	f011 0102 	ands.w	r1, r1, #2
    3b0e:	d008      	beq.n	3b22 <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    3b10:	4621      	mov	r1, r4
    3b12:	4808      	ldr	r0, [pc, #32]	; (3b34 <mutex_free_platform+0x44>)
    3b14:	f00b f972 	bl	edfc <k_mem_slab_free>
        mutex->mutex = NULL;
    3b18:	2300      	movs	r3, #0
    3b1a:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    3b1c:	2300      	movs	r3, #0
    3b1e:	6063      	str	r3, [r4, #4]
}
    3b20:	bd10      	pop	{r4, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    3b22:	2214      	movs	r2, #20
    3b24:	6820      	ldr	r0, [r4, #0]
    3b26:	f00e fc23 	bl	12370 <memset>
    3b2a:	e7f7      	b.n	3b1c <mutex_free_platform+0x2c>
    3b2c:	200003f0 	.word	0x200003f0
    3b30:	00016dc8 	.word	0x00016dc8
    3b34:	20001464 	.word	0x20001464

00003b38 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    3b38:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    3b3a:	4604      	mov	r4, r0
    3b3c:	b918      	cbnz	r0, 3b46 <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    3b3e:	4b16      	ldr	r3, [pc, #88]	; (3b98 <mutex_init_platform+0x60>)
    3b40:	4816      	ldr	r0, [pc, #88]	; (3b9c <mutex_init_platform+0x64>)
    3b42:	685b      	ldr	r3, [r3, #4]
    3b44:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    3b46:	6863      	ldr	r3, [r4, #4]
    3b48:	2b04      	cmp	r3, #4
    3b4a:	d023      	beq.n	3b94 <mutex_init_platform+0x5c>
    3b4c:	2b08      	cmp	r3, #8
    3b4e:	d021      	beq.n	3b94 <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    3b50:	b9cb      	cbnz	r3, 3b86 <mutex_init_platform+0x4e>
    3b52:	6823      	ldr	r3, [r4, #0]
    3b54:	b9bb      	cbnz	r3, 3b86 <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    3b56:	f04f 32ff 	mov.w	r2, #4294967295
    3b5a:	f04f 33ff 	mov.w	r3, #4294967295
    3b5e:	4621      	mov	r1, r4
    3b60:	480f      	ldr	r0, [pc, #60]	; (3ba0 <mutex_init_platform+0x68>)
    3b62:	f00b f919 	bl	ed98 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    3b66:	b908      	cbnz	r0, 3b6c <mutex_init_platform+0x34>
    3b68:	6823      	ldr	r3, [r4, #0]
    3b6a:	b91b      	cbnz	r3, 3b74 <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
    3b6c:	4b0a      	ldr	r3, [pc, #40]	; (3b98 <mutex_init_platform+0x60>)
    3b6e:	480d      	ldr	r0, [pc, #52]	; (3ba4 <mutex_init_platform+0x6c>)
    3b70:	685b      	ldr	r3, [r3, #4]
    3b72:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    3b74:	2214      	movs	r2, #20
    3b76:	2100      	movs	r1, #0
    3b78:	6820      	ldr	r0, [r4, #0]
    3b7a:	f00e fbf9 	bl	12370 <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    3b7e:	6863      	ldr	r3, [r4, #4]
    3b80:	f043 0302 	orr.w	r3, r3, #2
    3b84:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
    3b86:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    3b88:	f011 f8ff 	bl	14d8a <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    3b8c:	6863      	ldr	r3, [r4, #4]
    3b8e:	f043 0301 	orr.w	r3, r3, #1
    3b92:	6063      	str	r3, [r4, #4]
}
    3b94:	bd10      	pop	{r4, pc}
    3b96:	bf00      	nop
    3b98:	200003f0 	.word	0x200003f0
    3b9c:	00016dc8 	.word	0x00016dc8
    3ba0:	20001464 	.word	0x20001464
    3ba4:	00016dee 	.word	0x00016dee

00003ba8 <mutex_lock_platform>:
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    3ba8:	b508      	push	{r3, lr}
    if(mutex == NULL) {
    3baa:	b340      	cbz	r0, 3bfe <mutex_lock_platform+0x56>
    switch (mutex->flags) {
    3bac:	6843      	ldr	r3, [r0, #4]
    3bae:	2b04      	cmp	r3, #4
    3bb0:	d00b      	beq.n	3bca <mutex_lock_platform+0x22>
    3bb2:	2b08      	cmp	r3, #8
    3bb4:	d016      	beq.n	3be4 <mutex_lock_platform+0x3c>
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    3bb6:	b303      	cbz	r3, 3bfa <mutex_lock_platform+0x52>
        p_mutex = (struct k_mutex *)mutex->mutex;
    3bb8:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    3bba:	f04f 32ff 	mov.w	r2, #4294967295
    3bbe:	f04f 33ff 	mov.w	r3, #4294967295
    3bc2:	f00b f947 	bl	ee54 <z_impl_k_mutex_lock>
        if (ret == 0) {
    3bc6:	b158      	cbz	r0, 3be0 <mutex_lock_platform+0x38>
    3bc8:	e015      	b.n	3bf6 <mutex_lock_platform+0x4e>
    3bca:	2201      	movs	r2, #1
    3bcc:	6803      	ldr	r3, [r0, #0]
    3bce:	e8d3 1fef 	ldaex	r1, [r3]
    3bd2:	2900      	cmp	r1, #0
    3bd4:	d103      	bne.n	3bde <mutex_lock_platform+0x36>
    3bd6:	e8c3 2fe0 	stlex	r0, r2, [r3]
    3bda:	2800      	cmp	r0, #0
    3bdc:	d1f7      	bne.n	3bce <mutex_lock_platform+0x26>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    3bde:	d10a      	bne.n	3bf6 <mutex_lock_platform+0x4e>
    3be0:	2000      	movs	r0, #0
}
    3be2:	bd08      	pop	{r3, pc}
        return nrf_mutex_lock(NRF_MUTEX, *((uint8_t *)mutex->mutex)) ?
    3be4:	6803      	ldr	r3, [r0, #0]
    return (p_reg->MUTEX[mutex] == MUTEX_MUTEX_MUTEX_Unlocked);
    3be6:	4a07      	ldr	r2, [pc, #28]	; (3c04 <mutex_lock_platform+0x5c>)
    3be8:	781b      	ldrb	r3, [r3, #0]
    3bea:	f503 7380 	add.w	r3, r3, #256	; 0x100
    3bee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
                       NRF_CC3XX_PLATFORM_SUCCESS :
    3bf2:	2b00      	cmp	r3, #0
    3bf4:	d0f4      	beq.n	3be0 <mutex_lock_platform+0x38>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    3bf6:	4804      	ldr	r0, [pc, #16]	; (3c08 <mutex_lock_platform+0x60>)
    3bf8:	e7f3      	b.n	3be2 <mutex_lock_platform+0x3a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    3bfa:	4804      	ldr	r0, [pc, #16]	; (3c0c <mutex_lock_platform+0x64>)
    3bfc:	e7f1      	b.n	3be2 <mutex_lock_platform+0x3a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    3bfe:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    3c02:	e7ee      	b.n	3be2 <mutex_lock_platform+0x3a>
    3c04:	50030000 	.word	0x50030000
    3c08:	ffff8fe9 	.word	0xffff8fe9
    3c0c:	ffff8fea 	.word	0xffff8fea

00003c10 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    3c10:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    3c12:	4906      	ldr	r1, [pc, #24]	; (3c2c <nrf_cc3xx_platform_mutex_init+0x1c>)
    3c14:	2340      	movs	r3, #64	; 0x40
    3c16:	2214      	movs	r2, #20
    3c18:	4805      	ldr	r0, [pc, #20]	; (3c30 <nrf_cc3xx_platform_mutex_init+0x20>)
    3c1a:	f011 f89b 	bl	14d54 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    3c1e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    3c22:	4904      	ldr	r1, [pc, #16]	; (3c34 <nrf_cc3xx_platform_mutex_init+0x24>)
    3c24:	4804      	ldr	r0, [pc, #16]	; (3c38 <nrf_cc3xx_platform_mutex_init+0x28>)
    3c26:	f00c ba91 	b.w	1014c <nrf_cc3xx_platform_set_mutexes>
    3c2a:	bf00      	nop
    3c2c:	20001480 	.word	0x20001480
    3c30:	20001464 	.word	0x20001464
    3c34:	00015dc8 	.word	0x00015dc8
    3c38:	00015db8 	.word	0x00015db8

00003c3c <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
    3c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3c3e:	4607      	mov	r7, r0
	const unsigned int rconst[11] = {
    3c40:	4e26      	ldr	r6, [pc, #152]	; (3cdc <tc_aes128_set_encrypt_key+0xa0>)
{
    3c42:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
    3c44:	ad01      	add	r5, sp, #4
{
    3c46:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
    3c48:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    3c4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    3c4c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    3c4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    3c50:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    3c54:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
    3c58:	4638      	mov	r0, r7
    3c5a:	2f00      	cmp	r7, #0
    3c5c:	d039      	beq.n	3cd2 <tc_aes128_set_encrypt_key+0x96>
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
    3c5e:	2c00      	cmp	r4, #0
    3c60:	d039      	beq.n	3cd6 <tc_aes128_set_encrypt_key+0x9a>
    3c62:	1f38      	subs	r0, r7, #4
    3c64:	4602      	mov	r2, r0
    3c66:	4621      	mov	r1, r4
    3c68:	3410      	adds	r4, #16
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    3c6a:	784b      	ldrb	r3, [r1, #1]
    3c6c:	780d      	ldrb	r5, [r1, #0]
    3c6e:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    3c70:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    3c74:	78cd      	ldrb	r5, [r1, #3]
    3c76:	3104      	adds	r1, #4
    3c78:	432b      	orrs	r3, r5
    3c7a:	f811 5c02 	ldrb.w	r5, [r1, #-2]
	for (i = 0; i < Nk; ++i) {
    3c7e:	428c      	cmp	r4, r1
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    3c80:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    3c84:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
    3c88:	d1ef      	bne.n	3c6a <tc_aes128_set_encrypt_key+0x2e>
    3c8a:	2104      	movs	r1, #4
	}

	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
    3c8c:	4c14      	ldr	r4, [pc, #80]	; (3ce0 <tc_aes128_set_encrypt_key+0xa4>)
		if ((i % Nk) == 0) {
    3c8e:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
    3c90:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
    3c92:	d116      	bne.n	3cc2 <tc_aes128_set_encrypt_key+0x86>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    3c94:	f3c3 4207 	ubfx	r2, r3, #16, #8
    3c98:	5ca5      	ldrb	r5, [r4, r2]
    3c9a:	0e1a      	lsrs	r2, r3, #24
    3c9c:	5ca2      	ldrb	r2, [r4, r2]
    3c9e:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
    3ca2:	f3c3 2507 	ubfx	r5, r3, #8, #8
    3ca6:	5d65      	ldrb	r5, [r4, r5]
    3ca8:	b2db      	uxtb	r3, r3
    3caa:	5ce3      	ldrb	r3, [r4, r3]
    3cac:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
    3cb0:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    3cb4:	ad0c      	add	r5, sp, #48	; 0x30
    3cb6:	f021 0303 	bic.w	r3, r1, #3
    3cba:	442b      	add	r3, r5
    3cbc:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    3cc0:	4053      	eors	r3, r2
		}
		s->words[i] = s->words[i-Nk] ^ t;
    3cc2:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
    3cc6:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
    3cc8:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
    3cca:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
    3ccc:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
    3cce:	d1de      	bne.n	3c8e <tc_aes128_set_encrypt_key+0x52>
	}

	return TC_CRYPTO_SUCCESS;
    3cd0:	2001      	movs	r0, #1
}
    3cd2:	b00d      	add	sp, #52	; 0x34
    3cd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    3cd6:	4620      	mov	r0, r4
    3cd8:	e7fb      	b.n	3cd2 <tc_aes128_set_encrypt_key+0x96>
    3cda:	bf00      	nop
    3cdc:	00015b14 	.word	0x00015b14
    3ce0:	00016e1b 	.word	0x00016e1b

00003ce4 <tc_aes_encrypt>:
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
	(void) _copy(s, sizeof(t), t, sizeof(t));
}

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
    3ce4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3ce8:	4615      	mov	r5, r2
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
    3cea:	4606      	mov	r6, r0
{
    3cec:	b089      	sub	sp, #36	; 0x24
	if (out == (uint8_t *) 0) {
    3cee:	2800      	cmp	r0, #0
    3cf0:	d058      	beq.n	3da4 <tc_aes_encrypt+0xc0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
    3cf2:	2900      	cmp	r1, #0
    3cf4:	d059      	beq.n	3daa <tc_aes_encrypt+0xc6>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
    3cf6:	2a00      	cmp	r2, #0
    3cf8:	d059      	beq.n	3dae <tc_aes_encrypt+0xca>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
    3cfa:	2310      	movs	r3, #16
    3cfc:	460a      	mov	r2, r1
    3cfe:	4668      	mov	r0, sp
    3d00:	4619      	mov	r1, r3
		s[i] = sbox[s[i]];
    3d02:	4c2c      	ldr	r4, [pc, #176]	; (3db4 <tc_aes_encrypt+0xd0>)
	(void)_copy(state, sizeof(state), in, sizeof(state));
    3d04:	f00d fe10 	bl	11928 <_copy>
	add_round_key(state, s->words);
    3d08:	4629      	mov	r1, r5
    3d0a:	4668      	mov	r0, sp
    3d0c:	f00d fe24 	bl	11958 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
    3d10:	46a1      	mov	r9, r4
    3d12:	f105 0710 	add.w	r7, r5, #16
    3d16:	35a0      	adds	r5, #160	; 0xa0
	for (i = 0; i < (Nb * Nk); ++i) {
    3d18:	46e8      	mov	r8, sp
{
    3d1a:	466a      	mov	r2, sp
    3d1c:	2310      	movs	r3, #16
		s[i] = sbox[s[i]];
    3d1e:	7811      	ldrb	r1, [r2, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
    3d20:	3b01      	subs	r3, #1
		s[i] = sbox[s[i]];
    3d22:	5c61      	ldrb	r1, [r4, r1]
    3d24:	f802 1b01 	strb.w	r1, [r2], #1
	for (i = 0; i < (Nb * Nk); ++i) {
    3d28:	d1f9      	bne.n	3d1e <tc_aes_encrypt+0x3a>
		sub_bytes(state);
		shift_rows(state);
    3d2a:	4668      	mov	r0, sp
    3d2c:	f00d fe59 	bl	119e2 <shift_rows>
	mult_row_column(t, s);
    3d30:	4669      	mov	r1, sp
    3d32:	a804      	add	r0, sp, #16
    3d34:	f00d fe8e 	bl	11a54 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
    3d38:	a901      	add	r1, sp, #4
    3d3a:	a805      	add	r0, sp, #20
    3d3c:	f00d fe8a 	bl	11a54 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
    3d40:	a902      	add	r1, sp, #8
    3d42:	a806      	add	r0, sp, #24
    3d44:	f00d fe86 	bl	11a54 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
    3d48:	a903      	add	r1, sp, #12
    3d4a:	a807      	add	r0, sp, #28
    3d4c:	f00d fe82 	bl	11a54 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
    3d50:	2310      	movs	r3, #16
    3d52:	4668      	mov	r0, sp
    3d54:	4619      	mov	r1, r3
    3d56:	eb0d 0203 	add.w	r2, sp, r3
    3d5a:	f00d fde5 	bl	11928 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
    3d5e:	4639      	mov	r1, r7
    3d60:	4668      	mov	r0, sp
    3d62:	3710      	adds	r7, #16
    3d64:	f00d fdf8 	bl	11958 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
    3d68:	42af      	cmp	r7, r5
    3d6a:	d1d5      	bne.n	3d18 <tc_aes_encrypt+0x34>
    3d6c:	2410      	movs	r4, #16
		s[i] = sbox[s[i]];
    3d6e:	f898 3000 	ldrb.w	r3, [r8]
	for (i = 0; i < (Nb * Nk); ++i) {
    3d72:	3c01      	subs	r4, #1
		s[i] = sbox[s[i]];
    3d74:	f819 3003 	ldrb.w	r3, [r9, r3]
    3d78:	f808 3b01 	strb.w	r3, [r8], #1
	for (i = 0; i < (Nb * Nk); ++i) {
    3d7c:	d1f7      	bne.n	3d6e <tc_aes_encrypt+0x8a>
	}

	sub_bytes(state);
	shift_rows(state);
    3d7e:	4668      	mov	r0, sp
    3d80:	f00d fe2f 	bl	119e2 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
    3d84:	4629      	mov	r1, r5
    3d86:	4668      	mov	r0, sp
    3d88:	f00d fde6 	bl	11958 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
    3d8c:	2310      	movs	r3, #16
    3d8e:	466a      	mov	r2, sp
    3d90:	4619      	mov	r1, r3
    3d92:	4630      	mov	r0, r6
    3d94:	f00d fdc8 	bl	11928 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
    3d98:	4668      	mov	r0, sp
    3d9a:	2210      	movs	r2, #16
    3d9c:	4621      	mov	r1, r4
    3d9e:	f00d fdd0 	bl	11942 <_set>

	return TC_CRYPTO_SUCCESS;
    3da2:	2001      	movs	r0, #1
}
    3da4:	b009      	add	sp, #36	; 0x24
    3da6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
    3daa:	4608      	mov	r0, r1
    3dac:	e7fa      	b.n	3da4 <tc_aes_encrypt+0xc0>
    3dae:	4610      	mov	r0, r2
    3db0:	e7f8      	b.n	3da4 <tc_aes_encrypt+0xc0>
    3db2:	bf00      	nop
    3db4:	00016e1b 	.word	0x00016e1b

00003db8 <compress>:
	n |= ((unsigned int)(*((*c)++)));
	return n;
}

static void compress(unsigned int *iv, const uint8_t *data)
{
    3db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	unsigned int work_space[16];
	unsigned int n;
	unsigned int i;

	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
    3dbc:	2700      	movs	r7, #0
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    3dbe:	6803      	ldr	r3, [r0, #0]
{
    3dc0:	b09d      	sub	sp, #116	; 0x74
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    3dc2:	9303      	str	r3, [sp, #12]
    3dc4:	6843      	ldr	r3, [r0, #4]
    3dc6:	f8df a1b8 	ldr.w	sl, [pc, #440]	; 3f80 <compress+0x1c8>
    3dca:	9304      	str	r3, [sp, #16]
    3dcc:	6883      	ldr	r3, [r0, #8]
    3dce:	9c03      	ldr	r4, [sp, #12]
    3dd0:	9305      	str	r3, [sp, #20]
    3dd2:	68c3      	ldr	r3, [r0, #12]
{
    3dd4:	9102      	str	r1, [sp, #8]
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    3dd6:	9306      	str	r3, [sp, #24]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
    3dd8:	6903      	ldr	r3, [r0, #16]
    3dda:	9307      	str	r3, [sp, #28]
    3ddc:	6943      	ldr	r3, [r0, #20]
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    3dde:	e9dd e206 	ldrd	lr, r2, [sp, #24]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
    3de2:	9308      	str	r3, [sp, #32]
    3de4:	6983      	ldr	r3, [r0, #24]
    3de6:	9309      	str	r3, [sp, #36]	; 0x24
    3de8:	69c3      	ldr	r3, [r0, #28]
    3dea:	e9dd cb08 	ldrd	ip, fp, [sp, #32]
    3dee:	4698      	mov	r8, r3
    3df0:	930a      	str	r3, [sp, #40]	; 0x28
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    3df2:	9b05      	ldr	r3, [sp, #20]
    3df4:	9301      	str	r3, [sp, #4]
    3df6:	9b04      	ldr	r3, [sp, #16]
    3df8:	9300      	str	r3, [sp, #0]
	n = (((unsigned int)(*((*c)++))) << 24);
    3dfa:	9b02      	ldr	r3, [sp, #8]

	for (i = 0; i < 16; ++i) {
		n = BigEndian(&data);
		t1 = work_space[i] = n;
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
		t2 = Sigma0(a) + Maj(a, b, c);
    3dfc:	9e01      	ldr	r6, [sp, #4]
    3dfe:	59dd      	ldr	r5, [r3, r7]
		t1 = work_space[i] = n;
    3e00:	ab0c      	add	r3, sp, #48	; 0x30
    3e02:	ba2d      	rev	r5, r5
    3e04:	51dd      	str	r5, [r3, r7]
	return (((a) >> n) | ((a) << (32 - n)));
    3e06:	f85a 3b04 	ldr.w	r3, [sl], #4
    3e0a:	3704      	adds	r7, #4
    3e0c:	eb05 0903 	add.w	r9, r5, r3
    3e10:	ea4f 25f2 	mov.w	r5, r2, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    3e14:	ea85 15b2 	eor.w	r5, r5, r2, ror #6
    3e18:	ea85 6572 	eor.w	r5, r5, r2, ror #25
    3e1c:	444d      	add	r5, r9
    3e1e:	ea2b 0302 	bic.w	r3, fp, r2
    3e22:	ea02 090c 	and.w	r9, r2, ip
    3e26:	ea83 0309 	eor.w	r3, r3, r9
    3e2a:	442b      	add	r3, r5
    3e2c:	4443      	add	r3, r8
		t2 = Sigma0(a) + Maj(a, b, c);
    3e2e:	e9dd 1500 	ldrd	r1, r5, [sp]
	return (((a) >> n) | ((a) << (32 - n)));
    3e32:	ea4f 3874 	mov.w	r8, r4, ror #13
		t2 = Sigma0(a) + Maj(a, b, c);
    3e36:	404d      	eors	r5, r1
    3e38:	ea88 08b4 	eor.w	r8, r8, r4, ror #2
    3e3c:	4025      	ands	r5, r4
    3e3e:	ea01 0906 	and.w	r9, r1, r6
    3e42:	ea85 0509 	eor.w	r5, r5, r9
    3e46:	ea88 58b4 	eor.w	r8, r8, r4, ror #22
    3e4a:	44a8      	add	r8, r5
	for (i = 0; i < 16; ++i) {
    3e4c:	2f40      	cmp	r7, #64	; 0x40
		h = g; g = f; f = e; e = d + t1;
    3e4e:	eb03 050e 	add.w	r5, r3, lr
		d = c; c = b; b = a; a = t1 + t2;
    3e52:	4443      	add	r3, r8
	for (i = 0; i < 16; ++i) {
    3e54:	46b6      	mov	lr, r6
    3e56:	46d8      	mov	r8, fp
    3e58:	f040 8081 	bne.w	3f5e <compress+0x1a6>
    3e5c:	f04f 0a10 	mov.w	sl, #16
    3e60:	4946      	ldr	r1, [pc, #280]	; (3f7c <compress+0x1c4>)
    3e62:	910b      	str	r1, [sp, #44]	; 0x2c
	}

	for ( ; i < 64; ++i) {
		s0 = work_space[(i+1)&0x0f];
    3e64:	4651      	mov	r1, sl
    3e66:	f10a 0a01 	add.w	sl, sl, #1
    3e6a:	ae1c      	add	r6, sp, #112	; 0x70
    3e6c:	f00a 070f 	and.w	r7, sl, #15
    3e70:	eb06 0787 	add.w	r7, r6, r7, lsl #2
    3e74:	f857 6c40 	ldr.w	r6, [r7, #-64]
		s0 = sigma0(s0);
		s1 = work_space[(i+14)&0x0f];
		s1 = sigma1(s1);

		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    3e78:	f001 090f 	and.w	r9, r1, #15
	return (((a) >> n) | ((a) << (32 - n)));
    3e7c:	ea4f 48b6 	mov.w	r8, r6, ror #18
		s1 = work_space[(i+14)&0x0f];
    3e80:	f101 070e 	add.w	r7, r1, #14
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    3e84:	3109      	adds	r1, #9
		s0 = work_space[(i+1)&0x0f];
    3e86:	9602      	str	r6, [sp, #8]
		s0 = sigma0(s0);
    3e88:	ea88 18f6 	eor.w	r8, r8, r6, ror #7
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    3e8c:	f001 010f 	and.w	r1, r1, #15
		s1 = work_space[(i+14)&0x0f];
    3e90:	ae1c      	add	r6, sp, #112	; 0x70
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    3e92:	eb06 0989 	add.w	r9, r6, r9, lsl #2
    3e96:	eb06 0181 	add.w	r1, r6, r1, lsl #2
		s1 = work_space[(i+14)&0x0f];
    3e9a:	f007 070f 	and.w	r7, r7, #15
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    3e9e:	f851 1c40 	ldr.w	r1, [r1, #-64]
		s1 = work_space[(i+14)&0x0f];
    3ea2:	eb06 0787 	add.w	r7, r6, r7, lsl #2
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    3ea6:	f859 6c40 	ldr.w	r6, [r9, #-64]
		s1 = work_space[(i+14)&0x0f];
    3eaa:	f857 7c40 	ldr.w	r7, [r7, #-64]
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    3eae:	4431      	add	r1, r6
		s0 = sigma0(s0);
    3eb0:	9e02      	ldr	r6, [sp, #8]
	return (((a) >> n) | ((a) << (32 - n)));
    3eb2:	ea4f 4ef7 	mov.w	lr, r7, ror #19
		s0 = sigma0(s0);
    3eb6:	ea88 08d6 	eor.w	r8, r8, r6, lsr #3
		s1 = sigma1(s1);
    3eba:	ea8e 4e77 	eor.w	lr, lr, r7, ror #17
    3ebe:	ea8e 2e97 	eor.w	lr, lr, r7, lsr #10
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    3ec2:	4441      	add	r1, r8
    3ec4:	4471      	add	r1, lr
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    3ec6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    3ec8:	f849 1c40 	str.w	r1, [r9, #-64]
	return (((a) >> n) | ((a) << (32 - n)));
    3ecc:	ea4f 29f5 	mov.w	r9, r5, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    3ed0:	ea05 0802 	and.w	r8, r5, r2
    3ed4:	ea89 19b5 	eor.w	r9, r9, r5, ror #6
    3ed8:	ea2c 0705 	bic.w	r7, ip, r5
    3edc:	f856 eb04 	ldr.w	lr, [r6], #4
    3ee0:	ea87 0708 	eor.w	r7, r7, r8
    3ee4:	ea89 6975 	eor.w	r9, r9, r5, ror #25
    3ee8:	444f      	add	r7, r9
    3eea:	4477      	add	r7, lr
    3eec:	960b      	str	r6, [sp, #44]	; 0x2c
		t2 = Sigma0(a) + Maj(a, b, c);
    3eee:	9e00      	ldr	r6, [sp, #0]
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    3ef0:	4439      	add	r1, r7
    3ef2:	4459      	add	r1, fp
		t2 = Sigma0(a) + Maj(a, b, c);
    3ef4:	ea04 0e06 	and.w	lr, r4, r6
    3ef8:	ea84 0b06 	eor.w	fp, r4, r6
		h = g; g = f; f = e; e = d + t1;
    3efc:	9e01      	ldr	r6, [sp, #4]
	return (((a) >> n) | ((a) << (32 - n)));
    3efe:	ea4f 3773 	mov.w	r7, r3, ror #13
		h = g; g = f; f = e; e = d + t1;
    3f02:	440e      	add	r6, r1
		t2 = Sigma0(a) + Maj(a, b, c);
    3f04:	ea87 07b3 	eor.w	r7, r7, r3, ror #2
    3f08:	ea0b 0b03 	and.w	fp, fp, r3
    3f0c:	ea8b 0b0e 	eor.w	fp, fp, lr
		h = g; g = f; f = e; e = d + t1;
    3f10:	46b0      	mov	r8, r6
		t2 = Sigma0(a) + Maj(a, b, c);
    3f12:	ea87 57b3 	eor.w	r7, r7, r3, ror #22
    3f16:	9e00      	ldr	r6, [sp, #0]
    3f18:	445f      	add	r7, fp
	for ( ; i < 64; ++i) {
    3f1a:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
    3f1e:	46e3      	mov	fp, ip
		d = c; c = b; b = a; a = t1 + t2;
    3f20:	4439      	add	r1, r7
	for ( ; i < 64; ++i) {
    3f22:	9601      	str	r6, [sp, #4]
    3f24:	d123      	bne.n	3f6e <compress+0x1b6>
	}

	iv[0] += a; iv[1] += b; iv[2] += c; iv[3] += d;
    3f26:	9e03      	ldr	r6, [sp, #12]
    3f28:	440e      	add	r6, r1
    3f2a:	9904      	ldr	r1, [sp, #16]
    3f2c:	6006      	str	r6, [r0, #0]
    3f2e:	4419      	add	r1, r3
    3f30:	9b05      	ldr	r3, [sp, #20]
    3f32:	6041      	str	r1, [r0, #4]
    3f34:	4423      	add	r3, r4
    3f36:	9900      	ldr	r1, [sp, #0]
    3f38:	6083      	str	r3, [r0, #8]
    3f3a:	9b06      	ldr	r3, [sp, #24]
    3f3c:	440b      	add	r3, r1
    3f3e:	60c3      	str	r3, [r0, #12]
	iv[4] += e; iv[5] += f; iv[6] += g; iv[7] += h;
    3f40:	9b07      	ldr	r3, [sp, #28]
    3f42:	4443      	add	r3, r8
    3f44:	6103      	str	r3, [r0, #16]
    3f46:	9b08      	ldr	r3, [sp, #32]
    3f48:	442b      	add	r3, r5
    3f4a:	6143      	str	r3, [r0, #20]
    3f4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3f4e:	4413      	add	r3, r2
    3f50:	6183      	str	r3, [r0, #24]
    3f52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3f54:	4463      	add	r3, ip
    3f56:	61c3      	str	r3, [r0, #28]
}
    3f58:	b01d      	add	sp, #116	; 0x74
    3f5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3f5e:	9900      	ldr	r1, [sp, #0]
    3f60:	46e3      	mov	fp, ip
    3f62:	e9cd 4100 	strd	r4, r1, [sp]
    3f66:	4694      	mov	ip, r2
		d = c; c = b; b = a; a = t1 + t2;
    3f68:	461c      	mov	r4, r3
		h = g; g = f; f = e; e = d + t1;
    3f6a:	462a      	mov	r2, r5
    3f6c:	e745      	b.n	3dfa <compress+0x42>
    3f6e:	4694      	mov	ip, r2
    3f70:	9400      	str	r4, [sp, #0]
    3f72:	462a      	mov	r2, r5
    3f74:	461c      	mov	r4, r3
		h = g; g = f; f = e; e = d + t1;
    3f76:	4645      	mov	r5, r8
		d = c; c = b; b = a; a = t1 + t2;
    3f78:	460b      	mov	r3, r1
    3f7a:	e773      	b.n	3e64 <compress+0xac>
    3f7c:	00015e1c 	.word	0x00015e1c
    3f80:	00015ddc 	.word	0x00015ddc

00003f84 <tc_sha256_init>:
{
    3f84:	b510      	push	{r4, lr}
	if (s == (TCSha256State_t) 0) {
    3f86:	4604      	mov	r4, r0
    3f88:	b1c8      	cbz	r0, 3fbe <tc_sha256_init+0x3a>
	_set((uint8_t *) s, 0x00, sizeof(*s));
    3f8a:	2270      	movs	r2, #112	; 0x70
    3f8c:	2100      	movs	r1, #0
    3f8e:	f00d fcd8 	bl	11942 <_set>
	s->iv[1] = 0xbb67ae85;
    3f92:	4b0b      	ldr	r3, [pc, #44]	; (3fc0 <tc_sha256_init+0x3c>)
    3f94:	4a0b      	ldr	r2, [pc, #44]	; (3fc4 <tc_sha256_init+0x40>)
	s->iv[3] = 0xa54ff53a;
    3f96:	490c      	ldr	r1, [pc, #48]	; (3fc8 <tc_sha256_init+0x44>)
	s->iv[1] = 0xbb67ae85;
    3f98:	e9c4 2300 	strd	r2, r3, [r4]
	s->iv[3] = 0xa54ff53a;
    3f9c:	4b0b      	ldr	r3, [pc, #44]	; (3fcc <tc_sha256_init+0x48>)
	s->iv[5] = 0x9b05688c;
    3f9e:	480c      	ldr	r0, [pc, #48]	; (3fd0 <tc_sha256_init+0x4c>)
	s->iv[3] = 0xa54ff53a;
    3fa0:	e9c4 1302 	strd	r1, r3, [r4, #8]
	s->iv[5] = 0x9b05688c;
    3fa4:	4b0b      	ldr	r3, [pc, #44]	; (3fd4 <tc_sha256_init+0x50>)
    3fa6:	e9c4 0304 	strd	r0, r3, [r4, #16]
	return TC_CRYPTO_SUCCESS;
    3faa:	2001      	movs	r0, #1
	s->iv[6] = 0x1f83d9ab;
    3fac:	4b0a      	ldr	r3, [pc, #40]	; (3fd8 <tc_sha256_init+0x54>)
    3fae:	61a3      	str	r3, [r4, #24]
	s->iv[7] = 0x5be0cd19;
    3fb0:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
    3fb4:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
    3fb8:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
    3fbc:	61e3      	str	r3, [r4, #28]
}
    3fbe:	bd10      	pop	{r4, pc}
    3fc0:	bb67ae85 	.word	0xbb67ae85
    3fc4:	6a09e667 	.word	0x6a09e667
    3fc8:	3c6ef372 	.word	0x3c6ef372
    3fcc:	a54ff53a 	.word	0xa54ff53a
    3fd0:	510e527f 	.word	0x510e527f
    3fd4:	9b05688c 	.word	0x9b05688c
    3fd8:	1f83d9ab 	.word	0x1f83d9ab

00003fdc <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    3fdc:	4a0a      	ldr	r2, [pc, #40]	; (4008 <CONFIG_FPROTECT_BLOCK_SIZE+0x8>)
	_current->arch.swap_return_value = _k_neg_eagain;
    3fde:	490b      	ldr	r1, [pc, #44]	; (400c <CONFIG_FPROTECT_BLOCK_SIZE+0xc>)
	_current->arch.basepri = key;
    3fe0:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    3fe2:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    3fe4:	67d8      	str	r0, [r3, #124]	; 0x7c
	_current->arch.swap_return_value = _k_neg_eagain;
    3fe6:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    3fea:	4909      	ldr	r1, [pc, #36]	; (4010 <CONFIG_FPROTECT_BLOCK_SIZE+0x10>)
    3fec:	684b      	ldr	r3, [r1, #4]
    3fee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    3ff2:	604b      	str	r3, [r1, #4]
    3ff4:	2300      	movs	r3, #0
    3ff6:	f383 8811 	msr	BASEPRI, r3
    3ffa:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    3ffe:	6893      	ldr	r3, [r2, #8]
}
    4000:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
    4004:	4770      	bx	lr
    4006:	bf00      	nop
    4008:	20001c9c 	.word	0x20001c9c
    400c:	00016458 	.word	0x00016458
    4010:	e000ed00 	.word	0xe000ed00

00004014 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    4014:	4913      	ldr	r1, [pc, #76]	; (4064 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    4016:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    4018:	f04f 0038 	mov.w	r0, #56	; 0x38
    add r0, r2
    401c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    401e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    4022:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    4026:	2020      	movs	r0, #32
    msr BASEPRI, r0
    4028:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    402c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    4030:	4f0d      	ldr	r7, [pc, #52]	; (4068 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    4032:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    4036:	6a8a      	ldr	r2, [r1, #40]	; 0x28

    str r2, [r1, #_kernel_offset_to_current]
    4038:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    403a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    403c:	6fd0      	ldr	r0, [r2, #124]	; 0x7c
    movs r3, #0
    403e:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    4040:	67d3      	str	r3, [r2, #124]	; 0x7c
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    4042:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    4046:	f102 0038 	add.w	r0, r2, #56	; 0x38
    ldmia r0, {v1-v8, ip}
    404a:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    404e:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    4052:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    4056:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    4058:	f00e f860 	bl	1211c <configure_builtin_stack_guard>
    pop {r2, lr}
    405c:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
    4060:	4770      	bx	lr
    4062:	0000      	.short	0x0000
    ldr r1, =_kernel
    4064:	20001c9c 	.word	0x20001c9c
    ldr v4, =_SCS_ICSR
    4068:	e000ed04 	.word	0xe000ed04

0000406c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    406c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    4070:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    4072:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    4076:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    407a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    407c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    4080:	2902      	cmp	r1, #2
    beq _oops
    4082:	d0ff      	beq.n	4084 <_oops>

00004084 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    4084:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    4086:	f00e f84d 	bl	12124 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    408a:	bd01      	pop	{r0, pc}

0000408c <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    408c:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    408e:	2b00      	cmp	r3, #0
    4090:	db08      	blt.n	40a4 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4092:	2201      	movs	r2, #1
    4094:	f000 001f 	and.w	r0, r0, #31
    4098:	fa02 f000 	lsl.w	r0, r2, r0
    409c:	4a02      	ldr	r2, [pc, #8]	; (40a8 <arch_irq_enable+0x1c>)
    409e:	095b      	lsrs	r3, r3, #5
    40a0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    40a4:	4770      	bx	lr
    40a6:	bf00      	nop
    40a8:	e000e100 	.word	0xe000e100

000040ac <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    40ac:	4b05      	ldr	r3, [pc, #20]	; (40c4 <arch_irq_is_enabled+0x18>)
    40ae:	0942      	lsrs	r2, r0, #5
    40b0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    40b4:	2301      	movs	r3, #1
    40b6:	f000 001f 	and.w	r0, r0, #31
    40ba:	fa03 f000 	lsl.w	r0, r3, r0
}
    40be:	4010      	ands	r0, r2
    40c0:	4770      	bx	lr
    40c2:	bf00      	nop
    40c4:	e000e100 	.word	0xe000e100

000040c8 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    40c8:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    40ca:	2b00      	cmp	r3, #0
	prio += _IRQ_PRIO_OFFSET;
    40cc:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    40d0:	bfac      	ite	ge
    40d2:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    40d6:	4b06      	ldrlt	r3, [pc, #24]	; (40f0 <z_arm_irq_priority_set+0x28>)
    40d8:	ea4f 1141 	mov.w	r1, r1, lsl #5
    40dc:	b2c9      	uxtb	r1, r1
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    40de:	bfab      	itete	ge
    40e0:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    40e4:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    40e8:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    40ec:	5419      	strblt	r1, [r3, r0]
}
    40ee:	4770      	bx	lr
    40f0:	e000ed14 	.word	0xe000ed14

000040f4 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    40f4:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    40f8:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
    40fa:	490b      	ldr	r1, [pc, #44]	; (4128 <arch_new_thread+0x34>)
	iframe->a2 = (uint32_t)p1;
    40fc:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    4100:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
    4102:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
    4106:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    410a:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
    410c:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
    4110:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    4114:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    4118:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    411c:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    411e:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    4120:	6582      	str	r2, [r0, #88]	; 0x58
	thread->arch.basepri = 0;
    4122:	67c3      	str	r3, [r0, #124]	; 0x7c
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    4124:	4770      	bx	lr
    4126:	bf00      	nop
    4128:	000105f1 	.word	0x000105f1

0000412c <arch_switch_to_main_thread>:
#endif
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    412c:	4604      	mov	r4, r0
    412e:	b508      	push	{r3, lr}
    4130:	460e      	mov	r6, r1
    4132:	4615      	mov	r5, r2
	z_arm_configure_static_mpu_regions();
    4134:	f000 fb36 	bl	47a4 <z_arm_configure_static_mpu_regions>
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    4138:	4b08      	ldr	r3, [pc, #32]	; (415c <arch_switch_to_main_thread+0x30>)
    413a:	609c      	str	r4, [r3, #8]
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    413c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    413e:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    4142:	4628      	mov	r0, r5
    4144:	f386 8809 	msr	PSP, r6
    4148:	2100      	movs	r1, #0
    414a:	b663      	cpsie	if
    414c:	f381 8811 	msr	BASEPRI, r1
    4150:	f3bf 8f6f 	isb	sy
    4154:	2200      	movs	r2, #0
    4156:	2300      	movs	r3, #0
    4158:	f00c fa4a 	bl	105f0 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    415c:	20001c9c 	.word	0x20001c9c

00004160 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    4160:	4901      	ldr	r1, [pc, #4]	; (4168 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    4162:	2210      	movs	r2, #16
	str	r2, [r1]
    4164:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    4166:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    4168:	e000ed10 	.word	0xe000ed10

0000416c <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    416c:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    416e:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    4170:	f380 8811 	msr	BASEPRI, r0
	isb
    4174:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    4178:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    417c:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    417e:	b662      	cpsie	i
	isb
    4180:	f3bf 8f6f 	isb	sy

	bx	lr
    4184:	4770      	bx	lr
    4186:	bf00      	nop

00004188 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    4188:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    418a:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    418c:	f381 8811 	msr	BASEPRI, r1

	wfe
    4190:	bf20      	wfe

	msr	BASEPRI, r0
    4192:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    4196:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    4198:	4770      	bx	lr
    419a:	bf00      	nop

0000419c <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    419c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    419e:	4606      	mov	r6, r0

	if (esf != NULL) {
    41a0:	460c      	mov	r4, r1
    41a2:	b301      	cbz	r1, 41e6 <z_arm_fatal_error+0x4a>
    41a4:	4b13      	ldr	r3, [pc, #76]	; (41f4 <z_arm_fatal_error+0x58>)
    41a6:	4d14      	ldr	r5, [pc, #80]	; (41f8 <z_arm_fatal_error+0x5c>)
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    41a8:	4814      	ldr	r0, [pc, #80]	; (41fc <z_arm_fatal_error+0x60>)
    41aa:	1aed      	subs	r5, r5, r3
    41ac:	08ed      	lsrs	r5, r5, #3
    41ae:	01ad      	lsls	r5, r5, #6
    41b0:	f045 0501 	orr.w	r5, r5, #1
    41b4:	f8ad 5000 	strh.w	r5, [sp]
    41b8:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
    41bc:	6809      	ldr	r1, [r1, #0]
    41be:	f00c fdb3 	bl	10d28 <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    41c2:	f8ad 5000 	strh.w	r5, [sp]
    41c6:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    41ca:	68e1      	ldr	r1, [r4, #12]
    41cc:	480c      	ldr	r0, [pc, #48]	; (4200 <z_arm_fatal_error+0x64>)
    41ce:	f00c fdab 	bl	10d28 <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    41d2:	462a      	mov	r2, r5
    41d4:	69e1      	ldr	r1, [r4, #28]
    41d6:	480b      	ldr	r0, [pc, #44]	; (4204 <z_arm_fatal_error+0x68>)
    41d8:	f00c fd79 	bl	10cce <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    41dc:	462a      	mov	r2, r5
    41de:	69a1      	ldr	r1, [r4, #24]
    41e0:	4809      	ldr	r0, [pc, #36]	; (4208 <z_arm_fatal_error+0x6c>)
    41e2:	f00c fd74 	bl	10cce <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    41e6:	4621      	mov	r1, r4
    41e8:	4630      	mov	r0, r6
}
    41ea:	b002      	add	sp, #8
    41ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_fatal_error(reason, esf);
    41f0:	f00a bc66 	b.w	eac0 <z_fatal_error>
    41f4:	00015a00 	.word	0x00015a00
    41f8:	00015ab8 	.word	0x00015ab8
    41fc:	00016f1b 	.word	0x00016f1b
    4200:	00016f4a 	.word	0x00016f4a
    4204:	00016f79 	.word	0x00016f79
    4208:	00016f88 	.word	0x00016f88

0000420c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    420c:	bf30      	wfi
    b z_SysNmiOnReset
    420e:	f7ff bffd 	b.w	420c <z_SysNmiOnReset>
    4212:	bf00      	nop

00004214 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    4214:	4a0e      	ldr	r2, [pc, #56]	; (4250 <z_arm_prep_c+0x3c>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    4216:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    4218:	4b0e      	ldr	r3, [pc, #56]	; (4254 <z_arm_prep_c+0x40>)
    421a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    421e:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    4220:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4224:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    4228:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    422c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    4230:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    4234:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    4238:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    423c:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    4240:	f00a fcd0 	bl	ebe4 <z_bss_zero>
	z_data_copy();
    4244:	f00b fc40 	bl	fac8 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    4248:	f000 fa7e 	bl	4748 <z_arm_interrupt_init>
	z_cstart();
    424c:	f00a fcee 	bl	ec2c <z_cstart>
    4250:	00000000 	.word	0x00000000
    4254:	e000ed00 	.word	0xe000ed00

00004258 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    4258:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    425a:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    425c:	4a0b      	ldr	r2, [pc, #44]	; (428c <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    425e:	6a50      	ldr	r0, [r2, #36]	; 0x24
	cmp r0, #0
    4260:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    4262:	bf1e      	ittt	ne
	movne	r1, #0
    4264:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    4266:	6251      	strne	r1, [r2, #36]	; 0x24
		blne	z_pm_save_idle_exit
    4268:	f010 fd06 	blne	14c78 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    426c:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    426e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    4272:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    4276:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    427a:	4905      	ldr	r1, [pc, #20]	; (4290 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    427c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    427e:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    4280:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    4282:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    4286:	4903      	ldr	r1, [pc, #12]	; (4294 <_isr_wrapper+0x3c>)
	bx r1
    4288:	4708      	bx	r1
    428a:	0000      	.short	0x0000
	ldr r2, =_kernel
    428c:	20001c9c 	.word	0x20001c9c
	ldr r1, =_sw_isr_table
    4290:	0001571c 	.word	0x0001571c
	ldr r1, =z_arm_int_exit
    4294:	00004709 	.word	0x00004709

00004298 <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    4298:	f00c fcc7 	bl	10c2a <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    429c:	2020      	movs	r0, #32
    msr BASEPRI, r0
    429e:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    42a2:	4808      	ldr	r0, [pc, #32]	; (42c4 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    42a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    42a8:	1840      	adds	r0, r0, r1
    msr PSP, r0
    42aa:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    42ae:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    42b2:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    42b4:	4308      	orrs	r0, r1
    msr CONTROL, r0
    42b6:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    42ba:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    42be:	f7ff ffa9 	bl	4214 <z_arm_prep_c>
    42c2:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    42c4:	20004c28 	.word	0x20004c28

000042c8 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    42c8:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    42cc:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    42d0:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    42d2:	4672      	mov	r2, lr
	bl z_arm_fault
    42d4:	f000 f940 	bl	4558 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    42d8:	bd01      	pop	{r0, pc}
    42da:	bf00      	nop

000042dc <usage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    42dc:	b570      	push	{r4, r5, r6, lr}
    42de:	4b28      	ldr	r3, [pc, #160]	; (4380 <usage_fault.isra.0+0xa4>)
    42e0:	4c28      	ldr	r4, [pc, #160]	; (4384 <usage_fault.isra.0+0xa8>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    42e2:	4d29      	ldr	r5, [pc, #164]	; (4388 <usage_fault.isra.0+0xac>)
    42e4:	1ae4      	subs	r4, r4, r3
    42e6:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** USAGE FAULT *****");
    42e8:	01a4      	lsls	r4, r4, #6
    42ea:	f044 0601 	orr.w	r6, r4, #1
    42ee:	4631      	mov	r1, r6
    42f0:	4826      	ldr	r0, [pc, #152]	; (438c <usage_fault.isra.0+0xb0>)
    42f2:	f00c fcdf 	bl	10cb4 <log_0>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    42f6:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    42f8:	0193      	lsls	r3, r2, #6
    42fa:	d503      	bpl.n	4304 <usage_fault.isra.0+0x28>
		PR_FAULT_INFO("  Division by zero");
    42fc:	4631      	mov	r1, r6
    42fe:	4824      	ldr	r0, [pc, #144]	; (4390 <usage_fault.isra.0+0xb4>)
    4300:	f00c fcd8 	bl	10cb4 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    4304:	6aab      	ldr	r3, [r5, #40]	; 0x28
    4306:	01dd      	lsls	r5, r3, #7
    4308:	d504      	bpl.n	4314 <usage_fault.isra.0+0x38>
		PR_FAULT_INFO("  Unaligned memory access");
    430a:	4822      	ldr	r0, [pc, #136]	; (4394 <usage_fault.isra.0+0xb8>)
    430c:	f044 0101 	orr.w	r1, r4, #1
    4310:	f00c fcd0 	bl	10cb4 <log_0>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    4314:	4d1c      	ldr	r5, [pc, #112]	; (4388 <usage_fault.isra.0+0xac>)
    4316:	6aae      	ldr	r6, [r5, #40]	; 0x28
    4318:	f416 1680 	ands.w	r6, r6, #1048576	; 0x100000
    431c:	d005      	beq.n	432a <usage_fault.isra.0+0x4e>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
    431e:	481e      	ldr	r0, [pc, #120]	; (4398 <usage_fault.isra.0+0xbc>)
    4320:	f044 0101 	orr.w	r1, r4, #1
    4324:	f00c fcc6 	bl	10cb4 <log_0>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
    4328:	2602      	movs	r6, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    432a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    432c:	0318      	lsls	r0, r3, #12
    432e:	d504      	bpl.n	433a <usage_fault.isra.0+0x5e>
		PR_FAULT_INFO("  No coprocessor instructions");
    4330:	481a      	ldr	r0, [pc, #104]	; (439c <usage_fault.isra.0+0xc0>)
    4332:	f044 0101 	orr.w	r1, r4, #1
    4336:	f00c fcbd 	bl	10cb4 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    433a:	4d13      	ldr	r5, [pc, #76]	; (4388 <usage_fault.isra.0+0xac>)
    433c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    433e:	0351      	lsls	r1, r2, #13
    4340:	d504      	bpl.n	434c <usage_fault.isra.0+0x70>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    4342:	4817      	ldr	r0, [pc, #92]	; (43a0 <usage_fault.isra.0+0xc4>)
    4344:	f044 0101 	orr.w	r1, r4, #1
    4348:	f00c fcb4 	bl	10cb4 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    434c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    434e:	039a      	lsls	r2, r3, #14
    4350:	d504      	bpl.n	435c <usage_fault.isra.0+0x80>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    4352:	4814      	ldr	r0, [pc, #80]	; (43a4 <usage_fault.isra.0+0xc8>)
    4354:	f044 0101 	orr.w	r1, r4, #1
    4358:	f00c fcac 	bl	10cb4 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    435c:	4d0a      	ldr	r5, [pc, #40]	; (4388 <usage_fault.isra.0+0xac>)
    435e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    4360:	03db      	lsls	r3, r3, #15
    4362:	d504      	bpl.n	436e <usage_fault.isra.0+0x92>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    4364:	4810      	ldr	r0, [pc, #64]	; (43a8 <usage_fault.isra.0+0xcc>)
    4366:	f044 0101 	orr.w	r1, r4, #1
    436a:	f00c fca3 	bl	10cb4 <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    436e:	6aab      	ldr	r3, [r5, #40]	; 0x28

	return reason;
}
    4370:	4630      	mov	r0, r6
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    4372:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    4376:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    437a:	62ab      	str	r3, [r5, #40]	; 0x28
}
    437c:	bd70      	pop	{r4, r5, r6, pc}
    437e:	bf00      	nop
    4380:	00015a00 	.word	0x00015a00
    4384:	00015ab8 	.word	0x00015ab8
    4388:	e000ed00 	.word	0xe000ed00
    438c:	00016fb6 	.word	0x00016fb6
    4390:	00016fce 	.word	0x00016fce
    4394:	00016fe1 	.word	0x00016fe1
    4398:	00016ffb 	.word	0x00016ffb
    439c:	00017025 	.word	0x00017025
    43a0:	00017043 	.word	0x00017043
    43a4:	00017068 	.word	0x00017068
    43a8:	00017082 	.word	0x00017082

000043ac <mem_manage_fault.isra.0>:
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    43ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    43b0:	4b28      	ldr	r3, [pc, #160]	; (4454 <mem_manage_fault.isra.0+0xa8>)
    43b2:	4c29      	ldr	r4, [pc, #164]	; (4458 <mem_manage_fault.isra.0+0xac>)
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    43b4:	4d29      	ldr	r5, [pc, #164]	; (445c <mem_manage_fault.isra.0+0xb0>)
    43b6:	1ae4      	subs	r4, r4, r3
    43b8:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
    43ba:	01a4      	lsls	r4, r4, #6
    43bc:	f044 0801 	orr.w	r8, r4, #1
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    43c0:	4607      	mov	r7, r0
    43c2:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    43c4:	4826      	ldr	r0, [pc, #152]	; (4460 <mem_manage_fault.isra.0+0xb4>)
    43c6:	4641      	mov	r1, r8
    43c8:	f00c fc74 	bl	10cb4 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    43cc:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    43ce:	06d0      	lsls	r0, r2, #27
    43d0:	d503      	bpl.n	43da <mem_manage_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error (context area might be"
    43d2:	4641      	mov	r1, r8
    43d4:	4823      	ldr	r0, [pc, #140]	; (4464 <mem_manage_fault.isra.0+0xb8>)
    43d6:	f00c fc6d 	bl	10cb4 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    43da:	6aab      	ldr	r3, [r5, #40]	; 0x28
    43dc:	0719      	lsls	r1, r3, #28
    43de:	d504      	bpl.n	43ea <mem_manage_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
    43e0:	4821      	ldr	r0, [pc, #132]	; (4468 <mem_manage_fault.isra.0+0xbc>)
    43e2:	f044 0101 	orr.w	r1, r4, #1
    43e6:	f00c fc65 	bl	10cb4 <log_0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    43ea:	4d1c      	ldr	r5, [pc, #112]	; (445c <mem_manage_fault.isra.0+0xb0>)
    43ec:	6aab      	ldr	r3, [r5, #40]	; 0x28
    43ee:	079a      	lsls	r2, r3, #30
    43f0:	d512      	bpl.n	4418 <mem_manage_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Data Access Violation");
    43f2:	f044 0801 	orr.w	r8, r4, #1
    43f6:	4641      	mov	r1, r8
    43f8:	481c      	ldr	r0, [pc, #112]	; (446c <mem_manage_fault.isra.0+0xc0>)
    43fa:	f00c fc5b 	bl	10cb4 <log_0>
		uint32_t temp = SCB->MMFAR;
    43fe:	6b69      	ldr	r1, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    4400:	6aab      	ldr	r3, [r5, #40]	; 0x28
    4402:	061b      	lsls	r3, r3, #24
    4404:	d508      	bpl.n	4418 <mem_manage_fault.isra.0+0x6c>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    4406:	4642      	mov	r2, r8
    4408:	4819      	ldr	r0, [pc, #100]	; (4470 <mem_manage_fault.isra.0+0xc4>)
    440a:	f00c fc60 	bl	10cce <log_1>
			if (from_hard_fault) {
    440e:	b11f      	cbz	r7, 4418 <mem_manage_fault.isra.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    4410:	6aab      	ldr	r3, [r5, #40]	; 0x28
    4412:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    4416:	62ab      	str	r3, [r5, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    4418:	4d10      	ldr	r5, [pc, #64]	; (445c <mem_manage_fault.isra.0+0xb0>)
    441a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    441c:	07d0      	lsls	r0, r2, #31
    441e:	d504      	bpl.n	442a <mem_manage_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Instruction Access Violation");
    4420:	4814      	ldr	r0, [pc, #80]	; (4474 <mem_manage_fault.isra.0+0xc8>)
    4422:	f044 0101 	orr.w	r1, r4, #1
    4426:	f00c fc45 	bl	10cb4 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    442a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    442c:	0699      	lsls	r1, r3, #26
    442e:	d504      	bpl.n	443a <mem_manage_fault.isra.0+0x8e>
		PR_FAULT_INFO(
    4430:	4811      	ldr	r0, [pc, #68]	; (4478 <mem_manage_fault.isra.0+0xcc>)
    4432:	f044 0101 	orr.w	r1, r4, #1
    4436:	f00c fc3d 	bl	10cb4 <log_0>
	*recoverable = memory_fault_recoverable(esf);
    443a:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    443c:	4b07      	ldr	r3, [pc, #28]	; (445c <mem_manage_fault.isra.0+0xb0>)
    443e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4440:	06d2      	lsls	r2, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    4442:	bf58      	it	pl
    4444:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    4446:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4448:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    444c:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    444e:	7030      	strb	r0, [r6, #0]
}
    4450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4454:	00015a00 	.word	0x00015a00
    4458:	00015ab8 	.word	0x00015ab8
    445c:	e000ed00 	.word	0xe000ed00
    4460:	000170ad 	.word	0x000170ad
    4464:	000170c3 	.word	0x000170c3
    4468:	000170f6 	.word	0x000170f6
    446c:	00017109 	.word	0x00017109
    4470:	00017121 	.word	0x00017121
    4474:	00017137 	.word	0x00017137
    4478:	00017156 	.word	0x00017156

0000447c <bus_fault.isra.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    447c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4480:	4b2a      	ldr	r3, [pc, #168]	; (452c <bus_fault.isra.0+0xb0>)
    4482:	4c2b      	ldr	r4, [pc, #172]	; (4530 <bus_fault.isra.0+0xb4>)
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    4484:	4d2b      	ldr	r5, [pc, #172]	; (4534 <bus_fault.isra.0+0xb8>)
    4486:	1ae4      	subs	r4, r4, r3
    4488:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
    448a:	01a4      	lsls	r4, r4, #6
    448c:	f044 0801 	orr.w	r8, r4, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    4490:	4607      	mov	r7, r0
    4492:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    4494:	4828      	ldr	r0, [pc, #160]	; (4538 <bus_fault.isra.0+0xbc>)
    4496:	4641      	mov	r1, r8
    4498:	f00c fc0c 	bl	10cb4 <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    449c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    449e:	04d1      	lsls	r1, r2, #19
    44a0:	d503      	bpl.n	44aa <bus_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error");
    44a2:	4641      	mov	r1, r8
    44a4:	4825      	ldr	r0, [pc, #148]	; (453c <bus_fault.isra.0+0xc0>)
    44a6:	f00c fc05 	bl	10cb4 <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    44aa:	6aab      	ldr	r3, [r5, #40]	; 0x28
    44ac:	051a      	lsls	r2, r3, #20
    44ae:	d504      	bpl.n	44ba <bus_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
    44b0:	4823      	ldr	r0, [pc, #140]	; (4540 <bus_fault.isra.0+0xc4>)
    44b2:	f044 0101 	orr.w	r1, r4, #1
    44b6:	f00c fbfd 	bl	10cb4 <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    44ba:	4d1e      	ldr	r5, [pc, #120]	; (4534 <bus_fault.isra.0+0xb8>)
    44bc:	6aab      	ldr	r3, [r5, #40]	; 0x28
    44be:	059b      	lsls	r3, r3, #22
    44c0:	d512      	bpl.n	44e8 <bus_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Precise data bus error");
    44c2:	f044 0801 	orr.w	r8, r4, #1
    44c6:	4641      	mov	r1, r8
    44c8:	481e      	ldr	r0, [pc, #120]	; (4544 <bus_fault.isra.0+0xc8>)
    44ca:	f00c fbf3 	bl	10cb4 <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
    44ce:	6ba9      	ldr	r1, [r5, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    44d0:	6aab      	ldr	r3, [r5, #40]	; 0x28
    44d2:	0418      	lsls	r0, r3, #16
    44d4:	d508      	bpl.n	44e8 <bus_fault.isra.0+0x6c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    44d6:	4642      	mov	r2, r8
    44d8:	481b      	ldr	r0, [pc, #108]	; (4548 <bus_fault.isra.0+0xcc>)
    44da:	f00c fbf8 	bl	10cce <log_1>
			if (from_hard_fault) {
    44de:	b11f      	cbz	r7, 44e8 <bus_fault.isra.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    44e0:	6aab      	ldr	r3, [r5, #40]	; 0x28
    44e2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    44e6:	62ab      	str	r3, [r5, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    44e8:	4d12      	ldr	r5, [pc, #72]	; (4534 <bus_fault.isra.0+0xb8>)
    44ea:	6aab      	ldr	r3, [r5, #40]	; 0x28
    44ec:	0559      	lsls	r1, r3, #21
    44ee:	d504      	bpl.n	44fa <bus_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Imprecise data bus error");
    44f0:	4816      	ldr	r0, [pc, #88]	; (454c <bus_fault.isra.0+0xd0>)
    44f2:	f044 0101 	orr.w	r1, r4, #1
    44f6:	f00c fbdd 	bl	10cb4 <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    44fa:	6aab      	ldr	r3, [r5, #40]	; 0x28
    44fc:	05da      	lsls	r2, r3, #23
    44fe:	d50d      	bpl.n	451c <bus_fault.isra.0+0xa0>
		PR_FAULT_INFO("  Instruction bus error");
    4500:	4813      	ldr	r0, [pc, #76]	; (4550 <bus_fault.isra.0+0xd4>)
    4502:	f044 0101 	orr.w	r1, r4, #1
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    4506:	f00c fbd5 	bl	10cb4 <log_0>
	*recoverable = memory_fault_recoverable(esf);
    450a:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    450c:	4a09      	ldr	r2, [pc, #36]	; (4534 <bus_fault.isra.0+0xb8>)
    450e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    4510:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    4514:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    4516:	7030      	strb	r0, [r6, #0]
}
    4518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    451c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    451e:	049b      	lsls	r3, r3, #18
    4520:	d5f3      	bpl.n	450a <bus_fault.isra.0+0x8e>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    4522:	480c      	ldr	r0, [pc, #48]	; (4554 <bus_fault.isra.0+0xd8>)
    4524:	f044 0101 	orr.w	r1, r4, #1
    4528:	e7ed      	b.n	4506 <bus_fault.isra.0+0x8a>
    452a:	bf00      	nop
    452c:	00015a00 	.word	0x00015a00
    4530:	00015ab8 	.word	0x00015ab8
    4534:	e000ed00 	.word	0xe000ed00
    4538:	00017185 	.word	0x00017185
    453c:	0001719b 	.word	0x0001719b
    4540:	000170f6 	.word	0x000170f6
    4544:	000171ac 	.word	0x000171ac
    4548:	000171c5 	.word	0x000171c5
    454c:	000171da 	.word	0x000171da
    4550:	000171f5 	.word	0x000171f5
    4554:	00017156 	.word	0x00017156

00004558 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    4558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    455c:	4b56      	ldr	r3, [pc, #344]	; (46b8 <z_arm_fault+0x160>)
{
    455e:	460f      	mov	r7, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    4560:	685e      	ldr	r6, [r3, #4]
    4562:	2500      	movs	r5, #0
{
    4564:	b08a      	sub	sp, #40	; 0x28
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    4566:	f3c6 0408 	ubfx	r4, r6, #0, #9
    456a:	f385 8811 	msr	BASEPRI, r5
    456e:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    4572:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    4576:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    457a:	d10d      	bne.n	4598 <z_arm_fault+0x40>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    457c:	f002 030c 	and.w	r3, r2, #12
    4580:	2b08      	cmp	r3, #8
    4582:	d10b      	bne.n	459c <z_arm_fault+0x44>
    4584:	494d      	ldr	r1, [pc, #308]	; (46bc <z_arm_fault+0x164>)
    4586:	4b4e      	ldr	r3, [pc, #312]	; (46c0 <z_arm_fault+0x168>)
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    4588:	484e      	ldr	r0, [pc, #312]	; (46c4 <z_arm_fault+0x16c>)
    458a:	1ac9      	subs	r1, r1, r3
    458c:	08c9      	lsrs	r1, r1, #3
    458e:	0189      	lsls	r1, r1, #6
    4590:	f041 0101 	orr.w	r1, r1, #1
    4594:	f00c fb8e 	bl	10cb4 <log_0>
		return NULL;
    4598:	462f      	mov	r7, r5
    459a:	e003      	b.n	45a4 <z_arm_fault+0x4c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    459c:	0712      	lsls	r2, r2, #28
    459e:	d401      	bmi.n	45a4 <z_arm_fault+0x4c>
			ptr_esf = (z_arch_esf_t *)msp;
    45a0:	4607      	mov	r7, r0
			*nested_exc = true;
    45a2:	2501      	movs	r5, #1
	*recoverable = false;
    45a4:	2300      	movs	r3, #0
    45a6:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    45aa:	1ee3      	subs	r3, r4, #3
    45ac:	2b09      	cmp	r3, #9
    45ae:	d86a      	bhi.n	4686 <z_arm_fault+0x12e>
    45b0:	e8df f003 	tbb	[pc, r3]
    45b4:	3c5c5805 	.word	0x3c5c5805
    45b8:	69696969 	.word	0x69696969
    45bc:	6069      	.short	0x6069
	*recoverable = false;
    45be:	f04f 0800 	mov.w	r8, #0
    45c2:	4b3f      	ldr	r3, [pc, #252]	; (46c0 <z_arm_fault+0x168>)
    45c4:	4e3d      	ldr	r6, [pc, #244]	; (46bc <z_arm_fault+0x164>)
	PR_FAULT_INFO("***** HARD FAULT *****");
    45c6:	4840      	ldr	r0, [pc, #256]	; (46c8 <z_arm_fault+0x170>)
    45c8:	1af6      	subs	r6, r6, r3
    45ca:	08f6      	lsrs	r6, r6, #3
    45cc:	01b6      	lsls	r6, r6, #6
    45ce:	f046 0601 	orr.w	r6, r6, #1
    45d2:	4631      	mov	r1, r6
    45d4:	f00c fb6e 	bl	10cb4 <log_0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    45d8:	4b37      	ldr	r3, [pc, #220]	; (46b8 <z_arm_fault+0x160>)
	*recoverable = false;
    45da:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    45de:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    45e0:	f014 0402 	ands.w	r4, r4, #2
    45e4:	d005      	beq.n	45f2 <z_arm_fault+0x9a>
		PR_EXC("  Bus fault on vector table read");
    45e6:	4631      	mov	r1, r6
    45e8:	4838      	ldr	r0, [pc, #224]	; (46cc <z_arm_fault+0x174>)
	PR_FAULT_INFO(
    45ea:	f00c fb63 	bl	10cb4 <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    45ee:	2400      	movs	r4, #0
}
    45f0:	e01f      	b.n	4632 <z_arm_fault+0xda>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    45f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    45f4:	005b      	lsls	r3, r3, #1
    45f6:	d51c      	bpl.n	4632 <z_arm_fault+0xda>
		PR_EXC("  Fault escalation (see below)");
    45f8:	4631      	mov	r1, r6
    45fa:	4835      	ldr	r0, [pc, #212]	; (46d0 <z_arm_fault+0x178>)
    45fc:	f00c fb5a 	bl	10cb4 <log_0>
		if (SCB_MMFSR != 0) {
    4600:	4b34      	ldr	r3, [pc, #208]	; (46d4 <z_arm_fault+0x17c>)
    4602:	781b      	ldrb	r3, [r3, #0]
    4604:	b12b      	cbz	r3, 4612 <z_arm_fault+0xba>
			reason = mem_manage_fault(esf, 1, recoverable);
    4606:	2001      	movs	r0, #1
    4608:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    460c:	f7ff fece 	bl	43ac <mem_manage_fault.isra.0>
    4610:	e00e      	b.n	4630 <z_arm_fault+0xd8>
		} else if (SCB_BFSR != 0) {
    4612:	4b31      	ldr	r3, [pc, #196]	; (46d8 <z_arm_fault+0x180>)
    4614:	781b      	ldrb	r3, [r3, #0]
    4616:	b12b      	cbz	r3, 4624 <z_arm_fault+0xcc>
			reason = bus_fault(esf, 1, recoverable);
    4618:	2001      	movs	r0, #1
    461a:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    461e:	f7ff ff2d 	bl	447c <bus_fault.isra.0>
    4622:	e005      	b.n	4630 <z_arm_fault+0xd8>
		} else if (SCB_UFSR != 0) {
    4624:	4b2d      	ldr	r3, [pc, #180]	; (46dc <z_arm_fault+0x184>)
    4626:	881b      	ldrh	r3, [r3, #0]
    4628:	b29b      	uxth	r3, r3
    462a:	b113      	cbz	r3, 4632 <z_arm_fault+0xda>
			reason = usage_fault(esf);
    462c:	f7ff fe56 	bl	42dc <usage_fault.isra.0>
    4630:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    4632:	f89d 3007 	ldrb.w	r3, [sp, #7]
    4636:	b993      	cbnz	r3, 465e <z_arm_fault+0x106>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    4638:	2220      	movs	r2, #32
    463a:	4639      	mov	r1, r7
    463c:	a802      	add	r0, sp, #8
    463e:	f00d fe6c 	bl	1231a <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    4642:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4644:	b39d      	cbz	r5, 46ae <z_arm_fault+0x156>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    4646:	f3c3 0208 	ubfx	r2, r3, #0, #9
    464a:	b922      	cbnz	r2, 4656 <z_arm_fault+0xfe>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    464c:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    4650:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    4654:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    4656:	4620      	mov	r0, r4
    4658:	a902      	add	r1, sp, #8
    465a:	f7ff fd9f 	bl	419c <z_arm_fatal_error>
}
    465e:	b00a      	add	sp, #40	; 0x28
    4660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    4664:	2000      	movs	r0, #0
    4666:	f10d 0107 	add.w	r1, sp, #7
    466a:	e7cf      	b.n	460c <z_arm_fault+0xb4>
		reason = bus_fault(esf, 0, recoverable);
    466c:	2000      	movs	r0, #0
    466e:	f10d 0107 	add.w	r1, sp, #7
    4672:	e7d4      	b.n	461e <z_arm_fault+0xc6>
    4674:	4911      	ldr	r1, [pc, #68]	; (46bc <z_arm_fault+0x164>)
    4676:	4b12      	ldr	r3, [pc, #72]	; (46c0 <z_arm_fault+0x168>)
	PR_FAULT_INFO(
    4678:	4819      	ldr	r0, [pc, #100]	; (46e0 <z_arm_fault+0x188>)
    467a:	1ac9      	subs	r1, r1, r3
    467c:	08c9      	lsrs	r1, r1, #3
    467e:	0189      	lsls	r1, r1, #6
    4680:	f041 0101 	orr.w	r1, r1, #1
    4684:	e7b1      	b.n	45ea <z_arm_fault+0x92>
    4686:	4a0e      	ldr	r2, [pc, #56]	; (46c0 <z_arm_fault+0x168>)
    4688:	4b0c      	ldr	r3, [pc, #48]	; (46bc <z_arm_fault+0x164>)
	PR_FAULT_INFO("***** %s %d) *****",
    468a:	4816      	ldr	r0, [pc, #88]	; (46e4 <z_arm_fault+0x18c>)
    468c:	1a9b      	subs	r3, r3, r2
    468e:	08db      	lsrs	r3, r3, #3
    4690:	f416 7ff8 	tst.w	r6, #496	; 0x1f0
    4694:	ea4f 1383 	mov.w	r3, r3, lsl #6
    4698:	4913      	ldr	r1, [pc, #76]	; (46e8 <z_arm_fault+0x190>)
    469a:	f043 0301 	orr.w	r3, r3, #1
    469e:	bf18      	it	ne
    46a0:	4601      	movne	r1, r0
    46a2:	f1a4 0210 	sub.w	r2, r4, #16
    46a6:	4811      	ldr	r0, [pc, #68]	; (46ec <z_arm_fault+0x194>)
    46a8:	f00c fb25 	bl	10cf6 <log_2>
    46ac:	e79f      	b.n	45ee <z_arm_fault+0x96>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    46ae:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    46b2:	f023 0301 	bic.w	r3, r3, #1
    46b6:	e7cd      	b.n	4654 <z_arm_fault+0xfc>
    46b8:	e000ed00 	.word	0xe000ed00
    46bc:	00015ab8 	.word	0x00015ab8
    46c0:	00015a00 	.word	0x00015a00
    46c4:	0001720d 	.word	0x0001720d
    46c8:	00017238 	.word	0x00017238
    46cc:	0001724f 	.word	0x0001724f
    46d0:	00017270 	.word	0x00017270
    46d4:	e000ed28 	.word	0xe000ed28
    46d8:	e000ed29 	.word	0xe000ed29
    46dc:	e000ed2a 	.word	0xe000ed2a
    46e0:	0001728f 	.word	0x0001728f
    46e4:	000172da 	.word	0x000172da
    46e8:	000172c5 	.word	0x000172c5
    46ec:	000172f3 	.word	0x000172f3

000046f0 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    46f0:	4b04      	ldr	r3, [pc, #16]	; (4704 <z_arm_fault_init+0x14>)
    46f2:	695a      	ldr	r2, [r3, #20]
    46f4:	f042 0210 	orr.w	r2, r2, #16
    46f8:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    46fa:	695a      	ldr	r2, [r3, #20]
    46fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    4700:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    4702:	4770      	bx	lr
    4704:	e000ed00 	.word	0xe000ed00

00004708 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    4708:	4b04      	ldr	r3, [pc, #16]	; (471c <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    470a:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    470c:	6a98      	ldr	r0, [r3, #40]	; 0x28
	cmp r0, r1
    470e:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    4710:	d003      	beq.n	471a <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    4712:	4903      	ldr	r1, [pc, #12]	; (4720 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    4714:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    4718:	600a      	str	r2, [r1, #0]

0000471a <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    471a:	4770      	bx	lr
	ldr r3, =_kernel
    471c:	20001c9c 	.word	0x20001c9c
	ldr r1, =_SCS_ICSR
    4720:	e000ed04 	.word	0xe000ed04

00004724 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    4724:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    4728:	4905      	ldr	r1, [pc, #20]	; (4740 <sys_arch_reboot+0x1c>)
    472a:	4b06      	ldr	r3, [pc, #24]	; (4744 <sys_arch_reboot+0x20>)
    472c:	68ca      	ldr	r2, [r1, #12]
    472e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    4732:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    4734:	60cb      	str	r3, [r1, #12]
    4736:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    473a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    473c:	e7fd      	b.n	473a <sys_arch_reboot+0x16>
    473e:	bf00      	nop
    4740:	e000ed00 	.word	0xe000ed00
    4744:	05fa0004 	.word	0x05fa0004

00004748 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    4748:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    474a:	2120      	movs	r1, #32
    474c:	4803      	ldr	r0, [pc, #12]	; (475c <z_arm_interrupt_init+0x14>)
    474e:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    4750:	3301      	adds	r3, #1
    4752:	2b45      	cmp	r3, #69	; 0x45
    4754:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    4758:	d1f9      	bne.n	474e <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    475a:	4770      	bx	lr
    475c:	e000e100 	.word	0xe000e100

00004760 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    4760:	b508      	push	{r3, lr}
	if (_current == thread) {
    4762:	4b0e      	ldr	r3, [pc, #56]	; (479c <z_impl_k_thread_abort+0x3c>)
    4764:	689b      	ldr	r3, [r3, #8]
    4766:	4283      	cmp	r3, r0
    4768:	d107      	bne.n	477a <z_impl_k_thread_abort+0x1a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    476a:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    476e:	b193      	cbz	r3, 4796 <z_impl_k_thread_abort+0x36>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    4770:	4a0b      	ldr	r2, [pc, #44]	; (47a0 <z_impl_k_thread_abort+0x40>)
    4772:	6853      	ldr	r3, [r2, #4]
    4774:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    4778:	6053      	str	r3, [r2, #4]
		} else {
			z_self_abort(); /* Never returns */
		}
	}

	z_thread_single_abort(thread);
    477a:	f00a fe27 	bl	f3cc <z_thread_single_abort>
	__asm__ volatile(
    477e:	f04f 0320 	mov.w	r3, #32
    4782:	f3ef 8011 	mrs	r0, BASEPRI
    4786:	f383 8811 	msr	BASEPRI, r3
    478a:	f3bf 8f6f 	isb	sy

	/* The abort handler might have altered the ready queue. */
	z_reschedule_unlocked();
}
    478e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
}

static inline void z_reschedule_unlocked(void)
{
	(void) z_reschedule_irqlock(arch_irq_lock());
    4792:	f010 bbf8 	b.w	14f86 <z_reschedule_irqlock>
			z_self_abort(); /* Never returns */
    4796:	f00b f911 	bl	f9bc <z_self_abort>
    479a:	bf00      	nop
    479c:	20001c9c 	.word	0x20001c9c
    47a0:	e000ed00 	.word	0xe000ed00

000047a4 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    47a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    47a6:	4c09      	ldr	r4, [pc, #36]	; (47cc <z_arm_configure_static_mpu_regions+0x28>)
    47a8:	4a09      	ldr	r2, [pc, #36]	; (47d0 <z_arm_configure_static_mpu_regions+0x2c>)
    47aa:	4623      	mov	r3, r4
    47ac:	2101      	movs	r1, #1
    47ae:	4809      	ldr	r0, [pc, #36]	; (47d4 <z_arm_configure_static_mpu_regions+0x30>)
    47b0:	f000 f938 	bl	4a24 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    47b4:	2300      	movs	r3, #0
    47b6:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    47b8:	4b07      	ldr	r3, [pc, #28]	; (47d8 <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    47ba:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    47bc:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    47be:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    47c0:	9301      	str	r3, [sp, #4]
    47c2:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    47c4:	f000 f938 	bl	4a38 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    47c8:	b004      	add	sp, #16
    47ca:	bd10      	pop	{r4, pc}
    47cc:	20070000 	.word	0x20070000
    47d0:	20000000 	.word	0x20000000
    47d4:	00015edc 	.word	0x00015edc
    47d8:	20000810 	.word	0x20000810

000047dc <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
    47dc:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
    47de:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    47e0:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    47e2:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
    47e6:	f004 031f 	and.w	r3, r4, #31
    47ea:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    47ec:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    47ee:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    47f0:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
    47f4:	4904      	ldr	r1, [pc, #16]	; (4808 <region_init+0x2c>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    47f6:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    47fa:	f043 0301 	orr.w	r3, r3, #1
    47fe:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
    4800:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
    4802:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    4804:	bd10      	pop	{r4, pc}
    4806:	bf00      	nop
    4808:	e000ed90 	.word	0xe000ed90

0000480c <region_allocate_and_init>:

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
    480c:	2807      	cmp	r0, #7
{
    480e:	b510      	push	{r4, lr}
	if (index > (get_num_regions() - 1U)) {
    4810:	d90d      	bls.n	482e <region_allocate_and_init+0x22>
    4812:	4b08      	ldr	r3, [pc, #32]	; (4834 <region_allocate_and_init+0x28>)
    4814:	4a08      	ldr	r2, [pc, #32]	; (4838 <region_allocate_and_init+0x2c>)

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    4816:	4601      	mov	r1, r0
    4818:	1ad2      	subs	r2, r2, r3
    481a:	08d2      	lsrs	r2, r2, #3
    481c:	0192      	lsls	r2, r2, #6
    481e:	4807      	ldr	r0, [pc, #28]	; (483c <region_allocate_and_init+0x30>)
    4820:	f042 0201 	orr.w	r2, r2, #1
    4824:	f00c fa53 	bl	10cce <log_1>
		return -EINVAL;
    4828:	f06f 0015 	mvn.w	r0, #21

	/* Program region */
	region_init(index, region_conf);

	return index;
}
    482c:	bd10      	pop	{r4, pc}
	region_init(index, region_conf);
    482e:	f7ff ffd5 	bl	47dc <region_init>
	return index;
    4832:	e7fb      	b.n	482c <region_allocate_and_init+0x20>
    4834:	00015a00 	.word	0x00015a00
    4838:	00015aa0 	.word	0x00015aa0
    483c:	0001730a 	.word	0x0001730a

00004840 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    4840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4844:	4689      	mov	r9, r1
    4846:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    4848:	4606      	mov	r6, r0
    484a:	f04f 0800 	mov.w	r8, #0
	MPU->RNR = index;
    484e:	4d54      	ldr	r5, [pc, #336]	; (49a0 <mpu_configure_regions_and_partition.constprop.0+0x160>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    4850:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
    4852:	45c8      	cmp	r8, r9
    4854:	da33      	bge.n	48be <mpu_configure_regions_and_partition.constprop.0+0x7e>
		if (regions[i].size == 0U) {
    4856:	f8d6 a004 	ldr.w	sl, [r6, #4]
    485a:	f1ba 0f00 	cmp.w	sl, #0
    485e:	d04d      	beq.n	48fc <mpu_configure_regions_and_partition.constprop.0+0xbc>
		&&
    4860:	f1ba 0f1f 	cmp.w	sl, #31
    4864:	d91e      	bls.n	48a4 <mpu_configure_regions_and_partition.constprop.0+0x64>
		&&
    4866:	f01a 0f1f 	tst.w	sl, #31
    486a:	d11b      	bne.n	48a4 <mpu_configure_regions_and_partition.constprop.0+0x64>
		((part->start &
    486c:	f8d6 b000 	ldr.w	fp, [r6]
		&&
    4870:	f01b 0f1f 	tst.w	fp, #31
    4874:	d116      	bne.n	48a4 <mpu_configure_regions_and_partition.constprop.0+0x64>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    4876:	4658      	mov	r0, fp
    4878:	f00d fc78 	bl	1216c <arm_cmse_mpu_region_get>
    487c:	4607      	mov	r7, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    487e:	eb0a 000b 	add.w	r0, sl, fp
    4882:	3801      	subs	r0, #1
    4884:	f00d fc72 	bl	1216c <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    4888:	4287      	cmp	r7, r0
    488a:	d01c      	beq.n	48c6 <mpu_configure_regions_and_partition.constprop.0+0x86>
	return -EINVAL;
    488c:	f06f 0715 	mvn.w	r7, #21
    4890:	4a44      	ldr	r2, [pc, #272]	; (49a4 <mpu_configure_regions_and_partition.constprop.0+0x164>)
    4892:	4b45      	ldr	r3, [pc, #276]	; (49a8 <mpu_configure_regions_and_partition.constprop.0+0x168>)
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
    4894:	4639      	mov	r1, r7
    4896:	1ad2      	subs	r2, r2, r3
    4898:	08d2      	lsrs	r2, r2, #3
    489a:	0192      	lsls	r2, r2, #6
    489c:	4843      	ldr	r0, [pc, #268]	; (49ac <mpu_configure_regions_and_partition.constprop.0+0x16c>)
    489e:	f042 0201 	orr.w	r2, r2, #1
    48a2:	e008      	b.n	48b6 <mpu_configure_regions_and_partition.constprop.0+0x76>
			LOG_ERR("Partition %u: sanity check failed.", i);
    48a4:	4641      	mov	r1, r8
    48a6:	4a3f      	ldr	r2, [pc, #252]	; (49a4 <mpu_configure_regions_and_partition.constprop.0+0x164>)
    48a8:	4b3f      	ldr	r3, [pc, #252]	; (49a8 <mpu_configure_regions_and_partition.constprop.0+0x168>)
    48aa:	4841      	ldr	r0, [pc, #260]	; (49b0 <mpu_configure_regions_and_partition.constprop.0+0x170>)
    48ac:	1ad2      	subs	r2, r2, r3
    48ae:	08d2      	lsrs	r2, r2, #3
    48b0:	0192      	lsls	r2, r2, #6
    48b2:	f042 0201 	orr.w	r2, r2, #1
			LOG_ERR("Invalid underlying region index %u",
    48b6:	f00c fa0a 	bl	10cce <log_1>

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
    48ba:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    48be:	4620      	mov	r0, r4
    48c0:	b005      	add	sp, #20
    48c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
    48c6:	f117 0f16 	cmn.w	r7, #22
    48ca:	d0e1      	beq.n	4890 <mpu_configure_regions_and_partition.constprop.0+0x50>
			(u_reg_index > (reg_index - 1))) {
    48cc:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
    48ce:	42bb      	cmp	r3, r7
    48d0:	dbde      	blt.n	4890 <mpu_configure_regions_and_partition.constprop.0+0x50>
	MPU->RNR = index;
    48d2:	60af      	str	r7, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    48d4:	68e9      	ldr	r1, [r5, #12]
	MPU->RNR = index;
    48d6:	60af      	str	r7, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    48d8:	692b      	ldr	r3, [r5, #16]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    48da:	f021 011f 	bic.w	r1, r1, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    48de:	f043 0b1f 	orr.w	fp, r3, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    48e2:	e9d6 3200 	ldrd	r3, r2, [r6]
    48e6:	441a      	add	r2, r3
		if ((regions[i].start == u_reg_base) &&
    48e8:	4299      	cmp	r1, r3
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    48ea:	f102 3aff 	add.w	sl, r2, #4294967295
		if ((regions[i].start == u_reg_base) &&
    48ee:	d11a      	bne.n	4926 <mpu_configure_regions_and_partition.constprop.0+0xe6>
    48f0:	45d3      	cmp	fp, sl
    48f2:	d107      	bne.n	4904 <mpu_configure_regions_and_partition.constprop.0+0xc4>
			mpu_configure_region(u_reg_index, &regions[i]);
    48f4:	4631      	mov	r1, r6
    48f6:	b2f8      	uxtb	r0, r7
    48f8:	f00d fc1f 	bl	1213a <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    48fc:	f108 0801 	add.w	r8, r8, #1
    4900:	360c      	adds	r6, #12
    4902:	e7a6      	b.n	4852 <mpu_configure_regions_and_partition.constprop.0+0x12>
				mpu_configure_region(reg_index, &regions[i]);
    4904:	4631      	mov	r1, r6
	MPU->RNR = index;
    4906:	60af      	str	r7, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    4908:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
    490a:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    490e:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
    4912:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    4914:	60ea      	str	r2, [r5, #12]
				mpu_configure_region(reg_index, &regions[i]);
    4916:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
    4918:	f00d fc0f 	bl	1213a <mpu_configure_region>
			if (reg_index == -EINVAL) {
    491c:	f110 0f16 	cmn.w	r0, #22
    4920:	d0cb      	beq.n	48ba <mpu_configure_regions_and_partition.constprop.0+0x7a>
			reg_index++;
    4922:	1c44      	adds	r4, r0, #1
    4924:	e7ea      	b.n	48fc <mpu_configure_regions_and_partition.constprop.0+0xbc>
		} else if (reg_last == u_reg_last) {
    4926:	3b01      	subs	r3, #1
    4928:	45d3      	cmp	fp, sl
    492a:	b2e0      	uxtb	r0, r4
    492c:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = index;
    4930:	60af      	str	r7, [r5, #8]
		} else if (reg_last == u_reg_last) {
    4932:	d106      	bne.n	4942 <mpu_configure_regions_and_partition.constprop.0+0x102>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    4934:	692a      	ldr	r2, [r5, #16]
				mpu_configure_region(reg_index, &regions[i]);
    4936:	4631      	mov	r1, r6
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    4938:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    493c:	4313      	orrs	r3, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    493e:	612b      	str	r3, [r5, #16]
			reg_index =
    4940:	e7ea      	b.n	4918 <mpu_configure_regions_and_partition.constprop.0+0xd8>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    4942:	6929      	ldr	r1, [r5, #16]
    4944:	f001 011f 	and.w	r1, r1, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    4948:	430b      	orrs	r3, r1
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    494a:	612b      	str	r3, [r5, #16]
				mpu_configure_region(reg_index, &regions[i]);
    494c:	4631      	mov	r1, r6
    494e:	f00d fbf4 	bl	1213a <mpu_configure_region>
			if (reg_index == -EINVAL) {
    4952:	f110 0f16 	cmn.w	r0, #22
    4956:	d0b0      	beq.n	48ba <mpu_configure_regions_and_partition.constprop.0+0x7a>
	MPU->RNR = index;
    4958:	60af      	str	r7, [r5, #8]
	attr->rbar = MPU->RBAR &
    495a:	68ea      	ldr	r2, [r5, #12]
    495c:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i].start +
    4960:	f10b 3bff 	add.w	fp, fp, #4294967295
	attr->rbar = MPU->RBAR &
    4964:	f362 0304 	bfi	r3, r2, #0, #5
    4968:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    496c:	692b      	ldr	r3, [r5, #16]
    496e:	f89d 2008 	ldrb.w	r2, [sp, #8]
    4972:	085b      	lsrs	r3, r3, #1
    4974:	f363 1247 	bfi	r2, r3, #5, #3
    4978:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i].start +
    497c:	e9d6 3200 	ldrd	r3, r2, [r6]
    4980:	4413      	add	r3, r2
    4982:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i].start +
    4984:	f023 031f 	bic.w	r3, r3, #31
    4988:	445b      	add	r3, fp
    498a:	eba3 030a 	sub.w	r3, r3, sl
			reg_index++;
    498e:	3001      	adds	r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
    4990:	f023 031f 	bic.w	r3, r3, #31
				region_allocate_and_init(reg_index,
    4994:	4669      	mov	r1, sp
    4996:	b2c0      	uxtb	r0, r0
			fill_region.attr.r_limit =
    4998:	9303      	str	r3, [sp, #12]
				region_allocate_and_init(reg_index,
    499a:	f7ff ff37 	bl	480c <region_allocate_and_init>
    499e:	e7bd      	b.n	491c <mpu_configure_regions_and_partition.constprop.0+0xdc>
    49a0:	e000ed90 	.word	0xe000ed90
    49a4:	00015aa0 	.word	0x00015aa0
    49a8:	00015a00 	.word	0x00015a00
    49ac:	00017353 	.word	0x00017353
    49b0:	00017330 	.word	0x00017330

000049b4 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    49b4:	2205      	movs	r2, #5
    49b6:	4b03      	ldr	r3, [pc, #12]	; (49c4 <arm_core_mpu_enable+0x10>)
    49b8:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    49ba:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    49be:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    49c2:	4770      	bx	lr
    49c4:	e000ed90 	.word	0xe000ed90

000049c8 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    49c8:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    49cc:	2200      	movs	r2, #0
    49ce:	4b01      	ldr	r3, [pc, #4]	; (49d4 <arm_core_mpu_disable+0xc>)
    49d0:	605a      	str	r2, [r3, #4]
}
    49d2:	4770      	bx	lr
    49d4:	e000ed90 	.word	0xe000ed90

000049d8 <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(const struct device *arg)
{
    49d8:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    49da:	4c0e      	ldr	r4, [pc, #56]	; (4a14 <arm_mpu_init+0x3c>)
    49dc:	6825      	ldr	r5, [r4, #0]
    49de:	2d08      	cmp	r5, #8
    49e0:	d814      	bhi.n	4a0c <arm_mpu_init+0x34>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    49e2:	f7ff fff1 	bl	49c8 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    49e6:	2000      	movs	r0, #0
	MPU->MAIR0 =
    49e8:	4b0b      	ldr	r3, [pc, #44]	; (4a18 <arm_mpu_init+0x40>)
    49ea:	4a0c      	ldr	r2, [pc, #48]	; (4a1c <arm_mpu_init+0x44>)
    49ec:	631a      	str	r2, [r3, #48]	; 0x30
    49ee:	4285      	cmp	r5, r0
    49f0:	d105      	bne.n	49fe <arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    49f2:	4b0b      	ldr	r3, [pc, #44]	; (4a20 <arm_mpu_init+0x48>)
    49f4:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    49f6:	f7ff ffdd 	bl	49b4 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
    49fa:	2000      	movs	r0, #0
}
    49fc:	bd38      	pop	{r3, r4, r5, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    49fe:	6861      	ldr	r1, [r4, #4]
    4a00:	eb01 1100 	add.w	r1, r1, r0, lsl #4
    4a04:	f7ff feea 	bl	47dc <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    4a08:	3001      	adds	r0, #1
    4a0a:	e7f0      	b.n	49ee <arm_mpu_init+0x16>
		return -1;
    4a0c:	f04f 30ff 	mov.w	r0, #4294967295
    4a10:	e7f4      	b.n	49fc <arm_mpu_init+0x24>
    4a12:	bf00      	nop
    4a14:	00015ee8 	.word	0x00015ee8
    4a18:	e000ed90 	.word	0xe000ed90
    4a1c:	0044ffaa 	.word	0x0044ffaa
    4a20:	20002d17 	.word	0x20002d17

00004a24 <arm_core_mpu_configure_static_mpu_regions>:
{
    4a24:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    4a26:	4c03      	ldr	r4, [pc, #12]	; (4a34 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    4a28:	7822      	ldrb	r2, [r4, #0]
    4a2a:	f7ff ff09 	bl	4840 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    4a2e:	7020      	strb	r0, [r4, #0]
}
    4a30:	bd10      	pop	{r4, pc}
    4a32:	bf00      	nop
    4a34:	20002d17 	.word	0x20002d17

00004a38 <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
    4a38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4a3c:	4d26      	ldr	r5, [pc, #152]	; (4ad8 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>)
    4a3e:	468a      	mov	sl, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    4a40:	4606      	mov	r6, r0
    4a42:	f04f 0800 	mov.w	r8, #0
    4a46:	46ab      	mov	fp, r5
	MPU->RNR = index;
    4a48:	4f24      	ldr	r7, [pc, #144]	; (4adc <arm_core_mpu_mark_areas_for_dynamic_regions+0xa4>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    4a4a:	45d0      	cmp	r8, sl
    4a4c:	da1b      	bge.n	4a86 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
    4a4e:	f8d6 9004 	ldr.w	r9, [r6, #4]
    4a52:	f1b9 0f00 	cmp.w	r9, #0
    4a56:	d039      	beq.n	4acc <arm_core_mpu_mark_areas_for_dynamic_regions+0x94>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    4a58:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    4a5a:	4608      	mov	r0, r1
    4a5c:	9101      	str	r1, [sp, #4]
    4a5e:	f00d fb85 	bl	1216c <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    4a62:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    4a64:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    4a66:	eb09 0001 	add.w	r0, r9, r1
    4a6a:	3801      	subs	r0, #1
    4a6c:	f00d fb7e 	bl	1216c <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    4a70:	4284      	cmp	r4, r0
    4a72:	f04f 0214 	mov.w	r2, #20
    4a76:	4b1a      	ldr	r3, [pc, #104]	; (4ae0 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa8>)
    4a78:	d008      	beq.n	4a8c <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
    4a7a:	f06f 0315 	mvn.w	r3, #21
    4a7e:	fb02 f808 	mul.w	r8, r2, r8
    4a82:	f84b 3008 	str.w	r3, [fp, r8]
}
    4a86:	b003      	add	sp, #12
    4a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    4a8c:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
    4a90:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
    4a92:	d0f8      	beq.n	4a86 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    4a94:	7819      	ldrb	r1, [r3, #0]
    4a96:	42a1      	cmp	r1, r4
    4a98:	ddf5      	ble.n	4a86 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = MPU->RBAR &
    4a9a:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = index;
    4a9e:	60bc      	str	r4, [r7, #8]
	MPU->RNR = index;
    4aa0:	60bc      	str	r4, [r7, #8]
	attr->rbar = MPU->RBAR &
    4aa2:	68fc      	ldr	r4, [r7, #12]
    4aa4:	f100 0108 	add.w	r1, r0, #8
    4aa8:	7b00      	ldrb	r0, [r0, #12]
    4aaa:	f364 0004 	bfi	r0, r4, #0, #5
    4aae:	7108      	strb	r0, [r1, #4]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    4ab0:	6938      	ldr	r0, [r7, #16]
    4ab2:	790c      	ldrb	r4, [r1, #4]
    4ab4:	0840      	lsrs	r0, r0, #1
    4ab6:	f360 1447 	bfi	r4, r0, #5, #3
    4aba:	710c      	strb	r4, [r1, #4]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
    4abc:	68f9      	ldr	r1, [r7, #12]
    4abe:	f021 011f 	bic.w	r1, r1, #31
    4ac2:	6069      	str	r1, [r5, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
    4ac4:	6939      	ldr	r1, [r7, #16]
    4ac6:	f021 011f 	bic.w	r1, r1, #31
    4aca:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    4acc:	f108 0801 	add.w	r8, r8, #1
    4ad0:	3514      	adds	r5, #20
    4ad2:	360c      	adds	r6, #12
    4ad4:	e7b9      	b.n	4a4a <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
    4ad6:	bf00      	nop
    4ad8:	20001980 	.word	0x20001980
    4adc:	e000ed90 	.word	0xe000ed90
    4ae0:	20002d17 	.word	0x20002d17

00004ae4 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    4ae4:	4b01      	ldr	r3, [pc, #4]	; (4aec <__stdout_hook_install+0x8>)
    4ae6:	6018      	str	r0, [r3, #0]
}
    4ae8:	4770      	bx	lr
    4aea:	bf00      	nop
    4aec:	200002d8 	.word	0x200002d8

00004af0 <remoteproc_mgr_boot>:
{
	/* UARTE */
	/* Assign specific GPIOs that will be used to get UARTE from
	 * nRF5340 Network MCU.
	 */
	CPUNET_UARTE_PORT_TRX->PIN_CNF[CPUNET_UARTE_PIN_TX] =
    4af0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    4af4:	4a09      	ldr	r2, [pc, #36]	; (4b1c <remoteproc_mgr_boot+0x2c>)
	 * this case do the remainder of actions to properly configure and
	 * boot the Network MCU.
	 */

	/* Release the Network MCU, 'Release force off signal' */
	NRF_RESET->NETWORK.FORCEOFF = RESET_NETWORK_FORCEOFF_FORCEOFF_Release;
    4af6:	2000      	movs	r0, #0
	CPUNET_UARTE_PORT_TRX->PIN_CNF[CPUNET_UARTE_PIN_TX] =
    4af8:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
	CPUNET_UARTE_PORT_TRX->PIN_CNF[CPUNET_UARTE_PIN_RX] =
    4afc:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	NRF_P0->PIN_CNF[CPUNET_UARTE_PIN_RTS] =
    4b00:	f842 3cd4 	str.w	r3, [r2, #-212]
	NRF_P0->PIN_CNF[CPUNET_UARTE_PIN_CTS] =
    4b04:	f842 3cd8 	str.w	r3, [r2, #-216]
	NRF_SPU->EXTDOMAIN[0].PERM = 1 << 4;
    4b08:	2210      	movs	r2, #16
    4b0a:	4b05      	ldr	r3, [pc, #20]	; (4b20 <remoteproc_mgr_boot+0x30>)
    4b0c:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
	NRF_RESET->NETWORK.FORCEOFF = RESET_NETWORK_FORCEOFF_FORCEOFF_Release;
    4b10:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4b14:	f8c3 0614 	str.w	r0, [r3, #1556]	; 0x614

	LOG_DBG("Network MCU released.");
#endif /* !CONFIG_TRUSTED_EXECUTION_SECURE */

	return 0;
}
    4b18:	4770      	bx	lr
    4b1a:	bf00      	nop
    4b1c:	50842800 	.word	0x50842800
    4b20:	50003000 	.word	0x50003000

00004b24 <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
    4b24:	4b0e      	ldr	r3, [pc, #56]	; (4b60 <bt_hex_real+0x3c>)
    4b26:	2940      	cmp	r1, #64	; 0x40
    4b28:	bf28      	it	cs
    4b2a:	2140      	movcs	r1, #64	; 0x40
{
    4b2c:	b570      	push	{r4, r5, r6, lr}
    4b2e:	461d      	mov	r5, r3

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
    4b30:	4c0c      	ldr	r4, [pc, #48]	; (4b64 <bt_hex_real+0x40>)
    4b32:	1846      	adds	r6, r0, r1
	for (i = 0; i < len; i++) {
    4b34:	42b0      	cmp	r0, r6
    4b36:	f103 0302 	add.w	r3, r3, #2
    4b3a:	d104      	bne.n	4b46 <bt_hex_real+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
    4b3c:	2300      	movs	r3, #0
    4b3e:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
    4b42:	4807      	ldr	r0, [pc, #28]	; (4b60 <bt_hex_real+0x3c>)
    4b44:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
    4b46:	7802      	ldrb	r2, [r0, #0]
    4b48:	0912      	lsrs	r2, r2, #4
    4b4a:	5ca2      	ldrb	r2, [r4, r2]
    4b4c:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
    4b50:	f810 2b01 	ldrb.w	r2, [r0], #1
    4b54:	f002 020f 	and.w	r2, r2, #15
    4b58:	5ca2      	ldrb	r2, [r4, r2]
    4b5a:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
    4b5e:	e7e9      	b.n	4b34 <bt_hex_real+0x10>
    4b60:	20002d18 	.word	0x20002d18
    4b64:	000173e4 	.word	0x000173e4

00004b68 <bt_addr_le_str_real>:

	return str;
}

const char *bt_addr_le_str_real(const bt_addr_le_t *addr)
{
    4b68:	b530      	push	{r4, r5, lr}
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    4b6a:	7803      	ldrb	r3, [r0, #0]
    4b6c:	b08b      	sub	sp, #44	; 0x2c
    4b6e:	4604      	mov	r4, r0
    4b70:	ad07      	add	r5, sp, #28
    4b72:	2b03      	cmp	r3, #3
    4b74:	d821      	bhi.n	4bba <bt_addr_le_str_real+0x52>
    4b76:	e8df f003 	tbb	[pc, r3]
    4b7a:	1a02      	.short	0x1a02
    4b7c:	1e1c      	.short	0x1e1c
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    4b7e:	4912      	ldr	r1, [pc, #72]	; (4bc8 <bt_addr_le_str_real+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    4b80:	4628      	mov	r0, r5
    4b82:	f00d fb72 	bl	1226a <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    4b86:	7863      	ldrb	r3, [r4, #1]
    4b88:	211e      	movs	r1, #30
    4b8a:	9304      	str	r3, [sp, #16]
    4b8c:	78a3      	ldrb	r3, [r4, #2]
    4b8e:	4a0f      	ldr	r2, [pc, #60]	; (4bcc <bt_addr_le_str_real+0x64>)
    4b90:	9303      	str	r3, [sp, #12]
    4b92:	78e3      	ldrb	r3, [r4, #3]
    4b94:	9505      	str	r5, [sp, #20]
    4b96:	9302      	str	r3, [sp, #8]
    4b98:	7923      	ldrb	r3, [r4, #4]
    4b9a:	480d      	ldr	r0, [pc, #52]	; (4bd0 <bt_addr_le_str_real+0x68>)
    4b9c:	9301      	str	r3, [sp, #4]
    4b9e:	7963      	ldrb	r3, [r4, #5]
    4ba0:	9300      	str	r3, [sp, #0]
    4ba2:	79a3      	ldrb	r3, [r4, #6]
    4ba4:	f00b fc6c 	bl	10480 <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
    4ba8:	4809      	ldr	r0, [pc, #36]	; (4bd0 <bt_addr_le_str_real+0x68>)
    4baa:	b00b      	add	sp, #44	; 0x2c
    4bac:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
    4bae:	4909      	ldr	r1, [pc, #36]	; (4bd4 <bt_addr_le_str_real+0x6c>)
    4bb0:	e7e6      	b.n	4b80 <bt_addr_le_str_real+0x18>
		strcpy(type, "public-id");
    4bb2:	4909      	ldr	r1, [pc, #36]	; (4bd8 <bt_addr_le_str_real+0x70>)
    4bb4:	e7e4      	b.n	4b80 <bt_addr_le_str_real+0x18>
		strcpy(type, "random-id");
    4bb6:	4909      	ldr	r1, [pc, #36]	; (4bdc <bt_addr_le_str_real+0x74>)
    4bb8:	e7e2      	b.n	4b80 <bt_addr_le_str_real+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    4bba:	210a      	movs	r1, #10
    4bbc:	4628      	mov	r0, r5
    4bbe:	4a08      	ldr	r2, [pc, #32]	; (4be0 <bt_addr_le_str_real+0x78>)
    4bc0:	f00b fc5e 	bl	10480 <snprintk>
		break;
    4bc4:	e7df      	b.n	4b86 <bt_addr_le_str_real+0x1e>
    4bc6:	bf00      	nop
    4bc8:	0001739f 	.word	0x0001739f
    4bcc:	000173c1 	.word	0x000173c1
    4bd0:	20002d99 	.word	0x20002d99
    4bd4:	000173a6 	.word	0x000173a6
    4bd8:	000173ad 	.word	0x000173ad
    4bdc:	000173b7 	.word	0x000173b7
    4be0:	00018ad4 	.word	0x00018ad4

00004be4 <save_id>:
}

#define ID_DATA_LEN(array) (bt_dev.id_count * sizeof(array[0]))

static void save_id(struct k_work *work)
{
    4be4:	b538      	push	{r3, r4, r5, lr}
    4be6:	4b14      	ldr	r3, [pc, #80]	; (4c38 <save_id+0x54>)
    4be8:	4c14      	ldr	r4, [pc, #80]	; (4c3c <save_id+0x58>)
	int err;
	BT_INFO("Saving ID");
	err = settings_save_one("bt/id", &bt_dev.id_addr,
				ID_DATA_LEN(bt_dev.id_addr));
    4bea:	4d15      	ldr	r5, [pc, #84]	; (4c40 <save_id+0x5c>)
    4bec:	1ae4      	subs	r4, r4, r3
    4bee:	08e4      	lsrs	r4, r4, #3
	BT_INFO("Saving ID");
    4bf0:	01a4      	lsls	r4, r4, #6
    4bf2:	4814      	ldr	r0, [pc, #80]	; (4c44 <save_id+0x60>)
    4bf4:	f044 0103 	orr.w	r1, r4, #3
    4bf8:	f00c f85c 	bl	10cb4 <log_0>
	err = settings_save_one("bt/id", &bt_dev.id_addr,
    4bfc:	79ea      	ldrb	r2, [r5, #7]
    4bfe:	4629      	mov	r1, r5
    4c00:	4811      	ldr	r0, [pc, #68]	; (4c48 <save_id+0x64>)
    4c02:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    4c06:	f7fe f897 	bl	2d38 <settings_save_one>
	if (err) {
    4c0a:	4601      	mov	r1, r0
    4c0c:	b120      	cbz	r0, 4c18 <save_id+0x34>
		BT_ERR("Failed to save ID (err %d)", err);
    4c0e:	480f      	ldr	r0, [pc, #60]	; (4c4c <save_id+0x68>)
    4c10:	f044 0201 	orr.w	r2, r4, #1
    4c14:	f00c f85b 	bl	10cce <log_1>
	}

#if defined(CONFIG_BT_PRIVACY)
	err = settings_save_one("bt/irk", bt_dev.irk, ID_DATA_LEN(bt_dev.irk));
    4c18:	79ea      	ldrb	r2, [r5, #7]
    4c1a:	490d      	ldr	r1, [pc, #52]	; (4c50 <save_id+0x6c>)
    4c1c:	480d      	ldr	r0, [pc, #52]	; (4c54 <save_id+0x70>)
    4c1e:	0112      	lsls	r2, r2, #4
    4c20:	f7fe f88a 	bl	2d38 <settings_save_one>
	if (err) {
    4c24:	4601      	mov	r1, r0
    4c26:	b130      	cbz	r0, 4c36 <save_id+0x52>
		BT_ERR("Failed to save IRK (err %d)", err);
    4c28:	f044 0201 	orr.w	r2, r4, #1
    4c2c:	480a      	ldr	r0, [pc, #40]	; (4c58 <save_id+0x74>)
	}
#endif
}
    4c2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Failed to save IRK (err %d)", err);
    4c32:	f00c b84c 	b.w	10cce <log_1>
}
    4c36:	bd38      	pop	{r3, r4, r5, pc}
    4c38:	00015a00 	.word	0x00015a00
    4c3c:	00015a60 	.word	0x00015a60
    4c40:	20000000 	.word	0x20000000
    4c44:	000173fc 	.word	0x000173fc
    4c48:	00017406 	.word	0x00017406
    4c4c:	0001740c 	.word	0x0001740c
    4c50:	20000138 	.word	0x20000138
    4c54:	00017427 	.word	0x00017427
    4c58:	0001742e 	.word	0x0001742e

00004c5c <set>:
{
    4c5c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    4c60:	4605      	mov	r5, r0
    4c62:	4616      	mov	r6, r2
    4c64:	461f      	mov	r7, r3
	if (!name) {
    4c66:	b960      	cbnz	r0, 4c82 <set+0x26>
    4c68:	4941      	ldr	r1, [pc, #260]	; (4d70 <set+0x114>)
    4c6a:	4b42      	ldr	r3, [pc, #264]	; (4d74 <set+0x118>)
		BT_ERR("Insufficient number of arguments");
    4c6c:	4842      	ldr	r0, [pc, #264]	; (4d78 <set+0x11c>)
    4c6e:	1ac9      	subs	r1, r1, r3
    4c70:	08c9      	lsrs	r1, r1, #3
    4c72:	0189      	lsls	r1, r1, #6
    4c74:	f041 0101 	orr.w	r1, r1, #1
    4c78:	f00c f81c 	bl	10cb4 <log_0>
	return -ENOENT;
    4c7c:	f06f 0401 	mvn.w	r4, #1
    4c80:	e019      	b.n	4cb6 <set+0x5a>
	len = settings_name_next(name, &next);
    4c82:	a901      	add	r1, sp, #4
    4c84:	f00c fcd0 	bl	11628 <settings_name_next>
	if (!strncmp(name, "id", len)) {
    4c88:	493c      	ldr	r1, [pc, #240]	; (4d7c <set+0x120>)
    4c8a:	4602      	mov	r2, r0
	len = settings_name_next(name, &next);
    4c8c:	4680      	mov	r8, r0
	if (!strncmp(name, "id", len)) {
    4c8e:	4628      	mov	r0, r5
    4c90:	f00d fb24 	bl	122dc <strncmp>
    4c94:	4604      	mov	r4, r0
    4c96:	bb78      	cbnz	r0, 4cf8 <set+0x9c>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    4c98:	4d39      	ldr	r5, [pc, #228]	; (4d80 <set+0x124>)
    4c9a:	e8d5 3faf 	lda	r3, [r5]
		if (atomic_test_bit(bt_dev.flags, BT_DEV_PRESET_ID)) {
    4c9e:	075b      	lsls	r3, r3, #29
    4ca0:	d50d      	bpl.n	4cbe <set+0x62>
    4ca2:	4933      	ldr	r1, [pc, #204]	; (4d70 <set+0x114>)
    4ca4:	4b33      	ldr	r3, [pc, #204]	; (4d74 <set+0x118>)
			BT_WARN("Ignoring identities stored in flash");
    4ca6:	4837      	ldr	r0, [pc, #220]	; (4d84 <set+0x128>)
    4ca8:	1ac9      	subs	r1, r1, r3
    4caa:	08c9      	lsrs	r1, r1, #3
    4cac:	0189      	lsls	r1, r1, #6
    4cae:	f041 0102 	orr.w	r1, r1, #2
    4cb2:	f00b ffff 	bl	10cb4 <log_0>
}
    4cb6:	4620      	mov	r0, r4
    4cb8:	b002      	add	sp, #8
    4cba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		len = read_cb(cb_arg, &bt_dev.id_addr, sizeof(bt_dev.id_addr));
    4cbe:	3d94      	subs	r5, #148	; 0x94
    4cc0:	2207      	movs	r2, #7
    4cc2:	4629      	mov	r1, r5
    4cc4:	4638      	mov	r0, r7
    4cc6:	47b0      	blx	r6
		if (len < sizeof(bt_dev.id_addr[0])) {
    4cc8:	2806      	cmp	r0, #6
    4cca:	d810      	bhi.n	4cee <set+0x92>
    4ccc:	4b29      	ldr	r3, [pc, #164]	; (4d74 <set+0x118>)
    4cce:	4928      	ldr	r1, [pc, #160]	; (4d70 <set+0x114>)
				BT_ERR("Invalid length ID address in storage");
    4cd0:	482d      	ldr	r0, [pc, #180]	; (4d88 <set+0x12c>)
    4cd2:	1ac9      	subs	r1, r1, r3
    4cd4:	08c9      	lsrs	r1, r1, #3
    4cd6:	0189      	lsls	r1, r1, #6
    4cd8:	f041 0101 	orr.w	r1, r1, #1
    4cdc:	f00b ffea 	bl	10cb4 <log_0>
			(void)memset(bt_dev.id_addr, 0,
    4ce0:	2207      	movs	r2, #7
    4ce2:	4621      	mov	r1, r4
    4ce4:	4628      	mov	r0, r5
    4ce6:	f00d fb43 	bl	12370 <memset>
			bt_dev.id_count = 0U;
    4cea:	71ec      	strb	r4, [r5, #7]
    4cec:	e7e3      	b.n	4cb6 <set+0x5a>
			bt_dev.id_count = len / sizeof(bt_dev.id_addr[0]);
    4cee:	2307      	movs	r3, #7
    4cf0:	fbb0 f0f3 	udiv	r0, r0, r3
    4cf4:	71e8      	strb	r0, [r5, #7]
			for (i = 0; i < bt_dev.id_count; i++) {
    4cf6:	e7de      	b.n	4cb6 <set+0x5a>
	if (!strncmp(name, "name", len)) {
    4cf8:	4642      	mov	r2, r8
    4cfa:	4628      	mov	r0, r5
    4cfc:	4923      	ldr	r1, [pc, #140]	; (4d8c <set+0x130>)
    4cfe:	f00d faed 	bl	122dc <strncmp>
    4d02:	4604      	mov	r4, r0
    4d04:	b9a8      	cbnz	r0, 4d32 <set+0xd6>
		len = read_cb(cb_arg, &bt_dev.name, sizeof(bt_dev.name) - 1);
    4d06:	4922      	ldr	r1, [pc, #136]	; (4d90 <set+0x134>)
    4d08:	2241      	movs	r2, #65	; 0x41
    4d0a:	4638      	mov	r0, r7
    4d0c:	47b0      	blx	r6
		if (len < 0) {
    4d0e:	1e01      	subs	r1, r0, #0
    4d10:	da0a      	bge.n	4d28 <set+0xcc>
    4d12:	4b18      	ldr	r3, [pc, #96]	; (4d74 <set+0x118>)
    4d14:	4a16      	ldr	r2, [pc, #88]	; (4d70 <set+0x114>)
			BT_ERR("Failed to read device name from storage"
    4d16:	481f      	ldr	r0, [pc, #124]	; (4d94 <set+0x138>)
    4d18:	1ad2      	subs	r2, r2, r3
    4d1a:	08d2      	lsrs	r2, r2, #3
    4d1c:	0192      	lsls	r2, r2, #6
    4d1e:	f042 0201 	orr.w	r2, r2, #1
    4d22:	f00b ffd4 	bl	10cce <log_1>
    4d26:	e7c6      	b.n	4cb6 <set+0x5a>
			bt_dev.name[len] = '\0';
    4d28:	481b      	ldr	r0, [pc, #108]	; (4d98 <set+0x13c>)
    4d2a:	4401      	add	r1, r0
    4d2c:	f881 4178 	strb.w	r4, [r1, #376]	; 0x178
			BT_DBG("Name set to %s", log_strdup(bt_dev.name));
    4d30:	e7c1      	b.n	4cb6 <set+0x5a>
	if (!strncmp(name, "irk", len)) {
    4d32:	4642      	mov	r2, r8
    4d34:	4628      	mov	r0, r5
    4d36:	4919      	ldr	r1, [pc, #100]	; (4d9c <set+0x140>)
    4d38:	f00d fad0 	bl	122dc <strncmp>
    4d3c:	4604      	mov	r4, r0
    4d3e:	2800      	cmp	r0, #0
    4d40:	d19c      	bne.n	4c7c <set+0x20>
		len = read_cb(cb_arg, bt_dev.irk, sizeof(bt_dev.irk));
    4d42:	2210      	movs	r2, #16
    4d44:	4638      	mov	r0, r7
    4d46:	4916      	ldr	r1, [pc, #88]	; (4da0 <set+0x144>)
    4d48:	47b0      	blx	r6
		if (len < sizeof(bt_dev.irk[0])) {
    4d4a:	280f      	cmp	r0, #15
    4d4c:	d8b3      	bhi.n	4cb6 <set+0x5a>
    4d4e:	4b09      	ldr	r3, [pc, #36]	; (4d74 <set+0x118>)
    4d50:	4907      	ldr	r1, [pc, #28]	; (4d70 <set+0x114>)
				BT_ERR("Invalid length IRK in storage");
    4d52:	4814      	ldr	r0, [pc, #80]	; (4da4 <set+0x148>)
    4d54:	1ac9      	subs	r1, r1, r3
    4d56:	08c9      	lsrs	r1, r1, #3
    4d58:	0189      	lsls	r1, r1, #6
    4d5a:	f041 0101 	orr.w	r1, r1, #1
    4d5e:	f00b ffa9 	bl	10cb4 <log_0>
				(void)memset(bt_dev.irk, 0, sizeof(bt_dev.irk));
    4d62:	2210      	movs	r2, #16
    4d64:	4621      	mov	r1, r4
    4d66:	480e      	ldr	r0, [pc, #56]	; (4da0 <set+0x144>)
    4d68:	f00d fb02 	bl	12370 <memset>
    4d6c:	e7a3      	b.n	4cb6 <set+0x5a>
    4d6e:	bf00      	nop
    4d70:	00015a60 	.word	0x00015a60
    4d74:	00015a00 	.word	0x00015a00
    4d78:	0001744a 	.word	0x0001744a
    4d7c:	000173b4 	.word	0x000173b4
    4d80:	20000094 	.word	0x20000094
    4d84:	0001746b 	.word	0x0001746b
    4d88:	0001748f 	.word	0x0001748f
    4d8c:	00017ec9 	.word	0x00017ec9
    4d90:	20000178 	.word	0x20000178
    4d94:	000174b4 	.word	0x000174b4
    4d98:	20000000 	.word	0x20000000
    4d9c:	0001742a 	.word	0x0001742a
    4da0:	20000138 	.word	0x20000138
    4da4:	000174e6 	.word	0x000174e6

00004da8 <bt_settings_encode_key>:
{
    4da8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4dac:	b088      	sub	sp, #32
    4dae:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
    4db2:	799c      	ldrb	r4, [r3, #6]
    4db4:	795d      	ldrb	r5, [r3, #5]
    4db6:	791e      	ldrb	r6, [r3, #4]
    4db8:	78df      	ldrb	r7, [r3, #3]
    4dba:	f893 c002 	ldrb.w	ip, [r3, #2]
    4dbe:	f893 e001 	ldrb.w	lr, [r3, #1]
    4dc2:	781b      	ldrb	r3, [r3, #0]
	if (key) {
    4dc4:	f1b8 0f00 	cmp.w	r8, #0
    4dc8:	d00e      	beq.n	4de8 <bt_settings_encode_key+0x40>
		snprintk(path, path_size,
    4dca:	e9cd 3806 	strd	r3, r8, [sp, #24]
    4dce:	e9cd ce04 	strd	ip, lr, [sp, #16]
    4dd2:	4613      	mov	r3, r2
    4dd4:	e9cd 6702 	strd	r6, r7, [sp, #8]
    4dd8:	e9cd 4500 	strd	r4, r5, [sp]
    4ddc:	4a08      	ldr	r2, [pc, #32]	; (4e00 <bt_settings_encode_key+0x58>)
    4dde:	f00b fb4f 	bl	10480 <snprintk>
}
    4de2:	b008      	add	sp, #32
    4de4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		snprintk(path, path_size,
    4de8:	e9cd e305 	strd	lr, r3, [sp, #20]
    4dec:	e9cd 7c03 	strd	r7, ip, [sp, #12]
    4df0:	4613      	mov	r3, r2
    4df2:	e9cd 5601 	strd	r5, r6, [sp, #4]
    4df6:	4a03      	ldr	r2, [pc, #12]	; (4e04 <bt_settings_encode_key+0x5c>)
    4df8:	9400      	str	r4, [sp, #0]
    4dfa:	f00b fb41 	bl	10480 <snprintk>
}
    4dfe:	e7f0      	b.n	4de2 <bt_settings_encode_key+0x3a>
    4e00:	00017504 	.word	0x00017504
    4e04:	00017528 	.word	0x00017528

00004e08 <bt_settings_save_id>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    4e08:	4907      	ldr	r1, [pc, #28]	; (4e28 <bt_settings_save_id+0x20>)
    4e0a:	e8d1 3fef 	ldaex	r3, [r1]
    4e0e:	f043 0201 	orr.w	r2, r3, #1
    4e12:	e8c1 2fe0 	stlex	r0, r2, [r1]
    4e16:	2800      	cmp	r0, #0
    4e18:	d1f7      	bne.n	4e0a <bt_settings_save_id+0x2>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    4e1a:	07db      	lsls	r3, r3, #31
    4e1c:	d403      	bmi.n	4e26 <bt_settings_save_id+0x1e>
		k_queue_append(&work_q->queue, work);
    4e1e:	4803      	ldr	r0, [pc, #12]	; (4e2c <bt_settings_save_id+0x24>)
    4e20:	3908      	subs	r1, #8
    4e22:	f010 b836 	b.w	14e92 <k_queue_append>
K_WORK_DEFINE(save_id_work, save_id);

void bt_settings_save_id(void)
{
	k_work_submit(&save_id_work);
}
    4e26:	4770      	bx	lr
    4e28:	200002e4 	.word	0x200002e4
    4e2c:	200010d0 	.word	0x200010d0

00004e30 <commit>:

static int commit(void)
{
    4e30:	b538      	push	{r3, r4, r5, lr}
	BT_DBG("");

#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	if (bt_dev.name[0] == '\0') {
    4e32:	4c19      	ldr	r4, [pc, #100]	; (4e98 <commit+0x68>)
    4e34:	f894 3178 	ldrb.w	r3, [r4, #376]	; 0x178
    4e38:	b913      	cbnz	r3, 4e40 <commit+0x10>
		bt_set_name(CONFIG_BT_DEVICE_NAME);
    4e3a:	4818      	ldr	r0, [pc, #96]	; (4e9c <commit+0x6c>)
    4e3c:	f002 f84e 	bl	6edc <bt_set_name>
	}
#endif
	if (!bt_dev.id_count) {
    4e40:	79e3      	ldrb	r3, [r4, #7]
    4e42:	b99b      	cbnz	r3, 4e6c <commit+0x3c>
		bt_setup_public_id_addr();
    4e44:	f002 f8e4 	bl	7010 <bt_setup_public_id_addr>
	}

	if (!bt_dev.id_count) {
    4e48:	79e3      	ldrb	r3, [r4, #7]
    4e4a:	b97b      	cbnz	r3, 4e6c <commit+0x3c>
		int err;

		err = bt_setup_random_id_addr();
    4e4c:	f002 f9be 	bl	71cc <bt_setup_random_id_addr>
		if (err) {
    4e50:	4604      	mov	r4, r0
    4e52:	b158      	cbz	r0, 4e6c <commit+0x3c>
    4e54:	4912      	ldr	r1, [pc, #72]	; (4ea0 <commit+0x70>)
    4e56:	4b13      	ldr	r3, [pc, #76]	; (4ea4 <commit+0x74>)
			BT_ERR("Unable to setup an identity address");
    4e58:	4813      	ldr	r0, [pc, #76]	; (4ea8 <commit+0x78>)
    4e5a:	1ac9      	subs	r1, r1, r3
    4e5c:	08c9      	lsrs	r1, r1, #3
    4e5e:	0189      	lsls	r1, r1, #6
    4e60:	f041 0101 	orr.w	r1, r1, #1
    4e64:	f00b ff26 	bl	10cb4 <log_0>
		BT_DBG("Storing Identity Information");
		bt_settings_save_id();
	}

	return 0;
}
    4e68:	4620      	mov	r0, r4
    4e6a:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    4e6c:	4d0f      	ldr	r5, [pc, #60]	; (4eac <commit+0x7c>)
    4e6e:	e8d5 3faf 	lda	r3, [r5]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    4e72:	079b      	lsls	r3, r3, #30
    4e74:	d401      	bmi.n	4e7a <commit+0x4a>
		bt_finalize_init();
    4e76:	f001 ff21 	bl	6cbc <bt_finalize_init>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4e7a:	e8d5 4fef 	ldaex	r4, [r5]
    4e7e:	f424 4300 	bic.w	r3, r4, #32768	; 0x8000
    4e82:	e8c5 3fe2 	stlex	r2, r3, [r5]
    4e86:	2a00      	cmp	r2, #0
    4e88:	d1f7      	bne.n	4e7a <commit+0x4a>
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_STORE_ID)) {
    4e8a:	f414 4400 	ands.w	r4, r4, #32768	; 0x8000
    4e8e:	d0eb      	beq.n	4e68 <commit+0x38>
		bt_settings_save_id();
    4e90:	f7ff ffba 	bl	4e08 <bt_settings_save_id>
	return 0;
    4e94:	2400      	movs	r4, #0
    4e96:	e7e7      	b.n	4e68 <commit+0x38>
    4e98:	20000000 	.word	0x20000000
    4e9c:	00017549 	.word	0x00017549
    4ea0:	00015a60 	.word	0x00015a60
    4ea4:	00015a00 	.word	0x00015a00
    4ea8:	0001754f 	.word	0x0001754f
    4eac:	20000094 	.word	0x20000094

00004eb0 <bt_settings_init>:

SETTINGS_STATIC_HANDLER_DEFINE(bt, "bt", NULL, set, commit, NULL);

int bt_settings_init(void)
{
    4eb0:	b510      	push	{r4, lr}
	int err;

	BT_DBG("");

	err = settings_subsys_init();
    4eb2:	f7fe f8ad 	bl	3010 <settings_subsys_init>
	if (err) {
    4eb6:	4604      	mov	r4, r0
    4eb8:	b150      	cbz	r0, 4ed0 <bt_settings_init+0x20>
    4eba:	4a06      	ldr	r2, [pc, #24]	; (4ed4 <bt_settings_init+0x24>)
    4ebc:	4b06      	ldr	r3, [pc, #24]	; (4ed8 <bt_settings_init+0x28>)
		BT_ERR("settings_subsys_init failed (err %d)", err);
    4ebe:	4601      	mov	r1, r0
    4ec0:	1ad2      	subs	r2, r2, r3
    4ec2:	08d2      	lsrs	r2, r2, #3
    4ec4:	0192      	lsls	r2, r2, #6
    4ec6:	4805      	ldr	r0, [pc, #20]	; (4edc <bt_settings_init+0x2c>)
    4ec8:	f042 0201 	orr.w	r2, r2, #1
    4ecc:	f00b feff 	bl	10cce <log_1>
		return err;
	}

	return 0;
}
    4ed0:	4620      	mov	r0, r4
    4ed2:	bd10      	pop	{r4, pc}
    4ed4:	00015a60 	.word	0x00015a60
    4ed8:	00015a00 	.word	0x00015a00
    4edc:	00017573 	.word	0x00017573

00004ee0 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    4ee0:	b4f0      	push	{r4, r5, r6, r7}
	switch (src->type) {
    4ee2:	7802      	ldrb	r2, [r0, #0]
{
    4ee4:	4604      	mov	r4, r0
	switch (src->type) {
    4ee6:	2a01      	cmp	r2, #1
{
    4ee8:	460b      	mov	r3, r1
	switch (src->type) {
    4eea:	d016      	beq.n	4f1a <uuid_to_uuid128+0x3a>
    4eec:	2a02      	cmp	r2, #2
    4eee:	d02c      	beq.n	4f4a <uuid_to_uuid128+0x6a>
    4ef0:	b98a      	cbnz	r2, 4f16 <uuid_to_uuid128+0x36>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
    4ef2:	460d      	mov	r5, r1
    4ef4:	4a18      	ldr	r2, [pc, #96]	; (4f58 <uuid_to_uuid128+0x78>)
    4ef6:	f102 0710 	add.w	r7, r2, #16
    4efa:	462e      	mov	r6, r5
    4efc:	6810      	ldr	r0, [r2, #0]
    4efe:	6851      	ldr	r1, [r2, #4]
    4f00:	3208      	adds	r2, #8
    4f02:	c603      	stmia	r6!, {r0, r1}
    4f04:	42ba      	cmp	r2, r7
    4f06:	4635      	mov	r5, r6
    4f08:	d1f7      	bne.n	4efa <uuid_to_uuid128+0x1a>
    4f0a:	7812      	ldrb	r2, [r2, #0]
    4f0c:	7032      	strb	r2, [r6, #0]
		sys_put_le16(BT_UUID_16(src)->val,
    4f0e:	8862      	ldrh	r2, [r4, #2]
	dst[0] = val;
    4f10:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    4f12:	0a12      	lsrs	r2, r2, #8
    4f14:	739a      	strb	r2, [r3, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    4f16:	bcf0      	pop	{r4, r5, r6, r7}
    4f18:	4770      	bx	lr
		*dst = uuid128_base;
    4f1a:	460d      	mov	r5, r1
    4f1c:	4a0e      	ldr	r2, [pc, #56]	; (4f58 <uuid_to_uuid128+0x78>)
    4f1e:	f102 0710 	add.w	r7, r2, #16
    4f22:	462e      	mov	r6, r5
    4f24:	6810      	ldr	r0, [r2, #0]
    4f26:	6851      	ldr	r1, [r2, #4]
    4f28:	3208      	adds	r2, #8
    4f2a:	c603      	stmia	r6!, {r0, r1}
    4f2c:	42ba      	cmp	r2, r7
    4f2e:	4635      	mov	r5, r6
    4f30:	d1f7      	bne.n	4f22 <uuid_to_uuid128+0x42>
    4f32:	7812      	ldrb	r2, [r2, #0]
    4f34:	7032      	strb	r2, [r6, #0]
		sys_put_le32(BT_UUID_32(src)->val,
    4f36:	6862      	ldr	r2, [r4, #4]
    4f38:	f3c2 2107 	ubfx	r1, r2, #8, #8
	dst[0] = val;
    4f3c:	735a      	strb	r2, [r3, #13]
	sys_put_le16(val >> 16, &dst[2]);
    4f3e:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
    4f40:	73da      	strb	r2, [r3, #15]
	dst[1] = val >> 8;
    4f42:	0a12      	lsrs	r2, r2, #8
    4f44:	7399      	strb	r1, [r3, #14]
    4f46:	741a      	strb	r2, [r3, #16]
}
    4f48:	e7e5      	b.n	4f16 <uuid_to_uuid128+0x36>
		memcpy(dst, src, sizeof(*dst));
    4f4a:	4601      	mov	r1, r0
}
    4f4c:	bcf0      	pop	{r4, r5, r6, r7}
		memcpy(dst, src, sizeof(*dst));
    4f4e:	2211      	movs	r2, #17
    4f50:	4618      	mov	r0, r3
    4f52:	f00d b9e2 	b.w	1231a <memcpy>
    4f56:	bf00      	nop
    4f58:	000175a7 	.word	0x000175a7

00004f5c <bt_buf_get_rx>:
	if (IS_ENABLED(CONFIG_BT_ISO) && type == BT_BUF_ISO_IN) {
		return bt_iso_get_rx(timeout);
	}

#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	if (type == BT_BUF_EVT) {
    4f5c:	2801      	cmp	r0, #1
{
    4f5e:	b538      	push	{r3, r4, r5, lr}
    4f60:	4605      	mov	r5, r0
	return net_buf_alloc_fixed(pool, timeout);
    4f62:	bf0c      	ite	eq
    4f64:	4806      	ldreq	r0, [pc, #24]	; (4f80 <bt_buf_get_rx+0x24>)
    4f66:	4807      	ldrne	r0, [pc, #28]	; (4f84 <bt_buf_get_rx+0x28>)
    4f68:	f00f f822 	bl	13fb0 <net_buf_alloc_fixed>
    4f6c:	4604      	mov	r4, r0
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
    4f6e:	b120      	cbz	r0, 4f7a <bt_buf_get_rx+0x1e>
	net_buf_simple_reserve(&buf->b, reserve);
    4f70:	2101      	movs	r1, #1
    4f72:	3008      	adds	r0, #8
    4f74:	f00f f83b 	bl	13fee <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    4f78:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    4f7a:	4620      	mov	r0, r4
    4f7c:	bd38      	pop	{r3, r4, r5, pc}
    4f7e:	bf00      	nop
    4f80:	20000798 	.word	0x20000798
    4f84:	200006d0 	.word	0x200006d0

00004f88 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
    4f88:	4602      	mov	r2, r0
    4f8a:	460b      	mov	r3, r1
    4f8c:	b570      	push	{r4, r5, r6, lr}
    4f8e:	f04f 0120 	mov.w	r1, #32
    4f92:	f3ef 8511 	mrs	r5, BASEPRI
    4f96:	f381 8811 	msr	BASEPRI, r1
    4f9a:	f3bf 8f6f 	isb	sy
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
	bt_dev.sent_cmd = NULL;
    4f9e:	2000      	movs	r0, #0
	buf = bt_dev.sent_cmd;
    4fa0:	490b      	ldr	r1, [pc, #44]	; (4fd0 <bt_buf_get_cmd_complete+0x48>)
    4fa2:	f8d1 4100 	ldr.w	r4, [r1, #256]	; 0x100
	bt_dev.sent_cmd = NULL;
    4fa6:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
	__asm__ volatile(
    4faa:	f385 8811 	msr	BASEPRI, r5
    4fae:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    4fb2:	b924      	cbnz	r4, 4fbe <bt_buf_get_cmd_complete+0x36>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
    4fb4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    4fb8:	2001      	movs	r0, #1
    4fba:	f7ff bfcf 	b.w	4f5c <bt_buf_get_rx>
    4fbe:	2101      	movs	r1, #1
		buf->len = 0U;
    4fc0:	81a0      	strh	r0, [r4, #12]
    4fc2:	7521      	strb	r1, [r4, #20]
    4fc4:	f104 0008 	add.w	r0, r4, #8
    4fc8:	f00f f811 	bl	13fee <net_buf_simple_reserve>
}
    4fcc:	4620      	mov	r0, r4
    4fce:	bd70      	pop	{r4, r5, r6, pc}
    4fd0:	20000000 	.word	0x20000000

00004fd4 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
    4fd4:	b570      	push	{r4, r5, r6, lr}
    4fd6:	4604      	mov	r4, r0
	switch (evt) {
    4fd8:	2c0f      	cmp	r4, #15
{
    4fda:	460d      	mov	r5, r1
    4fdc:	4610      	mov	r0, r2
    4fde:	4619      	mov	r1, r3
	switch (evt) {
    4fe0:	d805      	bhi.n	4fee <bt_buf_get_evt+0x1a>
    4fe2:	2c0d      	cmp	r4, #13
    4fe4:	d912      	bls.n	500c <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_DISCARDABLE_BUF_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
    4fe6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
    4fea:	f7ff bfcd 	b.w	4f88 <bt_buf_get_cmd_complete>
	switch (evt) {
    4fee:	2c13      	cmp	r4, #19
    4ff0:	d10c      	bne.n	500c <bt_buf_get_evt+0x38>
	return net_buf_alloc_fixed(pool, timeout);
    4ff2:	480b      	ldr	r0, [pc, #44]	; (5020 <bt_buf_get_evt+0x4c>)
    4ff4:	f00e ffdc 	bl	13fb0 <net_buf_alloc_fixed>
			if (buf) {
    4ff8:	4604      	mov	r4, r0
    4ffa:	b128      	cbz	r0, 5008 <bt_buf_get_evt+0x34>
	net_buf_simple_reserve(&buf->b, reserve);
    4ffc:	2101      	movs	r1, #1
    4ffe:	3008      	adds	r0, #8
    5000:	f00e fff5 	bl	13fee <net_buf_simple_reserve>
    5004:	2301      	movs	r3, #1
    5006:	7523      	strb	r3, [r4, #20]
}
    5008:	4620      	mov	r0, r4
    500a:	bd70      	pop	{r4, r5, r6, pc}
	return net_buf_alloc_fixed(pool, timeout);
    500c:	4602      	mov	r2, r0
    500e:	460b      	mov	r3, r1
		if (discardable) {
    5010:	b10d      	cbz	r5, 5016 <bt_buf_get_evt+0x42>
    5012:	4804      	ldr	r0, [pc, #16]	; (5024 <bt_buf_get_evt+0x50>)
    5014:	e7ee      	b.n	4ff4 <bt_buf_get_evt+0x20>
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    5016:	2001      	movs	r0, #1
}
    5018:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    501c:	f7ff bf9e 	b.w	4f5c <bt_buf_get_rx>
    5020:	200007c0 	.word	0x200007c0
    5024:	20000720 	.word	0x20000720

00005028 <le_dhkey_complete>:
	if (dh_key_cb) {
    5028:	4905      	ldr	r1, [pc, #20]	; (5040 <le_dhkey_complete+0x18>)
    502a:	680b      	ldr	r3, [r1, #0]
    502c:	b133      	cbz	r3, 503c <le_dhkey_complete+0x14>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
    502e:	6882      	ldr	r2, [r0, #8]
		dh_key_cb = NULL;
    5030:	2000      	movs	r0, #0
    5032:	6008      	str	r0, [r1, #0]
		cb(evt->status ? NULL : evt->dhkey);
    5034:	7811      	ldrb	r1, [r2, #0]
    5036:	b901      	cbnz	r1, 503a <le_dhkey_complete+0x12>
    5038:	1c50      	adds	r0, r2, #1
    503a:	4718      	bx	r3
}
    503c:	4770      	bx	lr
    503e:	bf00      	nop
    5040:	200019ac 	.word	0x200019ac

00005044 <ver_str>:
{
    5044:	b570      	push	{r4, r5, r6, lr}
    5046:	b08c      	sub	sp, #48	; 0x30
	const char * const str[] = {
    5048:	466c      	mov	r4, sp
{
    504a:	4606      	mov	r6, r0
	const char * const str[] = {
    504c:	4d09      	ldr	r5, [pc, #36]	; (5074 <ver_str+0x30>)
	if (ver < ARRAY_SIZE(str)) {
    504e:	2e0b      	cmp	r6, #11
	const char * const str[] = {
    5050:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    5052:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    5054:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    5056:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    5058:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    505c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return str[ver];
    5060:	bf9d      	ittte	ls
    5062:	ab0c      	addls	r3, sp, #48	; 0x30
    5064:	eb03 0686 	addls.w	r6, r3, r6, lsl #2
    5068:	f856 0c30 	ldrls.w	r0, [r6, #-48]
	return "unknown";
    506c:	4802      	ldrhi	r0, [pc, #8]	; (5078 <ver_str+0x34>)
}
    506e:	b00c      	add	sp, #48	; 0x30
    5070:	bd70      	pop	{r4, r5, r6, pc}
    5072:	bf00      	nop
    5074:	00015b40 	.word	0x00015b40
    5078:	000176aa 	.word	0x000176aa

0000507c <hci_data_buf_overflow>:
    507c:	4905      	ldr	r1, [pc, #20]	; (5094 <hci_data_buf_overflow+0x18>)
    507e:	4a06      	ldr	r2, [pc, #24]	; (5098 <hci_data_buf_overflow+0x1c>)
	struct bt_hci_evt_data_buf_overflow *evt = (void *)buf->data;
    5080:	6883      	ldr	r3, [r0, #8]
    5082:	1a52      	subs	r2, r2, r1
    5084:	08d2      	lsrs	r2, r2, #3
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
    5086:	0192      	lsls	r2, r2, #6
    5088:	7819      	ldrb	r1, [r3, #0]
    508a:	4804      	ldr	r0, [pc, #16]	; (509c <hci_data_buf_overflow+0x20>)
    508c:	f042 0202 	orr.w	r2, r2, #2
    5090:	f00b be1d 	b.w	10cce <log_1>
    5094:	00015a00 	.word	0x00015a00
    5098:	00015a30 	.word	0x00015a30
    509c:	000176b2 	.word	0x000176b2

000050a0 <id_find>:
	memcpy(addrs, bt_dev.id_addr, to_copy * sizeof(bt_addr_le_t));
	*count = to_copy;
}

static int id_find(const bt_addr_le_t *addr)
{
    50a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    50a2:	4606      	mov	r6, r0
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
    50a4:	2500      	movs	r5, #0
    50a6:	4f09      	ldr	r7, [pc, #36]	; (50cc <id_find+0x2c>)
    50a8:	79fb      	ldrb	r3, [r7, #7]
    50aa:	b2ec      	uxtb	r4, r5
    50ac:	42a3      	cmp	r3, r4
    50ae:	d802      	bhi.n	50b6 <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
    50b0:	f06f 0401 	mvn.w	r4, #1
    50b4:	e008      	b.n	50c8 <id_find+0x28>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
    50b6:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    50ba:	4630      	mov	r0, r6
    50bc:	4439      	add	r1, r7
    50be:	f00d fa77 	bl	125b0 <bt_addr_le_cmp>
    50c2:	3501      	adds	r5, #1
    50c4:	2800      	cmp	r0, #0
    50c6:	d1ef      	bne.n	50a8 <id_find+0x8>
}
    50c8:	4620      	mov	r0, r4
    50ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    50cc:	20000000 	.word	0x20000000

000050d0 <valid_adv_param>:
	return true;
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    50d0:	6843      	ldr	r3, [r0, #4]
{
    50d2:	b537      	push	{r0, r1, r2, r4, r5, lr}
    50d4:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    50d6:	0558      	lsls	r0, r3, #21
    50d8:	d502      	bpl.n	50e0 <valid_adv_param+0x10>
		return false;
    50da:	2000      	movs	r0, #0
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
		return false;
	}

	return valid_adv_ext_param(param);
}
    50dc:	b003      	add	sp, #12
    50de:	bd30      	pop	{r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    50e0:	6922      	ldr	r2, [r4, #16]
    50e2:	b12a      	cbz	r2, 50f0 <valid_adv_param+0x20>
    50e4:	07d9      	lsls	r1, r3, #31
    50e6:	d5f8      	bpl.n	50da <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_USE_IDENTITY) &&
    50e8:	f003 0324 	and.w	r3, r3, #36	; 0x24
    50ec:	2b24      	cmp	r3, #36	; 0x24
    50ee:	d0f4      	beq.n	50da <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
    50f0:	4d1a      	ldr	r5, [pc, #104]	; (515c <valid_adv_param+0x8c>)
    50f2:	7820      	ldrb	r0, [r4, #0]
    50f4:	79eb      	ldrb	r3, [r5, #7]
    50f6:	4283      	cmp	r3, r0
    50f8:	d9ef      	bls.n	50da <valid_adv_param+0xa>
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
    50fa:	2300      	movs	r3, #0
    50fc:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    5100:	4669      	mov	r1, sp
    5102:	4428      	add	r0, r5
    5104:	9300      	str	r3, [sp, #0]
    5106:	f8cd 3003 	str.w	r3, [sp, #3]
    510a:	f00d fa51 	bl	125b0 <bt_addr_le_cmp>
	if (param->id >= bt_dev.id_count ||
    510e:	2800      	cmp	r0, #0
    5110:	d0e3      	beq.n	50da <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    5112:	6860      	ldr	r0, [r4, #4]
    5114:	07c2      	lsls	r2, r0, #31
    5116:	d406      	bmi.n	5126 <valid_adv_param+0x56>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    5118:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
    511c:	2b08      	cmp	r3, #8
    511e:	d802      	bhi.n	5126 <valid_adv_param+0x56>
    5120:	68a3      	ldr	r3, [r4, #8]
    5122:	2b9f      	cmp	r3, #159	; 0x9f
    5124:	d9d9      	bls.n	50da <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
    5126:	f010 0f30 	tst.w	r0, #48	; 0x30
    512a:	d002      	beq.n	5132 <valid_adv_param+0x62>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
    512c:	6923      	ldr	r3, [r4, #16]
    512e:	2b00      	cmp	r3, #0
    5130:	d0d3      	beq.n	50da <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
    5132:	06c3      	lsls	r3, r0, #27
    5134:	d401      	bmi.n	513a <valid_adv_param+0x6a>
    5136:	6923      	ldr	r3, [r4, #16]
    5138:	b943      	cbnz	r3, 514c <valid_adv_param+0x7c>
		if (param->interval_min > param->interval_max ||
    513a:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
    513e:	429a      	cmp	r2, r3
    5140:	d8cb      	bhi.n	50da <valid_adv_param+0xa>
    5142:	2a1f      	cmp	r2, #31
    5144:	d9c9      	bls.n	50da <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
    5146:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    514a:	d8c6      	bhi.n	50da <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
    514c:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
    5150:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
    5154:	bf18      	it	ne
    5156:	2001      	movne	r0, #1
    5158:	e7c0      	b.n	50dc <valid_adv_param+0xc>
    515a:	bf00      	nop
    515c:	20000000 	.word	0x20000000

00005160 <le_pkey_complete>:
{
    5160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
    5162:	6886      	ldr	r6, [r0, #8]
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    5164:	f06f 0110 	mvn.w	r1, #16
    5168:	480e      	ldr	r0, [pc, #56]	; (51a4 <le_pkey_complete+0x44>)
    516a:	f00d fa13 	bl	12594 <atomic_and>
	if (!evt->status) {
    516e:	7833      	ldrb	r3, [r6, #0]
    5170:	b943      	cbnz	r3, 5184 <le_pkey_complete+0x24>
		memcpy(pub_key, evt->key, 64);
    5172:	1c71      	adds	r1, r6, #1
    5174:	2240      	movs	r2, #64	; 0x40
    5176:	480c      	ldr	r0, [pc, #48]	; (51a8 <le_pkey_complete+0x48>)
    5178:	f00d f8cf 	bl	1231a <memcpy>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    517c:	2108      	movs	r1, #8
    517e:	4809      	ldr	r0, [pc, #36]	; (51a4 <le_pkey_complete+0x44>)
    5180:	f00d fa1f 	bl	125c2 <atomic_or>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    5184:	4d09      	ldr	r5, [pc, #36]	; (51ac <le_pkey_complete+0x4c>)
		cb->func(evt->status ? NULL : pub_key);
    5186:	4f08      	ldr	r7, [pc, #32]	; (51a8 <le_pkey_complete+0x48>)
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    5188:	682c      	ldr	r4, [r5, #0]
    518a:	b90c      	cbnz	r4, 5190 <le_pkey_complete+0x30>
	pub_key_cb = NULL;
    518c:	602c      	str	r4, [r5, #0]
}
    518e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		cb->func(evt->status ? NULL : pub_key);
    5190:	7832      	ldrb	r2, [r6, #0]
    5192:	6823      	ldr	r3, [r4, #0]
    5194:	2a00      	cmp	r2, #0
    5196:	bf0c      	ite	eq
    5198:	4638      	moveq	r0, r7
    519a:	2000      	movne	r0, #0
    519c:	4798      	blx	r3
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    519e:	6864      	ldr	r4, [r4, #4]
    51a0:	e7f3      	b.n	518a <le_pkey_complete+0x2a>
    51a2:	bf00      	nop
    51a4:	20000094 	.word	0x20000094
    51a8:	20002db7 	.word	0x20002db7
    51ac:	200019b0 	.word	0x200019b0

000051b0 <unpair>:
{
    51b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    51b4:	4606      	mov	r6, r0
    51b6:	460f      	mov	r7, r1
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, addr);
    51b8:	f003 f84a 	bl	8250 <bt_conn_lookup_addr_le>
	if (conn) {
    51bc:	4604      	mov	r4, r0
    51be:	b9b0      	cbnz	r0, 51ee <unpair+0x3e>
			keys = bt_keys_find_addr(id, addr);
    51c0:	4639      	mov	r1, r7
    51c2:	4630      	mov	r0, r6
    51c4:	f007 fe46 	bl	ce54 <bt_keys_find_addr>
		if (keys) {
    51c8:	4605      	mov	r5, r0
    51ca:	b110      	cbz	r0, 51d2 <unpair+0x22>
			bt_keys_clear(keys);
    51cc:	4628      	mov	r0, r5
    51ce:	f007 fe51 	bl	ce74 <bt_keys_clear>
	bt_gatt_clear(id, addr);
    51d2:	4639      	mov	r1, r7
    51d4:	4630      	mov	r0, r6
    51d6:	f005 fec1 	bl	af5c <bt_gatt_clear>
	if (bt_auth && bt_auth->bond_deleted) {
    51da:	4b0f      	ldr	r3, [pc, #60]	; (5218 <unpair+0x68>)
    51dc:	681b      	ldr	r3, [r3, #0]
    51de:	b1cb      	cbz	r3, 5214 <unpair+0x64>
    51e0:	6a1b      	ldr	r3, [r3, #32]
    51e2:	b1bb      	cbz	r3, 5214 <unpair+0x64>
		bt_auth->bond_deleted(id, addr);
    51e4:	4639      	mov	r1, r7
    51e6:	4630      	mov	r0, r6
}
    51e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_auth->bond_deleted(id, addr);
    51ec:	4718      	bx	r3
		if (conn->type == BT_CONN_TYPE_LE) {
    51ee:	7883      	ldrb	r3, [r0, #2]
		bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
    51f0:	2113      	movs	r1, #19
		if (conn->type == BT_CONN_TYPE_LE) {
    51f2:	2b01      	cmp	r3, #1
    51f4:	f04f 0300 	mov.w	r3, #0
	struct bt_keys *keys = NULL;
    51f8:	bf12      	itee	ne
    51fa:	461d      	movne	r5, r3
			keys = conn->le.keys;
    51fc:	f8d0 50b4 	ldreq.w	r5, [r0, #180]	; 0xb4
			conn->le.keys = NULL;
    5200:	f8c0 30b4 	streq.w	r3, [r0, #180]	; 0xb4
		bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
    5204:	f003 f88e 	bl	8324 <bt_conn_disconnect>
		bt_conn_unref(conn);
    5208:	4620      	mov	r0, r4
    520a:	f00d fbec 	bl	129e6 <bt_conn_unref>
		if (!keys) {
    520e:	2d00      	cmp	r5, #0
    5210:	d1dc      	bne.n	51cc <unpair+0x1c>
    5212:	e7d5      	b.n	51c0 <unpair+0x10>
}
    5214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5218:	200019b8 	.word	0x200019b8

0000521c <le_data_len_change>:
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    521c:	6883      	ldr	r3, [r0, #8]
{
    521e:	b510      	push	{r4, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    5220:	881c      	ldrh	r4, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
    5222:	4620      	mov	r0, r4
    5224:	f002 ff1c 	bl	8060 <bt_conn_lookup_handle>
	if (!conn) {
    5228:	b960      	cbnz	r0, 5244 <le_data_len_change+0x28>
    522a:	4a08      	ldr	r2, [pc, #32]	; (524c <le_data_len_change+0x30>)
    522c:	4b08      	ldr	r3, [pc, #32]	; (5250 <le_data_len_change+0x34>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    522e:	4621      	mov	r1, r4
}
    5230:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5234:	1ad2      	subs	r2, r2, r3
    5236:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Unable to lookup conn for handle %u", handle);
    5238:	0192      	lsls	r2, r2, #6
    523a:	4806      	ldr	r0, [pc, #24]	; (5254 <le_data_len_change+0x38>)
    523c:	f042 0201 	orr.w	r2, r2, #1
    5240:	f00b bd45 	b.w	10cce <log_1>
}
    5244:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
    5248:	f00d bbcd 	b.w	129e6 <bt_conn_unref>
    524c:	00015a30 	.word	0x00015a30
    5250:	00015a00 	.word	0x00015a00
    5254:	000176da 	.word	0x000176da

00005258 <hci_disconn_complete_prio>:
{
    5258:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    525a:	6883      	ldr	r3, [r0, #8]
	if (evt->status) {
    525c:	781a      	ldrb	r2, [r3, #0]
    525e:	b9da      	cbnz	r2, 5298 <hci_disconn_complete_prio+0x40>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    5260:	f8b3 5001 	ldrh.w	r5, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    5264:	4628      	mov	r0, r5
    5266:	f002 fefb 	bl	8060 <bt_conn_lookup_handle>
	if (!conn) {
    526a:	4604      	mov	r4, r0
    526c:	b960      	cbnz	r0, 5288 <hci_disconn_complete_prio+0x30>
    526e:	4b0b      	ldr	r3, [pc, #44]	; (529c <hci_disconn_complete_prio+0x44>)
    5270:	4a0b      	ldr	r2, [pc, #44]	; (52a0 <hci_disconn_complete_prio+0x48>)
		BT_ERR("Unable to look up conn with handle %u", handle);
    5272:	4629      	mov	r1, r5
    5274:	1ad2      	subs	r2, r2, r3
    5276:	08d2      	lsrs	r2, r2, #3
    5278:	0192      	lsls	r2, r2, #6
    527a:	480a      	ldr	r0, [pc, #40]	; (52a4 <hci_disconn_complete_prio+0x4c>)
    527c:	f042 0201 	orr.w	r2, r2, #1
}
    5280:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    5284:	f00b bd23 	b.w	10cce <log_1>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
    5288:	2101      	movs	r1, #1
    528a:	f002 fef5 	bl	8078 <bt_conn_set_state>
	bt_conn_unref(conn);
    528e:	4620      	mov	r0, r4
}
    5290:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    5294:	f00d bba7 	b.w	129e6 <bt_conn_unref>
}
    5298:	bd38      	pop	{r3, r4, r5, pc}
    529a:	bf00      	nop
    529c:	00015a00 	.word	0x00015a00
    52a0:	00015a30 	.word	0x00015a30
    52a4:	000176fe 	.word	0x000176fe

000052a8 <hci_disconn_complete>:
{
    52a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    52aa:	6886      	ldr	r6, [r0, #8]
	if (evt->status) {
    52ac:	7835      	ldrb	r5, [r6, #0]
    52ae:	b9f5      	cbnz	r5, 52ee <hci_disconn_complete+0x46>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    52b0:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	conn = bt_conn_lookup_handle(handle);
    52b4:	4638      	mov	r0, r7
    52b6:	f002 fed3 	bl	8060 <bt_conn_lookup_handle>
	if (!conn) {
    52ba:	4604      	mov	r4, r0
    52bc:	b960      	cbnz	r0, 52d8 <hci_disconn_complete+0x30>
    52be:	4b0c      	ldr	r3, [pc, #48]	; (52f0 <hci_disconn_complete+0x48>)
    52c0:	4a0c      	ldr	r2, [pc, #48]	; (52f4 <hci_disconn_complete+0x4c>)
		BT_ERR("Unable to look up conn with handle %u", handle);
    52c2:	4639      	mov	r1, r7
    52c4:	1ad2      	subs	r2, r2, r3
    52c6:	08d2      	lsrs	r2, r2, #3
    52c8:	0192      	lsls	r2, r2, #6
    52ca:	480b      	ldr	r0, [pc, #44]	; (52f8 <hci_disconn_complete+0x50>)
    52cc:	f042 0201 	orr.w	r2, r2, #1
}
    52d0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    52d4:	f00b bcfb 	b.w	10cce <log_1>
	conn->err = evt->reason;
    52d8:	78f3      	ldrb	r3, [r6, #3]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    52da:	4629      	mov	r1, r5
	conn->err = evt->reason;
    52dc:	7303      	strb	r3, [r0, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    52de:	f002 fecb 	bl	8078 <bt_conn_set_state>
		bt_conn_unref(conn);
    52e2:	4620      	mov	r0, r4
	conn->handle = 0U;
    52e4:	8025      	strh	r5, [r4, #0]
}
    52e6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
    52ea:	f00d bb7c 	b.w	129e6 <bt_conn_unref>
}
    52ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    52f0:	00015a00 	.word	0x00015a00
    52f4:	00015a30 	.word	0x00015a30
    52f8:	000176fe 	.word	0x000176fe

000052fc <hci_hardware_error>:
{
    52fc:	b508      	push	{r3, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
    52fe:	2101      	movs	r1, #1
    5300:	3008      	adds	r0, #8
    5302:	f00e fedb 	bl	140bc <net_buf_simple_pull_mem>
    5306:	4b06      	ldr	r3, [pc, #24]	; (5320 <hci_hardware_error+0x24>)
    5308:	4a06      	ldr	r2, [pc, #24]	; (5324 <hci_hardware_error+0x28>)
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
    530a:	7801      	ldrb	r1, [r0, #0]
    530c:	1ad2      	subs	r2, r2, r3
    530e:	08d2      	lsrs	r2, r2, #3
    5310:	0192      	lsls	r2, r2, #6
    5312:	4805      	ldr	r0, [pc, #20]	; (5328 <hci_hardware_error+0x2c>)
    5314:	f042 0201 	orr.w	r2, r2, #1
}
    5318:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
    531c:	f00b bcd7 	b.w	10cce <log_1>
    5320:	00015a00 	.word	0x00015a00
    5324:	00015a30 	.word	0x00015a30
    5328:	00017724 	.word	0x00017724

0000532c <hci_vendor_event>:
{
    532c:	b510      	push	{r4, lr}
    532e:	4a0a      	ldr	r2, [pc, #40]	; (5358 <hci_vendor_event+0x2c>)
    5330:	4c0a      	ldr	r4, [pc, #40]	; (535c <hci_vendor_event+0x30>)
		BT_WARN("Unhandled vendor-specific event: %s",
    5332:	8981      	ldrh	r1, [r0, #12]
    5334:	6880      	ldr	r0, [r0, #8]
    5336:	1aa4      	subs	r4, r4, r2
    5338:	f7ff fbf4 	bl	4b24 <bt_hex_real>
    533c:	f7fc fa7e 	bl	183c <log_strdup>
    5340:	08e4      	lsrs	r4, r4, #3
    5342:	01a4      	lsls	r4, r4, #6
    5344:	f044 0402 	orr.w	r4, r4, #2
    5348:	4601      	mov	r1, r0
    534a:	4622      	mov	r2, r4
}
    534c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_WARN("Unhandled vendor-specific event: %s",
    5350:	4803      	ldr	r0, [pc, #12]	; (5360 <hci_vendor_event+0x34>)
    5352:	f00b bcbc 	b.w	10cce <log_1>
    5356:	bf00      	nop
    5358:	00015a00 	.word	0x00015a00
    535c:	00015a30 	.word	0x00015a30
    5360:	00017746 	.word	0x00017746

00005364 <le_conn_update_complete>:
{
    5364:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
    5366:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    5368:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    536c:	4630      	mov	r0, r6
    536e:	f002 fe77 	bl	8060 <bt_conn_lookup_handle>
	if (!conn) {
    5372:	4604      	mov	r4, r0
    5374:	b960      	cbnz	r0, 5390 <le_conn_update_complete+0x2c>
    5376:	4a1e      	ldr	r2, [pc, #120]	; (53f0 <le_conn_update_complete+0x8c>)
    5378:	4b1e      	ldr	r3, [pc, #120]	; (53f4 <le_conn_update_complete+0x90>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    537a:	4631      	mov	r1, r6
    537c:	1ad2      	subs	r2, r2, r3
    537e:	08d2      	lsrs	r2, r2, #3
    5380:	0192      	lsls	r2, r2, #6
    5382:	481d      	ldr	r0, [pc, #116]	; (53f8 <le_conn_update_complete+0x94>)
    5384:	f042 0201 	orr.w	r2, r2, #1
    5388:	f00b fca1 	bl	10cce <log_1>
}
    538c:	b002      	add	sp, #8
    538e:	bd70      	pop	{r4, r5, r6, pc}
	if (!evt->status) {
    5390:	782b      	ldrb	r3, [r5, #0]
    5392:	b9bb      	cbnz	r3, 53c4 <le_conn_update_complete+0x60>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
    5394:	792a      	ldrb	r2, [r5, #4]
    5396:	78eb      	ldrb	r3, [r5, #3]
    5398:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    539c:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
    53a0:	79aa      	ldrb	r2, [r5, #6]
    53a2:	796b      	ldrb	r3, [r5, #5]
    53a4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    53a8:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    53ac:	79eb      	ldrb	r3, [r5, #7]
    53ae:	7a2a      	ldrb	r2, [r5, #8]
    53b0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    53b4:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
    53b8:	f002 fc3e 	bl	7c38 <notify_le_param_updated>
	bt_conn_unref(conn);
    53bc:	4620      	mov	r0, r4
    53be:	f00d fb12 	bl	129e6 <bt_conn_unref>
    53c2:	e7e3      	b.n	538c <le_conn_update_complete+0x28>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
    53c4:	2b1a      	cmp	r3, #26
    53c6:	d1f9      	bne.n	53bc <le_conn_update_complete+0x58>
    53c8:	78c3      	ldrb	r3, [r0, #3]
    53ca:	2b01      	cmp	r3, #1
    53cc:	d1f6      	bne.n	53bc <le_conn_update_complete+0x58>
		   !atomic_test_and_set_bit(conn->flags,
    53ce:	210a      	movs	r1, #10
    53d0:	3004      	adds	r0, #4
    53d2:	f00d f901 	bl	125d8 <atomic_test_and_set_bit>
		   conn->role == BT_HCI_ROLE_SLAVE &&
    53d6:	2800      	cmp	r0, #0
    53d8:	d1f0      	bne.n	53bc <le_conn_update_complete+0x58>
		param.interval_min = conn->le.interval_min;
    53da:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
		bt_l2cap_update_conn_param(conn, &param);
    53de:	4669      	mov	r1, sp
		param.interval_min = conn->le.interval_min;
    53e0:	9300      	str	r3, [sp, #0]
		param.latency = conn->le.pending_latency;
    53e2:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
		bt_l2cap_update_conn_param(conn, &param);
    53e6:	4620      	mov	r0, r4
		param.latency = conn->le.pending_latency;
    53e8:	9301      	str	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
    53ea:	f003 faab 	bl	8944 <bt_l2cap_update_conn_param>
    53ee:	e7e5      	b.n	53bc <le_conn_update_complete+0x58>
    53f0:	00015a30 	.word	0x00015a30
    53f4:	00015a00 	.word	0x00015a00
    53f8:	000176da 	.word	0x000176da

000053fc <id_create>:
{
    53fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5400:	4604      	mov	r4, r0
    5402:	4828      	ldr	r0, [pc, #160]	; (54a4 <id_create+0xa8>)
    5404:	ebc4 07c4 	rsb	r7, r4, r4, lsl #3
    5408:	4615      	mov	r5, r2
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    540a:	460e      	mov	r6, r1
    540c:	4680      	mov	r8, r0
{
    540e:	b086      	sub	sp, #24
    5410:	4407      	add	r7, r0
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    5412:	b361      	cbz	r1, 546e <id_create+0x72>
    5414:	2300      	movs	r3, #0
    5416:	4669      	mov	r1, sp
    5418:	4630      	mov	r0, r6
    541a:	9300      	str	r3, [sp, #0]
    541c:	f8cd 3003 	str.w	r3, [sp, #3]
    5420:	f00d f8c6 	bl	125b0 <bt_addr_le_cmp>
    5424:	b318      	cbz	r0, 546e <id_create+0x72>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
    5426:	4631      	mov	r1, r6
    5428:	4638      	mov	r0, r7
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    542a:	f00d f8c7 	bl	125bc <bt_addr_le_copy>
		uint8_t zero_irk[16] = { 0 };
    542e:	2610      	movs	r6, #16
    5430:	2300      	movs	r3, #0
    5432:	fb06 8404 	mla	r4, r6, r4, r8
    5436:	e9cd 3302 	strd	r3, r3, [sp, #8]
    543a:	e9cd 3304 	strd	r3, r3, [sp, #16]
		if (irk && memcmp(irk, zero_irk, 16)) {
    543e:	f504 749c 	add.w	r4, r4, #312	; 0x138
    5442:	b32d      	cbz	r5, 5490 <id_create+0x94>
    5444:	4632      	mov	r2, r6
    5446:	4628      	mov	r0, r5
    5448:	a902      	add	r1, sp, #8
    544a:	f00c ff56 	bl	122fa <memcmp>
    544e:	b1f8      	cbz	r0, 5490 <id_create+0x94>
			memcpy(&bt_dev.irk[id], irk, 16);
    5450:	4632      	mov	r2, r6
    5452:	4629      	mov	r1, r5
    5454:	4620      	mov	r0, r4
				memcpy(irk, &bt_dev.irk[id], 16);
    5456:	f00c ff60 	bl	1231a <memcpy>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    545a:	4813      	ldr	r0, [pc, #76]	; (54a8 <id_create+0xac>)
    545c:	f00d f8a5 	bl	125aa <atomic_get>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
    5460:	0783      	lsls	r3, r0, #30
    5462:	d501      	bpl.n	5468 <id_create+0x6c>
		bt_settings_save_id();
    5464:	f7ff fcd0 	bl	4e08 <bt_settings_save_id>
}
    5468:	b006      	add	sp, #24
    546a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			bt_addr_le_create_static(&new_addr);
    546e:	a802      	add	r0, sp, #8
    5470:	f00d f861 	bl	12536 <bt_addr_le_create_static>
		} while (id_find(&new_addr) >= 0);
    5474:	a802      	add	r0, sp, #8
    5476:	f7ff fe13 	bl	50a0 <id_find>
    547a:	2800      	cmp	r0, #0
    547c:	daf7      	bge.n	546e <id_create+0x72>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    547e:	4638      	mov	r0, r7
    5480:	a902      	add	r1, sp, #8
    5482:	f00d f89b 	bl	125bc <bt_addr_le_copy>
		if (addr) {
    5486:	2e00      	cmp	r6, #0
    5488:	d0d1      	beq.n	542e <id_create+0x32>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    548a:	4639      	mov	r1, r7
    548c:	4630      	mov	r0, r6
    548e:	e7cc      	b.n	542a <id_create+0x2e>
			bt_rand(&bt_dev.irk[id], 16);
    5490:	2110      	movs	r1, #16
    5492:	4620      	mov	r0, r4
    5494:	f002 faf8 	bl	7a88 <bt_rand>
			if (irk) {
    5498:	2d00      	cmp	r5, #0
    549a:	d0de      	beq.n	545a <id_create+0x5e>
				memcpy(irk, &bt_dev.irk[id], 16);
    549c:	2210      	movs	r2, #16
    549e:	4621      	mov	r1, r4
    54a0:	4628      	mov	r0, r5
    54a2:	e7d8      	b.n	5456 <id_create+0x5a>
    54a4:	20000000 	.word	0x20000000
    54a8:	20000094 	.word	0x20000094

000054ac <update_sec_level>:
{
    54ac:	b510      	push	{r4, lr}
	if (!conn->encrypt) {
    54ae:	7ac3      	ldrb	r3, [r0, #11]
{
    54b0:	4604      	mov	r4, r0
	if (!conn->encrypt) {
    54b2:	b913      	cbnz	r3, 54ba <update_sec_level+0xe>
		conn->sec_level = BT_SECURITY_L1;
    54b4:	2301      	movs	r3, #1
    54b6:	7243      	strb	r3, [r0, #9]
}
    54b8:	bd10      	pop	{r4, pc}
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
    54ba:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
    54be:	b1fb      	cbz	r3, 5500 <update_sec_level+0x54>
    54c0:	7b5a      	ldrb	r2, [r3, #13]
    54c2:	07d1      	lsls	r1, r2, #31
    54c4:	d51c      	bpl.n	5500 <update_sec_level+0x54>
		if (conn->le.keys->flags & BT_KEYS_SC &&
    54c6:	06d2      	lsls	r2, r2, #27
    54c8:	d518      	bpl.n	54fc <update_sec_level+0x50>
    54ca:	7b1b      	ldrb	r3, [r3, #12]
    54cc:	2b10      	cmp	r3, #16
    54ce:	d115      	bne.n	54fc <update_sec_level+0x50>
			conn->sec_level = BT_SECURITY_L4;
    54d0:	2304      	movs	r3, #4
		conn->sec_level = BT_SECURITY_L2;
    54d2:	7263      	strb	r3, [r4, #9]
	if (conn->required_sec_level > conn->sec_level) {
    54d4:	7aa2      	ldrb	r2, [r4, #10]
    54d6:	7a63      	ldrb	r3, [r4, #9]
    54d8:	429a      	cmp	r2, r3
    54da:	d9ed      	bls.n	54b8 <update_sec_level+0xc>
    54dc:	4b09      	ldr	r3, [pc, #36]	; (5504 <update_sec_level+0x58>)
    54de:	490a      	ldr	r1, [pc, #40]	; (5508 <update_sec_level+0x5c>)
		BT_ERR("Failed to set required security level");
    54e0:	480a      	ldr	r0, [pc, #40]	; (550c <update_sec_level+0x60>)
    54e2:	1ac9      	subs	r1, r1, r3
    54e4:	08c9      	lsrs	r1, r1, #3
    54e6:	0189      	lsls	r1, r1, #6
    54e8:	f041 0101 	orr.w	r1, r1, #1
    54ec:	f00b fbe2 	bl	10cb4 <log_0>
		bt_conn_disconnect(conn, BT_HCI_ERR_AUTH_FAIL);
    54f0:	4620      	mov	r0, r4
}
    54f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_conn_disconnect(conn, BT_HCI_ERR_AUTH_FAIL);
    54f6:	2105      	movs	r1, #5
    54f8:	f002 bf14 	b.w	8324 <bt_conn_disconnect>
			conn->sec_level = BT_SECURITY_L3;
    54fc:	2303      	movs	r3, #3
    54fe:	e7e8      	b.n	54d2 <update_sec_level+0x26>
		conn->sec_level = BT_SECURITY_L2;
    5500:	2302      	movs	r3, #2
    5502:	e7e6      	b.n	54d2 <update_sec_level+0x26>
    5504:	00015a00 	.word	0x00015a00
    5508:	00015a30 	.word	0x00015a30
    550c:	0001776a 	.word	0x0001776a

00005510 <hci_encrypt_key_refresh_complete>:
{
    5510:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
    5512:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    5514:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    5518:	4630      	mov	r0, r6
    551a:	f002 fda1 	bl	8060 <bt_conn_lookup_handle>
	if (!conn) {
    551e:	4604      	mov	r4, r0
    5520:	b960      	cbnz	r0, 553c <hci_encrypt_key_refresh_complete+0x2c>
    5522:	4a13      	ldr	r2, [pc, #76]	; (5570 <hci_encrypt_key_refresh_complete+0x60>)
    5524:	4b13      	ldr	r3, [pc, #76]	; (5574 <hci_encrypt_key_refresh_complete+0x64>)
		BT_ERR("Unable to look up conn with handle %u", handle);
    5526:	4631      	mov	r1, r6
}
    5528:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    552c:	1ad2      	subs	r2, r2, r3
    552e:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Unable to look up conn with handle %u", handle);
    5530:	0192      	lsls	r2, r2, #6
    5532:	4811      	ldr	r0, [pc, #68]	; (5578 <hci_encrypt_key_refresh_complete+0x68>)
    5534:	f042 0201 	orr.w	r2, r2, #1
    5538:	f00b bbc9 	b.w	10cce <log_1>
	if (evt->status) {
    553c:	7829      	ldrb	r1, [r5, #0]
    553e:	b161      	cbz	r1, 555a <hci_encrypt_key_refresh_complete+0x4a>
	switch (hci_err) {
    5540:	2929      	cmp	r1, #41	; 0x29
	if (evt->status) {
    5542:	bf8e      	itee	hi
    5544:	2208      	movhi	r2, #8
    5546:	4b0d      	ldrls	r3, [pc, #52]	; (557c <hci_encrypt_key_refresh_complete+0x6c>)
    5548:	5c5a      	ldrbls	r2, [r3, r1]
	bt_conn_security_changed(conn, evt->status, BT_SECURITY_ERR_SUCCESS);
    554a:	4620      	mov	r0, r4
    554c:	f002 fbde 	bl	7d0c <bt_conn_security_changed>
	bt_conn_unref(conn);
    5550:	4620      	mov	r0, r4
}
    5552:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    5556:	f00d ba46 	b.w	129e6 <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
    555a:	7883      	ldrb	r3, [r0, #2]
    555c:	2b01      	cmp	r3, #1
    555e:	d104      	bne.n	556a <hci_encrypt_key_refresh_complete+0x5a>
		bt_smp_update_keys(conn);
    5560:	f007 fb0e 	bl	cb80 <bt_smp_update_keys>
		update_sec_level(conn);
    5564:	4620      	mov	r0, r4
    5566:	f7ff ffa1 	bl	54ac <update_sec_level>
	bt_conn_security_changed(conn, evt->status, BT_SECURITY_ERR_SUCCESS);
    556a:	2200      	movs	r2, #0
    556c:	7829      	ldrb	r1, [r5, #0]
    556e:	e7ec      	b.n	554a <hci_encrypt_key_refresh_complete+0x3a>
    5570:	00015a30 	.word	0x00015a30
    5574:	00015a00 	.word	0x00015a00
    5578:	000176fe 	.word	0x000176fe
    557c:	00018061 	.word	0x00018061

00005580 <hci_encrypt_change>:
{
    5580:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
    5582:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    5584:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    5588:	4630      	mov	r0, r6
    558a:	f002 fd69 	bl	8060 <bt_conn_lookup_handle>
	if (!conn) {
    558e:	4604      	mov	r4, r0
    5590:	b960      	cbnz	r0, 55ac <hci_encrypt_change+0x2c>
    5592:	4a15      	ldr	r2, [pc, #84]	; (55e8 <hci_encrypt_change+0x68>)
    5594:	4b15      	ldr	r3, [pc, #84]	; (55ec <hci_encrypt_change+0x6c>)
		BT_ERR("Unable to look up conn with handle %u", handle);
    5596:	4631      	mov	r1, r6
}
    5598:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    559c:	1ad2      	subs	r2, r2, r3
    559e:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Unable to look up conn with handle %u", handle);
    55a0:	0192      	lsls	r2, r2, #6
    55a2:	4813      	ldr	r0, [pc, #76]	; (55f0 <hci_encrypt_change+0x70>)
    55a4:	f042 0201 	orr.w	r2, r2, #1
    55a8:	f00b bb91 	b.w	10cce <log_1>
	if (evt->status) {
    55ac:	7829      	ldrb	r1, [r5, #0]
    55ae:	b161      	cbz	r1, 55ca <hci_encrypt_change+0x4a>
	switch (hci_err) {
    55b0:	2929      	cmp	r1, #41	; 0x29
	if (evt->status) {
    55b2:	bf8e      	itee	hi
    55b4:	2208      	movhi	r2, #8
    55b6:	4b0f      	ldrls	r3, [pc, #60]	; (55f4 <hci_encrypt_change+0x74>)
    55b8:	5c5a      	ldrbls	r2, [r3, r1]
	bt_conn_security_changed(conn, evt->status, BT_SECURITY_ERR_SUCCESS);
    55ba:	4620      	mov	r0, r4
    55bc:	f002 fba6 	bl	7d0c <bt_conn_security_changed>
	bt_conn_unref(conn);
    55c0:	4620      	mov	r0, r4
}
    55c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    55c6:	f00d ba0e 	b.w	129e6 <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
    55ca:	7882      	ldrb	r2, [r0, #2]
	conn->encrypt = evt->encrypt;
    55cc:	78eb      	ldrb	r3, [r5, #3]
	if (conn->type == BT_CONN_TYPE_LE) {
    55ce:	2a01      	cmp	r2, #1
	conn->encrypt = evt->encrypt;
    55d0:	72c3      	strb	r3, [r0, #11]
	if (conn->type == BT_CONN_TYPE_LE) {
    55d2:	d105      	bne.n	55e0 <hci_encrypt_change+0x60>
		if (conn->encrypt) {
    55d4:	b10b      	cbz	r3, 55da <hci_encrypt_change+0x5a>
			bt_smp_update_keys(conn);
    55d6:	f007 fad3 	bl	cb80 <bt_smp_update_keys>
		update_sec_level(conn);
    55da:	4620      	mov	r0, r4
    55dc:	f7ff ff66 	bl	54ac <update_sec_level>
	bt_conn_security_changed(conn, evt->status, BT_SECURITY_ERR_SUCCESS);
    55e0:	2200      	movs	r2, #0
    55e2:	7829      	ldrb	r1, [r5, #0]
    55e4:	e7e9      	b.n	55ba <hci_encrypt_change+0x3a>
    55e6:	bf00      	nop
    55e8:	00015a30 	.word	0x00015a30
    55ec:	00015a00 	.word	0x00015a00
    55f0:	000176fe 	.word	0x000176fe
    55f4:	00018061 	.word	0x00018061

000055f8 <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    55f8:	b513      	push	{r0, r1, r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    55fa:	4c0c      	ldr	r4, [pc, #48]	; (562c <find_pending_connect.part.0+0x34>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    55fc:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    55fe:	2205      	movs	r2, #5
    5600:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    5604:	f002 fe6a 	bl	82dc <bt_conn_lookup_state_le>
		if (!conn) {
    5608:	b970      	cbnz	r0, 5628 <find_pending_connect.part.0+0x30>
						       BT_ADDR_LE_NONE,
    560a:	4b09      	ldr	r3, [pc, #36]	; (5630 <find_pending_connect.part.0+0x38>)
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    560c:	4669      	mov	r1, sp
						       BT_ADDR_LE_NONE,
    560e:	6818      	ldr	r0, [r3, #0]
    5610:	889a      	ldrh	r2, [r3, #4]
    5612:	799b      	ldrb	r3, [r3, #6]
    5614:	9000      	str	r0, [sp, #0]
    5616:	f8ad 2004 	strh.w	r2, [sp, #4]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    561a:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    561e:	2204      	movs	r2, #4
						       BT_ADDR_LE_NONE,
    5620:	f88d 3006 	strb.w	r3, [sp, #6]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    5624:	f002 fe5a 	bl	82dc <bt_conn_lookup_state_le>
}
    5628:	b002      	add	sp, #8
    562a:	bd10      	pop	{r4, pc}
    562c:	20000000 	.word	0x20000000
    5630:	00015b70 	.word	0x00015b70

00005634 <hci_cmd_done>:
{
    5634:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5638:	4607      	mov	r7, r0
    563a:	b085      	sub	sp, #20
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    563c:	7990      	ldrb	r0, [r2, #6]
{
    563e:	4688      	mov	r8, r1
    5640:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    5642:	f007 fd45 	bl	d0d0 <net_buf_pool_get>
    5646:	4e32      	ldr	r6, [pc, #200]	; (5710 <hci_cmd_done+0xdc>)
    5648:	4286      	cmp	r6, r0
    564a:	d016      	beq.n	567a <hci_cmd_done+0x46>
    564c:	4b31      	ldr	r3, [pc, #196]	; (5714 <hci_cmd_done+0xe0>)
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
    564e:	79a0      	ldrb	r0, [r4, #6]
    5650:	4d31      	ldr	r5, [pc, #196]	; (5718 <hci_cmd_done+0xe4>)
    5652:	9700      	str	r7, [sp, #0]
    5654:	1aed      	subs	r5, r5, r3
    5656:	9001      	str	r0, [sp, #4]
    5658:	f007 fd3a 	bl	d0d0 <net_buf_pool_get>
    565c:	08ed      	lsrs	r5, r5, #3
    565e:	01ad      	lsls	r5, r5, #6
    5660:	f045 0502 	orr.w	r5, r5, #2
    5664:	e9cd 0602 	strd	r0, r6, [sp, #8]
    5668:	462b      	mov	r3, r5
    566a:	2204      	movs	r2, #4
    566c:	4669      	mov	r1, sp
    566e:	482b      	ldr	r0, [pc, #172]	; (571c <hci_cmd_done+0xe8>)
    5670:	f00b fb76 	bl	10d60 <log_n>
}
    5674:	b005      	add	sp, #20
    5676:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (cmd(buf)->opcode != opcode) {
    567a:	4620      	mov	r0, r4
    567c:	f007 fd30 	bl	d0e0 <net_buf_id>
    5680:	f04f 090c 	mov.w	r9, #12
    5684:	4d26      	ldr	r5, [pc, #152]	; (5720 <hci_cmd_done+0xec>)
    5686:	fb09 5300 	mla	r3, r9, r0, r5
    568a:	885b      	ldrh	r3, [r3, #2]
    568c:	42bb      	cmp	r3, r7
    568e:	d011      	beq.n	56b4 <hci_cmd_done+0x80>
    5690:	4b20      	ldr	r3, [pc, #128]	; (5714 <hci_cmd_done+0xe0>)
    5692:	4e21      	ldr	r6, [pc, #132]	; (5718 <hci_cmd_done+0xe4>)
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
    5694:	4620      	mov	r0, r4
    5696:	1af6      	subs	r6, r6, r3
    5698:	f007 fd22 	bl	d0e0 <net_buf_id>
    569c:	fb09 5000 	mla	r0, r9, r0, r5
    56a0:	08f6      	lsrs	r6, r6, #3
    56a2:	01b6      	lsls	r6, r6, #6
    56a4:	f046 0602 	orr.w	r6, r6, #2
    56a8:	8842      	ldrh	r2, [r0, #2]
    56aa:	4633      	mov	r3, r6
    56ac:	4639      	mov	r1, r7
    56ae:	481d      	ldr	r0, [pc, #116]	; (5724 <hci_cmd_done+0xf0>)
    56b0:	f00b fb21 	bl	10cf6 <log_2>
	if (cmd(buf)->state && !status) {
    56b4:	4620      	mov	r0, r4
    56b6:	f007 fd13 	bl	d0e0 <net_buf_id>
    56ba:	260c      	movs	r6, #12
    56bc:	fb06 5000 	mla	r0, r6, r0, r5
    56c0:	6843      	ldr	r3, [r0, #4]
    56c2:	b16b      	cbz	r3, 56e0 <hci_cmd_done+0xac>
    56c4:	f1b8 0f00 	cmp.w	r8, #0
    56c8:	d10a      	bne.n	56e0 <hci_cmd_done+0xac>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
    56ca:	4620      	mov	r0, r4
    56cc:	f007 fd08 	bl	d0e0 <net_buf_id>
    56d0:	fb06 5000 	mla	r0, r6, r0, r5
    56d4:	6843      	ldr	r3, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
    56d6:	7a1a      	ldrb	r2, [r3, #8]
    56d8:	e9d3 0100 	ldrd	r0, r1, [r3]
    56dc:	f00c ff87 	bl	125ee <atomic_set_bit_to>
	if (cmd(buf)->sync) {
    56e0:	4620      	mov	r0, r4
    56e2:	f007 fcfd 	bl	d0e0 <net_buf_id>
    56e6:	260c      	movs	r6, #12
    56e8:	fb06 5000 	mla	r0, r6, r0, r5
    56ec:	6883      	ldr	r3, [r0, #8]
    56ee:	2b00      	cmp	r3, #0
    56f0:	d0c0      	beq.n	5674 <hci_cmd_done+0x40>
		cmd(buf)->status = status;
    56f2:	4620      	mov	r0, r4
    56f4:	f007 fcf4 	bl	d0e0 <net_buf_id>
    56f8:	4370      	muls	r0, r6
    56fa:	f805 8000 	strb.w	r8, [r5, r0]
		k_sem_give(cmd(buf)->sync);
    56fe:	4620      	mov	r0, r4
    5700:	f007 fcee 	bl	d0e0 <net_buf_id>
    5704:	fb06 5500 	mla	r5, r6, r0, r5
    5708:	68a8      	ldr	r0, [r5, #8]
	z_impl_k_sem_give(sem);
    570a:	f00a f835 	bl	f778 <z_impl_k_sem_give>
}
    570e:	e7b1      	b.n	5674 <hci_cmd_done+0x40>
    5710:	20000770 	.word	0x20000770
    5714:	00015a00 	.word	0x00015a00
    5718:	00015a30 	.word	0x00015a30
    571c:	00017790 	.word	0x00017790
    5720:	20001994 	.word	0x20001994
    5724:	000177c5 	.word	0x000177c5

00005728 <handle_event>:
{
    5728:	b573      	push	{r0, r1, r4, r5, r6, lr}
    572a:	4605      	mov	r5, r0
    572c:	4608      	mov	r0, r1
	for (i = 0; i < num_handlers; i++) {
    572e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
		if (handler->event != event) {
    5732:	7811      	ldrb	r1, [r2, #0]
    5734:	42a9      	cmp	r1, r5
    5736:	d01a      	beq.n	576e <handle_event+0x46>
	for (i = 0; i < num_handlers; i++) {
    5738:	3208      	adds	r2, #8
    573a:	429a      	cmp	r2, r3
    573c:	d1f9      	bne.n	5732 <handle_event+0xa>
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
    573e:	8986      	ldrh	r6, [r0, #12]
    5740:	4b16      	ldr	r3, [pc, #88]	; (579c <handle_event+0x74>)
    5742:	4c17      	ldr	r4, [pc, #92]	; (57a0 <handle_event+0x78>)
    5744:	4631      	mov	r1, r6
    5746:	6880      	ldr	r0, [r0, #8]
    5748:	1ae4      	subs	r4, r4, r3
    574a:	f7ff f9eb 	bl	4b24 <bt_hex_real>
    574e:	f7fc f875 	bl	183c <log_strdup>
    5752:	08e4      	lsrs	r4, r4, #3
    5754:	01a4      	lsls	r4, r4, #6
    5756:	f044 0402 	orr.w	r4, r4, #2
    575a:	4603      	mov	r3, r0
    575c:	4632      	mov	r2, r6
    575e:	4629      	mov	r1, r5
    5760:	4810      	ldr	r0, [pc, #64]	; (57a4 <handle_event+0x7c>)
    5762:	f8ad 4000 	strh.w	r4, [sp]
    5766:	f00b fadf 	bl	10d28 <log_3>
}
    576a:	b002      	add	sp, #8
    576c:	bd70      	pop	{r4, r5, r6, pc}
		if (buf->len < handler->min_len) {
    576e:	8981      	ldrh	r1, [r0, #12]
    5770:	7853      	ldrb	r3, [r2, #1]
    5772:	428b      	cmp	r3, r1
    5774:	d90d      	bls.n	5792 <handle_event+0x6a>
    5776:	4a09      	ldr	r2, [pc, #36]	; (579c <handle_event+0x74>)
    5778:	4b09      	ldr	r3, [pc, #36]	; (57a0 <handle_event+0x78>)
			BT_ERR("Too small (%u bytes) event 0x%02x",
    577a:	480b      	ldr	r0, [pc, #44]	; (57a8 <handle_event+0x80>)
    577c:	1a9b      	subs	r3, r3, r2
    577e:	462a      	mov	r2, r5
    5780:	08db      	lsrs	r3, r3, #3
    5782:	019b      	lsls	r3, r3, #6
    5784:	f043 0301 	orr.w	r3, r3, #1
}
    5788:	b002      	add	sp, #8
    578a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			BT_ERR("Too small (%u bytes) event 0x%02x",
    578e:	f00b bab2 	b.w	10cf6 <log_2>
		handler->handler(buf);
    5792:	6853      	ldr	r3, [r2, #4]
}
    5794:	b002      	add	sp, #8
    5796:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		handler->handler(buf);
    579a:	4718      	bx	r3
    579c:	00015a00 	.word	0x00015a00
    57a0:	00015a30 	.word	0x00015a30
    57a4:	0001781a 	.word	0x0001781a
    57a8:	000177f8 	.word	0x000177f8

000057ac <hci_rx_thread>:
{
    57ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    57b0:	4b47      	ldr	r3, [pc, #284]	; (58d0 <hci_rx_thread+0x124>)
    57b2:	4d48      	ldr	r5, [pc, #288]	; (58d4 <hci_rx_thread+0x128>)
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
    57b4:	f8df 813c 	ldr.w	r8, [pc, #316]	; 58f4 <hci_rx_thread+0x148>
    57b8:	1aed      	subs	r5, r5, r3
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    57ba:	f8df 913c 	ldr.w	r9, [pc, #316]	; 58f8 <hci_rx_thread+0x14c>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    57be:	4f46      	ldr	r7, [pc, #280]	; (58d8 <hci_rx_thread+0x12c>)
    57c0:	08ed      	lsrs	r5, r5, #3
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
    57c2:	f04f 32ff 	mov.w	r2, #4294967295
    57c6:	f04f 33ff 	mov.w	r3, #4294967295
    57ca:	4640      	mov	r0, r8
    57cc:	f00e fbf5 	bl	13fba <net_buf_get>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    57d0:	7d01      	ldrb	r1, [r0, #20]
    57d2:	4604      	mov	r4, r0
		switch (bt_buf_get_type(buf)) {
    57d4:	2901      	cmp	r1, #1
    57d6:	d046      	beq.n	5866 <hci_rx_thread+0xba>
    57d8:	2903      	cmp	r1, #3
    57da:	d173      	bne.n	58c4 <hci_rx_thread+0x118>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    57dc:	8983      	ldrh	r3, [r0, #12]
    57de:	2b03      	cmp	r3, #3
    57e0:	d80c      	bhi.n	57fc <hci_rx_thread+0x50>
    57e2:	f240 43ac 	movw	r3, #1196	; 0x4ac
    57e6:	463a      	mov	r2, r7
    57e8:	493c      	ldr	r1, [pc, #240]	; (58dc <hci_rx_thread+0x130>)
    57ea:	483d      	ldr	r0, [pc, #244]	; (58e0 <hci_rx_thread+0x134>)
    57ec:	f00a fe3b 	bl	10466 <printk>
    57f0:	4040      	eors	r0, r0
    57f2:	f380 8811 	msr	BASEPRI, r0
    57f6:	f04f 0003 	mov.w	r0, #3
    57fa:	df02      	svc	2
    57fc:	2104      	movs	r1, #4
    57fe:	f104 0008 	add.w	r0, r4, #8
    5802:	f00e fc5b 	bl	140bc <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    5806:	23ff      	movs	r3, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
    5808:	8842      	ldrh	r2, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
    580a:	f8b0 a000 	ldrh.w	sl, [r0]
	if (buf->len != len) {
    580e:	89a1      	ldrh	r1, [r4, #12]
	acl(buf)->handle = bt_acl_handle(handle);
    5810:	f3ca 000b 	ubfx	r0, sl, #0, #12
	if (buf->len != len) {
    5814:	428a      	cmp	r2, r1
	acl(buf)->handle = bt_acl_handle(handle);
    5816:	82e0      	strh	r0, [r4, #22]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    5818:	7563      	strb	r3, [r4, #21]
	if (buf->len != len) {
    581a:	d009      	beq.n	5830 <hci_rx_thread+0x84>
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
    581c:	01ab      	lsls	r3, r5, #6
    581e:	4831      	ldr	r0, [pc, #196]	; (58e4 <hci_rx_thread+0x138>)
    5820:	f043 0301 	orr.w	r3, r3, #1
    5824:	f00b fa67 	bl	10cf6 <log_2>
			net_buf_unref(buf);
    5828:	4620      	mov	r0, r4
    582a:	f007 fd0d 	bl	d248 <net_buf_unref>
			break;
    582e:	e017      	b.n	5860 <hci_rx_thread+0xb4>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    5830:	f002 fc16 	bl	8060 <bt_conn_lookup_handle>
	if (!conn) {
    5834:	4606      	mov	r6, r0
    5836:	b938      	cbnz	r0, 5848 <hci_rx_thread+0x9c>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
    5838:	01aa      	lsls	r2, r5, #6
    583a:	8ae1      	ldrh	r1, [r4, #22]
    583c:	482a      	ldr	r0, [pc, #168]	; (58e8 <hci_rx_thread+0x13c>)
    583e:	f042 0201 	orr.w	r2, r2, #1
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
    5842:	f00b fa44 	bl	10cce <log_1>
    5846:	e7ef      	b.n	5828 <hci_rx_thread+0x7c>
	acl(buf)->index = bt_conn_index(conn);
    5848:	f002 fee0 	bl	860c <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
    584c:	4621      	mov	r1, r4
	acl(buf)->index = bt_conn_index(conn);
    584e:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
    5850:	ea4f 321a 	mov.w	r2, sl, lsr #12
    5854:	4630      	mov	r0, r6
    5856:	f002 faa7 	bl	7da8 <bt_conn_recv>
	bt_conn_unref(conn);
    585a:	4630      	mov	r0, r6
    585c:	f00d f8c3 	bl	129e6 <bt_conn_unref>
	z_impl_k_yield();
    5860:	f009 ff14 	bl	f68c <z_impl_k_yield>
	while (1) {
    5864:	e7ad      	b.n	57c2 <hci_rx_thread+0x16>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    5866:	8983      	ldrh	r3, [r0, #12]
    5868:	2b01      	cmp	r3, #1
    586a:	d80c      	bhi.n	5886 <hci_rx_thread+0xda>
    586c:	f241 33fb 	movw	r3, #5115	; 0x13fb
    5870:	463a      	mov	r2, r7
    5872:	491a      	ldr	r1, [pc, #104]	; (58dc <hci_rx_thread+0x130>)
    5874:	481a      	ldr	r0, [pc, #104]	; (58e0 <hci_rx_thread+0x134>)
    5876:	f00a fdf6 	bl	10466 <printk>
    587a:	4040      	eors	r0, r0
    587c:	f380 8811 	msr	BASEPRI, r0
    5880:	f04f 0003 	mov.w	r0, #3
    5884:	df02      	svc	2
    5886:	2102      	movs	r1, #2
    5888:	f104 0008 	add.w	r0, r4, #8
    588c:	f00e fc16 	bl	140bc <net_buf_simple_pull_mem>
    5890:	4606      	mov	r6, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    5892:	7800      	ldrb	r0, [r0, #0]
    5894:	f00c fe5d 	bl	12552 <bt_hci_evt_get_flags>
    5898:	0783      	lsls	r3, r0, #30
    589a:	d40c      	bmi.n	58b6 <hci_rx_thread+0x10a>
    589c:	f241 33ff 	movw	r3, #5119	; 0x13ff
    58a0:	463a      	mov	r2, r7
    58a2:	4912      	ldr	r1, [pc, #72]	; (58ec <hci_rx_thread+0x140>)
    58a4:	480e      	ldr	r0, [pc, #56]	; (58e0 <hci_rx_thread+0x134>)
    58a6:	f00a fdde 	bl	10466 <printk>
    58aa:	4040      	eors	r0, r0
    58ac:	f380 8811 	msr	BASEPRI, r0
    58b0:	f04f 0003 	mov.w	r0, #3
    58b4:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    58b6:	2306      	movs	r3, #6
    58b8:	464a      	mov	r2, r9
    58ba:	4621      	mov	r1, r4
    58bc:	7830      	ldrb	r0, [r6, #0]
    58be:	f7ff ff33 	bl	5728 <handle_event>
	net_buf_unref(buf);
    58c2:	e7b1      	b.n	5828 <hci_rx_thread+0x7c>
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
    58c4:	01aa      	lsls	r2, r5, #6
    58c6:	480a      	ldr	r0, [pc, #40]	; (58f0 <hci_rx_thread+0x144>)
    58c8:	f042 0201 	orr.w	r2, r2, #1
    58cc:	e7b9      	b.n	5842 <hci_rx_thread+0x96>
    58ce:	bf00      	nop
    58d0:	00015a00 	.word	0x00015a00
    58d4:	00015a30 	.word	0x00015a30
    58d8:	0001783c 	.word	0x0001783c
    58dc:	00017870 	.word	0x00017870
    58e0:	00017889 	.word	0x00017889
    58e4:	000178a6 	.word	0x000178a6
    58e8:	000178ca 	.word	0x000178ca
    58ec:	000178ec 	.word	0x000178ec
    58f0:	0001791a 	.word	0x0001791a
    58f4:	20000104 	.word	0x20000104
    58f8:	00015fc0 	.word	0x00015fc0

000058fc <hci_le_meta_event>:
{
    58fc:	b510      	push	{r4, lr}
    58fe:	2101      	movs	r1, #1
    5900:	4604      	mov	r4, r0
    5902:	3008      	adds	r0, #8
    5904:	f00e fbda 	bl	140bc <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    5908:	4621      	mov	r1, r4
}
    590a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    590e:	230a      	movs	r3, #10
    5910:	4a01      	ldr	r2, [pc, #4]	; (5918 <hci_le_meta_event+0x1c>)
    5912:	7800      	ldrb	r0, [r0, #0]
    5914:	f7ff bf08 	b.w	5728 <handle_event>
    5918:	00015f50 	.word	0x00015f50

0000591c <le_rpa_invalidate>:
{
    591c:	b508      	push	{r3, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    591e:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
    5922:	480a      	ldr	r0, [pc, #40]	; (594c <le_rpa_invalidate+0x30>)
    5924:	f00c fe36 	bl	12594 <atomic_and>
    5928:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    592c:	4807      	ldr	r0, [pc, #28]	; (594c <le_rpa_invalidate+0x30>)
    592e:	f00c fe31 	bl	12594 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    5932:	4807      	ldr	r0, [pc, #28]	; (5950 <le_rpa_invalidate+0x34>)
    5934:	f00c fe39 	bl	125aa <atomic_get>
	if (!atomic_test_bit(adv->flags, BT_ADV_LIMITED)) {
    5938:	0683      	lsls	r3, r0, #26
    593a:	d406      	bmi.n	594a <le_rpa_invalidate+0x2e>
}
    593c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    5940:	f06f 0110 	mvn.w	r1, #16
    5944:	4802      	ldr	r0, [pc, #8]	; (5950 <le_rpa_invalidate+0x34>)
    5946:	f00c be25 	b.w	12594 <atomic_and>
    594a:	bd08      	pop	{r3, pc}
    594c:	20000094 	.word	0x20000094
    5950:	20000028 	.word	0x20000028

00005954 <hci_num_completed_packets>:
{
    5954:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (i = 0; i < evt->num_handles; i++) {
    5958:	2600      	movs	r6, #0
			tx->pending_no_cb = 0U;
    595a:	46b1      	mov	r9, r6
    595c:	4d3c      	ldr	r5, [pc, #240]	; (5a50 <hci_num_completed_packets+0xfc>)
    595e:	4b3d      	ldr	r3, [pc, #244]	; (5a54 <hci_num_completed_packets+0x100>)
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
    5960:	f8d0 8008 	ldr.w	r8, [r0, #8]
    5964:	1aed      	subs	r5, r5, r3
    5966:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 5a60 <hci_num_completed_packets+0x10c>
    596a:	08ed      	lsrs	r5, r5, #3
	for (i = 0; i < evt->num_handles; i++) {
    596c:	f898 3000 	ldrb.w	r3, [r8]
    5970:	429e      	cmp	r6, r3
    5972:	db01      	blt.n	5978 <hci_num_completed_packets+0x24>
}
    5974:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
    5978:	eb08 0386 	add.w	r3, r8, r6, lsl #2
    597c:	f8b3 b001 	ldrh.w	fp, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    5980:	f8b3 7003 	ldrh.w	r7, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
    5984:	4658      	mov	r0, fp
    5986:	f002 fb6b 	bl	8060 <bt_conn_lookup_handle>
		if (!conn) {
    598a:	4604      	mov	r4, r0
    598c:	b1d8      	cbz	r0, 59c6 <hci_num_completed_packets+0x72>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    598e:	f100 0b28 	add.w	fp, r0, #40	; 0x28
		while (count--) {
    5992:	2f00      	cmp	r7, #0
    5994:	d033      	beq.n	59fe <hci_num_completed_packets+0xaa>
	__asm__ volatile(
    5996:	f04f 0320 	mov.w	r3, #32
    599a:	f3ef 8211 	mrs	r2, BASEPRI
    599e:	f383 8811 	msr	BASEPRI, r3
    59a2:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
    59a6:	69e3      	ldr	r3, [r4, #28]
    59a8:	b1b3      	cbz	r3, 59d8 <hci_num_completed_packets+0x84>
				conn->pending_no_cb--;
    59aa:	3b01      	subs	r3, #1
    59ac:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    59ae:	f382 8811 	msr	BASEPRI, r2
    59b2:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
    59b6:	4620      	mov	r0, r4
    59b8:	f002 f93a 	bl	7c30 <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
    59bc:	3f01      	subs	r7, #1
    59be:	f009 fedb 	bl	f778 <z_impl_k_sem_give>
    59c2:	b2bf      	uxth	r7, r7
    59c4:	e7e5      	b.n	5992 <hci_num_completed_packets+0x3e>
			BT_ERR("No connection for handle %u", handle);
    59c6:	01aa      	lsls	r2, r5, #6
    59c8:	4659      	mov	r1, fp
    59ca:	4823      	ldr	r0, [pc, #140]	; (5a58 <hci_num_completed_packets+0x104>)
    59cc:	f042 0201 	orr.w	r2, r2, #1
    59d0:	f00b f97d 	bl	10cce <log_1>
	for (i = 0; i < evt->num_handles; i++) {
    59d4:	3601      	adds	r6, #1
    59d6:	e7c9      	b.n	596c <hci_num_completed_packets+0x18>
Z_GENLIST_IS_EMPTY(slist)
    59d8:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    59da:	b12b      	cbz	r3, 59e8 <hci_num_completed_packets+0x94>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    59dc:	69a1      	ldr	r1, [r4, #24]
    59de:	6818      	ldr	r0, [r3, #0]
    59e0:	428b      	cmp	r3, r1
	list->head = node;
    59e2:	6160      	str	r0, [r4, #20]
	list->tail = node;
    59e4:	bf08      	it	eq
    59e6:	61a0      	streq	r0, [r4, #24]
    59e8:	f382 8811 	msr	BASEPRI, r2
    59ec:	f3bf 8f6f 	isb	sy
			if (!node) {
    59f0:	b94b      	cbnz	r3, 5a06 <hci_num_completed_packets+0xb2>
				BT_ERR("packets count mismatch");
    59f2:	01a9      	lsls	r1, r5, #6
    59f4:	4819      	ldr	r0, [pc, #100]	; (5a5c <hci_num_completed_packets+0x108>)
    59f6:	f041 0101 	orr.w	r1, r1, #1
    59fa:	f00b f95b 	bl	10cb4 <log_0>
		bt_conn_unref(conn);
    59fe:	4620      	mov	r0, r4
    5a00:	f00c fff1 	bl	129e6 <bt_conn_unref>
    5a04:	e7e6      	b.n	59d4 <hci_num_completed_packets+0x80>
	__asm__ volatile(
    5a06:	f04f 0220 	mov.w	r2, #32
    5a0a:	f3ef 8111 	mrs	r1, BASEPRI
    5a0e:	f382 8811 	msr	BASEPRI, r2
    5a12:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
    5a16:	68da      	ldr	r2, [r3, #12]
    5a18:	61e2      	str	r2, [r4, #28]
	parent->next = child;
    5a1a:	f8c3 9000 	str.w	r9, [r3]
Z_GENLIST_APPEND(slist, snode)
    5a1e:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
    5a20:	f8c3 900c 	str.w	r9, [r3, #12]
    5a24:	b98a      	cbnz	r2, 5a4a <hci_num_completed_packets+0xf6>
	list->head = node;
    5a26:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
    5a2a:	f381 8811 	msr	BASEPRI, r1
    5a2e:	f3bf 8f6f 	isb	sy
    5a32:	2100      	movs	r1, #0
    5a34:	f104 0030 	add.w	r0, r4, #48	; 0x30
    5a38:	f00c fdce 	bl	125d8 <atomic_test_and_set_bit>
    5a3c:	2800      	cmp	r0, #0
    5a3e:	d1ba      	bne.n	59b6 <hci_num_completed_packets+0x62>
		k_queue_append(&work_q->queue, work);
    5a40:	4659      	mov	r1, fp
    5a42:	4650      	mov	r0, sl
    5a44:	f00f fa25 	bl	14e92 <k_queue_append>
    5a48:	e7b5      	b.n	59b6 <hci_num_completed_packets+0x62>
	parent->next = child;
    5a4a:	6013      	str	r3, [r2, #0]
	list->tail = node;
    5a4c:	6263      	str	r3, [r4, #36]	; 0x24
}
    5a4e:	e7ec      	b.n	5a2a <hci_num_completed_packets+0xd6>
    5a50:	00015a30 	.word	0x00015a30
    5a54:	00015a00 	.word	0x00015a00
    5a58:	0001792e 	.word	0x0001792e
    5a5c:	0001794a 	.word	0x0001794a
    5a60:	200010d0 	.word	0x200010d0

00005a64 <le_adv_start_add_conn>:
	return 0;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
    5a64:	b5f0      	push	{r4, r5, r6, r7, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    5a66:	4b28      	ldr	r3, [pc, #160]	; (5b08 <le_adv_start_add_conn+0xa4>)
    5a68:	4605      	mov	r5, r0
    5a6a:	460f      	mov	r7, r1
    5a6c:	b085      	sub	sp, #20
	struct adv_id_check_data check_data = {
		.id = adv->id,
    5a6e:	7801      	ldrb	r1, [r0, #0]
    5a70:	f103 0028 	add.w	r0, r3, #40	; 0x28
    5a74:	f00c fd99 	bl	125aa <atomic_get>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
    5a78:	f010 0f40 	tst.w	r0, #64	; 0x40
    5a7c:	461a      	mov	r2, r3
    5a7e:	d008      	beq.n	5a92 <le_adv_start_add_conn+0x2e>
    5a80:	f103 0028 	add.w	r0, r3, #40	; 0x28
    5a84:	f00c fd91 	bl	125aa <atomic_get>
    5a88:	05c0      	lsls	r0, r0, #23
    5a8a:	d502      	bpl.n	5a92 <le_adv_start_add_conn+0x2e>
	    atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE) &&
    5a8c:	7e1b      	ldrb	r3, [r3, #24]
    5a8e:	428b      	cmp	r3, r1
    5a90:	d131      	bne.n	5af6 <le_adv_start_add_conn+0x92>
	bt_adv_foreach(adv_id_check_connectable_func, &check_data);
	if (check_data.adv_enabled) {
		return -ENOTSUP;
	}

	bt_dev.adv_conn_id = adv->id;
    5a92:	462e      	mov	r6, r5
    5a94:	f816 3b09 	ldrb.w	r3, [r6], #9

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    5a98:	4669      	mov	r1, sp
	bt_dev.adv_conn_id = adv->id;
    5a9a:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    5a9e:	2300      	movs	r3, #0
    5aa0:	4630      	mov	r0, r6
    5aa2:	9300      	str	r3, [sp, #0]
    5aa4:	f8cd 3003 	str.w	r3, [sp, #3]
    5aa8:	f00c fd82 	bl	125b0 <bt_addr_le_cmp>
    5aac:	4604      	mov	r4, r0
    5aae:	7828      	ldrb	r0, [r5, #0]
    5ab0:	b164      	cbz	r4, 5acc <le_adv_start_add_conn+0x68>
		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
		*out_conn = conn;
		return 0;
	}

	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
    5ab2:	4631      	mov	r1, r6
    5ab4:	f002 fbea 	bl	828c <bt_conn_exists_le>
    5ab8:	4604      	mov	r4, r0
    5aba:	b9f8      	cbnz	r0, 5afc <le_adv_start_add_conn+0x98>
		return -EINVAL;
	}

	conn = bt_conn_add_le(adv->id, &adv->target_addr);
    5abc:	7828      	ldrb	r0, [r5, #0]
    5abe:	4631      	mov	r1, r6
    5ac0:	f002 faa0 	bl	8004 <bt_conn_add_le>
	if (!conn) {
    5ac4:	4605      	mov	r5, r0
    5ac6:	b1e0      	cbz	r0, 5b02 <le_adv_start_add_conn+0x9e>
		return -ENOMEM;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
    5ac8:	2105      	movs	r1, #5
    5aca:	e00e      	b.n	5aea <le_adv_start_add_conn+0x86>
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
    5acc:	f06f 03ff 	mvn.w	r3, #255	; 0xff
    5ad0:	9302      	str	r3, [sp, #8]
    5ad2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    5ad6:	a902      	add	r1, sp, #8
    5ad8:	f8ad 300c 	strh.w	r3, [sp, #12]
    5adc:	f88d 300e 	strb.w	r3, [sp, #14]
    5ae0:	f002 fa90 	bl	8004 <bt_conn_add_le>
		if (!conn) {
    5ae4:	4605      	mov	r5, r0
    5ae6:	b160      	cbz	r0, 5b02 <le_adv_start_add_conn+0x9e>
		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
    5ae8:	2104      	movs	r1, #4
	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
    5aea:	f002 fac5 	bl	8078 <bt_conn_set_state>
	*out_conn = conn;
    5aee:	603d      	str	r5, [r7, #0]
	return 0;
}
    5af0:	4620      	mov	r0, r4
    5af2:	b005      	add	sp, #20
    5af4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOTSUP;
    5af6:	f06f 0422 	mvn.w	r4, #34	; 0x22
    5afa:	e7f9      	b.n	5af0 <le_adv_start_add_conn+0x8c>
		return -EINVAL;
    5afc:	f06f 0415 	mvn.w	r4, #21
    5b00:	e7f6      	b.n	5af0 <le_adv_start_add_conn+0x8c>
		return -ENOMEM;
    5b02:	f06f 040b 	mvn.w	r4, #11
    5b06:	e7f3      	b.n	5af0 <le_adv_start_add_conn+0x8c>
    5b08:	20000000 	.word	0x20000000

00005b0c <hci_cmd_status>:
{
    5b0c:	b538      	push	{r3, r4, r5, lr}
    5b0e:	2104      	movs	r1, #4
    5b10:	4604      	mov	r4, r0
    5b12:	3008      	adds	r0, #8
    5b14:	f00e fad2 	bl	140bc <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
    5b18:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
    5b1a:	7801      	ldrb	r1, [r0, #0]
    5b1c:	4622      	mov	r2, r4
    5b1e:	8840      	ldrh	r0, [r0, #2]
    5b20:	f7ff fd88 	bl	5634 <hci_cmd_done>
	if (ncmd) {
    5b24:	b125      	cbz	r5, 5b30 <hci_cmd_status+0x24>
}
    5b26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    5b2a:	4802      	ldr	r0, [pc, #8]	; (5b34 <hci_cmd_status+0x28>)
    5b2c:	f009 be24 	b.w	f778 <z_impl_k_sem_give>
    5b30:	bd38      	pop	{r3, r4, r5, pc}
    5b32:	bf00      	nop
    5b34:	200000e8 	.word	0x200000e8

00005b38 <hci_cmd_complete>:
{
    5b38:	b538      	push	{r3, r4, r5, lr}
    5b3a:	2103      	movs	r1, #3
    5b3c:	4604      	mov	r4, r0
    5b3e:	3008      	adds	r0, #8
    5b40:	f00e fabc 	bl	140bc <net_buf_simple_pull_mem>
	status = buf->data[0];
    5b44:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
    5b46:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
    5b48:	4622      	mov	r2, r4
    5b4a:	7819      	ldrb	r1, [r3, #0]
    5b4c:	f8b0 0001 	ldrh.w	r0, [r0, #1]
    5b50:	f7ff fd70 	bl	5634 <hci_cmd_done>
	if (ncmd) {
    5b54:	b125      	cbz	r5, 5b60 <hci_cmd_complete+0x28>
}
    5b56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    5b5a:	4802      	ldr	r0, [pc, #8]	; (5b64 <hci_cmd_complete+0x2c>)
    5b5c:	f009 be0c 	b.w	f778 <z_impl_k_sem_give>
    5b60:	bd38      	pop	{r3, r4, r5, pc}
    5b62:	bf00      	nop
    5b64:	200000e8 	.word	0x200000e8

00005b68 <bt_hci_cmd_create>:
{
    5b68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return net_buf_alloc_fixed(pool, timeout);
    5b6c:	f04f 32ff 	mov.w	r2, #4294967295
    5b70:	f04f 33ff 	mov.w	r3, #4294967295
    5b74:	4605      	mov	r5, r0
    5b76:	4816      	ldr	r0, [pc, #88]	; (5bd0 <bt_hci_cmd_create+0x68>)
    5b78:	460e      	mov	r6, r1
    5b7a:	f00e fa19 	bl	13fb0 <net_buf_alloc_fixed>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    5b7e:	2700      	movs	r7, #0
    5b80:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
    5b82:	f100 0b08 	add.w	fp, r0, #8
    5b86:	2101      	movs	r1, #1
    5b88:	4658      	mov	r0, fp
    5b8a:	f00e fa30 	bl	13fee <net_buf_simple_reserve>
	cmd(buf)->opcode = opcode;
    5b8e:	4620      	mov	r0, r4
    5b90:	7527      	strb	r7, [r4, #20]
    5b92:	f007 faa5 	bl	d0e0 <net_buf_id>
    5b96:	f04f 0a0c 	mov.w	sl, #12
    5b9a:	f8df 8038 	ldr.w	r8, [pc, #56]	; 5bd4 <bt_hci_cmd_create+0x6c>
    5b9e:	fb0a 8000 	mla	r0, sl, r0, r8
    5ba2:	8045      	strh	r5, [r0, #2]
	cmd(buf)->sync = NULL;
    5ba4:	4620      	mov	r0, r4
    5ba6:	f007 fa9b 	bl	d0e0 <net_buf_id>
    5baa:	fb0a 8000 	mla	r0, sl, r0, r8
    5bae:	6087      	str	r7, [r0, #8]
	cmd(buf)->state = NULL;
    5bb0:	4620      	mov	r0, r4
    5bb2:	f007 fa95 	bl	d0e0 <net_buf_id>
    5bb6:	fb0a 8000 	mla	r0, sl, r0, r8
	return net_buf_simple_add(&buf->b, len);
    5bba:	2103      	movs	r1, #3
    5bbc:	6047      	str	r7, [r0, #4]
    5bbe:	4658      	mov	r0, fp
    5bc0:	f00e fa4c 	bl	1405c <net_buf_simple_add>
	hdr->param_len = param_len;
    5bc4:	7086      	strb	r6, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
    5bc6:	8005      	strh	r5, [r0, #0]
}
    5bc8:	4620      	mov	r0, r4
    5bca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5bce:	bf00      	nop
    5bd0:	20000770 	.word	0x20000770
    5bd4:	20001994 	.word	0x20001994

00005bd8 <bt_hci_cmd_send_sync>:
{
    5bd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5bdc:	4607      	mov	r7, r0
    5bde:	4615      	mov	r5, r2
	if (!buf) {
    5be0:	460c      	mov	r4, r1
{
    5be2:	b086      	sub	sp, #24
	if (!buf) {
    5be4:	b921      	cbnz	r1, 5bf0 <bt_hci_cmd_send_sync+0x18>
		buf = bt_hci_cmd_create(opcode, 0);
    5be6:	f7ff ffbf 	bl	5b68 <bt_hci_cmd_create>
		if (!buf) {
    5bea:	4604      	mov	r4, r0
    5bec:	2800      	cmp	r0, #0
    5bee:	d055      	beq.n	5c9c <bt_hci_cmd_send_sync+0xc4>
	return z_impl_k_sem_init(sem, initial_count, limit);
    5bf0:	2201      	movs	r2, #1
    5bf2:	2100      	movs	r1, #0
    5bf4:	4668      	mov	r0, sp
    5bf6:	f00f fa98 	bl	1512a <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    5bfa:	4620      	mov	r0, r4
    5bfc:	f007 fa70 	bl	d0e0 <net_buf_id>
    5c00:	230c      	movs	r3, #12
    5c02:	4e28      	ldr	r6, [pc, #160]	; (5ca4 <bt_hci_cmd_send_sync+0xcc>)
    5c04:	fb03 6000 	mla	r0, r3, r0, r6
    5c08:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_ref(buf);
    5c0c:	4620      	mov	r0, r4
    5c0e:	f00e f9ff 	bl	14010 <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    5c12:	4621      	mov	r1, r4
    5c14:	4824      	ldr	r0, [pc, #144]	; (5ca8 <bt_hci_cmd_send_sync+0xd0>)
    5c16:	f00e f9ee 	bl	13ff6 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
    5c1a:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    5c1e:	2300      	movs	r3, #0
    5c20:	4668      	mov	r0, sp
    5c22:	f009 fdcf 	bl	f7c4 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
    5c26:	4680      	mov	r8, r0
    5c28:	b180      	cbz	r0, 5c4c <bt_hci_cmd_send_sync+0x74>
    5c2a:	f240 134d 	movw	r3, #333	; 0x14d
    5c2e:	4a1f      	ldr	r2, [pc, #124]	; (5cac <bt_hci_cmd_send_sync+0xd4>)
    5c30:	491f      	ldr	r1, [pc, #124]	; (5cb0 <bt_hci_cmd_send_sync+0xd8>)
    5c32:	4820      	ldr	r0, [pc, #128]	; (5cb4 <bt_hci_cmd_send_sync+0xdc>)
    5c34:	f00a fc17 	bl	10466 <printk>
    5c38:	4641      	mov	r1, r8
    5c3a:	481f      	ldr	r0, [pc, #124]	; (5cb8 <bt_hci_cmd_send_sync+0xe0>)
    5c3c:	f00a fc13 	bl	10466 <printk>
    5c40:	4040      	eors	r0, r0
    5c42:	f380 8811 	msr	BASEPRI, r0
    5c46:	f04f 0003 	mov.w	r0, #3
    5c4a:	df02      	svc	2
	status = cmd(buf)->status;
    5c4c:	4620      	mov	r0, r4
    5c4e:	f007 fa47 	bl	d0e0 <net_buf_id>
    5c52:	230c      	movs	r3, #12
    5c54:	4343      	muls	r3, r0
    5c56:	5cf6      	ldrb	r6, [r6, r3]
	if (status) {
    5c58:	b1be      	cbz	r6, 5c8a <bt_hci_cmd_send_sync+0xb2>
    5c5a:	4a18      	ldr	r2, [pc, #96]	; (5cbc <bt_hci_cmd_send_sync+0xe4>)
    5c5c:	4b18      	ldr	r3, [pc, #96]	; (5cc0 <bt_hci_cmd_send_sync+0xe8>)
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
    5c5e:	4639      	mov	r1, r7
    5c60:	1a9b      	subs	r3, r3, r2
    5c62:	08db      	lsrs	r3, r3, #3
    5c64:	019b      	lsls	r3, r3, #6
    5c66:	4632      	mov	r2, r6
    5c68:	4816      	ldr	r0, [pc, #88]	; (5cc4 <bt_hci_cmd_send_sync+0xec>)
    5c6a:	f043 0302 	orr.w	r3, r3, #2
    5c6e:	f00b f842 	bl	10cf6 <log_2>
		net_buf_unref(buf);
    5c72:	4620      	mov	r0, r4
    5c74:	f007 fae8 	bl	d248 <net_buf_unref>
			return -EIO;
    5c78:	2e09      	cmp	r6, #9
    5c7a:	bf0c      	ite	eq
    5c7c:	f06f 003c 	mvneq.w	r0, #60	; 0x3c
    5c80:	f06f 0004 	mvnne.w	r0, #4
}
    5c84:	b006      	add	sp, #24
    5c86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (rsp) {
    5c8a:	b115      	cbz	r5, 5c92 <bt_hci_cmd_send_sync+0xba>
	return 0;
    5c8c:	4630      	mov	r0, r6
		*rsp = buf;
    5c8e:	602c      	str	r4, [r5, #0]
    5c90:	e7f8      	b.n	5c84 <bt_hci_cmd_send_sync+0xac>
		net_buf_unref(buf);
    5c92:	4620      	mov	r0, r4
    5c94:	f007 fad8 	bl	d248 <net_buf_unref>
	return 0;
    5c98:	4628      	mov	r0, r5
    5c9a:	e7f3      	b.n	5c84 <bt_hci_cmd_send_sync+0xac>
			return -ENOBUFS;
    5c9c:	f06f 0036 	mvn.w	r0, #54	; 0x36
    5ca0:	e7f0      	b.n	5c84 <bt_hci_cmd_send_sync+0xac>
    5ca2:	bf00      	nop
    5ca4:	20001994 	.word	0x20001994
    5ca8:	2000011c 	.word	0x2000011c
    5cac:	0001783c 	.word	0x0001783c
    5cb0:	00017961 	.word	0x00017961
    5cb4:	00017889 	.word	0x00017889
    5cb8:	0001796a 	.word	0x0001796a
    5cbc:	00015a00 	.word	0x00015a00
    5cc0:	00015a30 	.word	0x00015a30
    5cc4:	0001798a 	.word	0x0001798a

00005cc8 <set_random_address>:
{
    5cc8:	b570      	push	{r4, r5, r6, lr}
	return memcmp(a, b, sizeof(*a));
    5cca:	4e15      	ldr	r6, [pc, #84]	; (5d20 <set_random_address+0x58>)
    5ccc:	2206      	movs	r2, #6
    5cce:	f106 012d 	add.w	r1, r6, #45	; 0x2d
    5cd2:	4605      	mov	r5, r0
    5cd4:	f00c fb11 	bl	122fa <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    5cd8:	4604      	mov	r4, r0
    5cda:	b1d8      	cbz	r0, 5d14 <set_random_address+0x4c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    5cdc:	2106      	movs	r1, #6
    5cde:	f242 0005 	movw	r0, #8197	; 0x2005
    5ce2:	f7ff ff41 	bl	5b68 <bt_hci_cmd_create>
	if (!buf) {
    5ce6:	4604      	mov	r4, r0
    5ce8:	b1b0      	cbz	r0, 5d18 <set_random_address+0x50>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    5cea:	2206      	movs	r2, #6
    5cec:	4629      	mov	r1, r5
    5cee:	3008      	adds	r0, #8
    5cf0:	f00e f9ba 	bl	14068 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    5cf4:	4621      	mov	r1, r4
    5cf6:	2200      	movs	r2, #0
    5cf8:	f242 0005 	movw	r0, #8197	; 0x2005
    5cfc:	f7ff ff6c 	bl	5bd8 <bt_hci_cmd_send_sync>
	if (err) {
    5d00:	4604      	mov	r4, r0
    5d02:	b938      	cbnz	r0, 5d14 <set_random_address+0x4c>
	bt_addr_copy(&bt_dev.random_addr.a, addr);
    5d04:	4629      	mov	r1, r5
    5d06:	f106 002d 	add.w	r0, r6, #45	; 0x2d
    5d0a:	f00c fc54 	bl	125b6 <bt_addr_copy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    5d0e:	2301      	movs	r3, #1
    5d10:	f886 302c 	strb.w	r3, [r6, #44]	; 0x2c
}
    5d14:	4620      	mov	r0, r4
    5d16:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    5d18:	f06f 0436 	mvn.w	r4, #54	; 0x36
    5d1c:	e7fa      	b.n	5d14 <set_random_address+0x4c>
    5d1e:	bf00      	nop
    5d20:	20000000 	.word	0x20000000

00005d24 <le_set_private_addr>:
{
    5d24:	b537      	push	{r0, r1, r2, r4, r5, lr}
    5d26:	4d16      	ldr	r5, [pc, #88]	; (5d80 <le_set_private_addr+0x5c>)
    5d28:	4603      	mov	r3, r0
    5d2a:	f105 0094 	add.w	r0, r5, #148	; 0x94
    5d2e:	f00c fc3c 	bl	125aa <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_RPA_VALID)) {
    5d32:	04c2      	lsls	r2, r0, #19
    5d34:	d422      	bmi.n	5d7c <le_set_private_addr+0x58>
	err = bt_rpa_create(bt_dev.irk[id], &rpa);
    5d36:	eb05 1003 	add.w	r0, r5, r3, lsl #4
    5d3a:	4669      	mov	r1, sp
    5d3c:	f500 709c 	add.w	r0, r0, #312	; 0x138
    5d40:	f00c fb6c 	bl	1241c <bt_rpa_create>
	if (!err) {
    5d44:	4604      	mov	r4, r0
    5d46:	b950      	cbnz	r0, 5d5e <le_set_private_addr+0x3a>
		err = set_random_address(&rpa);
    5d48:	4668      	mov	r0, sp
    5d4a:	f7ff ffbd 	bl	5cc8 <set_random_address>
		if (!err) {
    5d4e:	4604      	mov	r4, r0
    5d50:	b928      	cbnz	r0, 5d5e <le_set_private_addr+0x3a>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    5d52:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    5d56:	f105 0094 	add.w	r0, r5, #148	; 0x94
    5d5a:	f00c fc32 	bl	125c2 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_RPA_TIMEOUT_SET)) {
    5d5e:	210d      	movs	r1, #13
    5d60:	4808      	ldr	r0, [pc, #32]	; (5d84 <le_set_private_addr+0x60>)
    5d62:	f00c fc39 	bl	125d8 <atomic_test_and_set_bit>
    5d66:	b930      	cbnz	r0, 5d76 <le_set_private_addr+0x52>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    5d68:	f04f 72e1 	mov.w	r2, #29491200	; 0x1c20000
    5d6c:	2300      	movs	r3, #0
    5d6e:	4906      	ldr	r1, [pc, #24]	; (5d88 <le_set_private_addr+0x64>)
    5d70:	4806      	ldr	r0, [pc, #24]	; (5d8c <le_set_private_addr+0x68>)
    5d72:	f009 fe5d 	bl	fa30 <k_delayed_work_submit_to_queue>
}
    5d76:	4620      	mov	r0, r4
    5d78:	b003      	add	sp, #12
    5d7a:	bd30      	pop	{r4, r5, pc}
		return 0;
    5d7c:	2400      	movs	r4, #0
    5d7e:	e7fa      	b.n	5d76 <le_set_private_addr+0x52>
    5d80:	20000000 	.word	0x20000000
    5d84:	20000094 	.word	0x20000094
    5d88:	20000148 	.word	0x20000148
    5d8c:	200010d0 	.word	0x200010d0

00005d90 <le_adv_set_random_addr.isra.0>:
static int le_adv_set_random_addr(struct bt_le_ext_adv *adv, uint32_t options,
    5d90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    5d94:	f011 0401 	ands.w	r4, r1, #1
static int le_adv_set_random_addr(struct bt_le_ext_adv *adv, uint32_t options,
    5d98:	4605      	mov	r5, r0
    5d9a:	460f      	mov	r7, r1
    5d9c:	4690      	mov	r8, r2
    5d9e:	461e      	mov	r6, r3
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    5da0:	d035      	beq.n	5e0e <le_adv_set_random_addr.isra.0+0x7e>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
    5da2:	b132      	cbz	r2, 5db2 <le_adv_set_random_addr.isra.0+0x22>
    5da4:	068b      	lsls	r3, r1, #26
    5da6:	d504      	bpl.n	5db2 <le_adv_set_random_addr.isra.0+0x22>
		    !BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
    5da8:	4b27      	ldr	r3, [pc, #156]	; (5e48 <le_adv_set_random_addr.isra.0+0xb8>)
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
    5daa:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
    5dae:	065c      	lsls	r4, r3, #25
    5db0:	d547      	bpl.n	5e42 <le_adv_set_random_addr.isra.0+0xb2>
		if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
    5db2:	0778      	lsls	r0, r7, #29
    5db4:	d40b      	bmi.n	5dce <le_adv_set_random_addr.isra.0+0x3e>
		return le_set_private_addr(adv->id);
    5db6:	4628      	mov	r0, r5
    5db8:	f7ff ffb4 	bl	5d24 <le_set_private_addr>
			if (err) {
    5dbc:	bb00      	cbnz	r0, 5e00 <le_adv_set_random_addr.isra.0+0x70>
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    5dbe:	f1b8 0f00 	cmp.w	r8, #0
    5dc2:	d03c      	beq.n	5e3e <le_adv_set_random_addr.isra.0+0xae>
    5dc4:	06b9      	lsls	r1, r7, #26
    5dc6:	d53a      	bpl.n	5e3e <le_adv_set_random_addr.isra.0+0xae>
				*own_addr_type = BT_HCI_OWN_ADDR_RPA_OR_RANDOM;
    5dc8:	2303      	movs	r3, #3
			*own_addr_type = BT_ADDR_LE_RANDOM;
    5dca:	7033      	strb	r3, [r6, #0]
		if (err) {
    5dcc:	e018      	b.n	5e00 <le_adv_set_random_addr.isra.0+0x70>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    5dce:	4c1e      	ldr	r4, [pc, #120]	; (5e48 <le_adv_set_random_addr.isra.0+0xb8>)
    5dd0:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
    5dd4:	5ce3      	ldrb	r3, [r4, r3]
    5dd6:	ea4f 09c5 	mov.w	r9, r5, lsl #3
    5dda:	2b01      	cmp	r3, #1
    5ddc:	d008      	beq.n	5df0 <le_adv_set_random_addr.isra.0+0x60>
			*own_addr_type = id_addr->type;
    5dde:	eba9 0505 	sub.w	r5, r9, r5
    5de2:	5d63      	ldrb	r3, [r4, r5]
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    5de4:	f1b8 0f00 	cmp.w	r8, #0
    5de8:	d10c      	bne.n	5e04 <le_adv_set_random_addr.isra.0+0x74>
	return 0;
    5dea:	2000      	movs	r0, #0
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    5dec:	7033      	strb	r3, [r6, #0]
    5dee:	e007      	b.n	5e00 <le_adv_set_random_addr.isra.0+0x70>
				err = set_adv_random_address(adv, &id_addr->a);
    5df0:	2007      	movs	r0, #7
    5df2:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
    5df6:	4420      	add	r0, r4
    5df8:	f7ff ff66 	bl	5cc8 <set_random_address>
				if (err) {
    5dfc:	2800      	cmp	r0, #0
    5dfe:	d0ee      	beq.n	5dde <le_adv_set_random_addr.isra.0+0x4e>
}
    5e00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    5e04:	06ba      	lsls	r2, r7, #26
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    5e06:	bf48      	it	mi
    5e08:	f043 0302 	orrmi.w	r3, r3, #2
    5e0c:	e7ed      	b.n	5dea <le_adv_set_random_addr.isra.0+0x5a>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
    5e0e:	074b      	lsls	r3, r1, #29
    5e10:	d513      	bpl.n	5e3a <le_adv_set_random_addr.isra.0+0xaa>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    5e12:	4f0d      	ldr	r7, [pc, #52]	; (5e48 <le_adv_set_random_addr.isra.0+0xb8>)
    5e14:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
    5e18:	5cfb      	ldrb	r3, [r7, r3]
    5e1a:	ea4f 08c0 	mov.w	r8, r0, lsl #3
    5e1e:	2b01      	cmp	r3, #1
    5e20:	d109      	bne.n	5e36 <le_adv_set_random_addr.isra.0+0xa6>
				err = set_adv_random_address(adv, &id_addr->a);
    5e22:	2007      	movs	r0, #7
    5e24:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
    5e28:	4438      	add	r0, r7
    5e2a:	f7ff ff4d 	bl	5cc8 <set_random_address>
			*own_addr_type = id_addr->type;
    5e2e:	eba8 0505 	sub.w	r5, r8, r5
    5e32:	5d7b      	ldrb	r3, [r7, r5]
    5e34:	e7c9      	b.n	5dca <le_adv_set_random_addr.isra.0+0x3a>
	int err = 0;
    5e36:	4620      	mov	r0, r4
    5e38:	e7f9      	b.n	5e2e <le_adv_set_random_addr.isra.0+0x9e>
		return le_set_private_addr(adv->id);
    5e3a:	f7ff ff73 	bl	5d24 <le_set_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
    5e3e:	2301      	movs	r3, #1
    5e40:	e7c3      	b.n	5dca <le_adv_set_random_addr.isra.0+0x3a>
			return -ENOTSUP;
    5e42:	f06f 0022 	mvn.w	r0, #34	; 0x22
    5e46:	e7db      	b.n	5e00 <le_adv_set_random_addr.isra.0+0x70>
    5e48:	20000000 	.word	0x20000000

00005e4c <set_le_adv_enable_legacy>:
{
    5e4c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    5e4e:	4606      	mov	r6, r0
    5e50:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    5e52:	f242 000a 	movw	r0, #8202	; 0x200a
    5e56:	2101      	movs	r1, #1
    5e58:	f7ff fe86 	bl	5b68 <bt_hci_cmd_create>
	if (!buf) {
    5e5c:	4604      	mov	r4, r0
    5e5e:	b1e0      	cbz	r0, 5e9a <set_le_adv_enable_legacy+0x4e>
	if (enable) {
    5e60:	b1cd      	cbz	r5, 5e96 <set_le_adv_enable_legacy+0x4a>
		net_buf_add_u8(buf, BT_HCI_LE_ADV_ENABLE);
    5e62:	2101      	movs	r1, #1
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    5e64:	f00c fbd4 	bl	12610 <net_buf_add_u8>
static inline void bt_hci_cmd_state_set_init(struct bt_hci_cmd_state_set *state,
					     atomic_t *target, int bit,
					     bool val)
{
	state->target = target;
	state->bit = bit;
    5e68:	2306      	movs	r3, #6
	cmd(buf)->state = &state;
    5e6a:	4620      	mov	r0, r4
	bt_hci_cmd_state_set_init(&state, adv->flags, BT_ADV_ENABLED, enable);
    5e6c:	3610      	adds	r6, #16
    5e6e:	9302      	str	r3, [sp, #8]
	state->target = target;
    5e70:	9601      	str	r6, [sp, #4]
	state->val = val;
    5e72:	f88d 500c 	strb.w	r5, [sp, #12]
	cmd(buf)->state = &state;
    5e76:	f007 f933 	bl	d0e0 <net_buf_id>
    5e7a:	220c      	movs	r2, #12
    5e7c:	4b08      	ldr	r3, [pc, #32]	; (5ea0 <set_le_adv_enable_legacy+0x54>)
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    5e7e:	4621      	mov	r1, r4
	cmd(buf)->state = &state;
    5e80:	fb02 3000 	mla	r0, r2, r0, r3
    5e84:	ab01      	add	r3, sp, #4
    5e86:	6043      	str	r3, [r0, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    5e88:	2200      	movs	r2, #0
    5e8a:	f242 000a 	movw	r0, #8202	; 0x200a
    5e8e:	f7ff fea3 	bl	5bd8 <bt_hci_cmd_send_sync>
}
    5e92:	b004      	add	sp, #16
    5e94:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    5e96:	4629      	mov	r1, r5
    5e98:	e7e4      	b.n	5e64 <set_le_adv_enable_legacy+0x18>
		return -ENOBUFS;
    5e9a:	f06f 0036 	mvn.w	r0, #54	; 0x36
    5e9e:	e7f8      	b.n	5e92 <set_le_adv_enable_legacy+0x46>
    5ea0:	20001994 	.word	0x20001994

00005ea4 <le_update_private_addr>:
{
    5ea4:	b538      	push	{r3, r4, r5, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    5ea6:	4b19      	ldr	r3, [pc, #100]	; (5f0c <le_update_private_addr+0x68>)
    5ea8:	f103 0028 	add.w	r0, r3, #40	; 0x28
    5eac:	f00c fb7d 	bl	125aa <atomic_get>
		if (adv &&
    5eb0:	0641      	lsls	r1, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    5eb2:	f3c0 1580 	ubfx	r5, r0, #6, #1
    5eb6:	d412      	bmi.n	5ede <le_update_private_addr+0x3a>
	uint8_t id = BT_ID_DEFAULT;
    5eb8:	2400      	movs	r4, #0
	bool adv_enabled = false;
    5eba:	4625      	mov	r5, r4
	err = le_set_private_addr(id);
    5ebc:	4620      	mov	r0, r4
    5ebe:	f7ff ff31 	bl	5d24 <le_set_private_addr>
	if (err) {
    5ec2:	4601      	mov	r1, r0
    5ec4:	b1c8      	cbz	r0, 5efa <le_update_private_addr+0x56>
    5ec6:	4b12      	ldr	r3, [pc, #72]	; (5f10 <le_update_private_addr+0x6c>)
    5ec8:	4a12      	ldr	r2, [pc, #72]	; (5f14 <le_update_private_addr+0x70>)
		BT_WARN("Failed to update RPA address (%d)", err);
    5eca:	4813      	ldr	r0, [pc, #76]	; (5f18 <le_update_private_addr+0x74>)
    5ecc:	1ad2      	subs	r2, r2, r3
    5ece:	08d2      	lsrs	r2, r2, #3
    5ed0:	0192      	lsls	r2, r2, #6
    5ed2:	f042 0202 	orr.w	r2, r2, #2
}
    5ed6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_WARN("Failed to update RPA address (%d)", err);
    5eda:	f00a bef8 	b.w	10cce <log_1>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    5ede:	f103 0028 	add.w	r0, r3, #40	; 0x28
    5ee2:	f00c fb62 	bl	125aa <atomic_get>
		    atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
    5ee6:	0502      	lsls	r2, r0, #20
    5ee8:	f3c0 21c0 	ubfx	r1, r0, #11, #1
    5eec:	d4e4      	bmi.n	5eb8 <le_update_private_addr+0x14>
			id = adv->id;
    5eee:	4618      	mov	r0, r3
    5ef0:	f810 4f18 	ldrb.w	r4, [r0, #24]!
			set_le_adv_enable_legacy(adv, false);
    5ef4:	f7ff ffaa 	bl	5e4c <set_le_adv_enable_legacy>
    5ef8:	e7e0      	b.n	5ebc <le_update_private_addr+0x18>
	if (adv && adv_enabled) {
    5efa:	b12d      	cbz	r5, 5f08 <le_update_private_addr+0x64>
}
    5efc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		set_le_adv_enable_legacy(adv, true);
    5f00:	2101      	movs	r1, #1
    5f02:	4806      	ldr	r0, [pc, #24]	; (5f1c <le_update_private_addr+0x78>)
    5f04:	f7ff bfa2 	b.w	5e4c <set_le_adv_enable_legacy>
}
    5f08:	bd38      	pop	{r3, r4, r5, pc}
    5f0a:	bf00      	nop
    5f0c:	20000000 	.word	0x20000000
    5f10:	00015a00 	.word	0x00015a00
    5f14:	00015a30 	.word	0x00015a30
    5f18:	000179a6 	.word	0x000179a6
    5f1c:	20000018 	.word	0x20000018

00005f20 <rpa_timeout>:
{
    5f20:	b508      	push	{r3, lr}
	le_rpa_invalidate();
    5f22:	f7ff fcfb 	bl	591c <le_rpa_invalidate>
    5f26:	480f      	ldr	r0, [pc, #60]	; (5f64 <rpa_timeout+0x44>)
    5f28:	f00c fb3f 	bl	125aa <atomic_get>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
    5f2c:	0643      	lsls	r3, r0, #25
    5f2e:	d40f      	bmi.n	5f50 <rpa_timeout+0x30>
    5f30:	480d      	ldr	r0, [pc, #52]	; (5f68 <rpa_timeout+0x48>)
    5f32:	f00c fb3a 	bl	125aa <atomic_get>
	if (!(adv_enabled ||
    5f36:	0500      	lsls	r0, r0, #20
    5f38:	d40f      	bmi.n	5f5a <rpa_timeout+0x3a>
    5f3a:	480b      	ldr	r0, [pc, #44]	; (5f68 <rpa_timeout+0x48>)
    5f3c:	f00c fb35 	bl	125aa <atomic_get>
    5f40:	0682      	lsls	r2, r0, #26
    5f42:	d504      	bpl.n	5f4e <rpa_timeout+0x2e>
    5f44:	4808      	ldr	r0, [pc, #32]	; (5f68 <rpa_timeout+0x48>)
    5f46:	f00c fb30 	bl	125aa <atomic_get>
	      (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    5f4a:	0603      	lsls	r3, r0, #24
    5f4c:	d405      	bmi.n	5f5a <rpa_timeout+0x3a>
}
    5f4e:	bd08      	pop	{r3, pc}
    5f50:	4804      	ldr	r0, [pc, #16]	; (5f64 <rpa_timeout+0x44>)
    5f52:	f00c fb2a 	bl	125aa <atomic_get>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
    5f56:	0501      	lsls	r1, r0, #20
    5f58:	d4ea      	bmi.n	5f30 <rpa_timeout+0x10>
}
    5f5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	le_update_private_addr();
    5f5e:	f7ff bfa1 	b.w	5ea4 <le_update_private_addr>
    5f62:	bf00      	nop
    5f64:	20000028 	.word	0x20000028
    5f68:	20000094 	.word	0x20000094

00005f6c <hci_le_read_max_data_len>:
{
    5f6c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    5f6e:	4606      	mov	r6, r0
    5f70:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
    5f72:	f242 002f 	movw	r0, #8239	; 0x202f
    5f76:	2100      	movs	r1, #0
    5f78:	aa01      	add	r2, sp, #4
    5f7a:	f7ff fe2d 	bl	5bd8 <bt_hci_cmd_send_sync>
	if (err) {
    5f7e:	4604      	mov	r4, r0
    5f80:	b160      	cbz	r0, 5f9c <hci_le_read_max_data_len+0x30>
    5f82:	490c      	ldr	r1, [pc, #48]	; (5fb4 <hci_le_read_max_data_len+0x48>)
    5f84:	4b0c      	ldr	r3, [pc, #48]	; (5fb8 <hci_le_read_max_data_len+0x4c>)
		BT_ERR("Failed to read DLE max data len");
    5f86:	480d      	ldr	r0, [pc, #52]	; (5fbc <hci_le_read_max_data_len+0x50>)
    5f88:	1ac9      	subs	r1, r1, r3
    5f8a:	08c9      	lsrs	r1, r1, #3
    5f8c:	0189      	lsls	r1, r1, #6
    5f8e:	f041 0101 	orr.w	r1, r1, #1
    5f92:	f00a fe8f 	bl	10cb4 <log_0>
}
    5f96:	4620      	mov	r0, r4
    5f98:	b002      	add	sp, #8
    5f9a:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
    5f9c:	9801      	ldr	r0, [sp, #4]
    5f9e:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    5fa0:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    5fa4:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
    5fa6:	f8b3 3003 	ldrh.w	r3, [r3, #3]
    5faa:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
    5fac:	f007 f94c 	bl	d248 <net_buf_unref>
	return 0;
    5fb0:	e7f1      	b.n	5f96 <hci_le_read_max_data_len+0x2a>
    5fb2:	bf00      	nop
    5fb4:	00015a30 	.word	0x00015a30
    5fb8:	00015a00 	.word	0x00015a00
    5fbc:	000179c8 	.word	0x000179c8

00005fc0 <hci_id_add>:
{
    5fc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5fc4:	4605      	mov	r5, r0
    5fc6:	4688      	mov	r8, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
    5fc8:	f242 0027 	movw	r0, #8231	; 0x2027
    5fcc:	2127      	movs	r1, #39	; 0x27
{
    5fce:	4617      	mov	r7, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
    5fd0:	f7ff fdca 	bl	5b68 <bt_hci_cmd_create>
	if (!buf) {
    5fd4:	4604      	mov	r4, r0
    5fd6:	b1f0      	cbz	r0, 6016 <hci_id_add+0x56>
	return net_buf_simple_add(&buf->b, len);
    5fd8:	2127      	movs	r1, #39	; 0x27
    5fda:	3008      	adds	r0, #8
    5fdc:	f00e f83e 	bl	1405c <net_buf_simple_add>
    5fe0:	4606      	mov	r6, r0
	bt_addr_le_copy(&cp->peer_id_addr, addr);
    5fe2:	4641      	mov	r1, r8
    5fe4:	f00c faea 	bl	125bc <bt_addr_le_copy>
	memcpy(cp->peer_irk, peer_irk, 16);
    5fe8:	4639      	mov	r1, r7
    5fea:	2210      	movs	r2, #16
    5fec:	1df0      	adds	r0, r6, #7
    5fee:	f00c f994 	bl	1231a <memcpy>
	memcpy(cp->local_irk, bt_dev.irk[id], 16);
    5ff2:	2210      	movs	r2, #16
    5ff4:	490a      	ldr	r1, [pc, #40]	; (6020 <hci_id_add+0x60>)
    5ff6:	f106 0017 	add.w	r0, r6, #23
    5ffa:	fb02 1105 	mla	r1, r2, r5, r1
    5ffe:	f501 719c 	add.w	r1, r1, #312	; 0x138
    6002:	f00c f98a 	bl	1231a <memcpy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
    6006:	4621      	mov	r1, r4
}
    6008:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
    600c:	2200      	movs	r2, #0
    600e:	f242 0027 	movw	r0, #8231	; 0x2027
    6012:	f7ff bde1 	b.w	5bd8 <bt_hci_cmd_send_sync>
}
    6016:	f06f 0036 	mvn.w	r0, #54	; 0x36
    601a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    601e:	bf00      	nop
    6020:	20000000 	.word	0x20000000

00006024 <hci_set_ad>:
{
    6024:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6028:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    602a:	2120      	movs	r1, #32
{
    602c:	4682      	mov	sl, r0
    602e:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    6030:	f7ff fd9a 	bl	5b68 <bt_hci_cmd_create>
	if (!buf) {
    6034:	4606      	mov	r6, r0
    6036:	2800      	cmp	r0, #0
    6038:	d05c      	beq.n	60f4 <hci_set_ad+0xd0>
    603a:	2120      	movs	r1, #32
    603c:	3008      	adds	r0, #8
    603e:	f00e f80d 	bl	1405c <net_buf_simple_add>
	(void)memset(set_data, 0, sizeof(*set_data));
    6042:	2220      	movs	r2, #32
    6044:	4681      	mov	r9, r0
    6046:	2100      	movs	r1, #0
    6048:	f00c f992 	bl	12370 <memset>
	err = set_data_add(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
    604c:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
	uint8_t set_data_len = 0;
    6050:	2500      	movs	r5, #0
	err = set_data_add(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
    6052:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
    6056:	9300      	str	r3, [sp, #0]
		for (size_t j = 0; j < ad[i].len; j++) {
    6058:	2300      	movs	r3, #0
    605a:	f8d4 8000 	ldr.w	r8, [r4]
    605e:	6862      	ldr	r2, [r4, #4]
    6060:	4293      	cmp	r3, r2
    6062:	d30d      	bcc.n	6080 <hci_set_ad+0x5c>
	for (size_t i = 0; i < ad_len; i++) {
    6064:	9b00      	ldr	r3, [sp, #0]
    6066:	3408      	adds	r4, #8
    6068:	429c      	cmp	r4, r3
    606a:	d1f5      	bne.n	6058 <hci_set_ad+0x34>
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    606c:	2200      	movs	r2, #0
    606e:	4631      	mov	r1, r6
    6070:	4650      	mov	r0, sl
	*data_len = set_data_len;
    6072:	f889 5000 	strb.w	r5, [r9]
}
    6076:	b003      	add	sp, #12
    6078:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    607c:	f7ff bdac 	b.w	5bd8 <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
    6080:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
    6084:	1ca8      	adds	r0, r5, #2
			if ((set_data_len + len + 2) > set_data_len_max) {
    6086:	1881      	adds	r1, r0, r2
    6088:	291f      	cmp	r1, #31
			uint8_t type = data[j].type;
    608a:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
    608e:	d91a      	bls.n	60c6 <hci_set_ad+0xa2>
				if (!(type == BT_DATA_NAME_COMPLETE &&
    6090:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
    6094:	f1c5 021d 	rsb	r2, r5, #29
				if (!(type == BT_DATA_NAME_COMPLETE &&
    6098:	d101      	bne.n	609e <hci_set_ad+0x7a>
    609a:	2a00      	cmp	r2, #0
    609c:	dc11      	bgt.n	60c2 <hci_set_ad+0x9e>
    609e:	4b17      	ldr	r3, [pc, #92]	; (60fc <hci_set_ad+0xd8>)
    60a0:	4917      	ldr	r1, [pc, #92]	; (6100 <hci_set_ad+0xdc>)
					BT_ERR("Too big advertising data");
    60a2:	4818      	ldr	r0, [pc, #96]	; (6104 <hci_set_ad+0xe0>)
    60a4:	1ac9      	subs	r1, r1, r3
    60a6:	08c9      	lsrs	r1, r1, #3
    60a8:	0189      	lsls	r1, r1, #6
    60aa:	f041 0101 	orr.w	r1, r1, #1
    60ae:	f00a fe01 	bl	10cb4 <log_0>
		net_buf_unref(buf);
    60b2:	4630      	mov	r0, r6
    60b4:	f007 f8c8 	bl	d248 <net_buf_unref>
					return -EINVAL;
    60b8:	f06f 0015 	mvn.w	r0, #21
}
    60bc:	b003      	add	sp, #12
    60be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				type = BT_DATA_NAME_SHORTENED;
    60c2:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
    60c6:	b2d7      	uxtb	r7, r2
    60c8:	1c79      	adds	r1, r7, #1
    60ca:	f80b 1005 	strb.w	r1, [fp, r5]
    60ce:	1c69      	adds	r1, r5, #1
			set_data[set_data_len++] = type;
    60d0:	b2c9      	uxtb	r1, r1
    60d2:	f80b c001 	strb.w	ip, [fp, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
    60d6:	f8d8 1004 	ldr.w	r1, [r8, #4]
    60da:	fa5b f080 	uxtab	r0, fp, r0
    60de:	9301      	str	r3, [sp, #4]
			set_data_len += len;
    60e0:	3702      	adds	r7, #2
			memcpy(&set_data[set_data_len], data[j].data, len);
    60e2:	f00c f91a 	bl	1231a <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
    60e6:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
    60e8:	443d      	add	r5, r7
    60ea:	b2ed      	uxtb	r5, r5
		for (size_t j = 0; j < ad[i].len; j++) {
    60ec:	3301      	adds	r3, #1
    60ee:	f108 0808 	add.w	r8, r8, #8
    60f2:	e7b4      	b.n	605e <hci_set_ad+0x3a>
		return -ENOBUFS;
    60f4:	f06f 0036 	mvn.w	r0, #54	; 0x36
    60f8:	e7e0      	b.n	60bc <hci_set_ad+0x98>
    60fa:	bf00      	nop
    60fc:	00015a00 	.word	0x00015a00
    6100:	00015a30 	.word	0x00015a30
    6104:	000179e8 	.word	0x000179e8

00006108 <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
    6108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    610c:	b087      	sub	sp, #28
    610e:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
    6112:	4606      	mov	r6, r0
    6114:	460c      	mov	r4, r1
    6116:	4617      	mov	r7, r2
	struct bt_ad d[2] = {};
    6118:	2100      	movs	r1, #0
    611a:	2210      	movs	r2, #16
    611c:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
    611e:	461d      	mov	r5, r3
    6120:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
    6124:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
	struct bt_ad d[2] = {};
    6128:	f00c f922 	bl	12370 <memset>
	if (use_name) {
    612c:	f1b8 0f00 	cmp.w	r8, #0
    6130:	d00e      	beq.n	6150 <le_adv_update.constprop.0+0x48>
		if ((ad && ad_has_name(ad, ad_len)) ||
    6132:	bbb4      	cbnz	r4, 61a2 <le_adv_update.constprop.0+0x9a>
    6134:	2d00      	cmp	r5, #0
    6136:	d13f      	bne.n	61b8 <le_adv_update.constprop.0+0xb0>
		data = (struct bt_data)BT_DATA(
    6138:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 61ec <le_adv_update.constprop.0+0xe4>
    613c:	4658      	mov	r0, fp
    613e:	f00c f8b1 	bl	122a4 <strlen>
    6142:	2309      	movs	r3, #9
    6144:	f88d 0001 	strb.w	r0, [sp, #1]
    6148:	f88d 3000 	strb.w	r3, [sp]
    614c:	f8cd b004 	str.w	fp, [sp, #4]
		d[0].len = ad_len;
    6150:	e9cd 4702 	strd	r4, r7, [sp, #8]
		if (use_name && !scannable) {
    6154:	f1b8 0f00 	cmp.w	r8, #0
    6158:	d030      	beq.n	61bc <le_adv_update.constprop.0+0xb4>
    615a:	f1ba 0f00 	cmp.w	sl, #0
    615e:	d12d      	bne.n	61bc <le_adv_update.constprop.0+0xb4>
			d[1].len = 1;
    6160:	2301      	movs	r3, #1
			d_len = 2;
    6162:	2202      	movs	r2, #2
			d[1].data = &data;
    6164:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
    6168:	9305      	str	r3, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
    616a:	f242 0008 	movw	r0, #8200	; 0x2008
    616e:	a902      	add	r1, sp, #8
    6170:	f7ff ff58 	bl	6024 <hci_set_ad>
		if (err) {
    6174:	4604      	mov	r4, r0
    6176:	b938      	cbnz	r0, 6188 <le_adv_update.constprop.0+0x80>
	if (scannable) {
    6178:	f1ba 0f00 	cmp.w	sl, #0
    617c:	d120      	bne.n	61c0 <le_adv_update.constprop.0+0xb8>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    617e:	2104      	movs	r1, #4
    6180:	f106 0010 	add.w	r0, r6, #16
    6184:	f00c fa1d 	bl	125c2 <atomic_or>
}
    6188:	4620      	mov	r0, r4
    618a:	b007      	add	sp, #28
    618c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
    6190:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
    6194:	3a08      	subs	r2, #8
    6196:	2a01      	cmp	r2, #1
    6198:	d925      	bls.n	61e6 <le_adv_update.constprop.0+0xde>
	for (i = 0; i < ad_len; i++) {
    619a:	3301      	adds	r3, #1
    619c:	429f      	cmp	r7, r3
    619e:	d1f7      	bne.n	6190 <le_adv_update.constprop.0+0x88>
    61a0:	e7c8      	b.n	6134 <le_adv_update.constprop.0+0x2c>
    61a2:	2300      	movs	r3, #0
    61a4:	e7fa      	b.n	619c <le_adv_update.constprop.0+0x94>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
    61a6:	f815 2033 	ldrb.w	r2, [r5, r3, lsl #3]
    61aa:	3a08      	subs	r2, #8
    61ac:	2a01      	cmp	r2, #1
    61ae:	d91a      	bls.n	61e6 <le_adv_update.constprop.0+0xde>
	for (i = 0; i < ad_len; i++) {
    61b0:	3301      	adds	r3, #1
    61b2:	4599      	cmp	r9, r3
    61b4:	d1f7      	bne.n	61a6 <le_adv_update.constprop.0+0x9e>
    61b6:	e7bf      	b.n	6138 <le_adv_update.constprop.0+0x30>
    61b8:	2300      	movs	r3, #0
    61ba:	e7fa      	b.n	61b2 <le_adv_update.constprop.0+0xaa>
		d_len = 1;
    61bc:	2201      	movs	r2, #1
    61be:	e7d4      	b.n	616a <le_adv_update.constprop.0+0x62>
		d[0].data = sd;
    61c0:	2201      	movs	r2, #1
		d[0].len = sd_len;
    61c2:	e9cd 5902 	strd	r5, r9, [sp, #8]
		if (use_name) {
    61c6:	f1b8 0f00 	cmp.w	r8, #0
    61ca:	d003      	beq.n	61d4 <le_adv_update.constprop.0+0xcc>
			d[1].len = 1;
    61cc:	9205      	str	r2, [sp, #20]
			d_len = 2;
    61ce:	2202      	movs	r2, #2
			d[1].data = &data;
    61d0:	f8cd d010 	str.w	sp, [sp, #16]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
    61d4:	f242 0009 	movw	r0, #8201	; 0x2009
    61d8:	a902      	add	r1, sp, #8
    61da:	f7ff ff23 	bl	6024 <hci_set_ad>
		if (err) {
    61de:	2800      	cmp	r0, #0
    61e0:	d0cd      	beq.n	617e <le_adv_update.constprop.0+0x76>
    61e2:	4604      	mov	r4, r0
    61e4:	e7d0      	b.n	6188 <le_adv_update.constprop.0+0x80>
			return -EINVAL;
    61e6:	f06f 0415 	mvn.w	r4, #21
    61ea:	e7cd      	b.n	6188 <le_adv_update.constprop.0+0x80>
    61ec:	20000178 	.word	0x20000178

000061f0 <bt_unpair>:
{
    61f0:	b530      	push	{r4, r5, lr}
    61f2:	b085      	sub	sp, #20
    61f4:	460d      	mov	r5, r1
    61f6:	f88d 0007 	strb.w	r0, [sp, #7]
	if (id >= CONFIG_BT_ID_MAX) {
    61fa:	b9c8      	cbnz	r0, 6230 <bt_unpair+0x40>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    61fc:	b949      	cbnz	r1, 6212 <bt_unpair+0x22>
		bt_foreach_bond(id, unpair_remote, &id);
    61fe:	490e      	ldr	r1, [pc, #56]	; (6238 <bt_unpair+0x48>)
    6200:	f89d 0007 	ldrb.w	r0, [sp, #7]
    6204:	f10d 0207 	add.w	r2, sp, #7
    6208:	f006 fda6 	bl	cd58 <bt_foreach_bond>
		return 0;
    620c:	2000      	movs	r0, #0
}
    620e:	b005      	add	sp, #20
    6210:	bd30      	pop	{r4, r5, pc}
	    (!addr || !bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
    6212:	9002      	str	r0, [sp, #8]
    6214:	a902      	add	r1, sp, #8
    6216:	f8cd 000b 	str.w	r0, [sp, #11]
    621a:	4628      	mov	r0, r5
    621c:	f00c f9c8 	bl	125b0 <bt_addr_le_cmp>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    6220:	2800      	cmp	r0, #0
    6222:	d0ec      	beq.n	61fe <bt_unpair+0xe>
	unpair(id, addr);
    6224:	4629      	mov	r1, r5
    6226:	f89d 0007 	ldrb.w	r0, [sp, #7]
    622a:	f7fe ffc1 	bl	51b0 <unpair>
	return 0;
    622e:	e7ed      	b.n	620c <bt_unpair+0x1c>
		return -EINVAL;
    6230:	f06f 0015 	mvn.w	r0, #21
    6234:	e7eb      	b.n	620e <bt_unpair+0x1e>
    6236:	bf00      	nop
    6238:	00012617 	.word	0x00012617

0000623c <bt_id_add>:
{
    623c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    623e:	4f5c      	ldr	r7, [pc, #368]	; (63b0 <bt_id_add+0x174>)
{
    6240:	4604      	mov	r4, r0
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    6242:	f897 20e0 	ldrb.w	r2, [r7, #224]	; 0xe0
    6246:	463d      	mov	r5, r7
    6248:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
    624c:	b10a      	cbz	r2, 6252 <bt_id_add+0x16>
    624e:	429a      	cmp	r2, r3
    6250:	d208      	bcs.n	6264 <bt_id_add+0x28>
		bt_dev.le.rl_entries++;
    6252:	3301      	adds	r3, #1
    6254:	f885 30e1 	strb.w	r3, [r5, #225]	; 0xe1
		keys->state |= BT_KEYS_ID_ADDED;
    6258:	7a23      	ldrb	r3, [r4, #8]
    625a:	f043 0304 	orr.w	r3, r3, #4
    625e:	7223      	strb	r3, [r4, #8]
}
    6260:	b003      	add	sp, #12
    6262:	bdf0      	pop	{r4, r5, r6, r7, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
    6264:	2100      	movs	r1, #0
    6266:	2206      	movs	r2, #6
    6268:	4608      	mov	r0, r1
    626a:	f002 f837 	bl	82dc <bt_conn_lookup_state_le>
	if (conn) {
    626e:	4606      	mov	r6, r0
    6270:	b168      	cbz	r0, 628e <bt_id_add+0x52>
    6272:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    6276:	f107 0094 	add.w	r0, r7, #148	; 0x94
    627a:	f00c f9a2 	bl	125c2 <atomic_or>
	keys->state |= flag;
    627e:	7a23      	ldrb	r3, [r4, #8]
		bt_conn_unref(conn);
    6280:	4630      	mov	r0, r6
	keys->state |= flag;
    6282:	f043 0301 	orr.w	r3, r3, #1
    6286:	7223      	strb	r3, [r4, #8]
		bt_conn_unref(conn);
    6288:	f00c fbad 	bl	129e6 <bt_conn_unref>
		return;
    628c:	e7e8      	b.n	6260 <bt_id_add+0x24>
	func(&bt_dev.adv, data);
    628e:	4601      	mov	r1, r0
    6290:	f107 0018 	add.w	r0, r7, #24
    6294:	f00c f9d4 	bl	12640 <adv_pause_enabled>
	if (bt_dev.le.rl_entries) {
    6298:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
    629c:	b173      	cbz	r3, 62bc <bt_id_add+0x80>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
    629e:	4630      	mov	r0, r6
    62a0:	f00c f9fe 	bl	126a0 <addr_res_enable>
		if (err) {
    62a4:	b150      	cbz	r0, 62bc <bt_id_add+0x80>
    62a6:	4943      	ldr	r1, [pc, #268]	; (63b4 <bt_id_add+0x178>)
    62a8:	4b43      	ldr	r3, [pc, #268]	; (63b8 <bt_id_add+0x17c>)
			BT_WARN("Failed to disable address resolution");
    62aa:	4844      	ldr	r0, [pc, #272]	; (63bc <bt_id_add+0x180>)
    62ac:	1ac9      	subs	r1, r1, r3
    62ae:	08c9      	lsrs	r1, r1, #3
    62b0:	0189      	lsls	r1, r1, #6
    62b2:	f041 0102 	orr.w	r1, r1, #2
		BT_WARN("Set privacy mode command is not supported");
    62b6:	f00a fcfd 	bl	10cb4 <log_0>
	if (err) {
    62ba:	e023      	b.n	6304 <bt_id_add+0xc8>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
    62bc:	f895 20e1 	ldrb.w	r2, [r5, #225]	; 0xe1
    62c0:	f895 30e0 	ldrb.w	r3, [r5, #224]	; 0xe0
    62c4:	429a      	cmp	r2, r3
    62c6:	d125      	bne.n	6314 <bt_id_add+0xd8>
    62c8:	4b3b      	ldr	r3, [pc, #236]	; (63b8 <bt_id_add+0x17c>)
    62ca:	4e3a      	ldr	r6, [pc, #232]	; (63b4 <bt_id_add+0x178>)
		BT_WARN("Resolving list size exceeded. Switching to host.");
    62cc:	483c      	ldr	r0, [pc, #240]	; (63c0 <bt_id_add+0x184>)
    62ce:	1af6      	subs	r6, r6, r3
    62d0:	08f6      	lsrs	r6, r6, #3
    62d2:	01b6      	lsls	r6, r6, #6
    62d4:	f046 0102 	orr.w	r1, r6, #2
    62d8:	f00a fcec 	bl	10cb4 <log_0>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
    62dc:	2200      	movs	r2, #0
    62de:	f242 0029 	movw	r0, #8233	; 0x2029
    62e2:	4611      	mov	r1, r2
    62e4:	f7ff fc78 	bl	5bd8 <bt_hci_cmd_send_sync>
		if (err) {
    62e8:	b118      	cbz	r0, 62f2 <bt_id_add+0xb6>
			BT_ERR("Failed to clear resolution list");
    62ea:	4836      	ldr	r0, [pc, #216]	; (63c4 <bt_id_add+0x188>)
    62ec:	f046 0101 	orr.w	r1, r6, #1
    62f0:	e7e1      	b.n	62b6 <bt_id_add+0x7a>
		bt_dev.le.rl_entries++;
    62f2:	f895 30e1 	ldrb.w	r3, [r5, #225]	; 0xe1
    62f6:	3301      	adds	r3, #1
    62f8:	f885 30e1 	strb.w	r3, [r5, #225]	; 0xe1
		keys->state |= BT_KEYS_ID_ADDED;
    62fc:	7a23      	ldrb	r3, [r4, #8]
    62fe:	f043 0304 	orr.w	r3, r3, #4
    6302:	7223      	strb	r3, [r4, #8]
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
    6304:	2001      	movs	r0, #1
    6306:	f00c f9cb 	bl	126a0 <addr_res_enable>
	func(&bt_dev.adv, data);
    630a:	2100      	movs	r1, #0
    630c:	482e      	ldr	r0, [pc, #184]	; (63c8 <bt_id_add+0x18c>)
    630e:	f00c f9ac 	bl	1266a <adv_unpause_enabled>
}
    6312:	e7a5      	b.n	6260 <bt_id_add+0x24>
	err = hci_id_add(keys->id, &keys->addr, keys->irk.val);
    6314:	4622      	mov	r2, r4
    6316:	1c67      	adds	r7, r4, #1
    6318:	4639      	mov	r1, r7
    631a:	f812 0b2a 	ldrb.w	r0, [r2], #42
    631e:	f7ff fe4f 	bl	5fc0 <hci_id_add>
	if (err) {
    6322:	4606      	mov	r6, r0
    6324:	b140      	cbz	r0, 6338 <bt_id_add+0xfc>
    6326:	4923      	ldr	r1, [pc, #140]	; (63b4 <bt_id_add+0x178>)
    6328:	4b23      	ldr	r3, [pc, #140]	; (63b8 <bt_id_add+0x17c>)
		BT_ERR("Failed to add IRK to controller");
    632a:	4828      	ldr	r0, [pc, #160]	; (63cc <bt_id_add+0x190>)
    632c:	1ac9      	subs	r1, r1, r3
    632e:	08c9      	lsrs	r1, r1, #3
    6330:	0189      	lsls	r1, r1, #6
    6332:	f041 0101 	orr.w	r1, r1, #1
    6336:	e7be      	b.n	62b6 <bt_id_add+0x7a>
	bt_dev.le.rl_entries++;
    6338:	f895 30e1 	ldrb.w	r3, [r5, #225]	; 0xe1
    633c:	3301      	adds	r3, #1
    633e:	f885 30e1 	strb.w	r3, [r5, #225]	; 0xe1
	keys->state |= BT_KEYS_ID_ADDED;
    6342:	7a23      	ldrb	r3, [r4, #8]
    6344:	f043 0304 	orr.w	r3, r3, #4
    6348:	7223      	strb	r3, [r4, #8]
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
    634a:	f895 306b 	ldrb.w	r3, [r5, #107]	; 0x6b
    634e:	075b      	lsls	r3, r3, #29
    6350:	d408      	bmi.n	6364 <bt_id_add+0x128>
    6352:	4918      	ldr	r1, [pc, #96]	; (63b4 <bt_id_add+0x178>)
    6354:	4b18      	ldr	r3, [pc, #96]	; (63b8 <bt_id_add+0x17c>)
		BT_WARN("Set privacy mode command is not supported");
    6356:	481e      	ldr	r0, [pc, #120]	; (63d0 <bt_id_add+0x194>)
    6358:	1ac9      	subs	r1, r1, r3
    635a:	08c9      	lsrs	r1, r1, #3
    635c:	0189      	lsls	r1, r1, #6
    635e:	f041 0102 	orr.w	r1, r1, #2
    6362:	e7a8      	b.n	62b6 <bt_id_add+0x7a>
	bt_addr_le_copy(&cp.id_addr, addr);
    6364:	4639      	mov	r1, r7
    6366:	4668      	mov	r0, sp
    6368:	f00c f928 	bl	125bc <bt_addr_le_copy>
	cp.mode = mode;
    636c:	2301      	movs	r3, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
    636e:	2108      	movs	r1, #8
    6370:	f242 004e 	movw	r0, #8270	; 0x204e
	cp.mode = mode;
    6374:	f88d 3007 	strb.w	r3, [sp, #7]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
    6378:	f7ff fbf6 	bl	5b68 <bt_hci_cmd_create>
	if (!buf) {
    637c:	4604      	mov	r4, r0
    637e:	b940      	cbnz	r0, 6392 <bt_id_add+0x156>
    6380:	490c      	ldr	r1, [pc, #48]	; (63b4 <bt_id_add+0x178>)
    6382:	4b0d      	ldr	r3, [pc, #52]	; (63b8 <bt_id_add+0x17c>)
		BT_ERR("Failed to set privacy mode");
    6384:	4813      	ldr	r0, [pc, #76]	; (63d4 <bt_id_add+0x198>)
    6386:	1ac9      	subs	r1, r1, r3
    6388:	08c9      	lsrs	r1, r1, #3
    638a:	0189      	lsls	r1, r1, #6
    638c:	f041 0101 	orr.w	r1, r1, #1
    6390:	e791      	b.n	62b6 <bt_id_add+0x7a>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    6392:	2208      	movs	r2, #8
    6394:	4669      	mov	r1, sp
    6396:	4410      	add	r0, r2
    6398:	f00d fe66 	bl	14068 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
    639c:	4632      	mov	r2, r6
    639e:	4621      	mov	r1, r4
    63a0:	f242 004e 	movw	r0, #8270	; 0x204e
    63a4:	f7ff fc18 	bl	5bd8 <bt_hci_cmd_send_sync>
	if (err) {
    63a8:	2800      	cmp	r0, #0
    63aa:	d0ab      	beq.n	6304 <bt_id_add+0xc8>
    63ac:	e7e8      	b.n	6380 <bt_id_add+0x144>
    63ae:	bf00      	nop
    63b0:	20000000 	.word	0x20000000
    63b4:	00015a30 	.word	0x00015a30
    63b8:	00015a00 	.word	0x00015a00
    63bc:	00017a01 	.word	0x00017a01
    63c0:	00017a26 	.word	0x00017a26
    63c4:	00017a57 	.word	0x00017a57
    63c8:	20000018 	.word	0x20000018
    63cc:	00017a77 	.word	0x00017a77
    63d0:	00017a97 	.word	0x00017a97
    63d4:	00017ac1 	.word	0x00017ac1

000063d8 <bt_id_del>:
{
    63d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!bt_dev.le.rl_size ||
    63dc:	4f45      	ldr	r7, [pc, #276]	; (64f4 <bt_id_del+0x11c>)
{
    63de:	4604      	mov	r4, r0
	if (!bt_dev.le.rl_size ||
    63e0:	f897 20e0 	ldrb.w	r2, [r7, #224]	; 0xe0
    63e4:	463d      	mov	r5, r7
    63e6:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
    63ea:	b112      	cbz	r2, 63f2 <bt_id_del+0x1a>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
    63ec:	3201      	adds	r2, #1
	if (!bt_dev.le.rl_size ||
    63ee:	4293      	cmp	r3, r2
    63f0:	dd08      	ble.n	6404 <bt_id_del+0x2c>
		bt_dev.le.rl_entries--;
    63f2:	3b01      	subs	r3, #1
    63f4:	f885 30e1 	strb.w	r3, [r5, #225]	; 0xe1
		keys->state &= ~BT_KEYS_ID_ADDED;
    63f8:	7a23      	ldrb	r3, [r4, #8]
    63fa:	f023 0304 	bic.w	r3, r3, #4
    63fe:	7223      	strb	r3, [r4, #8]
}
    6400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
    6404:	2100      	movs	r1, #0
    6406:	2206      	movs	r2, #6
    6408:	4608      	mov	r0, r1
    640a:	f001 ff67 	bl	82dc <bt_conn_lookup_state_le>
	if (conn) {
    640e:	4606      	mov	r6, r0
    6410:	b170      	cbz	r0, 6430 <bt_id_del+0x58>
    6412:	f107 0094 	add.w	r0, r7, #148	; 0x94
    6416:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    641a:	f00c f8d2 	bl	125c2 <atomic_or>
	keys->state |= flag;
    641e:	7a23      	ldrb	r3, [r4, #8]
		bt_conn_unref(conn);
    6420:	4630      	mov	r0, r6
	keys->state |= flag;
    6422:	f043 0302 	orr.w	r3, r3, #2
    6426:	7223      	strb	r3, [r4, #8]
}
    6428:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_conn_unref(conn);
    642c:	f00c badb 	b.w	129e6 <bt_conn_unref>
	func(&bt_dev.adv, data);
    6430:	4601      	mov	r1, r0
    6432:	f107 0018 	add.w	r0, r7, #24
    6436:	f00c f903 	bl	12640 <adv_pause_enabled>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
    643a:	4630      	mov	r0, r6
    643c:	f00c f930 	bl	126a0 <addr_res_enable>
	if (err) {
    6440:	4606      	mov	r6, r0
    6442:	b1b0      	cbz	r0, 6472 <bt_id_del+0x9a>
    6444:	4a2c      	ldr	r2, [pc, #176]	; (64f8 <bt_id_del+0x120>)
    6446:	4b2d      	ldr	r3, [pc, #180]	; (64fc <bt_id_del+0x124>)
		BT_ERR("Disabling address resolution failed (err %d)", err);
    6448:	4601      	mov	r1, r0
    644a:	1ad2      	subs	r2, r2, r3
    644c:	08d2      	lsrs	r2, r2, #3
    644e:	0192      	lsls	r2, r2, #6
    6450:	482b      	ldr	r0, [pc, #172]	; (6500 <bt_id_del+0x128>)
    6452:	f042 0201 	orr.w	r2, r2, #1
    6456:	f00a fc3a 	bl	10cce <log_1>
	if (bt_dev.le.rl_entries) {
    645a:	f895 30e1 	ldrb.w	r3, [r5, #225]	; 0xe1
    645e:	b113      	cbz	r3, 6466 <bt_id_del+0x8e>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
    6460:	2001      	movs	r0, #1
    6462:	f00c f91d 	bl	126a0 <addr_res_enable>
}
    6466:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	func(&bt_dev.adv, data);
    646a:	2100      	movs	r1, #0
    646c:	4825      	ldr	r0, [pc, #148]	; (6504 <bt_id_del+0x12c>)
    646e:	f00c b8fc 	b.w	1266a <adv_unpause_enabled>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    6472:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
    6476:	f897 20e0 	ldrb.w	r2, [r7, #224]	; 0xe0
    647a:	429a      	cmp	r2, r3
    647c:	d20c      	bcs.n	6498 <bt_id_del+0xc0>
		bt_dev.le.rl_entries--;
    647e:	3b01      	subs	r3, #1
    6480:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
		keys->state &= ~BT_KEYS_ID_ADDED;
    6484:	7a23      	ldrb	r3, [r4, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
    6486:	4602      	mov	r2, r0
		keys->state &= ~BT_KEYS_ID_ADDED;
    6488:	f023 0304 	bic.w	r3, r3, #4
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
    648c:	2002      	movs	r0, #2
    648e:	491e      	ldr	r1, [pc, #120]	; (6508 <bt_id_del+0x130>)
		keys->state &= ~BT_KEYS_ID_ADDED;
    6490:	7223      	strb	r3, [r4, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
    6492:	f006 fc77 	bl	cd84 <bt_keys_foreach>
		goto done;
    6496:	e7e0      	b.n	645a <bt_id_del+0x82>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
    6498:	2107      	movs	r1, #7
    649a:	f242 0028 	movw	r0, #8232	; 0x2028
    649e:	f7ff fb63 	bl	5b68 <bt_hci_cmd_create>
	err = hci_id_del(&keys->addr);
    64a2:	f104 0801 	add.w	r8, r4, #1
	if (!buf) {
    64a6:	4607      	mov	r7, r0
    64a8:	b950      	cbnz	r0, 64c0 <bt_id_del+0xe8>
    64aa:	4b14      	ldr	r3, [pc, #80]	; (64fc <bt_id_del+0x124>)
    64ac:	4912      	ldr	r1, [pc, #72]	; (64f8 <bt_id_del+0x120>)
		BT_ERR("Failed to remove IRK from controller");
    64ae:	4817      	ldr	r0, [pc, #92]	; (650c <bt_id_del+0x134>)
    64b0:	1ac9      	subs	r1, r1, r3
    64b2:	08c9      	lsrs	r1, r1, #3
    64b4:	0189      	lsls	r1, r1, #6
    64b6:	f041 0101 	orr.w	r1, r1, #1
    64ba:	f00a fbfb 	bl	10cb4 <log_0>
		goto done;
    64be:	e7cc      	b.n	645a <bt_id_del+0x82>
	return net_buf_simple_add(&buf->b, len);
    64c0:	2107      	movs	r1, #7
    64c2:	3008      	adds	r0, #8
    64c4:	f00d fdca 	bl	1405c <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
    64c8:	4641      	mov	r1, r8
    64ca:	f00c f877 	bl	125bc <bt_addr_le_copy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
    64ce:	4632      	mov	r2, r6
    64d0:	4639      	mov	r1, r7
    64d2:	f242 0028 	movw	r0, #8232	; 0x2028
    64d6:	f7ff fb7f 	bl	5bd8 <bt_hci_cmd_send_sync>
	if (err) {
    64da:	2800      	cmp	r0, #0
    64dc:	d1e5      	bne.n	64aa <bt_id_del+0xd2>
	bt_dev.le.rl_entries--;
    64de:	f895 30e1 	ldrb.w	r3, [r5, #225]	; 0xe1
    64e2:	3b01      	subs	r3, #1
    64e4:	f885 30e1 	strb.w	r3, [r5, #225]	; 0xe1
	keys->state &= ~BT_KEYS_ID_ADDED;
    64e8:	7a23      	ldrb	r3, [r4, #8]
    64ea:	f023 0304 	bic.w	r3, r3, #4
    64ee:	7223      	strb	r3, [r4, #8]
    64f0:	e7b3      	b.n	645a <bt_id_del+0x82>
    64f2:	bf00      	nop
    64f4:	20000000 	.word	0x20000000
    64f8:	00015a30 	.word	0x00015a30
    64fc:	00015a00 	.word	0x00015a00
    6500:	00017adc 	.word	0x00017adc
    6504:	20000018 	.word	0x20000018
    6508:	0001268b 	.word	0x0001268b
    650c:	00017b09 	.word	0x00017b09

00006510 <bt_send>:
	return bt_dev.drv->send(buf);
    6510:	4b02      	ldr	r3, [pc, #8]	; (651c <bt_send+0xc>)
    6512:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
    6516:	691b      	ldr	r3, [r3, #16]
    6518:	4718      	bx	r3
    651a:	bf00      	nop
    651c:	20000000 	.word	0x20000000

00006520 <bt_hci_cmd_send>:
{
    6520:	b538      	push	{r3, r4, r5, lr}
    6522:	4605      	mov	r5, r0
	if (!buf) {
    6524:	460c      	mov	r4, r1
    6526:	b919      	cbnz	r1, 6530 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
    6528:	f7ff fb1e 	bl	5b68 <bt_hci_cmd_create>
		if (!buf) {
    652c:	4604      	mov	r4, r0
    652e:	b1f0      	cbz	r0, 656e <bt_hci_cmd_send+0x4e>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    6530:	f640 4335 	movw	r3, #3125	; 0xc35
    6534:	429d      	cmp	r5, r3
    6536:	d114      	bne.n	6562 <bt_hci_cmd_send+0x42>
		err = bt_send(buf);
    6538:	4620      	mov	r0, r4
    653a:	f7ff ffe9 	bl	6510 <bt_send>
		if (err) {
    653e:	4605      	mov	r5, r0
    6540:	b168      	cbz	r0, 655e <bt_hci_cmd_send+0x3e>
    6542:	4b0c      	ldr	r3, [pc, #48]	; (6574 <bt_hci_cmd_send+0x54>)
    6544:	4a0c      	ldr	r2, [pc, #48]	; (6578 <bt_hci_cmd_send+0x58>)
			BT_ERR("Unable to send to driver (err %d)", err);
    6546:	4601      	mov	r1, r0
    6548:	1ad2      	subs	r2, r2, r3
    654a:	08d2      	lsrs	r2, r2, #3
    654c:	0192      	lsls	r2, r2, #6
    654e:	480b      	ldr	r0, [pc, #44]	; (657c <bt_hci_cmd_send+0x5c>)
    6550:	f042 0201 	orr.w	r2, r2, #1
    6554:	f00a fbbb 	bl	10cce <log_1>
			net_buf_unref(buf);
    6558:	4620      	mov	r0, r4
    655a:	f006 fe75 	bl	d248 <net_buf_unref>
}
    655e:	4628      	mov	r0, r5
    6560:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    6562:	4621      	mov	r1, r4
    6564:	4806      	ldr	r0, [pc, #24]	; (6580 <bt_hci_cmd_send+0x60>)
    6566:	f00d fd46 	bl	13ff6 <net_buf_put>
	return 0;
    656a:	2500      	movs	r5, #0
    656c:	e7f7      	b.n	655e <bt_hci_cmd_send+0x3e>
			return -ENOBUFS;
    656e:	f06f 0536 	mvn.w	r5, #54	; 0x36
    6572:	e7f4      	b.n	655e <bt_hci_cmd_send+0x3e>
    6574:	00015a00 	.word	0x00015a00
    6578:	00015a30 	.word	0x00015a30
    657c:	00017b2e 	.word	0x00017b2e
    6580:	2000011c 	.word	0x2000011c

00006584 <bt_hci_host_num_completed_packets>:
{
    6584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6586:	4604      	mov	r4, r0
	uint16_t handle = acl(buf)->handle;
    6588:	8ac6      	ldrh	r6, [r0, #22]
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    658a:	7980      	ldrb	r0, [r0, #6]
    658c:	f006 fda0 	bl	d0d0 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
    6590:	4621      	mov	r1, r4
    6592:	f00e fc89 	bl	14ea8 <k_queue_prepend>
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
    6596:	4b2d      	ldr	r3, [pc, #180]	; (664c <bt_hci_host_num_completed_packets+0xc8>)
    6598:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
    659c:	069b      	lsls	r3, r3, #26
    659e:	d553      	bpl.n	6648 <bt_hci_host_num_completed_packets+0xc4>
	conn = bt_conn_lookup_index(acl(buf)->index);
    65a0:	7d60      	ldrb	r0, [r4, #21]
    65a2:	f002 f83f 	bl	8624 <bt_conn_lookup_index>
	if (!conn) {
    65a6:	4605      	mov	r5, r0
    65a8:	b960      	cbnz	r0, 65c4 <bt_hci_host_num_completed_packets+0x40>
    65aa:	4b29      	ldr	r3, [pc, #164]	; (6650 <bt_hci_host_num_completed_packets+0xcc>)
    65ac:	4a29      	ldr	r2, [pc, #164]	; (6654 <bt_hci_host_num_completed_packets+0xd0>)
		BT_WARN("Unable to look up conn with index 0x%02x",
    65ae:	7d61      	ldrb	r1, [r4, #21]
    65b0:	1ad2      	subs	r2, r2, r3
    65b2:	08d2      	lsrs	r2, r2, #3
    65b4:	0192      	lsls	r2, r2, #6
    65b6:	4828      	ldr	r0, [pc, #160]	; (6658 <bt_hci_host_num_completed_packets+0xd4>)
    65b8:	f042 0202 	orr.w	r2, r2, #2
}
    65bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_WARN("Unable to look up conn with index 0x%02x",
    65c0:	f00a bb85 	b.w	10cce <log_1>
	if (!bt_conn_is_handle_valid(conn)) {
    65c4:	7b43      	ldrb	r3, [r0, #13]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
    65c6:	2b01      	cmp	r3, #1
    65c8:	d002      	beq.n	65d0 <bt_hci_host_num_completed_packets+0x4c>
    65ca:	3b07      	subs	r3, #7
    65cc:	2b01      	cmp	r3, #1
    65ce:	d815      	bhi.n	65fc <bt_hci_host_num_completed_packets+0x78>
	bt_conn_unref(conn);
    65d0:	4628      	mov	r0, r5
    65d2:	f00c fa08 	bl	129e6 <bt_conn_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS,
    65d6:	2105      	movs	r1, #5
    65d8:	f640 4035 	movw	r0, #3125	; 0xc35
    65dc:	f7ff fac4 	bl	5b68 <bt_hci_cmd_create>
	if (!buf) {
    65e0:	4604      	mov	r4, r0
    65e2:	b9d0      	cbnz	r0, 661a <bt_hci_host_num_completed_packets+0x96>
    65e4:	4b1a      	ldr	r3, [pc, #104]	; (6650 <bt_hci_host_num_completed_packets+0xcc>)
    65e6:	491b      	ldr	r1, [pc, #108]	; (6654 <bt_hci_host_num_completed_packets+0xd0>)
		BT_ERR("Unable to allocate new HCI command");
    65e8:	481c      	ldr	r0, [pc, #112]	; (665c <bt_hci_host_num_completed_packets+0xd8>)
    65ea:	1ac9      	subs	r1, r1, r3
    65ec:	08c9      	lsrs	r1, r1, #3
    65ee:	0189      	lsls	r1, r1, #6
    65f0:	f041 0101 	orr.w	r1, r1, #1
}
    65f4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to allocate new HCI command");
    65f8:	f00a bb5c 	b.w	10cb4 <log_0>
    65fc:	4b14      	ldr	r3, [pc, #80]	; (6650 <bt_hci_host_num_completed_packets+0xcc>)
    65fe:	4915      	ldr	r1, [pc, #84]	; (6654 <bt_hci_host_num_completed_packets+0xd0>)
		BT_WARN("Not reporting packet for non-connected conn");
    6600:	4817      	ldr	r0, [pc, #92]	; (6660 <bt_hci_host_num_completed_packets+0xdc>)
    6602:	1ac9      	subs	r1, r1, r3
    6604:	08c9      	lsrs	r1, r1, #3
    6606:	0189      	lsls	r1, r1, #6
    6608:	f041 0102 	orr.w	r1, r1, #2
    660c:	f00a fb52 	bl	10cb4 <log_0>
		bt_conn_unref(conn);
    6610:	4628      	mov	r0, r5
}
    6612:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
    6616:	f00c b9e6 	b.w	129e6 <bt_conn_unref>
	return net_buf_simple_add(&buf->b, len);
    661a:	f100 0708 	add.w	r7, r0, #8
    661e:	2101      	movs	r1, #1
    6620:	4638      	mov	r0, r7
    6622:	f00d fd1b 	bl	1405c <net_buf_simple_add>
	cp->num_handles = sys_cpu_to_le16(1);
    6626:	2501      	movs	r5, #1
    6628:	2104      	movs	r1, #4
    662a:	7005      	strb	r5, [r0, #0]
    662c:	4638      	mov	r0, r7
    662e:	f00d fd15 	bl	1405c <net_buf_simple_add>
	hc->count  = sys_cpu_to_le16(1);
    6632:	2300      	movs	r3, #0
	hc->handle = sys_cpu_to_le16(handle);
    6634:	8006      	strh	r6, [r0, #0]
	hc->count  = sys_cpu_to_le16(1);
    6636:	7085      	strb	r5, [r0, #2]
    6638:	70c3      	strb	r3, [r0, #3]
	bt_hci_cmd_send(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS, buf);
    663a:	4621      	mov	r1, r4
}
    663c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_hci_cmd_send(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS, buf);
    6640:	f640 4035 	movw	r0, #3125	; 0xc35
    6644:	f7ff bf6c 	b.w	6520 <bt_hci_cmd_send>
}
    6648:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    664a:	bf00      	nop
    664c:	20000000 	.word	0x20000000
    6650:	00015a00 	.word	0x00015a00
    6654:	00015a30 	.word	0x00015a30
    6658:	00017b50 	.word	0x00017b50
    665c:	00017ba5 	.word	0x00017ba5
    6660:	00017b79 	.word	0x00017b79

00006664 <le_ltk_request>:
{
    6664:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
    6666:	6885      	ldr	r5, [r0, #8]
{
    6668:	b087      	sub	sp, #28
	handle = sys_le16_to_cpu(evt->handle);
    666a:	882e      	ldrh	r6, [r5, #0]
    666c:	b2b7      	uxth	r7, r6
	conn = bt_conn_lookup_handle(handle);
    666e:	4638      	mov	r0, r7
    6670:	f001 fcf6 	bl	8060 <bt_conn_lookup_handle>
	if (!conn) {
    6674:	4604      	mov	r4, r0
    6676:	b960      	cbnz	r0, 6692 <le_ltk_request+0x2e>
    6678:	4a26      	ldr	r2, [pc, #152]	; (6714 <le_ltk_request+0xb0>)
    667a:	4b27      	ldr	r3, [pc, #156]	; (6718 <le_ltk_request+0xb4>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    667c:	4639      	mov	r1, r7
    667e:	1ad2      	subs	r2, r2, r3
    6680:	08d2      	lsrs	r2, r2, #3
    6682:	0192      	lsls	r2, r2, #6
    6684:	4825      	ldr	r0, [pc, #148]	; (671c <le_ltk_request+0xb8>)
    6686:	f042 0201 	orr.w	r2, r2, #1
    668a:	f00a fb20 	bl	10cce <log_1>
}
    668e:	b007      	add	sp, #28
    6690:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_smp_request_ltk(conn, evt->rand, evt->ediv, ltk)) {
    6692:	af02      	add	r7, sp, #8
    6694:	f8d5 2002 	ldr.w	r2, [r5, #2]
    6698:	f8d5 3006 	ldr.w	r3, [r5, #6]
    669c:	9701      	str	r7, [sp, #4]
    669e:	8969      	ldrh	r1, [r5, #10]
    66a0:	9100      	str	r1, [sp, #0]
    66a2:	f00d fba2 	bl	13dea <bt_smp_request_ltk>
    66a6:	b320      	cbz	r0, 66f2 <le_ltk_request+0x8e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
    66a8:	2112      	movs	r1, #18
    66aa:	f242 001a 	movw	r0, #8218	; 0x201a
    66ae:	f7ff fa5b 	bl	5b68 <bt_hci_cmd_create>
	if (!buf) {
    66b2:	4605      	mov	r5, r0
    66b4:	b968      	cbnz	r0, 66d2 <le_ltk_request+0x6e>
    66b6:	4917      	ldr	r1, [pc, #92]	; (6714 <le_ltk_request+0xb0>)
    66b8:	4b17      	ldr	r3, [pc, #92]	; (6718 <le_ltk_request+0xb4>)
		BT_ERR("Out of command buffers");
    66ba:	4819      	ldr	r0, [pc, #100]	; (6720 <le_ltk_request+0xbc>)
    66bc:	1ac9      	subs	r1, r1, r3
    66be:	08c9      	lsrs	r1, r1, #3
    66c0:	0189      	lsls	r1, r1, #6
    66c2:	f041 0101 	orr.w	r1, r1, #1
    66c6:	f00a faf5 	bl	10cb4 <log_0>
	bt_conn_unref(conn);
    66ca:	4620      	mov	r0, r4
    66cc:	f00c f98b 	bl	129e6 <bt_conn_unref>
    66d0:	e7dd      	b.n	668e <le_ltk_request+0x2a>
    66d2:	2112      	movs	r1, #18
    66d4:	3008      	adds	r0, #8
    66d6:	f00d fcc1 	bl	1405c <net_buf_simple_add>
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
    66da:	4639      	mov	r1, r7
    66dc:	2210      	movs	r2, #16
	cp->handle = sys_cpu_to_le16(handle);
    66de:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
    66e2:	f00b fe1a 	bl	1231a <memcpy>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
    66e6:	4629      	mov	r1, r5
    66e8:	f242 001a 	movw	r0, #8218	; 0x201a
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    66ec:	f7ff ff18 	bl	6520 <bt_hci_cmd_send>
    66f0:	e7eb      	b.n	66ca <le_ltk_request+0x66>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
    66f2:	2102      	movs	r1, #2
    66f4:	f242 001b 	movw	r0, #8219	; 0x201b
    66f8:	f7ff fa36 	bl	5b68 <bt_hci_cmd_create>
	if (!buf) {
    66fc:	4605      	mov	r5, r0
    66fe:	2800      	cmp	r0, #0
    6700:	d0d9      	beq.n	66b6 <le_ltk_request+0x52>
    6702:	2102      	movs	r1, #2
    6704:	3008      	adds	r0, #8
    6706:	f00d fca9 	bl	1405c <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    670a:	4629      	mov	r1, r5
	cp->handle = sys_cpu_to_le16(handle);
    670c:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    670e:	f242 001b 	movw	r0, #8219	; 0x201b
    6712:	e7eb      	b.n	66ec <le_ltk_request+0x88>
    6714:	00015a30 	.word	0x00015a30
    6718:	00015a00 	.word	0x00015a00
    671c:	000176da 	.word	0x000176da
    6720:	00017bc8 	.word	0x00017bc8

00006724 <conn_auto_initiate>:
{
    6724:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    6726:	7b43      	ldrb	r3, [r0, #13]
{
    6728:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
    672a:	2b07      	cmp	r3, #7
    672c:	d11e      	bne.n	676c <conn_auto_initiate+0x48>
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
    672e:	1d06      	adds	r6, r0, #4
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    6730:	4630      	mov	r0, r6
    6732:	f00b ff3a 	bl	125aa <atomic_get>
    6736:	0483      	lsls	r3, r0, #18
    6738:	d41a      	bmi.n	6770 <conn_auto_initiate+0x4c>
    673a:	78e3      	ldrb	r3, [r4, #3]
    673c:	b123      	cbz	r3, 6748 <conn_auto_initiate+0x24>
	     BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features))) {
    673e:	4b31      	ldr	r3, [pc, #196]	; (6804 <conn_auto_initiate+0xe0>)
	    ((conn->role == BT_HCI_ROLE_MASTER) ||
    6740:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
    6744:	071d      	lsls	r5, r3, #28
    6746:	d513      	bpl.n	6770 <conn_auto_initiate+0x4c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    6748:	2102      	movs	r1, #2
    674a:	f242 0016 	movw	r0, #8214	; 0x2016
    674e:	f7ff fa0b 	bl	5b68 <bt_hci_cmd_create>
	if (!buf) {
    6752:	4605      	mov	r5, r0
    6754:	b160      	cbz	r0, 6770 <conn_auto_initiate+0x4c>
    6756:	2102      	movs	r1, #2
    6758:	3008      	adds	r0, #8
    675a:	f00d fc7f 	bl	1405c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    675e:	8823      	ldrh	r3, [r4, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    6760:	4629      	mov	r1, r5
	cp->handle = sys_cpu_to_le16(conn->handle);
    6762:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    6764:	f242 0016 	movw	r0, #8214	; 0x2016
    6768:	f7ff feda 	bl	6520 <bt_hci_cmd_send>
}
    676c:	b004      	add	sp, #16
    676e:	bd70      	pop	{r4, r5, r6, pc}
    6770:	4630      	mov	r0, r6
    6772:	f00b ff1a 	bl	125aa <atomic_get>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    6776:	f410 5f80 	tst.w	r0, #4096	; 0x1000
    677a:	4d22      	ldr	r5, [pc, #136]	; (6804 <conn_auto_initiate+0xe0>)
    677c:	f3c0 3100 	ubfx	r1, r0, #12, #1
    6780:	d11a      	bne.n	67b8 <conn_auto_initiate+0x94>
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
    6782:	f895 3099 	ldrb.w	r3, [r5, #153]	; 0x99
    6786:	07d8      	lsls	r0, r3, #31
    6788:	d516      	bpl.n	67b8 <conn_auto_initiate+0x94>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
    678a:	2302      	movs	r3, #2
    678c:	9100      	str	r1, [sp, #0]
    678e:	461a      	mov	r2, r3
    6790:	4620      	mov	r0, r4
    6792:	f00c f80c 	bl	127ae <bt_le_set_phy>
		if (!err) {
    6796:	4601      	mov	r1, r0
    6798:	b920      	cbnz	r0, 67a4 <conn_auto_initiate+0x80>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    679a:	2180      	movs	r1, #128	; 0x80
    679c:	4630      	mov	r0, r6
    679e:	f00b ff10 	bl	125c2 <atomic_or>
			return;
    67a2:	e7e3      	b.n	676c <conn_auto_initiate+0x48>
    67a4:	4a18      	ldr	r2, [pc, #96]	; (6808 <conn_auto_initiate+0xe4>)
    67a6:	4b19      	ldr	r3, [pc, #100]	; (680c <conn_auto_initiate+0xe8>)
		BT_ERR("Failed to set LE PHY (%d)", err);
    67a8:	4819      	ldr	r0, [pc, #100]	; (6810 <conn_auto_initiate+0xec>)
    67aa:	1ad2      	subs	r2, r2, r3
    67ac:	08d2      	lsrs	r2, r2, #3
    67ae:	0192      	lsls	r2, r2, #6
    67b0:	f042 0201 	orr.w	r2, r2, #1
    67b4:	f00a fa8b 	bl	10cce <log_1>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
    67b8:	f895 3098 	ldrb.w	r3, [r5, #152]	; 0x98
    67bc:	069a      	lsls	r2, r3, #26
    67be:	d5d5      	bpl.n	676c <conn_auto_initiate+0x48>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
    67c0:	f8d5 3134 	ldr.w	r3, [r5, #308]	; 0x134
    67c4:	689b      	ldr	r3, [r3, #8]
    67c6:	079b      	lsls	r3, r3, #30
    67c8:	d5d0      	bpl.n	676c <conn_auto_initiate+0x48>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    67ca:	f10d 010e 	add.w	r1, sp, #14
    67ce:	a803      	add	r0, sp, #12
    67d0:	f7ff fbcc 	bl	5f6c <hci_le_read_max_data_len>
			if (!err) {
    67d4:	2800      	cmp	r0, #0
    67d6:	d1c9      	bne.n	676c <conn_auto_initiate+0x48>
				err = bt_le_set_data_len(conn,
    67d8:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    67dc:	4620      	mov	r0, r4
    67de:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    67e2:	f00b ffc7 	bl	12774 <bt_le_set_data_len>
				if (err) {
    67e6:	4601      	mov	r1, r0
    67e8:	2800      	cmp	r0, #0
    67ea:	d0bf      	beq.n	676c <conn_auto_initiate+0x48>
    67ec:	4b07      	ldr	r3, [pc, #28]	; (680c <conn_auto_initiate+0xe8>)
    67ee:	4a06      	ldr	r2, [pc, #24]	; (6808 <conn_auto_initiate+0xe4>)
					BT_ERR("Failed to set data len (%d)", err);
    67f0:	4808      	ldr	r0, [pc, #32]	; (6814 <conn_auto_initiate+0xf0>)
    67f2:	1ad2      	subs	r2, r2, r3
    67f4:	08d2      	lsrs	r2, r2, #3
    67f6:	0192      	lsls	r2, r2, #6
    67f8:	f042 0201 	orr.w	r2, r2, #1
    67fc:	f00a fa67 	bl	10cce <log_1>
		}
    6800:	e7b4      	b.n	676c <conn_auto_initiate+0x48>
    6802:	bf00      	nop
    6804:	20000000 	.word	0x20000000
    6808:	00015a30 	.word	0x00015a30
    680c:	00015a00 	.word	0x00015a00
    6810:	00017bdf 	.word	0x00017bdf
    6814:	00017bf9 	.word	0x00017bf9

00006818 <le_phy_update_complete>:
{
    6818:	b538      	push	{r3, r4, r5, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    681a:	6883      	ldr	r3, [r0, #8]
    681c:	f8b3 5001 	ldrh.w	r5, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    6820:	4628      	mov	r0, r5
    6822:	f001 fc1d 	bl	8060 <bt_conn_lookup_handle>
	if (!conn) {
    6826:	4604      	mov	r4, r0
    6828:	b960      	cbnz	r0, 6844 <le_phy_update_complete+0x2c>
    682a:	4b11      	ldr	r3, [pc, #68]	; (6870 <le_phy_update_complete+0x58>)
    682c:	4a11      	ldr	r2, [pc, #68]	; (6874 <le_phy_update_complete+0x5c>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    682e:	4629      	mov	r1, r5
    6830:	1ad2      	subs	r2, r2, r3
    6832:	08d2      	lsrs	r2, r2, #3
    6834:	0192      	lsls	r2, r2, #6
    6836:	4810      	ldr	r0, [pc, #64]	; (6878 <le_phy_update_complete+0x60>)
    6838:	f042 0201 	orr.w	r2, r2, #1
}
    683c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    6840:	f00a ba45 	b.w	10cce <log_1>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
    6844:	1d05      	adds	r5, r0, #4
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    6846:	f06f 0180 	mvn.w	r1, #128	; 0x80
    684a:	4628      	mov	r0, r5
    684c:	f00b fea2 	bl	12594 <atomic_and>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    6850:	0603      	lsls	r3, r0, #24
    6852:	d507      	bpl.n	6864 <le_phy_update_complete+0x4c>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    6854:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    6858:	4628      	mov	r0, r5
    685a:	f00b feb2 	bl	125c2 <atomic_or>
		conn_auto_initiate(conn);
    685e:	4620      	mov	r0, r4
    6860:	f7ff ff60 	bl	6724 <conn_auto_initiate>
	bt_conn_unref(conn);
    6864:	4620      	mov	r0, r4
}
    6866:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    686a:	f00c b8bc 	b.w	129e6 <bt_conn_unref>
    686e:	bf00      	nop
    6870:	00015a00 	.word	0x00015a00
    6874:	00015a30 	.word	0x00015a30
    6878:	000176da 	.word	0x000176da

0000687c <le_remote_feat_complete>:
{
    687c:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
    687e:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    6880:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    6884:	4630      	mov	r0, r6
    6886:	f001 fbeb 	bl	8060 <bt_conn_lookup_handle>
	if (!conn) {
    688a:	4604      	mov	r4, r0
    688c:	b960      	cbnz	r0, 68a8 <le_remote_feat_complete+0x2c>
    688e:	4a10      	ldr	r2, [pc, #64]	; (68d0 <le_remote_feat_complete+0x54>)
    6890:	4b10      	ldr	r3, [pc, #64]	; (68d4 <le_remote_feat_complete+0x58>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    6892:	4631      	mov	r1, r6
}
    6894:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6898:	1ad2      	subs	r2, r2, r3
    689a:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Unable to lookup conn for handle %u", handle);
    689c:	0192      	lsls	r2, r2, #6
    689e:	480e      	ldr	r0, [pc, #56]	; (68d8 <le_remote_feat_complete+0x5c>)
    68a0:	f042 0201 	orr.w	r2, r2, #1
    68a4:	f00a ba13 	b.w	10cce <log_1>
	if (!evt->status) {
    68a8:	782b      	ldrb	r3, [r5, #0]
    68aa:	b923      	cbnz	r3, 68b6 <le_remote_feat_complete+0x3a>
		memcpy(conn->le.features, evt->features,
    68ac:	2208      	movs	r2, #8
    68ae:	1ce9      	adds	r1, r5, #3
    68b0:	30ac      	adds	r0, #172	; 0xac
    68b2:	f00b fd32 	bl	1231a <memcpy>
    68b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    68ba:	1d20      	adds	r0, r4, #4
    68bc:	f00b fe81 	bl	125c2 <atomic_or>
	conn_auto_initiate(conn);
    68c0:	4620      	mov	r0, r4
    68c2:	f7ff ff2f 	bl	6724 <conn_auto_initiate>
	bt_conn_unref(conn);
    68c6:	4620      	mov	r0, r4
}
    68c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    68cc:	f00c b88b 	b.w	129e6 <bt_conn_unref>
    68d0:	00015a30 	.word	0x00015a30
    68d4:	00015a00 	.word	0x00015a00
    68d8:	000176da 	.word	0x000176da

000068dc <le_conn_param_neg_reply>:
{
    68dc:	b570      	push	{r4, r5, r6, lr}
    68de:	4606      	mov	r6, r0
    68e0:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
    68e2:	f242 0021 	movw	r0, #8225	; 0x2021
    68e6:	2103      	movs	r1, #3
    68e8:	f7ff f93e 	bl	5b68 <bt_hci_cmd_create>
	if (!buf) {
    68ec:	4604      	mov	r4, r0
    68ee:	b958      	cbnz	r0, 6908 <le_conn_param_neg_reply+0x2c>
}
    68f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    68f4:	490b      	ldr	r1, [pc, #44]	; (6924 <le_conn_param_neg_reply+0x48>)
    68f6:	4b0c      	ldr	r3, [pc, #48]	; (6928 <le_conn_param_neg_reply+0x4c>)
		BT_ERR("Unable to allocate buffer");
    68f8:	480c      	ldr	r0, [pc, #48]	; (692c <le_conn_param_neg_reply+0x50>)
    68fa:	1ac9      	subs	r1, r1, r3
    68fc:	08c9      	lsrs	r1, r1, #3
    68fe:	0189      	lsls	r1, r1, #6
    6900:	f041 0101 	orr.w	r1, r1, #1
    6904:	f00a b9d6 	b.w	10cb4 <log_0>
    6908:	2103      	movs	r1, #3
    690a:	3008      	adds	r0, #8
    690c:	f00d fba6 	bl	1405c <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
    6910:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
    6912:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    6914:	4621      	mov	r1, r4
}
    6916:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    691a:	f242 0021 	movw	r0, #8225	; 0x2021
    691e:	f7ff bdff 	b.w	6520 <bt_hci_cmd_send>
    6922:	bf00      	nop
    6924:	00015a30 	.word	0x00015a30
    6928:	00015a00 	.word	0x00015a00
    692c:	00017c15 	.word	0x00017c15

00006930 <le_conn_param_req>:
{
    6930:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
    6932:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    6934:	78d9      	ldrb	r1, [r3, #3]
    6936:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
    6938:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    693a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    693e:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    6942:	7959      	ldrb	r1, [r3, #5]
    6944:	791a      	ldrb	r2, [r3, #4]
	handle = sys_le16_to_cpu(evt->handle);
    6946:	b2bc      	uxth	r4, r7
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    6948:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    694c:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
    6950:	799a      	ldrb	r2, [r3, #6]
    6952:	79d9      	ldrb	r1, [r3, #7]
	conn = bt_conn_lookup_handle(handle);
    6954:	4620      	mov	r0, r4
	param.latency = sys_le16_to_cpu(evt->latency);
    6956:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    695a:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
    695e:	7a1a      	ldrb	r2, [r3, #8]
    6960:	7a5b      	ldrb	r3, [r3, #9]
    6962:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    6966:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
    696a:	f001 fb79 	bl	8060 <bt_conn_lookup_handle>
	if (!conn) {
    696e:	4606      	mov	r6, r0
    6970:	b980      	cbnz	r0, 6994 <le_conn_param_req+0x64>
    6972:	4b20      	ldr	r3, [pc, #128]	; (69f4 <le_conn_param_req+0xc4>)
    6974:	4a20      	ldr	r2, [pc, #128]	; (69f8 <le_conn_param_req+0xc8>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    6976:	4621      	mov	r1, r4
    6978:	1ad2      	subs	r2, r2, r3
    697a:	08d2      	lsrs	r2, r2, #3
    697c:	0192      	lsls	r2, r2, #6
    697e:	481f      	ldr	r0, [pc, #124]	; (69fc <le_conn_param_req+0xcc>)
    6980:	f042 0201 	orr.w	r2, r2, #1
    6984:	f00a f9a3 	bl	10cce <log_1>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
    6988:	2102      	movs	r1, #2
    698a:	4620      	mov	r0, r4
    698c:	f7ff ffa6 	bl	68dc <le_conn_param_neg_reply>
}
    6990:	b003      	add	sp, #12
    6992:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
    6994:	4669      	mov	r1, sp
    6996:	f001 f97f 	bl	7c98 <le_param_req>
    699a:	b938      	cbnz	r0, 69ac <le_conn_param_req+0x7c>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
    699c:	211e      	movs	r1, #30
    699e:	4620      	mov	r0, r4
    69a0:	f7ff ff9c 	bl	68dc <le_conn_param_neg_reply>
	bt_conn_unref(conn);
    69a4:	4630      	mov	r0, r6
    69a6:	f00c f81e 	bl	129e6 <bt_conn_unref>
    69aa:	e7f1      	b.n	6990 <le_conn_param_req+0x60>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    69ac:	210e      	movs	r1, #14
    69ae:	f242 0020 	movw	r0, #8224	; 0x2020
    69b2:	f7ff f8d9 	bl	5b68 <bt_hci_cmd_create>
	if (!buf) {
    69b6:	4605      	mov	r5, r0
    69b8:	2800      	cmp	r0, #0
    69ba:	d0f3      	beq.n	69a4 <le_conn_param_req+0x74>
    69bc:	210e      	movs	r1, #14
    69be:	3008      	adds	r0, #8
    69c0:	f00d fb4c 	bl	1405c <net_buf_simple_add>
    69c4:	4604      	mov	r4, r0
	(void)memset(cp, 0, sizeof(*cp));
    69c6:	220e      	movs	r2, #14
    69c8:	2100      	movs	r1, #0
    69ca:	f00b fcd1 	bl	12370 <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    69ce:	f8bd 3000 	ldrh.w	r3, [sp]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    69d2:	4629      	mov	r1, r5
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    69d4:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    69d6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
	cp->handle = sys_cpu_to_le16(handle);
    69da:	8027      	strh	r7, [r4, #0]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    69dc:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
    69de:	f8bd 3004 	ldrh.w	r3, [sp, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    69e2:	f242 0020 	movw	r0, #8224	; 0x2020
	cp->latency = sys_cpu_to_le16(param->latency);
    69e6:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    69e8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    69ec:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    69ee:	f7ff fd97 	bl	6520 <bt_hci_cmd_send>
    69f2:	e7d7      	b.n	69a4 <le_conn_param_req+0x74>
    69f4:	00015a00 	.word	0x00015a00
    69f8:	00015a30 	.word	0x00015a30
    69fc:	000176da 	.word	0x000176da

00006a00 <hci_tx_thread>:
{
    6a00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6a04:	4d51      	ldr	r5, [pc, #324]	; (6b4c <hci_tx_thread+0x14c>)
    6a06:	4b52      	ldr	r3, [pc, #328]	; (6b50 <hci_tx_thread+0x150>)
		events[0].state = K_POLL_STATE_NOT_READY;
    6a08:	f8df 914c 	ldr.w	r9, [pc, #332]	; 6b58 <hci_tx_thread+0x158>
    6a0c:	1aed      	subs	r5, r5, r3
		BT_ASSERT(err == 0);
    6a0e:	f8df a174 	ldr.w	sl, [pc, #372]	; 6b84 <hci_tx_thread+0x184>
    6a12:	08ed      	lsrs	r5, r5, #3
		events[0].state = K_POLL_STATE_NOT_READY;
    6a14:	f8d9 300c 	ldr.w	r3, [r9, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    6a18:	484e      	ldr	r0, [pc, #312]	; (6b54 <hci_tx_thread+0x154>)
		events[0].state = K_POLL_STATE_NOT_READY;
    6a1a:	f36f 3310 	bfc	r3, #12, #5
    6a1e:	f8c9 300c 	str.w	r3, [r9, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    6a22:	f001 fab7 	bl	7f94 <bt_conn_prepare_events>
    6a26:	1c47      	adds	r7, r0, #1
		parm0.val = timeout;
		return (int) arch_syscall_invoke4(*(uintptr_t *)&events, *(uintptr_t *)&num_events, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
    6a28:	f04f 32ff 	mov.w	r2, #4294967295
    6a2c:	f04f 33ff 	mov.w	r3, #4294967295
    6a30:	4639      	mov	r1, r7
    6a32:	4849      	ldr	r0, [pc, #292]	; (6b58 <hci_tx_thread+0x158>)
    6a34:	f009 fa46 	bl	fec4 <z_impl_k_poll>
		BT_ASSERT(err == 0);
    6a38:	b160      	cbz	r0, 6a54 <hci_tx_thread+0x54>
    6a3a:	f241 4371 	movw	r3, #5233	; 0x1471
    6a3e:	4652      	mov	r2, sl
    6a40:	4946      	ldr	r1, [pc, #280]	; (6b5c <hci_tx_thread+0x15c>)
    6a42:	4847      	ldr	r0, [pc, #284]	; (6b60 <hci_tx_thread+0x160>)
    6a44:	f009 fd0f 	bl	10466 <printk>
    6a48:	4040      	eors	r0, r0
    6a4a:	f380 8811 	msr	BASEPRI, r0
    6a4e:	f04f 0003 	mov.w	r0, #3
    6a52:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    6a54:	4e43      	ldr	r6, [pc, #268]	; (6b64 <hci_tx_thread+0x164>)
{
    6a56:	f8df 8100 	ldr.w	r8, [pc, #256]	; 6b58 <hci_tx_thread+0x158>
    6a5a:	f106 0be8 	add.w	fp, r6, #232	; 0xe8
	for (; count; ev++, count--) {
    6a5e:	b917      	cbnz	r7, 6a66 <hci_tx_thread+0x66>
	z_impl_k_yield();
    6a60:	f008 fe14 	bl	f68c <z_impl_k_yield>
	while (1) {
    6a64:	e7d6      	b.n	6a14 <hci_tx_thread+0x14>
		switch (ev->state) {
    6a66:	f8d8 100c 	ldr.w	r1, [r8, #12]
    6a6a:	f3c1 3104 	ubfx	r1, r1, #12, #5
    6a6e:	2901      	cmp	r1, #1
    6a70:	d959      	bls.n	6b26 <hci_tx_thread+0x126>
    6a72:	2904      	cmp	r1, #4
    6a74:	d163      	bne.n	6b3e <hci_tx_thread+0x13e>
			if (ev->tag == BT_EVENT_CMD_TX) {
    6a76:	f898 300c 	ldrb.w	r3, [r8, #12]
    6a7a:	2b00      	cmp	r3, #0
    6a7c:	d157      	bne.n	6b2e <hci_tx_thread+0x12e>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    6a7e:	2200      	movs	r2, #0
    6a80:	2300      	movs	r3, #0
    6a82:	4839      	ldr	r0, [pc, #228]	; (6b68 <hci_tx_thread+0x168>)
    6a84:	f00d fa99 	bl	13fba <net_buf_get>
	BT_ASSERT(buf);
    6a88:	4604      	mov	r4, r0
    6a8a:	b960      	cbnz	r0, 6aa6 <hci_tx_thread+0xa6>
    6a8c:	f241 430e 	movw	r3, #5134	; 0x140e
    6a90:	4652      	mov	r2, sl
    6a92:	4936      	ldr	r1, [pc, #216]	; (6b6c <hci_tx_thread+0x16c>)
    6a94:	4832      	ldr	r0, [pc, #200]	; (6b60 <hci_tx_thread+0x160>)
    6a96:	f009 fce6 	bl	10466 <printk>
    6a9a:	4040      	eors	r0, r0
    6a9c:	f380 8811 	msr	BASEPRI, r0
    6aa0:	f04f 0003 	mov.w	r0, #3
    6aa4:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    6aa6:	f04f 33ff 	mov.w	r3, #4294967295
    6aaa:	f04f 32ff 	mov.w	r2, #4294967295
    6aae:	4658      	mov	r0, fp
    6ab0:	f008 fe88 	bl	f7c4 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    6ab4:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
    6ab8:	b163      	cbz	r3, 6ad4 <hci_tx_thread+0xd4>
		BT_ERR("Uncleared pending sent_cmd");
    6aba:	01a9      	lsls	r1, r5, #6
    6abc:	482c      	ldr	r0, [pc, #176]	; (6b70 <hci_tx_thread+0x170>)
    6abe:	f041 0101 	orr.w	r1, r1, #1
    6ac2:	f00a f8f7 	bl	10cb4 <log_0>
		net_buf_unref(bt_dev.sent_cmd);
    6ac6:	f8d6 0100 	ldr.w	r0, [r6, #256]	; 0x100
    6aca:	f006 fbbd 	bl	d248 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    6ace:	2300      	movs	r3, #0
    6ad0:	f8c6 3100 	str.w	r3, [r6, #256]	; 0x100
	bt_dev.sent_cmd = net_buf_ref(buf);
    6ad4:	4620      	mov	r0, r4
    6ad6:	f00d fa9b 	bl	14010 <net_buf_ref>
    6ada:	f8c6 0100 	str.w	r0, [r6, #256]	; 0x100
	err = bt_send(buf);
    6ade:	4620      	mov	r0, r4
    6ae0:	f7ff fd16 	bl	6510 <bt_send>
	if (err) {
    6ae4:	4601      	mov	r1, r0
    6ae6:	b1f0      	cbz	r0, 6b26 <hci_tx_thread+0x126>
		BT_ERR("Unable to send to driver (err %d)", err);
    6ae8:	01aa      	lsls	r2, r5, #6
    6aea:	4822      	ldr	r0, [pc, #136]	; (6b74 <hci_tx_thread+0x174>)
    6aec:	f042 0201 	orr.w	r2, r2, #1
    6af0:	f00a f8ed 	bl	10cce <log_1>
	z_impl_k_sem_give(sem);
    6af4:	4820      	ldr	r0, [pc, #128]	; (6b78 <hci_tx_thread+0x178>)
    6af6:	f008 fe3f 	bl	f778 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
    6afa:	4620      	mov	r0, r4
    6afc:	f006 faf0 	bl	d0e0 <net_buf_id>
    6b00:	220c      	movs	r2, #12
    6b02:	4b1e      	ldr	r3, [pc, #120]	; (6b7c <hci_tx_thread+0x17c>)
    6b04:	211f      	movs	r1, #31
    6b06:	fb02 3000 	mla	r0, r2, r0, r3
    6b0a:	4622      	mov	r2, r4
    6b0c:	8840      	ldrh	r0, [r0, #2]
    6b0e:	f7fe fd91 	bl	5634 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
    6b12:	f8d6 0100 	ldr.w	r0, [r6, #256]	; 0x100
    6b16:	f006 fb97 	bl	d248 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    6b1a:	2300      	movs	r3, #0
		net_buf_unref(buf);
    6b1c:	4620      	mov	r0, r4
		bt_dev.sent_cmd = NULL;
    6b1e:	f8c6 3100 	str.w	r3, [r6, #256]	; 0x100
		net_buf_unref(buf);
    6b22:	f006 fb91 	bl	d248 <net_buf_unref>
	for (; count; ev++, count--) {
    6b26:	f108 0814 	add.w	r8, r8, #20
    6b2a:	3f01      	subs	r7, #1
    6b2c:	e797      	b.n	6a5e <hci_tx_thread+0x5e>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    6b2e:	2b01      	cmp	r3, #1
    6b30:	d1f9      	bne.n	6b26 <hci_tx_thread+0x126>
					conn = CONTAINER_OF(ev->fifo,
    6b32:	f8d8 0010 	ldr.w	r0, [r8, #16]
					bt_conn_process_tx(conn);
    6b36:	3834      	subs	r0, #52	; 0x34
    6b38:	f001 fd04 	bl	8544 <bt_conn_process_tx>
    6b3c:	e7f3      	b.n	6b26 <hci_tx_thread+0x126>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    6b3e:	01aa      	lsls	r2, r5, #6
    6b40:	480f      	ldr	r0, [pc, #60]	; (6b80 <hci_tx_thread+0x180>)
    6b42:	f042 0202 	orr.w	r2, r2, #2
    6b46:	f00a f8c2 	bl	10cce <log_1>
    6b4a:	e7ec      	b.n	6b26 <hci_tx_thread+0x126>
    6b4c:	00015a30 	.word	0x00015a30
    6b50:	00015a00 	.word	0x00015a00
    6b54:	200002fc 	.word	0x200002fc
    6b58:	200002e8 	.word	0x200002e8
    6b5c:	00017961 	.word	0x00017961
    6b60:	00017889 	.word	0x00017889
    6b64:	20000000 	.word	0x20000000
    6b68:	2000011c 	.word	0x2000011c
    6b6c:	000175bb 	.word	0x000175bb
    6b70:	00017c2f 	.word	0x00017c2f
    6b74:	00017b2e 	.word	0x00017b2e
    6b78:	200000e8 	.word	0x200000e8
    6b7c:	20001994 	.word	0x20001994
    6b80:	00017c4a 	.word	0x00017c4a
    6b84:	0001783c 	.word	0x0001783c

00006b88 <hci_event_prio>:
{
    6b88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6b8c:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
    6b8e:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
    6b92:	4630      	mov	r0, r6
    6b94:	f00d faa2 	bl	140dc <net_buf_simple_headroom>
	state->len = buf->len;
    6b98:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    6b9c:	4605      	mov	r5, r0
	BT_ASSERT(buf->len >= sizeof(*hdr));
    6b9e:	f1b8 0f01 	cmp.w	r8, #1
    6ba2:	d80c      	bhi.n	6bbe <hci_event_prio+0x36>
    6ba4:	f641 03ae 	movw	r3, #6318	; 0x18ae
    6ba8:	4a1b      	ldr	r2, [pc, #108]	; (6c18 <hci_event_prio+0x90>)
    6baa:	491c      	ldr	r1, [pc, #112]	; (6c1c <hci_event_prio+0x94>)
    6bac:	481c      	ldr	r0, [pc, #112]	; (6c20 <hci_event_prio+0x98>)
    6bae:	f009 fc5a 	bl	10466 <printk>
    6bb2:	4040      	eors	r0, r0
    6bb4:	f380 8811 	msr	BASEPRI, r0
    6bb8:	f04f 0003 	mov.w	r0, #3
    6bbc:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
    6bbe:	2102      	movs	r1, #2
    6bc0:	4630      	mov	r0, r6
    6bc2:	f00d fa7b 	bl	140bc <net_buf_simple_pull_mem>
    6bc6:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    6bc8:	7800      	ldrb	r0, [r0, #0]
    6bca:	f00b fcc2 	bl	12552 <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    6bce:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    6bd0:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    6bd2:	d40c      	bmi.n	6bee <hci_event_prio+0x66>
    6bd4:	f641 03b2 	movw	r3, #6322	; 0x18b2
    6bd8:	4a0f      	ldr	r2, [pc, #60]	; (6c18 <hci_event_prio+0x90>)
    6bda:	4912      	ldr	r1, [pc, #72]	; (6c24 <hci_event_prio+0x9c>)
    6bdc:	4810      	ldr	r0, [pc, #64]	; (6c20 <hci_event_prio+0x98>)
    6bde:	f009 fc42 	bl	10466 <printk>
    6be2:	4040      	eors	r0, r0
    6be4:	f380 8811 	msr	BASEPRI, r0
    6be8:	f04f 0003 	mov.w	r0, #3
    6bec:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
    6bee:	2305      	movs	r3, #5
    6bf0:	4621      	mov	r1, r4
    6bf2:	4a0d      	ldr	r2, [pc, #52]	; (6c28 <hci_event_prio+0xa0>)
    6bf4:	7838      	ldrb	r0, [r7, #0]
    6bf6:	f7fe fd97 	bl	5728 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
    6bfa:	07b3      	lsls	r3, r6, #30
    6bfc:	d507      	bpl.n	6c0e <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
    6bfe:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    6c00:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
    6c04:	fa10 f585 	uxtah	r5, r0, r5
    6c08:	60a5      	str	r5, [r4, #8]
}
    6c0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
    6c0e:	4620      	mov	r0, r4
}
    6c10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
    6c14:	f006 bb18 	b.w	d248 <net_buf_unref>
    6c18:	0001783c 	.word	0x0001783c
    6c1c:	00017870 	.word	0x00017870
    6c20:	00017889 	.word	0x00017889
    6c24:	00017c6b 	.word	0x00017c6b
    6c28:	00016000 	.word	0x00016000

00006c2c <bt_recv>:
{
    6c2c:	b538      	push	{r3, r4, r5, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    6c2e:	7d01      	ldrb	r1, [r0, #20]
    6c30:	4605      	mov	r5, r0
	switch (bt_buf_get_type(buf)) {
    6c32:	2901      	cmp	r1, #1
    6c34:	d007      	beq.n	6c46 <bt_recv+0x1a>
    6c36:	2903      	cmp	r1, #3
    6c38:	d113      	bne.n	6c62 <bt_recv+0x36>
			net_buf_put(&bt_dev.rx_queue, buf);
    6c3a:	4812      	ldr	r0, [pc, #72]	; (6c84 <bt_recv+0x58>)
    6c3c:	4629      	mov	r1, r5
    6c3e:	f00d f9da 	bl	13ff6 <net_buf_put>
		return 0;
    6c42:	2000      	movs	r0, #0
    6c44:	e00c      	b.n	6c60 <bt_recv+0x34>
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
    6c46:	6883      	ldr	r3, [r0, #8]
    6c48:	7818      	ldrb	r0, [r3, #0]
    6c4a:	f00b fc82 	bl	12552 <bt_hci_evt_get_flags>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
    6c4e:	07c3      	lsls	r3, r0, #31
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
    6c50:	4604      	mov	r4, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
    6c52:	d502      	bpl.n	6c5a <bt_recv+0x2e>
			hci_event_prio(buf);
    6c54:	4628      	mov	r0, r5
    6c56:	f7ff ff97 	bl	6b88 <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
    6c5a:	f014 0002 	ands.w	r0, r4, #2
    6c5e:	d1ec      	bne.n	6c3a <bt_recv+0xe>
}
    6c60:	bd38      	pop	{r3, r4, r5, pc}
    6c62:	4b09      	ldr	r3, [pc, #36]	; (6c88 <bt_recv+0x5c>)
    6c64:	4a09      	ldr	r2, [pc, #36]	; (6c8c <bt_recv+0x60>)
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    6c66:	480a      	ldr	r0, [pc, #40]	; (6c90 <bt_recv+0x64>)
    6c68:	1ad2      	subs	r2, r2, r3
    6c6a:	08d2      	lsrs	r2, r2, #3
    6c6c:	0192      	lsls	r2, r2, #6
    6c6e:	f042 0201 	orr.w	r2, r2, #1
    6c72:	f00a f82c 	bl	10cce <log_1>
		net_buf_unref(buf);
    6c76:	4628      	mov	r0, r5
    6c78:	f006 fae6 	bl	d248 <net_buf_unref>
		return -EINVAL;
    6c7c:	f06f 0015 	mvn.w	r0, #21
    6c80:	e7ee      	b.n	6c60 <bt_recv+0x34>
    6c82:	bf00      	nop
    6c84:	20000104 	.word	0x20000104
    6c88:	00015a00 	.word	0x00015a00
    6c8c:	00015a30 	.word	0x00015a30
    6c90:	00017c84 	.word	0x00017c84

00006c94 <bt_hci_driver_register>:
	if (bt_dev.drv) {
    6c94:	4a08      	ldr	r2, [pc, #32]	; (6cb8 <bt_hci_driver_register+0x24>)
{
    6c96:	4603      	mov	r3, r0
	if (bt_dev.drv) {
    6c98:	f8d2 0134 	ldr.w	r0, [r2, #308]	; 0x134
    6c9c:	b930      	cbnz	r0, 6cac <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
    6c9e:	68d9      	ldr	r1, [r3, #12]
    6ca0:	b139      	cbz	r1, 6cb2 <bt_hci_driver_register+0x1e>
    6ca2:	6919      	ldr	r1, [r3, #16]
    6ca4:	b129      	cbz	r1, 6cb2 <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
    6ca6:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
	return 0;
    6caa:	4770      	bx	lr
		return -EALREADY;
    6cac:	f06f 0044 	mvn.w	r0, #68	; 0x44
    6cb0:	4770      	bx	lr
		return -EINVAL;
    6cb2:	f06f 0015 	mvn.w	r0, #21
}
    6cb6:	4770      	bx	lr
    6cb8:	20000000 	.word	0x20000000

00006cbc <bt_finalize_init>:
{
    6cbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6cc0:	4c2b      	ldr	r4, [pc, #172]	; (6d70 <bt_finalize_init+0xb4>)
    6cc2:	b087      	sub	sp, #28
    6cc4:	2102      	movs	r1, #2
    6cc6:	f104 0094 	add.w	r0, r4, #148	; 0x94
    6cca:	f00b fc7a 	bl	125c2 <atomic_or>
    6cce:	4d29      	ldr	r5, [pc, #164]	; (6d74 <bt_finalize_init+0xb8>)
    6cd0:	4b29      	ldr	r3, [pc, #164]	; (6d78 <bt_finalize_init+0xbc>)
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
    6cd2:	492a      	ldr	r1, [pc, #168]	; (6d7c <bt_finalize_init+0xc0>)
    6cd4:	1aed      	subs	r5, r5, r3
    6cd6:	4e2a      	ldr	r6, [pc, #168]	; (6d80 <bt_finalize_init+0xc4>)
    6cd8:	79e3      	ldrb	r3, [r4, #7]
    6cda:	4620      	mov	r0, r4
    6cdc:	2b01      	cmp	r3, #1
    6cde:	bf88      	it	hi
    6ce0:	460e      	movhi	r6, r1
    6ce2:	f7fd ff41 	bl	4b68 <bt_addr_le_str_real>
    6ce6:	f7fa fda9 	bl	183c <log_strdup>
    6cea:	08ed      	lsrs	r5, r5, #3
    6cec:	01ad      	lsls	r5, r5, #6
    6cee:	f045 0703 	orr.w	r7, r5, #3
    6cf2:	4602      	mov	r2, r0
    6cf4:	4631      	mov	r1, r6
    6cf6:	463b      	mov	r3, r7
    6cf8:	4822      	ldr	r0, [pc, #136]	; (6d84 <bt_finalize_init+0xc8>)
    6cfa:	f009 fffc 	bl	10cf6 <log_2>
	for (i = 1; i < bt_dev.id_count; i++) {
    6cfe:	46a0      	mov	r8, r4
    6d00:	2601      	movs	r6, #1
		BT_INFO("Identity[%d]: %s",
    6d02:	f8df 908c 	ldr.w	r9, [pc, #140]	; 6d90 <bt_finalize_init+0xd4>
	for (i = 1; i < bt_dev.id_count; i++) {
    6d06:	79e3      	ldrb	r3, [r4, #7]
    6d08:	f108 0807 	add.w	r8, r8, #7
    6d0c:	429e      	cmp	r6, r3
    6d0e:	db22      	blt.n	6d56 <bt_finalize_init+0x9a>
	BT_INFO("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
    6d10:	f894 6034 	ldrb.w	r6, [r4, #52]	; 0x34
    6d14:	f045 0503 	orr.w	r5, r5, #3
    6d18:	4630      	mov	r0, r6
    6d1a:	f7fe f993 	bl	5044 <ver_str>
    6d1e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    6d20:	e9cd 0602 	strd	r0, r6, [sp, #8]
    6d24:	9304      	str	r3, [sp, #16]
    6d26:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
    6d28:	a902      	add	r1, sp, #8
    6d2a:	2204      	movs	r2, #4
    6d2c:	9305      	str	r3, [sp, #20]
    6d2e:	4816      	ldr	r0, [pc, #88]	; (6d88 <bt_finalize_init+0xcc>)
    6d30:	462b      	mov	r3, r5
    6d32:	f00a f815 	bl	10d60 <log_n>
	BT_INFO("LMP: version %s (0x%02x) subver 0x%04x",
    6d36:	f894 6035 	ldrb.w	r6, [r4, #53]	; 0x35
    6d3a:	4630      	mov	r0, r6
    6d3c:	f7fe f982 	bl	5044 <ver_str>
    6d40:	4632      	mov	r2, r6
    6d42:	4601      	mov	r1, r0
    6d44:	8f23      	ldrh	r3, [r4, #56]	; 0x38
    6d46:	4811      	ldr	r0, [pc, #68]	; (6d8c <bt_finalize_init+0xd0>)
    6d48:	f8ad 5000 	strh.w	r5, [sp]
    6d4c:	f009 ffec 	bl	10d28 <log_3>
}
    6d50:	b007      	add	sp, #28
    6d52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		BT_INFO("Identity[%d]: %s",
    6d56:	4640      	mov	r0, r8
    6d58:	f7fd ff06 	bl	4b68 <bt_addr_le_str_real>
    6d5c:	f7fa fd6e 	bl	183c <log_strdup>
    6d60:	4631      	mov	r1, r6
    6d62:	4602      	mov	r2, r0
    6d64:	463b      	mov	r3, r7
    6d66:	4648      	mov	r0, r9
    6d68:	f009 ffc5 	bl	10cf6 <log_2>
	for (i = 1; i < bt_dev.id_count; i++) {
    6d6c:	3601      	adds	r6, #1
    6d6e:	e7ca      	b.n	6d06 <bt_finalize_init+0x4a>
    6d70:	20000000 	.word	0x20000000
    6d74:	00015a30 	.word	0x00015a30
    6d78:	00015a00 	.word	0x00015a00
    6d7c:	00016a1b 	.word	0x00016a1b
    6d80:	00016746 	.word	0x00016746
    6d84:	00017c98 	.word	0x00017c98
    6d88:	00017cb8 	.word	0x00017cb8
    6d8c:	00017cf6 	.word	0x00017cf6
    6d90:	00017ca7 	.word	0x00017ca7

00006d94 <init_work>:
{
    6d94:	b510      	push	{r4, lr}
	err = bt_init();
    6d96:	f7f9 fb5f 	bl	458 <bt_init>
	if (ready_cb) {
    6d9a:	4b03      	ldr	r3, [pc, #12]	; (6da8 <init_work+0x14>)
    6d9c:	681b      	ldr	r3, [r3, #0]
    6d9e:	b113      	cbz	r3, 6da6 <init_work+0x12>
}
    6da0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    6da4:	4718      	bx	r3
}
    6da6:	bd10      	pop	{r4, pc}
    6da8:	200019b4 	.word	0x200019b4

00006dac <bt_enable>:
{
    6dac:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
	if (!bt_dev.drv) {
    6db0:	4d3b      	ldr	r5, [pc, #236]	; (6ea0 <bt_enable+0xf4>)
{
    6db2:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    6db4:	f8d5 3134 	ldr.w	r3, [r5, #308]	; 0x134
{
    6db8:	b088      	sub	sp, #32
	if (!bt_dev.drv) {
    6dba:	b97b      	cbnz	r3, 6ddc <bt_enable+0x30>
    6dbc:	4b39      	ldr	r3, [pc, #228]	; (6ea4 <bt_enable+0xf8>)
    6dbe:	493a      	ldr	r1, [pc, #232]	; (6ea8 <bt_enable+0xfc>)
		BT_ERR("No HCI driver registered");
    6dc0:	483a      	ldr	r0, [pc, #232]	; (6eac <bt_enable+0x100>)
    6dc2:	1ac9      	subs	r1, r1, r3
    6dc4:	08c9      	lsrs	r1, r1, #3
    6dc6:	0189      	lsls	r1, r1, #6
    6dc8:	f041 0101 	orr.w	r1, r1, #1
    6dcc:	f009 ff72 	bl	10cb4 <log_0>
		return -ENODEV;
    6dd0:	f06f 0412 	mvn.w	r4, #18
}
    6dd4:	4620      	mov	r0, r4
    6dd6:	b008      	add	sp, #32
    6dd8:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    6ddc:	2100      	movs	r1, #0
    6dde:	f105 0094 	add.w	r0, r5, #148	; 0x94
    6de2:	f00b fbf9 	bl	125d8 <atomic_test_and_set_bit>
    6de6:	2800      	cmp	r0, #0
    6de8:	d157      	bne.n	6e9a <bt_enable+0xee>
		err = bt_settings_init();
    6dea:	f7fe f861 	bl	4eb0 <bt_settings_init>
		if (err) {
    6dee:	4604      	mov	r4, r0
    6df0:	2800      	cmp	r0, #0
    6df2:	d1ef      	bne.n	6dd4 <bt_enable+0x28>
	ready_cb = cb;
    6df4:	4b2e      	ldr	r3, [pc, #184]	; (6eb0 <bt_enable+0x104>)
    6df6:	f04f 0800 	mov.w	r8, #0
    6dfa:	f04f 0900 	mov.w	r9, #0
    6dfe:	601e      	str	r6, [r3, #0]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    6e00:	f06f 0308 	mvn.w	r3, #8
    6e04:	e9cd 0000 	strd	r0, r0, [sp]
    6e08:	e9cd 0302 	strd	r0, r3, [sp, #8]
    6e0c:	9004      	str	r0, [sp, #16]
    6e0e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    6e12:	e9cd 8906 	strd	r8, r9, [sp, #24]
    6e16:	4b27      	ldr	r3, [pc, #156]	; (6eb4 <bt_enable+0x108>)
    6e18:	4927      	ldr	r1, [pc, #156]	; (6eb8 <bt_enable+0x10c>)
    6e1a:	4828      	ldr	r0, [pc, #160]	; (6ebc <bt_enable+0x110>)
    6e1c:	f008 fd44 	bl	f8a8 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    6e20:	4927      	ldr	r1, [pc, #156]	; (6ec0 <bt_enable+0x114>)
    6e22:	4826      	ldr	r0, [pc, #152]	; (6ebc <bt_enable+0x110>)
    6e24:	f00e f99b 	bl	1515e <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    6e28:	f06f 0307 	mvn.w	r3, #7
    6e2c:	f640 0298 	movw	r2, #2200	; 0x898
    6e30:	e9cd 4302 	strd	r4, r3, [sp, #8]
    6e34:	e9cd 8906 	strd	r8, r9, [sp, #24]
    6e38:	e9cd 4400 	strd	r4, r4, [sp]
    6e3c:	4b21      	ldr	r3, [pc, #132]	; (6ec4 <bt_enable+0x118>)
    6e3e:	4922      	ldr	r1, [pc, #136]	; (6ec8 <bt_enable+0x11c>)
    6e40:	9404      	str	r4, [sp, #16]
    6e42:	4822      	ldr	r0, [pc, #136]	; (6ecc <bt_enable+0x120>)
    6e44:	f008 fd30 	bl	f8a8 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    6e48:	4921      	ldr	r1, [pc, #132]	; (6ed0 <bt_enable+0x124>)
    6e4a:	4820      	ldr	r0, [pc, #128]	; (6ecc <bt_enable+0x120>)
    6e4c:	f00e f987 	bl	1515e <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
    6e50:	f8d5 3134 	ldr.w	r3, [r5, #308]	; 0x134
    6e54:	68db      	ldr	r3, [r3, #12]
    6e56:	4798      	blx	r3
	if (err) {
    6e58:	4604      	mov	r4, r0
    6e5a:	b158      	cbz	r0, 6e74 <bt_enable+0xc8>
    6e5c:	4b11      	ldr	r3, [pc, #68]	; (6ea4 <bt_enable+0xf8>)
    6e5e:	4a12      	ldr	r2, [pc, #72]	; (6ea8 <bt_enable+0xfc>)
		BT_ERR("HCI driver open failed (%d)", err);
    6e60:	4601      	mov	r1, r0
    6e62:	1ad2      	subs	r2, r2, r3
    6e64:	08d2      	lsrs	r2, r2, #3
    6e66:	0192      	lsls	r2, r2, #6
    6e68:	481a      	ldr	r0, [pc, #104]	; (6ed4 <bt_enable+0x128>)
    6e6a:	f042 0201 	orr.w	r2, r2, #1
    6e6e:	f009 ff2e 	bl	10cce <log_1>
		return err;
    6e72:	e7af      	b.n	6dd4 <bt_enable+0x28>
	if (!cb) {
    6e74:	b926      	cbnz	r6, 6e80 <bt_enable+0xd4>
}
    6e76:	b008      	add	sp, #32
    6e78:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
		return bt_init();
    6e7c:	f7f9 baec 	b.w	458 <bt_init>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    6e80:	4601      	mov	r1, r0
    6e82:	f105 0090 	add.w	r0, r5, #144	; 0x90
    6e86:	f00b fba7 	bl	125d8 <atomic_test_and_set_bit>
    6e8a:	2800      	cmp	r0, #0
    6e8c:	d1a2      	bne.n	6dd4 <bt_enable+0x28>
		k_queue_append(&work_q->queue, work);
    6e8e:	4812      	ldr	r0, [pc, #72]	; (6ed8 <bt_enable+0x12c>)
    6e90:	f105 0188 	add.w	r1, r5, #136	; 0x88
    6e94:	f00d fffd 	bl	14e92 <k_queue_append>
    6e98:	e79c      	b.n	6dd4 <bt_enable+0x28>
		return -EALREADY;
    6e9a:	f06f 0444 	mvn.w	r4, #68	; 0x44
    6e9e:	e799      	b.n	6dd4 <bt_enable+0x28>
    6ea0:	20000000 	.word	0x20000000
    6ea4:	00015a00 	.word	0x00015a00
    6ea8:	00015a30 	.word	0x00015a30
    6eac:	00017e70 	.word	0x00017e70
    6eb0:	200019b4 	.word	0x200019b4
    6eb4:	00006a01 	.word	0x00006a01
    6eb8:	200041b8 	.word	0x200041b8
    6ebc:	20000a28 	.word	0x20000a28
    6ec0:	00017e89 	.word	0x00017e89
    6ec4:	000057ad 	.word	0x000057ad
    6ec8:	20003920 	.word	0x20003920
    6ecc:	200009a0 	.word	0x200009a0
    6ed0:	00017e8f 	.word	0x00017e8f
    6ed4:	00017e95 	.word	0x00017e95
    6ed8:	200010d0 	.word	0x200010d0

00006edc <bt_set_name>:
{
    6edc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    6ede:	4605      	mov	r5, r0
	size_t len = strlen(name);
    6ee0:	f00b f9e0 	bl	122a4 <strlen>
	if (len > CONFIG_BT_DEVICE_NAME_MAX) {
    6ee4:	2841      	cmp	r0, #65	; 0x41
	size_t len = strlen(name);
    6ee6:	4604      	mov	r4, r0
	if (len > CONFIG_BT_DEVICE_NAME_MAX) {
    6ee8:	d83a      	bhi.n	6f60 <bt_set_name+0x84>
	if (!strcmp(bt_dev.name, name)) {
    6eea:	4e1f      	ldr	r6, [pc, #124]	; (6f68 <bt_set_name+0x8c>)
    6eec:	4629      	mov	r1, r5
    6eee:	f506 70bc 	add.w	r0, r6, #376	; 0x178
    6ef2:	f00b f9e7 	bl	122c4 <strcmp>
    6ef6:	b910      	cbnz	r0, 6efe <bt_set_name+0x22>
	return 0;
    6ef8:	2000      	movs	r0, #0
}
    6efa:	b004      	add	sp, #16
    6efc:	bd70      	pop	{r4, r5, r6, pc}
	strncpy(bt_dev.name, name, len);
    6efe:	4622      	mov	r2, r4
    6f00:	4629      	mov	r1, r5
    6f02:	f506 70bc 	add.w	r0, r6, #376	; 0x178
    6f06:	f00b f9ba 	bl	1227e <strncpy>
	bt_dev.name[len] = '\0';
    6f0a:	2200      	movs	r2, #0
    6f0c:	1933      	adds	r3, r6, r4
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    6f0e:	f106 0028 	add.w	r0, r6, #40	; 0x28
    6f12:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
    6f16:	f00b fb48 	bl	125aa <atomic_get>
	if (adv && atomic_test_bit(adv->flags, BT_ADV_INCLUDE_NAME)) {
    6f1a:	0603      	lsls	r3, r0, #24
    6f1c:	d50e      	bpl.n	6f3c <bt_set_name+0x60>
		struct bt_data data[] = { BT_DATA(BT_DATA_NAME_COMPLETE, name,
    6f1e:	2309      	movs	r3, #9
		struct bt_ad sd = { data, ARRAY_SIZE(data) };
    6f20:	2201      	movs	r2, #1
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
    6f22:	f242 0009 	movw	r0, #8201	; 0x2009
    6f26:	a902      	add	r1, sp, #8
		struct bt_data data[] = { BT_DATA(BT_DATA_NAME_COMPLETE, name,
    6f28:	f88d 3000 	strb.w	r3, [sp]
    6f2c:	f88d 4001 	strb.w	r4, [sp, #1]
    6f30:	9501      	str	r5, [sp, #4]
		struct bt_ad sd = { data, ARRAY_SIZE(data) };
    6f32:	f8cd d008 	str.w	sp, [sp, #8]
    6f36:	9203      	str	r2, [sp, #12]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
    6f38:	f7ff f874 	bl	6024 <hci_set_ad>
		err = settings_save_one("bt/name", bt_dev.name, len);
    6f3c:	4622      	mov	r2, r4
    6f3e:	490b      	ldr	r1, [pc, #44]	; (6f6c <bt_set_name+0x90>)
    6f40:	480b      	ldr	r0, [pc, #44]	; (6f70 <bt_set_name+0x94>)
    6f42:	f7fb fef9 	bl	2d38 <settings_save_one>
		if (err) {
    6f46:	2800      	cmp	r0, #0
    6f48:	d0d6      	beq.n	6ef8 <bt_set_name+0x1c>
    6f4a:	4b0a      	ldr	r3, [pc, #40]	; (6f74 <bt_set_name+0x98>)
    6f4c:	490a      	ldr	r1, [pc, #40]	; (6f78 <bt_set_name+0x9c>)
			BT_WARN("Unable to store name");
    6f4e:	480b      	ldr	r0, [pc, #44]	; (6f7c <bt_set_name+0xa0>)
    6f50:	1ac9      	subs	r1, r1, r3
    6f52:	08c9      	lsrs	r1, r1, #3
    6f54:	0189      	lsls	r1, r1, #6
    6f56:	f041 0102 	orr.w	r1, r1, #2
    6f5a:	f009 feab 	bl	10cb4 <log_0>
    6f5e:	e7cb      	b.n	6ef8 <bt_set_name+0x1c>
		return -ENOMEM;
    6f60:	f06f 000b 	mvn.w	r0, #11
    6f64:	e7c9      	b.n	6efa <bt_set_name+0x1e>
    6f66:	bf00      	nop
    6f68:	20000000 	.word	0x20000000
    6f6c:	20000178 	.word	0x20000178
    6f70:	00017eb1 	.word	0x00017eb1
    6f74:	00015a00 	.word	0x00015a00
    6f78:	00015a30 	.word	0x00015a30
    6f7c:	00017eb9 	.word	0x00017eb9

00006f80 <bt_get_name>:
}
    6f80:	4800      	ldr	r0, [pc, #0]	; (6f84 <bt_get_name+0x4>)
    6f82:	4770      	bx	lr
    6f84:	20000178 	.word	0x20000178

00006f88 <bt_id_create>:
{
    6f88:	b573      	push	{r0, r1, r4, r5, r6, lr}
    6f8a:	460e      	mov	r6, r1
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    6f8c:	4605      	mov	r5, r0
    6f8e:	b930      	cbnz	r0, 6f9e <bt_id_create+0x16>
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
    6f90:	4b1b      	ldr	r3, [pc, #108]	; (7000 <bt_id_create+0x78>)
    6f92:	79dc      	ldrb	r4, [r3, #7]
    6f94:	2c01      	cmp	r4, #1
    6f96:	d12a      	bne.n	6fee <bt_id_create+0x66>
		return -ENOMEM;
    6f98:	f06f 040b 	mvn.w	r4, #11
    6f9c:	e01c      	b.n	6fd8 <bt_id_create+0x50>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    6f9e:	2300      	movs	r3, #0
    6fa0:	4669      	mov	r1, sp
    6fa2:	9300      	str	r3, [sp, #0]
    6fa4:	f8cd 3003 	str.w	r3, [sp, #3]
    6fa8:	f00b fb02 	bl	125b0 <bt_addr_le_cmp>
    6fac:	2800      	cmp	r0, #0
    6fae:	d0ef      	beq.n	6f90 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
    6fb0:	782b      	ldrb	r3, [r5, #0]
    6fb2:	2b01      	cmp	r3, #1
    6fb4:	d104      	bne.n	6fc0 <bt_id_create+0x38>
    6fb6:	79ab      	ldrb	r3, [r5, #6]
    6fb8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    6fbc:	2bc0      	cmp	r3, #192	; 0xc0
    6fbe:	d00e      	beq.n	6fde <bt_id_create+0x56>
    6fc0:	4b10      	ldr	r3, [pc, #64]	; (7004 <bt_id_create+0x7c>)
    6fc2:	4911      	ldr	r1, [pc, #68]	; (7008 <bt_id_create+0x80>)
			BT_ERR("Only static random identity address supported");
    6fc4:	4811      	ldr	r0, [pc, #68]	; (700c <bt_id_create+0x84>)
    6fc6:	1ac9      	subs	r1, r1, r3
    6fc8:	08c9      	lsrs	r1, r1, #3
    6fca:	0189      	lsls	r1, r1, #6
    6fcc:	f041 0101 	orr.w	r1, r1, #1
    6fd0:	f009 fe70 	bl	10cb4 <log_0>
			return -EINVAL;
    6fd4:	f06f 0415 	mvn.w	r4, #21
}
    6fd8:	4620      	mov	r0, r4
    6fda:	b002      	add	sp, #8
    6fdc:	bd70      	pop	{r4, r5, r6, pc}
		if (id_find(addr) >= 0) {
    6fde:	4628      	mov	r0, r5
    6fe0:	f7fe f85e 	bl	50a0 <id_find>
    6fe4:	2800      	cmp	r0, #0
    6fe6:	dbd3      	blt.n	6f90 <bt_id_create+0x8>
			return -EALREADY;
    6fe8:	f06f 0444 	mvn.w	r4, #68	; 0x44
    6fec:	e7f4      	b.n	6fd8 <bt_id_create+0x50>
	new_id = bt_dev.id_count++;
    6fee:	1c62      	adds	r2, r4, #1
    6ff0:	71da      	strb	r2, [r3, #7]
	id_create(new_id, addr, irk);
    6ff2:	4629      	mov	r1, r5
    6ff4:	4632      	mov	r2, r6
    6ff6:	4620      	mov	r0, r4
    6ff8:	f7fe fa00 	bl	53fc <id_create>
	return new_id;
    6ffc:	e7ec      	b.n	6fd8 <bt_id_create+0x50>
    6ffe:	bf00      	nop
    7000:	20000000 	.word	0x20000000
    7004:	00015a00 	.word	0x00015a00
    7008:	00015a30 	.word	0x00015a30
    700c:	00017ece 	.word	0x00017ece

00007010 <bt_setup_public_id_addr>:
{
    7010:	b570      	push	{r4, r5, r6, lr}
    7012:	b08c      	sub	sp, #48	; 0x30
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    7014:	2100      	movs	r1, #0
    7016:	f241 0009 	movw	r0, #4105	; 0x1009
    701a:	aa01      	add	r2, sp, #4
    701c:	f7fe fddc 	bl	5bd8 <bt_hci_cmd_send_sync>
	if (err) {
    7020:	4e37      	ldr	r6, [pc, #220]	; (7100 <bt_setup_public_id_addr+0xf0>)
    7022:	4604      	mov	r4, r0
    7024:	b168      	cbz	r0, 7042 <bt_setup_public_id_addr+0x32>
    7026:	4937      	ldr	r1, [pc, #220]	; (7104 <bt_setup_public_id_addr+0xf4>)
    7028:	4b37      	ldr	r3, [pc, #220]	; (7108 <bt_setup_public_id_addr+0xf8>)
		BT_WARN("Failed to read public address");
    702a:	4838      	ldr	r0, [pc, #224]	; (710c <bt_setup_public_id_addr+0xfc>)
    702c:	1ac9      	subs	r1, r1, r3
    702e:	08c9      	lsrs	r1, r1, #3
    7030:	0189      	lsls	r1, r1, #6
    7032:	f041 0102 	orr.w	r1, r1, #2
    7036:	f009 fe3d 	bl	10cb4 <log_0>
	bt_dev.id_count = bt_read_public_addr(&addr);
    703a:	2300      	movs	r3, #0
    703c:	71f3      	strb	r3, [r6, #7]
}
    703e:	b00c      	add	sp, #48	; 0x30
    7040:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
    7042:	9b01      	ldr	r3, [sp, #4]
    7044:	2206      	movs	r2, #6
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    7046:	689d      	ldr	r5, [r3, #8]
    7048:	a908      	add	r1, sp, #32
    704a:	3501      	adds	r5, #1
    704c:	9008      	str	r0, [sp, #32]
    704e:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
    7052:	4628      	mov	r0, r5
    7054:	f00b f951 	bl	122fa <memcmp>
    7058:	b918      	cbnz	r0, 7062 <bt_setup_public_id_addr+0x52>
		net_buf_unref(rsp);
    705a:	9801      	ldr	r0, [sp, #4]
    705c:	f006 f8f4 	bl	d248 <net_buf_unref>
    7060:	e7eb      	b.n	703a <bt_setup_public_id_addr+0x2a>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
    7062:	f04f 33ff 	mov.w	r3, #4294967295
    7066:	2206      	movs	r2, #6
    7068:	4628      	mov	r0, r5
    706a:	a904      	add	r1, sp, #16
    706c:	9304      	str	r3, [sp, #16]
    706e:	f8ad 3014 	strh.w	r3, [sp, #20]
    7072:	f00b f942 	bl	122fa <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    7076:	2800      	cmp	r0, #0
    7078:	d0ef      	beq.n	705a <bt_setup_public_id_addr+0x4a>
	bt_addr_copy(&addr->a, &rp->bdaddr);
    707a:	4629      	mov	r1, r5
    707c:	f10d 0009 	add.w	r0, sp, #9
    7080:	f00b fa99 	bl	125b6 <bt_addr_copy>
	net_buf_unref(rsp);
    7084:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
    7086:	f88d 4008 	strb.w	r4, [sp, #8]
	net_buf_unref(rsp);
    708a:	f006 f8dd 	bl	d248 <net_buf_unref>
	bt_dev.id_count = bt_read_public_addr(&addr);
    708e:	2301      	movs	r3, #1
	memset(ir, 0, 16);
    7090:	2210      	movs	r2, #16
    7092:	4621      	mov	r1, r4
    7094:	a808      	add	r0, sp, #32
	bt_dev.id_count = bt_read_public_addr(&addr);
    7096:	71f3      	strb	r3, [r6, #7]
	memset(ir, 0, 16);
    7098:	f00b f96a 	bl	12370 <memset>
	if (!BT_VS_CMD_READ_KEY_ROOTS(bt_dev.vs_commands)) {
    709c:	f896 3086 	ldrb.w	r3, [r6, #134]	; 0x86
    70a0:	079b      	lsls	r3, r3, #30
    70a2:	d510      	bpl.n	70c6 <bt_setup_public_id_addr+0xb6>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_KEY_HIERARCHY_ROOTS, NULL,
    70a4:	4621      	mov	r1, r4
    70a6:	f64f 400a 	movw	r0, #64522	; 0xfc0a
    70aa:	aa04      	add	r2, sp, #16
    70ac:	f7fe fd94 	bl	5bd8 <bt_hci_cmd_send_sync>
	if (err) {
    70b0:	b1c8      	cbz	r0, 70e6 <bt_setup_public_id_addr+0xd6>
    70b2:	4914      	ldr	r1, [pc, #80]	; (7104 <bt_setup_public_id_addr+0xf4>)
    70b4:	4b14      	ldr	r3, [pc, #80]	; (7108 <bt_setup_public_id_addr+0xf8>)
		BT_WARN("Failed to read identity root");
    70b6:	4816      	ldr	r0, [pc, #88]	; (7110 <bt_setup_public_id_addr+0x100>)
    70b8:	1ac9      	subs	r1, r1, r3
    70ba:	08c9      	lsrs	r1, r1, #3
    70bc:	0189      	lsls	r1, r1, #6
    70be:	f041 0102 	orr.w	r1, r1, #2
    70c2:	f009 fdf7 	bl	10cb4 <log_0>
	if (!bt_smp_irk_get(ir, ir_irk)) {
    70c6:	a904      	add	r1, sp, #16
    70c8:	a808      	add	r0, sp, #32
    70ca:	f00c ff39 	bl	13f40 <bt_smp_irk_get>
    70ce:	b1a8      	cbz	r0, 70fc <bt_setup_public_id_addr+0xec>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    70d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    70d4:	480f      	ldr	r0, [pc, #60]	; (7114 <bt_setup_public_id_addr+0x104>)
    70d6:	f00b fa74 	bl	125c2 <atomic_or>
	uint8_t *irk = NULL;
    70da:	2200      	movs	r2, #0
	id_create(BT_ID_DEFAULT, &addr, irk);
    70dc:	2000      	movs	r0, #0
    70de:	a902      	add	r1, sp, #8
    70e0:	f7fe f98c 	bl	53fc <id_create>
    70e4:	e7ab      	b.n	703e <bt_setup_public_id_addr+0x2e>
	rp = (void *)rsp->data;
    70e6:	9b04      	ldr	r3, [sp, #16]
	memcpy(ir, rp->ir, 16);
    70e8:	2210      	movs	r2, #16
    70ea:	6899      	ldr	r1, [r3, #8]
    70ec:	a808      	add	r0, sp, #32
    70ee:	3101      	adds	r1, #1
    70f0:	f00b f913 	bl	1231a <memcpy>
	net_buf_unref(rsp);
    70f4:	9804      	ldr	r0, [sp, #16]
    70f6:	f006 f8a7 	bl	d248 <net_buf_unref>
    70fa:	e7e4      	b.n	70c6 <bt_setup_public_id_addr+0xb6>
		irk = ir_irk;
    70fc:	aa04      	add	r2, sp, #16
    70fe:	e7ed      	b.n	70dc <bt_setup_public_id_addr+0xcc>
    7100:	20000000 	.word	0x20000000
    7104:	00015a30 	.word	0x00015a30
    7108:	00015a00 	.word	0x00015a00
    710c:	00017efc 	.word	0x00017efc
    7110:	00017f1a 	.word	0x00017f1a
    7114:	20000094 	.word	0x20000094

00007118 <bt_read_static_addr>:
{
    7118:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    711c:	4b25      	ldr	r3, [pc, #148]	; (71b4 <bt_read_static_addr+0x9c>)
{
    711e:	4607      	mov	r7, r0
    7120:	f893 4086 	ldrb.w	r4, [r3, #134]	; 0x86
    7124:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    7126:	f014 0401 	ands.w	r4, r4, #1
    712a:	d10a      	bne.n	7142 <bt_read_static_addr+0x2a>
    712c:	4922      	ldr	r1, [pc, #136]	; (71b8 <bt_read_static_addr+0xa0>)
    712e:	4b23      	ldr	r3, [pc, #140]	; (71bc <bt_read_static_addr+0xa4>)
		BT_WARN("Read Static Addresses command not available");
    7130:	4823      	ldr	r0, [pc, #140]	; (71c0 <bt_read_static_addr+0xa8>)
    7132:	1ac9      	subs	r1, r1, r3
    7134:	08c9      	lsrs	r1, r1, #3
    7136:	0189      	lsls	r1, r1, #6
    7138:	f041 0102 	orr.w	r1, r1, #2
		BT_WARN("No static addresses stored in controller");
    713c:	f009 fdba 	bl	10cb4 <log_0>
    7140:	e012      	b.n	7168 <bt_read_static_addr+0x50>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
    7142:	2100      	movs	r1, #0
    7144:	f64f 4009 	movw	r0, #64521	; 0xfc09
    7148:	aa01      	add	r2, sp, #4
    714a:	f7fe fd45 	bl	5bd8 <bt_hci_cmd_send_sync>
	if (err) {
    714e:	4605      	mov	r5, r0
    7150:	b170      	cbz	r0, 7170 <bt_read_static_addr+0x58>
    7152:	4b1a      	ldr	r3, [pc, #104]	; (71bc <bt_read_static_addr+0xa4>)
    7154:	4918      	ldr	r1, [pc, #96]	; (71b8 <bt_read_static_addr+0xa0>)
		BT_WARN("Failed to read static addresses");
    7156:	481b      	ldr	r0, [pc, #108]	; (71c4 <bt_read_static_addr+0xac>)
    7158:	1ac9      	subs	r1, r1, r3
    715a:	08c9      	lsrs	r1, r1, #3
    715c:	0189      	lsls	r1, r1, #6
    715e:	f041 0102 	orr.w	r1, r1, #2
    7162:	f009 fda7 	bl	10cb4 <log_0>
		return 0;
    7166:	2400      	movs	r4, #0
}
    7168:	4620      	mov	r0, r4
    716a:	b002      	add	sp, #8
    716c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    7170:	f04f 0816 	mov.w	r8, #22
	rp = (void *)rsp->data;
    7174:	9b01      	ldr	r3, [sp, #4]
    7176:	689b      	ldr	r3, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
    7178:	785c      	ldrb	r4, [r3, #1]
    717a:	42b4      	cmp	r4, r6
    717c:	bf28      	it	cs
    717e:	4634      	movcs	r4, r6
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    7180:	1c9e      	adds	r6, r3, #2
	for (i = 0; i < cnt; i++) {
    7182:	42a5      	cmp	r5, r4
    7184:	db0d      	blt.n	71a2 <bt_read_static_addr+0x8a>
	net_buf_unref(rsp);
    7186:	9801      	ldr	r0, [sp, #4]
    7188:	f006 f85e 	bl	d248 <net_buf_unref>
	if (!cnt) {
    718c:	2c00      	cmp	r4, #0
    718e:	d1eb      	bne.n	7168 <bt_read_static_addr+0x50>
    7190:	4909      	ldr	r1, [pc, #36]	; (71b8 <bt_read_static_addr+0xa0>)
    7192:	4b0a      	ldr	r3, [pc, #40]	; (71bc <bt_read_static_addr+0xa4>)
		BT_WARN("No static addresses stored in controller");
    7194:	480c      	ldr	r0, [pc, #48]	; (71c8 <bt_read_static_addr+0xb0>)
    7196:	1ac9      	subs	r1, r1, r3
    7198:	08c9      	lsrs	r1, r1, #3
    719a:	0189      	lsls	r1, r1, #6
    719c:	f041 0102 	orr.w	r1, r1, #2
    71a0:	e7cc      	b.n	713c <bt_read_static_addr+0x24>
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    71a2:	fb08 7005 	mla	r0, r8, r5, r7
    71a6:	2216      	movs	r2, #22
    71a8:	4631      	mov	r1, r6
    71aa:	f00b f8b6 	bl	1231a <memcpy>
	for (i = 0; i < cnt; i++) {
    71ae:	3501      	adds	r5, #1
    71b0:	e7e7      	b.n	7182 <bt_read_static_addr+0x6a>
    71b2:	bf00      	nop
    71b4:	20000000 	.word	0x20000000
    71b8:	00015a30 	.word	0x00015a30
    71bc:	00015a00 	.word	0x00015a00
    71c0:	00017f37 	.word	0x00017f37
    71c4:	00017f63 	.word	0x00017f63
    71c8:	00017f83 	.word	0x00017f83

000071cc <bt_setup_random_id_addr>:
{
    71cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (!bt_dev.id_count) {
    71d0:	4c21      	ldr	r4, [pc, #132]	; (7258 <bt_setup_random_id_addr+0x8c>)
{
    71d2:	b08c      	sub	sp, #48	; 0x30
	if (!bt_dev.id_count) {
    71d4:	79e5      	ldrb	r5, [r4, #7]
    71d6:	bba5      	cbnz	r5, 7242 <bt_setup_random_id_addr+0x76>
		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
    71d8:	2101      	movs	r1, #1
    71da:	a806      	add	r0, sp, #24
    71dc:	f7ff ff9c 	bl	7118 <bt_read_static_addr>
    71e0:	71e0      	strb	r0, [r4, #7]
		if (bt_dev.id_count) {
    71e2:	b370      	cbz	r0, 7242 <bt_setup_random_id_addr+0x76>
    71e4:	f04f 0916 	mov.w	r9, #22
    71e8:	f104 0a94 	add.w	sl, r4, #148	; 0x94
    71ec:	e01f      	b.n	722e <bt_setup_random_id_addr+0x62>
				if (!bt_smp_irk_get(addrs[i].ir, ir_irk)) {
    71ee:	fb09 f806 	mul.w	r8, r9, r6
    71f2:	ab06      	add	r3, sp, #24
    71f4:	f108 0006 	add.w	r0, r8, #6
    71f8:	a902      	add	r1, sp, #8
    71fa:	4418      	add	r0, r3
    71fc:	f00c fea0 	bl	13f40 <bt_smp_irk_get>
    7200:	b1e8      	cbz	r0, 723e <bt_setup_random_id_addr+0x72>
    7202:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    7206:	4650      	mov	r0, sl
    7208:	f00b f9db 	bl	125c2 <atomic_or>
				uint8_t *irk = NULL;
    720c:	2700      	movs	r7, #0
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
    720e:	ab06      	add	r3, sp, #24
    7210:	eb03 0108 	add.w	r1, r3, r8
    7214:	f10d 0001 	add.w	r0, sp, #1
    7218:	f00b f9cd 	bl	125b6 <bt_addr_copy>
				addr.type = BT_ADDR_LE_RANDOM;
    721c:	2301      	movs	r3, #1
				id_create(i, &addr, irk);
    721e:	463a      	mov	r2, r7
    7220:	4669      	mov	r1, sp
    7222:	4630      	mov	r0, r6
				addr.type = BT_ADDR_LE_RANDOM;
    7224:	f88d 3000 	strb.w	r3, [sp]
				id_create(i, &addr, irk);
    7228:	f7fe f8e8 	bl	53fc <id_create>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
    722c:	3501      	adds	r5, #1
    722e:	79e3      	ldrb	r3, [r4, #7]
    7230:	b2ee      	uxtb	r6, r5
    7232:	42b3      	cmp	r3, r6
    7234:	d8db      	bhi.n	71ee <bt_setup_random_id_addr+0x22>
			return 0;
    7236:	2000      	movs	r0, #0
}
    7238:	b00c      	add	sp, #48	; 0x30
    723a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					irk = ir_irk;
    723e:	af02      	add	r7, sp, #8
    7240:	e7e5      	b.n	720e <bt_setup_random_id_addr+0x42>
    7242:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    7246:	4805      	ldr	r0, [pc, #20]	; (725c <bt_setup_random_id_addr+0x90>)
    7248:	f00b f9bb 	bl	125c2 <atomic_or>
	return bt_id_create(NULL, NULL);
    724c:	2100      	movs	r1, #0
    724e:	4608      	mov	r0, r1
    7250:	f7ff fe9a 	bl	6f88 <bt_id_create>
    7254:	e7f0      	b.n	7238 <bt_setup_random_id_addr+0x6c>
    7256:	bf00      	nop
    7258:	20000000 	.word	0x20000000
    725c:	20000094 	.word	0x20000094

00007260 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
    7260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7264:	469a      	mov	sl, r3
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
    7266:	2300      	movs	r3, #0
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable;
    7268:	690d      	ldr	r5, [r1, #16]
{
    726a:	b08f      	sub	sp, #60	; 0x3c
	bool dir_adv = (param->peer != NULL), scannable;
    726c:	ebb5 0b03 	subs.w	fp, r5, r3
{
    7270:	4606      	mov	r6, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    7272:	4883      	ldr	r0, [pc, #524]	; (7480 <bt_le_adv_start_legacy+0x220>)
	bool dir_adv = (param->peer != NULL), scannable;
    7274:	bf18      	it	ne
    7276:	f04f 0b01 	movne.w	fp, #1
{
    727a:	460c      	mov	r4, r1
    727c:	4691      	mov	r9, r2
	struct bt_conn *conn = NULL;
    727e:	9307      	str	r3, [sp, #28]
    7280:	f00b f993 	bl	125aa <atomic_get>
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    7284:	0787      	lsls	r7, r0, #30
    7286:	f140 80ed 	bpl.w	7464 <bt_le_adv_start_legacy+0x204>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
    728a:	4608      	mov	r0, r1
    728c:	f7fd ff20 	bl	50d0 <valid_adv_param>
    7290:	4607      	mov	r7, r0
    7292:	2800      	cmp	r0, #0
    7294:	f000 80e9 	beq.w	746a <bt_le_adv_start_legacy+0x20a>

	if (!bt_le_adv_random_addr_check(param)) {
		return -EINVAL;
	}

	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    7298:	f106 0810 	add.w	r8, r6, #16
    729c:	4640      	mov	r0, r8
    729e:	f00b f984 	bl	125aa <atomic_get>
    72a2:	f3c0 1180 	ubfx	r1, r0, #6, #1
    72a6:	0640      	lsls	r0, r0, #25
    72a8:	f100 80e2 	bmi.w	7470 <bt_le_adv_start_legacy+0x210>
		return -EALREADY;
	}

	(void)memset(&set_param, 0, sizeof(set_param));
    72ac:	220f      	movs	r2, #15
    72ae:	a80a      	add	r0, sp, #40	; 0x28
    72b0:	9105      	str	r1, [sp, #20]
    72b2:	f00b f85d 	bl	12370 <memset>

	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
    72b6:	68a3      	ldr	r3, [r4, #8]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
	set_param.channel_map  = get_adv_channel_map(param->options);
    72b8:	6860      	ldr	r0, [r4, #4]
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
    72ba:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
    72be:	68e3      	ldr	r3, [r4, #12]
    72c0:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
	set_param.channel_map  = get_adv_channel_map(param->options);
    72c4:	f00b f957 	bl	12576 <get_adv_channel_map>
	set_param.filter_policy = get_filter_policy(param->options);

	if (adv->id != param->id) {
    72c8:	7832      	ldrb	r2, [r6, #0]
    72ca:	7823      	ldrb	r3, [r4, #0]
	set_param.filter_policy = get_filter_policy(param->options);
    72cc:	9905      	ldr	r1, [sp, #20]
	if (adv->id != param->id) {
    72ce:	429a      	cmp	r2, r3
	set_param.channel_map  = get_adv_channel_map(param->options);
    72d0:	f88d 0035 	strb.w	r0, [sp, #53]	; 0x35
	set_param.filter_policy = get_filter_policy(param->options);
    72d4:	f88d 1036 	strb.w	r1, [sp, #54]	; 0x36
	if (adv->id != param->id) {
    72d8:	d004      	beq.n	72e4 <bt_le_adv_start_legacy+0x84>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    72da:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    72de:	4868      	ldr	r0, [pc, #416]	; (7480 <bt_le_adv_start_legacy+0x220>)
    72e0:	f00b f958 	bl	12594 <atomic_and>
		atomic_clear_bit(bt_dev.flags, BT_DEV_RPA_VALID);
	}

	adv->id = param->id;
    72e4:	7820      	ldrb	r0, [r4, #0]
	bt_dev.adv_conn_id = adv->id;
    72e6:	4b67      	ldr	r3, [pc, #412]	; (7484 <bt_le_adv_start_legacy+0x224>)
	adv->id = param->id;
    72e8:	7030      	strb	r0, [r6, #0]
	bt_dev.adv_conn_id = adv->id;
    72ea:	f883 0033 	strb.w	r0, [r3, #51]	; 0x33

	err = le_adv_set_random_addr(adv, param->options, dir_adv,
    72ee:	465a      	mov	r2, fp
    72f0:	6861      	ldr	r1, [r4, #4]
    72f2:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
    72f6:	f7fe fd4b 	bl	5d90 <le_adv_set_random_addr.isra.0>
				     &set_param.own_addr_type);
	if (err) {
    72fa:	4683      	mov	fp, r0
    72fc:	2800      	cmp	r0, #0
    72fe:	d16f      	bne.n	73e0 <bt_le_adv_start_legacy+0x180>
		return err;
	}

	if (dir_adv) {
    7300:	f106 0009 	add.w	r0, r6, #9
    7304:	2d00      	cmp	r5, #0
    7306:	d048      	beq.n	739a <bt_le_adv_start_legacy+0x13a>
		bt_addr_le_copy(&adv->target_addr, param->peer);
    7308:	6921      	ldr	r1, [r4, #16]
	} else {
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
    730a:	f00b f957 	bl	125bc <bt_addr_le_copy>
	}

	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    730e:	6860      	ldr	r0, [r4, #4]
    7310:	07c1      	lsls	r1, r0, #31
    7312:	d54a      	bpl.n	73aa <bt_le_adv_start_legacy+0x14a>
		scannable = true;

		if (dir_adv) {
    7314:	2d00      	cmp	r5, #0
    7316:	d045      	beq.n	73a4 <bt_le_adv_start_legacy+0x144>
			if (param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) {
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
			} else {
				set_param.type = BT_HCI_ADV_DIRECT_IND;
    7318:	f010 0f10 	tst.w	r0, #16
    731c:	bf14      	ite	ne
    731e:	2304      	movne	r3, #4
    7320:	2301      	moveq	r3, #1
			}

			bt_addr_le_copy(&set_param.direct_addr, param->peer);
    7322:	6921      	ldr	r1, [r4, #16]
    7324:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
    7328:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    732c:	f00b f946 	bl	125bc <bt_addr_le_copy>

		set_param.type = scannable ? BT_HCI_ADV_SCAN_IND :
					     BT_HCI_ADV_NONCONN_IND;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
    7330:	210f      	movs	r1, #15
    7332:	f242 0006 	movw	r0, #8198	; 0x2006
    7336:	f7fe fc17 	bl	5b68 <bt_hci_cmd_create>
	if (!buf) {
    733a:	4683      	mov	fp, r0
    733c:	2800      	cmp	r0, #0
    733e:	f000 809a 	beq.w	7476 <bt_le_adv_start_legacy+0x216>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    7342:	220f      	movs	r2, #15
    7344:	a90a      	add	r1, sp, #40	; 0x28
    7346:	3008      	adds	r0, #8
    7348:	f00c fe8e 	bl	14068 <net_buf_simple_add_mem>
		return -ENOBUFS;
	}

	net_buf_add_mem(buf, &set_param, sizeof(set_param));

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
    734c:	2200      	movs	r2, #0
    734e:	4659      	mov	r1, fp
    7350:	f242 0006 	movw	r0, #8198	; 0x2006
    7354:	f7fe fc40 	bl	5bd8 <bt_hci_cmd_send_sync>
	if (err) {
    7358:	2800      	cmp	r0, #0
    735a:	f040 808f 	bne.w	747c <bt_le_adv_start_legacy+0x21c>
		return err;
	}

	if (!dir_adv) {
    735e:	b37d      	cbz	r5, 73c0 <bt_le_adv_start_legacy+0x160>
			return err;
		}
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    7360:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    7362:	07da      	lsls	r2, r3, #31
    7364:	d440      	bmi.n	73e8 <bt_le_adv_start_legacy+0x188>
	return set_le_adv_enable_legacy(adv, enable);
    7366:	2101      	movs	r1, #1
    7368:	4630      	mov	r0, r6
    736a:	f7fe fd6f 	bl	5e4c <set_le_adv_enable_legacy>
			return err;
		}
	}

	err = set_le_adv_enable(adv, true);
	if (err) {
    736e:	4683      	mov	fp, r0
    7370:	2800      	cmp	r0, #0
    7372:	d070      	beq.n	7456 <bt_le_adv_start_legacy+0x1f6>
    7374:	4b44      	ldr	r3, [pc, #272]	; (7488 <bt_le_adv_start_legacy+0x228>)
    7376:	4945      	ldr	r1, [pc, #276]	; (748c <bt_le_adv_start_legacy+0x22c>)
		BT_ERR("Failed to start advertiser");
    7378:	4845      	ldr	r0, [pc, #276]	; (7490 <bt_le_adv_start_legacy+0x230>)
    737a:	1ac9      	subs	r1, r1, r3
    737c:	08c9      	lsrs	r1, r1, #3
    737e:	0189      	lsls	r1, r1, #6
    7380:	f041 0101 	orr.w	r1, r1, #1
    7384:	f009 fc96 	bl	10cb4 <log_0>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    7388:	9807      	ldr	r0, [sp, #28]
    738a:	b348      	cbz	r0, 73e0 <bt_le_adv_start_legacy+0x180>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    738c:	2100      	movs	r1, #0
    738e:	f000 fe73 	bl	8078 <bt_conn_set_state>
			bt_conn_unref(conn);
    7392:	9807      	ldr	r0, [sp, #28]
    7394:	f00b fb27 	bl	129e6 <bt_conn_unref>
    7398:	e022      	b.n	73e0 <bt_le_adv_start_legacy+0x180>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
    739a:	9508      	str	r5, [sp, #32]
    739c:	a908      	add	r1, sp, #32
    739e:	f8cd 5023 	str.w	r5, [sp, #35]	; 0x23
    73a2:	e7b2      	b.n	730a <bt_le_adv_start_legacy+0xaa>
			set_param.type = BT_HCI_ADV_IND;
    73a4:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
    73a8:	e7c2      	b.n	7330 <bt_le_adv_start_legacy+0xd0>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
    73aa:	9b18      	ldr	r3, [sp, #96]	; 0x60
    73ac:	b933      	cbnz	r3, 73bc <bt_le_adv_start_legacy+0x15c>
    73ae:	f3c0 07c0 	ubfx	r7, r0, #3, #1
		set_param.type = scannable ? BT_HCI_ADV_SCAN_IND :
    73b2:	f1c7 0303 	rsb	r3, r7, #3
    73b6:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    73ba:	e7b9      	b.n	7330 <bt_le_adv_start_legacy+0xd0>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
    73bc:	2701      	movs	r7, #1
    73be:	e7f8      	b.n	73b2 <bt_le_adv_start_legacy+0x152>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
    73c0:	6863      	ldr	r3, [r4, #4]
    73c2:	4652      	mov	r2, sl
    73c4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    73c8:	e9cd 7301 	strd	r7, r3, [sp, #4]
    73cc:	9b19      	ldr	r3, [sp, #100]	; 0x64
    73ce:	4649      	mov	r1, r9
    73d0:	9300      	str	r3, [sp, #0]
    73d2:	4630      	mov	r0, r6
    73d4:	9b18      	ldr	r3, [sp, #96]	; 0x60
    73d6:	f7fe fe97 	bl	6108 <le_adv_update.constprop.0>
		if (err) {
    73da:	4683      	mov	fp, r0
    73dc:	2800      	cmp	r0, #0
    73de:	d0bf      	beq.n	7360 <bt_le_adv_start_legacy+0x100>

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
    73e0:	4658      	mov	r0, fp
    73e2:	b00f      	add	sp, #60	; 0x3c
    73e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = le_adv_start_add_conn(adv, &conn);
    73e8:	4630      	mov	r0, r6
    73ea:	a907      	add	r1, sp, #28
    73ec:	f7fe fb3a 	bl	5a64 <le_adv_start_add_conn>
		if (err) {
    73f0:	4683      	mov	fp, r0
    73f2:	2800      	cmp	r0, #0
    73f4:	d0b7      	beq.n	7366 <bt_le_adv_start_legacy+0x106>
			if (err == -ENOMEM && !dir_adv &&
    73f6:	f110 0f0c 	cmn.w	r0, #12
    73fa:	d1f1      	bne.n	73e0 <bt_le_adv_start_legacy+0x180>
    73fc:	2d00      	cmp	r5, #0
    73fe:	d1ef      	bne.n	73e0 <bt_le_adv_start_legacy+0x180>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
    7400:	6863      	ldr	r3, [r4, #4]
			if (err == -ENOMEM && !dir_adv &&
    7402:	079b      	lsls	r3, r3, #30
    7404:	d4ec      	bmi.n	73e0 <bt_le_adv_start_legacy+0x180>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    7406:	6860      	ldr	r0, [r4, #4]
    7408:	f080 0002 	eor.w	r0, r0, #2
    740c:	f3c0 0b40 	ubfx	fp, r0, #1, #1
    7410:	f00b 0201 	and.w	r2, fp, #1
    7414:	210c      	movs	r1, #12
    7416:	4640      	mov	r0, r8
    7418:	f00b f8e9 	bl	125ee <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME,
    741c:	6862      	ldr	r2, [r4, #4]
    741e:	2107      	movs	r1, #7
    7420:	4640      	mov	r0, r8
    7422:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    7426:	f00b f8e2 	bl	125ee <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
    742a:	6862      	ldr	r2, [r4, #4]
    742c:	2108      	movs	r1, #8
    742e:	4640      	mov	r0, r8
    7430:	f002 0201 	and.w	r2, r2, #1
    7434:	f00b f8db 	bl	125ee <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
    7438:	463a      	mov	r2, r7
    743a:	2109      	movs	r1, #9
    743c:	4640      	mov	r0, r8
    743e:	f00b f8d6 	bl	125ee <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
    7442:	6862      	ldr	r2, [r4, #4]
    7444:	210b      	movs	r1, #11
    7446:	4640      	mov	r0, r8
    7448:	f3c2 0280 	ubfx	r2, r2, #2, #1
    744c:	f00b f8cf 	bl	125ee <atomic_set_bit_to>
	return 0;
    7450:	f04f 0b00 	mov.w	fp, #0
    7454:	e7c4      	b.n	73e0 <bt_le_adv_start_legacy+0x180>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    7456:	9807      	ldr	r0, [sp, #28]
    7458:	b108      	cbz	r0, 745e <bt_le_adv_start_legacy+0x1fe>
		bt_conn_unref(conn);
    745a:	f00b fac4 	bl	129e6 <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    745e:	2d00      	cmp	r5, #0
    7460:	d1d6      	bne.n	7410 <bt_le_adv_start_legacy+0x1b0>
    7462:	e7d0      	b.n	7406 <bt_le_adv_start_legacy+0x1a6>
		return -EAGAIN;
    7464:	f06f 0b0a 	mvn.w	fp, #10
    7468:	e7ba      	b.n	73e0 <bt_le_adv_start_legacy+0x180>
		return -EINVAL;
    746a:	f06f 0b15 	mvn.w	fp, #21
    746e:	e7b7      	b.n	73e0 <bt_le_adv_start_legacy+0x180>
		return -EALREADY;
    7470:	f06f 0b44 	mvn.w	fp, #68	; 0x44
    7474:	e7b4      	b.n	73e0 <bt_le_adv_start_legacy+0x180>
		return -ENOBUFS;
    7476:	f06f 0b36 	mvn.w	fp, #54	; 0x36
    747a:	e7b1      	b.n	73e0 <bt_le_adv_start_legacy+0x180>
    747c:	4683      	mov	fp, r0
    747e:	e7af      	b.n	73e0 <bt_le_adv_start_legacy+0x180>
    7480:	20000094 	.word	0x20000094
    7484:	20000000 	.word	0x20000000
    7488:	00015a00 	.word	0x00015a00
    748c:	00015a30 	.word	0x00015a30
    7490:	00017fac 	.word	0x00017fac

00007494 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
    7494:	b513      	push	{r0, r1, r4, lr}

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
    7496:	9c04      	ldr	r4, [sp, #16]
    7498:	e9cd 3400 	strd	r3, r4, [sp]
    749c:	4613      	mov	r3, r2
    749e:	460a      	mov	r2, r1
    74a0:	4601      	mov	r1, r0
    74a2:	4802      	ldr	r0, [pc, #8]	; (74ac <bt_le_adv_start+0x18>)
    74a4:	f7ff fedc 	bl	7260 <bt_le_adv_start_legacy>
	if (err) {
		adv_delete_legacy();
	}

	return err;
}
    74a8:	b002      	add	sp, #8
    74aa:	bd10      	pop	{r4, pc}
    74ac:	20000018 	.word	0x20000018

000074b0 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
    74b0:	b530      	push	{r4, r5, lr}
    74b2:	4c22      	ldr	r4, [pc, #136]	; (753c <bt_le_adv_stop+0x8c>)
    74b4:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    74b8:	b085      	sub	sp, #20
    74ba:	f104 0028 	add.w	r0, r4, #40	; 0x28
    74be:	f00b f869 	bl	12594 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    74c2:	f104 0028 	add.w	r0, r4, #40	; 0x28
    74c6:	f00b f870 	bl	125aa <atomic_get>
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    74ca:	0642      	lsls	r2, r0, #25
    74cc:	f3c0 1380 	ubfx	r3, r0, #6, #1
    74d0:	d531      	bpl.n	7536 <bt_le_adv_stop+0x86>
    74d2:	f104 0028 	add.w	r0, r4, #40	; 0x28
    74d6:	f00b f868 	bl	125aa <atomic_get>
		 */
		adv_delete_legacy();
		return 0;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    74da:	05c3      	lsls	r3, r0, #23
    74dc:	d521      	bpl.n	7522 <bt_le_adv_stop+0x72>
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    74de:	2300      	movs	r3, #0
    74e0:	4669      	mov	r1, sp
    74e2:	f104 0021 	add.w	r0, r4, #33	; 0x21
    74e6:	9300      	str	r3, [sp, #0]
    74e8:	f8cd 3003 	str.w	r3, [sp, #3]
    74ec:	f00b f860 	bl	125b0 <bt_addr_le_cmp>
    74f0:	7e25      	ldrb	r5, [r4, #24]
    74f2:	b9e0      	cbnz	r0, 752e <bt_le_adv_stop+0x7e>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
    74f4:	4b12      	ldr	r3, [pc, #72]	; (7540 <bt_le_adv_stop+0x90>)
    74f6:	a902      	add	r1, sp, #8
    74f8:	889a      	ldrh	r2, [r3, #4]
    74fa:	6818      	ldr	r0, [r3, #0]
    74fc:	f8ad 200c 	strh.w	r2, [sp, #12]
    7500:	2204      	movs	r2, #4
    7502:	799b      	ldrb	r3, [r3, #6]
    7504:	9002      	str	r0, [sp, #8]
    7506:	f88d 300e 	strb.w	r3, [sp, #14]
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
    750a:	4628      	mov	r0, r5
    750c:	f000 fee6 	bl	82dc <bt_conn_lookup_state_le>
    7510:	4604      	mov	r4, r0
	if (conn) {
    7512:	b130      	cbz	r0, 7522 <bt_le_adv_stop+0x72>
		conn->err = status;
    7514:	2100      	movs	r1, #0
    7516:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    7518:	f000 fdae 	bl	8078 <bt_conn_set_state>
		bt_conn_unref(conn);
    751c:	4620      	mov	r0, r4
    751e:	f00b fa62 	bl	129e6 <bt_conn_unref>
		err = set_le_adv_enable_ext(adv, false, NULL);
		if (err) {
			return err;
		}
	} else {
		err = set_le_adv_enable_legacy(adv, false);
    7522:	2100      	movs	r1, #0
    7524:	4807      	ldr	r0, [pc, #28]	; (7544 <bt_le_adv_stop+0x94>)
    7526:	f7fe fc91 	bl	5e4c <set_le_adv_enable_legacy>
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
    752a:	b005      	add	sp, #20
    752c:	bd30      	pop	{r4, r5, pc}
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
    752e:	2205      	movs	r2, #5
    7530:	f104 0121 	add.w	r1, r4, #33	; 0x21
    7534:	e7e9      	b.n	750a <bt_le_adv_stop+0x5a>
		return 0;
    7536:	4618      	mov	r0, r3
    7538:	e7f7      	b.n	752a <bt_le_adv_stop+0x7a>
    753a:	bf00      	nop
    753c:	20000000 	.word	0x20000000
    7540:	00015b70 	.word	0x00015b70
    7544:	20000018 	.word	0x20000018

00007548 <bt_le_adv_resume>:

#if defined(CONFIG_BT_PERIPHERAL)
void bt_le_adv_resume(void)
{
    7548:	b537      	push	{r0, r1, r2, r4, r5, lr}
    754a:	4c1f      	ldr	r4, [pc, #124]	; (75c8 <bt_le_adv_resume+0x80>)
    754c:	f104 0028 	add.w	r0, r4, #40	; 0x28
    7550:	f00b f82b 	bl	125aa <atomic_get>
	if (!adv) {
		BT_DBG("No valid legacy adv");
		return;
	}

	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
    7554:	04c0      	lsls	r0, r0, #19
    7556:	d535      	bpl.n	75c4 <bt_le_adv_resume+0x7c>
    7558:	f104 0028 	add.w	r0, r4, #40	; 0x28
    755c:	f00b f825 	bl	125aa <atomic_get>
    7560:	0641      	lsls	r1, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    7562:	f3c0 1580 	ubfx	r5, r0, #6, #1
    7566:	d42d      	bmi.n	75c4 <bt_le_adv_resume+0x7c>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    7568:	f104 0028 	add.w	r0, r4, #40	; 0x28
    756c:	f00b f81d 	bl	125aa <atomic_get>
	      !atomic_test_bit(adv->flags, BT_ADV_ENABLED))) {
		return;
	}

	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
    7570:	05c2      	lsls	r2, r0, #23
    7572:	d527      	bpl.n	75c4 <bt_le_adv_resume+0x7c>
		return;
	}

	err = le_adv_start_add_conn(adv, &conn);
    7574:	a901      	add	r1, sp, #4
    7576:	f104 0018 	add.w	r0, r4, #24
    757a:	f7fe fa73 	bl	5a64 <le_adv_start_add_conn>
	if (err) {
    757e:	bb08      	cbnz	r0, 75c4 <bt_le_adv_resume+0x7c>
    7580:	f104 0028 	add.w	r0, r4, #40	; 0x28
    7584:	f00b f811 	bl	125aa <atomic_get>
		return;
	}

	BT_DBG("Resuming connectable advertising");

	if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
    7588:	0503      	lsls	r3, r0, #20
    758a:	d402      	bmi.n	7592 <bt_le_adv_resume+0x4a>
		return le_set_private_addr(adv->id);
    758c:	7e20      	ldrb	r0, [r4, #24]
    758e:	f7fe fbc9 	bl	5d24 <le_set_private_addr>
	return set_le_adv_enable_legacy(adv, enable);
    7592:	2101      	movs	r1, #1
    7594:	480d      	ldr	r0, [pc, #52]	; (75cc <bt_le_adv_resume+0x84>)
    7596:	f7fe fc59 	bl	5e4c <set_le_adv_enable_legacy>
	    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
		le_adv_set_private_addr(adv);
	}

	err = set_le_adv_enable(adv, true);
	if (err) {
    759a:	b150      	cbz	r0, 75b2 <bt_le_adv_resume+0x6a>
		BT_DBG("Controller cannot resume connectable advertising (%d)",
		       err);
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    759c:	2100      	movs	r1, #0
    759e:	9801      	ldr	r0, [sp, #4]
    75a0:	f000 fd6a 	bl	8078 <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    75a4:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    75a8:	4809      	ldr	r0, [pc, #36]	; (75d0 <bt_le_adv_resume+0x88>)
    75aa:	f00a fff3 	bl	12594 <atomic_and>
	return (old & mask) != 0;
    75ae:	f3c0 3500 	ubfx	r5, r0, #12, #1
	}

	/* Since we don't give the application a reference to manage in
	 * this case, we need to release this reference here.
	 */
	bt_conn_unref(conn);
    75b2:	9801      	ldr	r0, [sp, #4]
    75b4:	f00b fa17 	bl	129e6 <bt_conn_unref>
	if (persist_paused) {
    75b8:	b125      	cbz	r5, 75c4 <bt_le_adv_resume+0x7c>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    75ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    75be:	4804      	ldr	r0, [pc, #16]	; (75d0 <bt_le_adv_resume+0x88>)
    75c0:	f00a ffff 	bl	125c2 <atomic_or>
		atomic_set_bit(adv->flags, BT_ADV_PERSIST);
	}
}
    75c4:	b003      	add	sp, #12
    75c6:	bd30      	pop	{r4, r5, pc}
    75c8:	20000000 	.word	0x20000000
    75cc:	20000018 	.word	0x20000018
    75d0:	20000028 	.word	0x20000028

000075d4 <enh_conn_complete>:
{
    75d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    75d8:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    75dc:	f8b0 8001 	ldrh.w	r8, [r0, #1]
{
    75e0:	4604      	mov	r4, r0
    75e2:	b086      	sub	sp, #24
    75e4:	4873      	ldr	r0, [pc, #460]	; (77b4 <enh_conn_complete+0x1e0>)
    75e6:	f00a ffd5 	bl	12594 <atomic_and>
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
    75ea:	0441      	lsls	r1, r0, #17
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    75ec:	fa1f f788 	uxth.w	r7, r8
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
    75f0:	d504      	bpl.n	75fc <enh_conn_complete+0x28>
			bt_keys_foreach(BT_KEYS_IRK, pending_id_update, NULL);
    75f2:	2200      	movs	r2, #0
    75f4:	2002      	movs	r0, #2
    75f6:	4970      	ldr	r1, [pc, #448]	; (77b8 <enh_conn_complete+0x1e4>)
    75f8:	f005 fbc4 	bl	cd84 <bt_keys_foreach>
	if (evt->status) {
    75fc:	7825      	ldrb	r5, [r4, #0]
    75fe:	b365      	cbz	r5, 765a <enh_conn_complete+0x86>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    7600:	2d3c      	cmp	r5, #60	; 0x3c
    7602:	d11e      	bne.n	7642 <enh_conn_complete+0x6e>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    7604:	f06f 0140 	mvn.w	r1, #64	; 0x40
    7608:	486c      	ldr	r0, [pc, #432]	; (77bc <enh_conn_complete+0x1e8>)
    760a:	f00a ffc3 	bl	12594 <atomic_and>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
    760e:	2000      	movs	r0, #0
    7610:	f7fd fff2 	bl	55f8 <find_pending_connect.part.0>
		if (!conn) {
    7614:	4604      	mov	r4, r0
    7616:	b960      	cbnz	r0, 7632 <enh_conn_complete+0x5e>
    7618:	4969      	ldr	r1, [pc, #420]	; (77c0 <enh_conn_complete+0x1ec>)
    761a:	4b6a      	ldr	r3, [pc, #424]	; (77c4 <enh_conn_complete+0x1f0>)
			BT_ERR("No pending slave connection");
    761c:	486a      	ldr	r0, [pc, #424]	; (77c8 <enh_conn_complete+0x1f4>)
    761e:	1ac9      	subs	r1, r1, r3
    7620:	08c9      	lsrs	r1, r1, #3
    7622:	0189      	lsls	r1, r1, #6
    7624:	f041 0101 	orr.w	r1, r1, #1
    7628:	f009 fb44 	bl	10cb4 <log_0>
}
    762c:	b006      	add	sp, #24
    762e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
    7632:	7305      	strb	r5, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    7634:	2100      	movs	r1, #0
    7636:	f000 fd1f 	bl	8078 <bt_conn_set_state>
		bt_conn_unref(conn);
    763a:	4620      	mov	r0, r4
	bt_conn_unref(conn);
    763c:	f00b f9d3 	bl	129e6 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    7640:	e7f4      	b.n	762c <enh_conn_complete+0x58>
    7642:	4b60      	ldr	r3, [pc, #384]	; (77c4 <enh_conn_complete+0x1f0>)
    7644:	4a5e      	ldr	r2, [pc, #376]	; (77c0 <enh_conn_complete+0x1ec>)
		BT_WARN("Unexpected status 0x%02x", evt->status);
    7646:	4629      	mov	r1, r5
    7648:	1ad2      	subs	r2, r2, r3
    764a:	08d2      	lsrs	r2, r2, #3
    764c:	0192      	lsls	r2, r2, #6
    764e:	485f      	ldr	r0, [pc, #380]	; (77cc <enh_conn_complete+0x1f8>)
    7650:	f042 0202 	orr.w	r2, r2, #2
    7654:	f009 fb3b 	bl	10cce <log_1>
		return;
    7658:	e7e8      	b.n	762c <enh_conn_complete+0x58>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    765a:	7923      	ldrb	r3, [r4, #4]
    765c:	1d26      	adds	r6, r4, #4
    765e:	3b02      	subs	r3, #2
    7660:	2b01      	cmp	r3, #1
    7662:	d837      	bhi.n	76d4 <enh_conn_complete+0x100>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
    7664:	4631      	mov	r1, r6
    7666:	a804      	add	r0, sp, #16
    7668:	f00a ffa8 	bl	125bc <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    766c:	f89d 3010 	ldrb.w	r3, [sp, #16]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
    7670:	f104 0111 	add.w	r1, r4, #17
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    7674:	3b02      	subs	r3, #2
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
    7676:	f10d 0009 	add.w	r0, sp, #9
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    767a:	f88d 3010 	strb.w	r3, [sp, #16]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
    767e:	f00a ff9a 	bl	125b6 <bt_addr_copy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
    7682:	2301      	movs	r3, #1
    7684:	f88d 3008 	strb.w	r3, [sp, #8]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
    7688:	78e3      	ldrb	r3, [r4, #3]
    768a:	2b01      	cmp	r3, #1
    768c:	d10c      	bne.n	76a8 <enh_conn_complete+0xd4>
    768e:	a804      	add	r0, sp, #16
    7690:	f7fd ffb2 	bl	55f8 <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    7694:	78e3      	ldrb	r3, [r4, #3]
    7696:	4605      	mov	r5, r0
    7698:	2b01      	cmp	r3, #1
    769a:	d104      	bne.n	76a6 <enh_conn_complete+0xd2>
    769c:	f06f 0140 	mvn.w	r1, #64	; 0x40
    76a0:	4846      	ldr	r0, [pc, #280]	; (77bc <enh_conn_complete+0x1e8>)
    76a2:	f00a ff77 	bl	12594 <atomic_and>
	if (!conn) {
    76a6:	bb45      	cbnz	r5, 76fa <enh_conn_complete+0x126>
    76a8:	4a46      	ldr	r2, [pc, #280]	; (77c4 <enh_conn_complete+0x1f0>)
    76aa:	4c45      	ldr	r4, [pc, #276]	; (77c0 <enh_conn_complete+0x1ec>)
		BT_ERR("No pending conn for peer %s",
    76ac:	4630      	mov	r0, r6
    76ae:	1aa4      	subs	r4, r4, r2
    76b0:	f7fd fa5a 	bl	4b68 <bt_addr_le_str_real>
    76b4:	f7fa f8c2 	bl	183c <log_strdup>
    76b8:	08e4      	lsrs	r4, r4, #3
    76ba:	01a4      	lsls	r4, r4, #6
    76bc:	f044 0401 	orr.w	r4, r4, #1
    76c0:	4601      	mov	r1, r0
    76c2:	4622      	mov	r2, r4
    76c4:	4842      	ldr	r0, [pc, #264]	; (77d0 <enh_conn_complete+0x1fc>)
    76c6:	f009 fb02 	bl	10cce <log_1>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
    76ca:	211f      	movs	r1, #31
    76cc:	4638      	mov	r0, r7
    76ce:	f00b f806 	bl	126de <bt_hci_disconnect>
		return;
    76d2:	e7ab      	b.n	762c <enh_conn_complete+0x58>
		uint8_t id = evt->role == BT_HCI_ROLE_SLAVE ? bt_dev.adv_conn_id :
    76d4:	78e3      	ldrb	r3, [r4, #3]
		bt_addr_le_copy(&id_addr,
    76d6:	4631      	mov	r1, r6
		uint8_t id = evt->role == BT_HCI_ROLE_SLAVE ? bt_dev.adv_conn_id :
    76d8:	2b01      	cmp	r3, #1
    76da:	bf04      	itt	eq
    76dc:	4b3d      	ldreq	r3, [pc, #244]	; (77d4 <enh_conn_complete+0x200>)
    76de:	f893 5033 	ldrbeq.w	r5, [r3, #51]	; 0x33
		bt_addr_le_copy(&id_addr,
    76e2:	4628      	mov	r0, r5
    76e4:	f00a fff3 	bl	126ce <bt_lookup_id_addr>
    76e8:	4601      	mov	r1, r0
    76ea:	a804      	add	r0, sp, #16
    76ec:	f00a ff66 	bl	125bc <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
    76f0:	4631      	mov	r1, r6
    76f2:	a802      	add	r0, sp, #8
    76f4:	f00a ff62 	bl	125bc <bt_addr_le_copy>
    76f8:	e7c6      	b.n	7688 <enh_conn_complete+0xb4>
	conn->handle = handle;
    76fa:	4628      	mov	r0, r5
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    76fc:	a904      	add	r1, sp, #16
	conn->handle = handle;
    76fe:	f820 8b88 	strh.w	r8, [r0], #136
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    7702:	f00a ff5b 	bl	125bc <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    7706:	7e22      	ldrb	r2, [r4, #24]
    7708:	7de3      	ldrb	r3, [r4, #23]
    770a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    770e:	f8a5 309e 	strh.w	r3, [r5, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    7712:	7ea2      	ldrb	r2, [r4, #26]
    7714:	7e63      	ldrb	r3, [r4, #25]
    7716:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    771a:	f8a5 30a4 	strh.w	r3, [r5, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    771e:	7ee3      	ldrb	r3, [r4, #27]
    7720:	7f22      	ldrb	r2, [r4, #28]
    7722:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    7726:	f8a5 30a6 	strh.w	r3, [r5, #166]	; 0xa6
	conn->err = 0U;
    772a:	2300      	movs	r3, #0
	conn->role = evt->role;
    772c:	78e7      	ldrb	r7, [r4, #3]
	conn->err = 0U;
    772e:	732b      	strb	r3, [r5, #12]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    7730:	2f01      	cmp	r7, #1
	conn->role = evt->role;
    7732:	70ef      	strb	r7, [r5, #3]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    7734:	d128      	bne.n	7788 <enh_conn_complete+0x1b4>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    7736:	4e27      	ldr	r6, [pc, #156]	; (77d4 <enh_conn_complete+0x200>)
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
    7738:	a902      	add	r1, sp, #8
    773a:	f105 008f 	add.w	r0, r5, #143	; 0x8f
    773e:	f00a ff3d 	bl	125bc <bt_addr_le_copy>
    7742:	f106 0028 	add.w	r0, r6, #40	; 0x28
    7746:	f00a ff30 	bl	125aa <atomic_get>
			if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
    774a:	0502      	lsls	r2, r0, #20
    774c:	f3c0 23c0 	ubfx	r3, r0, #11, #1
    7750:	d426      	bmi.n	77a0 <enh_conn_complete+0x1cc>
				if (bt_addr_cmp(&evt->local_rpa,
    7752:	340b      	adds	r4, #11
    7754:	2206      	movs	r2, #6
    7756:	4669      	mov	r1, sp
    7758:	4620      	mov	r0, r4
				conn->le.resp_addr.type = BT_ADDR_LE_RANDOM;
    775a:	f885 7096 	strb.w	r7, [r5, #150]	; 0x96
						BT_ADDR_ANY) != 0) {
    775e:	9300      	str	r3, [sp, #0]
    7760:	f8ad 3004 	strh.w	r3, [sp, #4]
    7764:	f00a fdc9 	bl	122fa <memcmp>
    7768:	4603      	mov	r3, r0
    776a:	f105 0097 	add.w	r0, r5, #151	; 0x97
				if (bt_addr_cmp(&evt->local_rpa,
    776e:	b1a3      	cbz	r3, 779a <enh_conn_complete+0x1c6>
					bt_addr_copy(&conn->le.resp_addr.a,
    7770:	4621      	mov	r1, r4
					bt_addr_copy(&conn->le.resp_addr.a,
    7772:	f00a ff20 	bl	125b6 <bt_addr_copy>
		if (BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
    7776:	2200      	movs	r2, #0
    7778:	f8d6 10a4 	ldr.w	r1, [r6, #164]	; 0xa4
    777c:	f001 0340 	and.w	r3, r1, #64	; 0x40
    7780:	4313      	orrs	r3, r2
    7782:	d001      	beq.n	7788 <enh_conn_complete+0x1b4>
			bt_le_adv_resume();
    7784:	f7ff fee0 	bl	7548 <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    7788:	2107      	movs	r1, #7
    778a:	4628      	mov	r0, r5
    778c:	f000 fc74 	bl	8078 <bt_conn_set_state>
	conn_auto_initiate(conn);
    7790:	4628      	mov	r0, r5
    7792:	f7fe ffc7 	bl	6724 <conn_auto_initiate>
	bt_conn_unref(conn);
    7796:	4628      	mov	r0, r5
    7798:	e750      	b.n	763c <enh_conn_complete+0x68>
					bt_addr_copy(&conn->le.resp_addr.a,
    779a:	f106 012d 	add.w	r1, r6, #45	; 0x2d
    779e:	e7e8      	b.n	7772 <enh_conn_complete+0x19e>
						&bt_dev.id_addr[conn->id]);
    77a0:	7a29      	ldrb	r1, [r5, #8]
				bt_addr_le_copy(&conn->le.resp_addr,
    77a2:	f105 0096 	add.w	r0, r5, #150	; 0x96
						&bt_dev.id_addr[conn->id]);
    77a6:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
				bt_addr_le_copy(&conn->le.resp_addr,
    77aa:	4431      	add	r1, r6
    77ac:	f00a ff06 	bl	125bc <bt_addr_le_copy>
    77b0:	e7e1      	b.n	7776 <enh_conn_complete+0x1a2>
    77b2:	bf00      	nop
    77b4:	20000094 	.word	0x20000094
    77b8:	00012755 	.word	0x00012755
    77bc:	20000028 	.word	0x20000028
    77c0:	00015a30 	.word	0x00015a30
    77c4:	00015a00 	.word	0x00015a00
    77c8:	00017fc7 	.word	0x00017fc7
    77cc:	00017fe3 	.word	0x00017fe3
    77d0:	00017ffc 	.word	0x00017ffc
    77d4:	20000000 	.word	0x20000000

000077d8 <le_legacy_conn_complete>:
{
    77d8:	b500      	push	{lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
    77da:	6881      	ldr	r1, [r0, #8]
{
    77dc:	b08b      	sub	sp, #44	; 0x2c
	enh.status         = evt->status;
    77de:	780b      	ldrb	r3, [r1, #0]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
    77e0:	a803      	add	r0, sp, #12
	enh.status         = evt->status;
    77e2:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
    77e6:	f8b1 3001 	ldrh.w	r3, [r1, #1]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
    77ea:	3104      	adds	r1, #4
	enh.handle         = evt->handle;
    77ec:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
    77f0:	f811 3c01 	ldrb.w	r3, [r1, #-1]
    77f4:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
    77f8:	f8b1 3007 	ldrh.w	r3, [r1, #7]
    77fc:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
    7800:	f8b1 3009 	ldrh.w	r3, [r1, #9]
    7804:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
    7808:	f8b1 300b 	ldrh.w	r3, [r1, #11]
    780c:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
    7810:	7b4b      	ldrb	r3, [r1, #13]
    7812:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
    7816:	f00a fed1 	bl	125bc <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, &bt_dev.random_addr.a);
    781a:	f10d 0013 	add.w	r0, sp, #19
    781e:	4909      	ldr	r1, [pc, #36]	; (7844 <le_legacy_conn_complete+0x6c>)
    7820:	f00a fec9 	bl	125b6 <bt_addr_copy>
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
    7824:	2300      	movs	r3, #0
    7826:	4669      	mov	r1, sp
    7828:	f10d 0019 	add.w	r0, sp, #25
    782c:	9300      	str	r3, [sp, #0]
    782e:	f8ad 3004 	strh.w	r3, [sp, #4]
    7832:	f00a fec0 	bl	125b6 <bt_addr_copy>
	enh_conn_complete(&enh);
    7836:	a802      	add	r0, sp, #8
    7838:	f7ff fecc 	bl	75d4 <enh_conn_complete>
}
    783c:	b00b      	add	sp, #44	; 0x2c
    783e:	f85d fb04 	ldr.w	pc, [sp], #4
    7842:	bf00      	nop
    7844:	2000002d 	.word	0x2000002d

00007848 <bt_pub_key_gen>:
}
#endif /* CONFIG_BT_BREDR */

#if defined(CONFIG_BT_ECC)
int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
    7848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
    784a:	4d21      	ldr	r5, [pc, #132]	; (78d0 <bt_pub_key_gen+0x88>)
    784c:	f895 3066 	ldrb.w	r3, [r5, #102]	; 0x66
    7850:	f003 0306 	and.w	r3, r3, #6
    7854:	2b06      	cmp	r3, #6
    7856:	d00d      	beq.n	7874 <bt_pub_key_gen+0x2c>
    7858:	4b1e      	ldr	r3, [pc, #120]	; (78d4 <bt_pub_key_gen+0x8c>)
    785a:	491f      	ldr	r1, [pc, #124]	; (78d8 <bt_pub_key_gen+0x90>)
	    !BT_CMD_TEST(bt_dev.supported_commands, 34, 2)) {
		BT_WARN("ECC HCI commands not available");
    785c:	481f      	ldr	r0, [pc, #124]	; (78dc <bt_pub_key_gen+0x94>)
    785e:	1ac9      	subs	r1, r1, r3
    7860:	08c9      	lsrs	r1, r1, #3
    7862:	0189      	lsls	r1, r1, #6
    7864:	f041 0102 	orr.w	r1, r1, #2
    7868:	f009 fa24 	bl	10cb4 <log_0>
		return -ENOTSUP;
    786c:	f06f 0422 	mvn.w	r4, #34	; 0x22
		pub_key_cb = NULL;
		return err;
	}

	return 0;
}
    7870:	4620      	mov	r0, r4
    7872:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	new_cb->_next = pub_key_cb;
    7874:	4e1a      	ldr	r6, [pc, #104]	; (78e0 <bt_pub_key_gen+0x98>)
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    7876:	2104      	movs	r1, #4
	new_cb->_next = pub_key_cb;
    7878:	6833      	ldr	r3, [r6, #0]
	pub_key_cb = new_cb;
    787a:	6030      	str	r0, [r6, #0]
	new_cb->_next = pub_key_cb;
    787c:	6043      	str	r3, [r0, #4]
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    787e:	f105 0094 	add.w	r0, r5, #148	; 0x94
    7882:	f00a fea9 	bl	125d8 <atomic_test_and_set_bit>
    7886:	4607      	mov	r7, r0
    7888:	bb00      	cbnz	r0, 78cc <bt_pub_key_gen+0x84>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    788a:	f06f 0108 	mvn.w	r1, #8
    788e:	f105 0094 	add.w	r0, r5, #148	; 0x94
    7892:	f00a fe7f 	bl	12594 <atomic_and>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
    7896:	463a      	mov	r2, r7
    7898:	4639      	mov	r1, r7
    789a:	f242 0025 	movw	r0, #8229	; 0x2025
    789e:	f7fe f99b 	bl	5bd8 <bt_hci_cmd_send_sync>
	if (err) {
    78a2:	4604      	mov	r4, r0
    78a4:	2800      	cmp	r0, #0
    78a6:	d0e3      	beq.n	7870 <bt_pub_key_gen+0x28>
    78a8:	4b0a      	ldr	r3, [pc, #40]	; (78d4 <bt_pub_key_gen+0x8c>)
    78aa:	490b      	ldr	r1, [pc, #44]	; (78d8 <bt_pub_key_gen+0x90>)
		BT_ERR("Sending LE P256 Public Key command failed");
    78ac:	480d      	ldr	r0, [pc, #52]	; (78e4 <bt_pub_key_gen+0x9c>)
    78ae:	1ac9      	subs	r1, r1, r3
    78b0:	08c9      	lsrs	r1, r1, #3
    78b2:	0189      	lsls	r1, r1, #6
    78b4:	f041 0101 	orr.w	r1, r1, #1
    78b8:	f009 f9fc 	bl	10cb4 <log_0>
    78bc:	f06f 0110 	mvn.w	r1, #16
    78c0:	f105 0094 	add.w	r0, r5, #148	; 0x94
    78c4:	f00a fe66 	bl	12594 <atomic_and>
		pub_key_cb = NULL;
    78c8:	6037      	str	r7, [r6, #0]
		return err;
    78ca:	e7d1      	b.n	7870 <bt_pub_key_gen+0x28>
		return 0;
    78cc:	2400      	movs	r4, #0
    78ce:	e7cf      	b.n	7870 <bt_pub_key_gen+0x28>
    78d0:	20000000 	.word	0x20000000
    78d4:	00015a00 	.word	0x00015a00
    78d8:	00015a30 	.word	0x00015a30
    78dc:	00018018 	.word	0x00018018
    78e0:	200019b0 	.word	0x200019b0
    78e4:	00018037 	.word	0x00018037

000078e8 <bt_pub_key_get>:

const uint8_t *bt_pub_key_get(void)
{
    78e8:	b508      	push	{r3, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    78ea:	4804      	ldr	r0, [pc, #16]	; (78fc <bt_pub_key_get+0x14>)
    78ec:	f00a fe5d 	bl	125aa <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
    78f0:	f010 0f08 	tst.w	r0, #8
		return pub_key;
	}

	return NULL;
}
    78f4:	4802      	ldr	r0, [pc, #8]	; (7900 <bt_pub_key_get+0x18>)
    78f6:	bf08      	it	eq
    78f8:	2000      	moveq	r0, #0
    78fa:	bd08      	pop	{r3, pc}
    78fc:	20000094 	.word	0x20000094
    7900:	20002db7 	.word	0x20002db7

00007904 <bt_dh_key_gen>:

int bt_dh_key_gen(const uint8_t remote_pk[64], bt_dh_key_cb_t cb)
{
    7904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_cp_le_generate_dhkey *cp;
	struct net_buf *buf;
	int err;

	if (dh_key_cb == cb) {
    7906:	4d1c      	ldr	r5, [pc, #112]	; (7978 <bt_dh_key_gen+0x74>)
{
    7908:	4606      	mov	r6, r0
	if (dh_key_cb == cb) {
    790a:	682b      	ldr	r3, [r5, #0]
    790c:	428b      	cmp	r3, r1
    790e:	d02d      	beq.n	796c <bt_dh_key_gen+0x68>
		return -EALREADY;
	}

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    7910:	b113      	cbz	r3, 7918 <bt_dh_key_gen+0x14>
		return -EBUSY;
    7912:	f06f 000f 	mvn.w	r0, #15
		dh_key_cb = NULL;
		return err;
	}

	return 0;
}
    7916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7918:	4818      	ldr	r0, [pc, #96]	; (797c <bt_dh_key_gen+0x78>)
    791a:	f00a fe46 	bl	125aa <atomic_get>
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    791e:	06c2      	lsls	r2, r0, #27
    7920:	f3c0 1700 	ubfx	r7, r0, #4, #1
    7924:	d4f5      	bmi.n	7912 <bt_dh_key_gen+0xe>
    7926:	4815      	ldr	r0, [pc, #84]	; (797c <bt_dh_key_gen+0x78>)
    7928:	f00a fe3f 	bl	125aa <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
    792c:	0703      	lsls	r3, r0, #28
    792e:	d520      	bpl.n	7972 <bt_dh_key_gen+0x6e>
	dh_key_cb = cb;
    7930:	6029      	str	r1, [r5, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
    7932:	f242 0026 	movw	r0, #8230	; 0x2026
    7936:	2140      	movs	r1, #64	; 0x40
    7938:	f7fe f916 	bl	5b68 <bt_hci_cmd_create>
	if (!buf) {
    793c:	4604      	mov	r4, r0
    793e:	b918      	cbnz	r0, 7948 <bt_dh_key_gen+0x44>
		dh_key_cb = NULL;
    7940:	6028      	str	r0, [r5, #0]
		return -ENOBUFS;
    7942:	f06f 0036 	mvn.w	r0, #54	; 0x36
    7946:	e7e6      	b.n	7916 <bt_dh_key_gen+0x12>
	return net_buf_simple_add(&buf->b, len);
    7948:	2140      	movs	r1, #64	; 0x40
    794a:	3008      	adds	r0, #8
    794c:	f00c fb86 	bl	1405c <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
    7950:	2240      	movs	r2, #64	; 0x40
    7952:	4631      	mov	r1, r6
    7954:	f00a fce1 	bl	1231a <memcpy>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
    7958:	463a      	mov	r2, r7
    795a:	4621      	mov	r1, r4
    795c:	f242 0026 	movw	r0, #8230	; 0x2026
    7960:	f7fe f93a 	bl	5bd8 <bt_hci_cmd_send_sync>
	if (err) {
    7964:	2800      	cmp	r0, #0
    7966:	d0d6      	beq.n	7916 <bt_dh_key_gen+0x12>
		dh_key_cb = NULL;
    7968:	602f      	str	r7, [r5, #0]
		return err;
    796a:	e7d4      	b.n	7916 <bt_dh_key_gen+0x12>
		return -EALREADY;
    796c:	f06f 0044 	mvn.w	r0, #68	; 0x44
    7970:	e7d1      	b.n	7916 <bt_dh_key_gen+0x12>
		return -EADDRNOTAVAIL;
    7972:	f06f 0030 	mvn.w	r0, #48	; 0x30
    7976:	e7ce      	b.n	7916 <bt_dh_key_gen+0x12>
    7978:	200019ac 	.word	0x200019ac
    797c:	20000094 	.word	0x20000094

00007980 <prng_reseed.constprop.0>:

#include "hci_core.h"

static struct tc_hmac_prng_struct prng;

static int prng_reseed(struct tc_hmac_prng_struct *h)
    7980:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
	uint8_t seed[32];
	int64_t extra;
	size_t i;
	int ret;

	for (i = 0; i < (sizeof(seed) / 8); i++) {
    7984:	2500      	movs	r5, #0
static int prng_reseed(struct tc_hmac_prng_struct *h)
    7986:	b08c      	sub	sp, #48	; 0x30
		struct bt_hci_rp_le_rand *rp;
		struct net_buf *rsp;

		ret = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
    7988:	2100      	movs	r1, #0
    798a:	f242 0018 	movw	r0, #8216	; 0x2018
    798e:	aa02      	add	r2, sp, #8
    7990:	f7fe f922 	bl	5bd8 <bt_hci_cmd_send_sync>
		if (ret) {
    7994:	4604      	mov	r4, r0
    7996:	bb98      	cbnz	r0, 7a00 <prng_reseed.constprop.0+0x80>
			return ret;
		}

		rp = (void *)rsp->data;
    7998:	9b02      	ldr	r3, [sp, #8]
		memcpy(&seed[i * 8], rp->rand, 8);
    799a:	2208      	movs	r2, #8
    799c:	6899      	ldr	r1, [r3, #8]
    799e:	ab04      	add	r3, sp, #16
    79a0:	eb03 00c5 	add.w	r0, r3, r5, lsl #3
    79a4:	3101      	adds	r1, #1
    79a6:	f00a fcb8 	bl	1231a <memcpy>
	for (i = 0; i < (sizeof(seed) / 8); i++) {
    79aa:	3501      	adds	r5, #1

		net_buf_unref(rsp);
    79ac:	9802      	ldr	r0, [sp, #8]
    79ae:	f005 fc4b 	bl	d248 <net_buf_unref>
	for (i = 0; i < (sizeof(seed) / 8); i++) {
    79b2:	2d04      	cmp	r5, #4
    79b4:	d1e8      	bne.n	7988 <prng_reseed.constprop.0+0x8>
	return z_impl_k_uptime_ticks();
    79b6:	f00d fc89 	bl	152cc <z_impl_k_uptime_ticks>
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
    79ba:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    79be:	fba0 bc05 	umull	fp, ip, r0, r5
    79c2:	fb05 cc01 	mla	ip, r5, r1, ip
    79c6:	ea4f 32db 	mov.w	r2, fp, lsr #15
    79ca:	ea42 424c 	orr.w	r2, r2, ip, lsl #17
    79ce:	ea4f 33dc 	mov.w	r3, ip, lsr #15
	}

	extra = k_uptime_get();
    79d2:	e9cd 2302 	strd	r2, r3, [sp, #8]

	ret = tc_hmac_prng_reseed(h, seed, sizeof(seed), (uint8_t *)&extra,
    79d6:	2308      	movs	r3, #8
    79d8:	2220      	movs	r2, #32
    79da:	9300      	str	r3, [sp, #0]
    79dc:	480a      	ldr	r0, [pc, #40]	; (7a08 <prng_reseed.constprop.0+0x88>)
    79de:	446b      	add	r3, sp
    79e0:	a904      	add	r1, sp, #16
    79e2:	f00a fb37 	bl	12054 <tc_hmac_prng_reseed>
				  sizeof(extra));
	if (ret == TC_CRYPTO_FAIL) {
    79e6:	b958      	cbnz	r0, 7a00 <prng_reseed.constprop.0+0x80>
    79e8:	4b08      	ldr	r3, [pc, #32]	; (7a0c <prng_reseed.constprop.0+0x8c>)
    79ea:	4909      	ldr	r1, [pc, #36]	; (7a10 <prng_reseed.constprop.0+0x90>)
		BT_ERR("Failed to re-seed PRNG");
    79ec:	4809      	ldr	r0, [pc, #36]	; (7a14 <prng_reseed.constprop.0+0x94>)
    79ee:	1ac9      	subs	r1, r1, r3
    79f0:	08c9      	lsrs	r1, r1, #3
    79f2:	0189      	lsls	r1, r1, #6
    79f4:	f041 0101 	orr.w	r1, r1, #1
    79f8:	f009 f95c 	bl	10cb4 <log_0>
		return -EIO;
    79fc:	f06f 0404 	mvn.w	r4, #4
	}

	return 0;
}
    7a00:	4620      	mov	r0, r4
    7a02:	b00c      	add	sp, #48	; 0x30
    7a04:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
    7a08:	20000ab0 	.word	0x20000ab0
    7a0c:	00015a00 	.word	0x00015a00
    7a10:	00015a18 	.word	0x00015a18
    7a14:	0001808b 	.word	0x0001808b

00007a18 <prng_init>:

int prng_init(void)
{
    7a18:	b513      	push	{r0, r1, r4, lr}
	struct bt_hci_rp_le_rand *rp;
	struct net_buf *rsp;
	int ret;

	/* Check first that HCI_LE_Rand is supported */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
    7a1a:	4b16      	ldr	r3, [pc, #88]	; (7a74 <prng_init+0x5c>)
    7a1c:	f993 305f 	ldrsb.w	r3, [r3, #95]	; 0x5f
    7a20:	2b00      	cmp	r3, #0
    7a22:	da23      	bge.n	7a6c <prng_init+0x54>
		return -ENOTSUP;
	}

	ret = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
    7a24:	2100      	movs	r1, #0
    7a26:	f242 0018 	movw	r0, #8216	; 0x2018
    7a2a:	aa01      	add	r2, sp, #4
    7a2c:	f7fe f8d4 	bl	5bd8 <bt_hci_cmd_send_sync>
	if (ret) {
    7a30:	b9b8      	cbnz	r0, 7a62 <prng_init+0x4a>
		return ret;
	}

	rp = (void *)rsp->data;
    7a32:	9b01      	ldr	r3, [sp, #4]

	ret = tc_hmac_prng_init(&prng, rp->rand, sizeof(rp->rand));
    7a34:	2208      	movs	r2, #8
    7a36:	6899      	ldr	r1, [r3, #8]
    7a38:	480f      	ldr	r0, [pc, #60]	; (7a78 <prng_init+0x60>)
    7a3a:	3101      	adds	r1, #1
    7a3c:	f00a faea 	bl	12014 <tc_hmac_prng_init>
    7a40:	4604      	mov	r4, r0

	net_buf_unref(rsp);
    7a42:	9801      	ldr	r0, [sp, #4]
    7a44:	f005 fc00 	bl	d248 <net_buf_unref>

	if (ret == TC_CRYPTO_FAIL) {
    7a48:	b96c      	cbnz	r4, 7a66 <prng_init+0x4e>
    7a4a:	4b0c      	ldr	r3, [pc, #48]	; (7a7c <prng_init+0x64>)
    7a4c:	490c      	ldr	r1, [pc, #48]	; (7a80 <prng_init+0x68>)
		BT_ERR("Failed to initialize PRNG");
    7a4e:	480d      	ldr	r0, [pc, #52]	; (7a84 <prng_init+0x6c>)
    7a50:	1ac9      	subs	r1, r1, r3
    7a52:	08c9      	lsrs	r1, r1, #3
    7a54:	0189      	lsls	r1, r1, #6
    7a56:	f041 0101 	orr.w	r1, r1, #1
    7a5a:	f009 f92b 	bl	10cb4 <log_0>
		return -EIO;
    7a5e:	f06f 0004 	mvn.w	r0, #4
	}

	/* re-seed is needed after init */
	return prng_reseed(&prng);
}
    7a62:	b002      	add	sp, #8
    7a64:	bd10      	pop	{r4, pc}
	return prng_reseed(&prng);
    7a66:	f7ff ff8b 	bl	7980 <prng_reseed.constprop.0>
    7a6a:	e7fa      	b.n	7a62 <prng_init+0x4a>
		return -ENOTSUP;
    7a6c:	f06f 0022 	mvn.w	r0, #34	; 0x22
    7a70:	e7f7      	b.n	7a62 <prng_init+0x4a>
    7a72:	bf00      	nop
    7a74:	20000000 	.word	0x20000000
    7a78:	20000ab0 	.word	0x20000ab0
    7a7c:	00015a00 	.word	0x00015a00
    7a80:	00015a18 	.word	0x00015a18
    7a84:	000180a2 	.word	0x000180a2

00007a88 <bt_rand>:

int bt_rand(void *buf, size_t len)
{
    7a88:	b538      	push	{r3, r4, r5, lr}
	int ret;

	ret = tc_hmac_prng_generate(buf, len, &prng);
    7a8a:	4a0a      	ldr	r2, [pc, #40]	; (7ab4 <bt_rand+0x2c>)
{
    7a8c:	4604      	mov	r4, r0
    7a8e:	460d      	mov	r5, r1
	ret = tc_hmac_prng_generate(buf, len, &prng);
    7a90:	f00a faf9 	bl	12086 <tc_hmac_prng_generate>
	if (ret == TC_HMAC_PRNG_RESEED_REQ) {
    7a94:	1c43      	adds	r3, r0, #1
    7a96:	d107      	bne.n	7aa8 <bt_rand+0x20>
		ret = prng_reseed(&prng);
    7a98:	f7ff ff72 	bl	7980 <prng_reseed.constprop.0>
		if (ret) {
    7a9c:	b948      	cbnz	r0, 7ab2 <bt_rand+0x2a>
			return ret;
		}

		ret = tc_hmac_prng_generate(buf, len, &prng);
    7a9e:	4629      	mov	r1, r5
    7aa0:	4620      	mov	r0, r4
    7aa2:	4a04      	ldr	r2, [pc, #16]	; (7ab4 <bt_rand+0x2c>)
    7aa4:	f00a faef 	bl	12086 <tc_hmac_prng_generate>
	}

	if (ret == TC_CRYPTO_SUCCESS) {
		return 0;
    7aa8:	2801      	cmp	r0, #1
    7aaa:	bf14      	ite	ne
    7aac:	f06f 0004 	mvnne.w	r0, #4
    7ab0:	2000      	moveq	r0, #0
	}

	return -EIO;
}
    7ab2:	bd38      	pop	{r3, r4, r5, pc}
    7ab4:	20000ab0 	.word	0x20000ab0

00007ab8 <tx_free>:
	return bt_l2cap_update_conn_param(conn, param);
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
    7ab8:	2300      	movs	r3, #0
{
    7aba:	4601      	mov	r1, r0
	tx->user_data = NULL;
    7abc:	e9c0 3301 	strd	r3, r3, [r0, #4]
	tx->pending_no_cb = 0U;
    7ac0:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
    7ac2:	4801      	ldr	r0, [pc, #4]	; (7ac8 <tx_free+0x10>)
    7ac4:	f00d b9e5 	b.w	14e92 <k_queue_append>
    7ac8:	200006b8 	.word	0x200006b8

00007acc <notify_connected>:
{
    7acc:	b538      	push	{r3, r4, r5, lr}
    7ace:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    7ad0:	4b08      	ldr	r3, [pc, #32]	; (7af4 <notify_connected+0x28>)
    7ad2:	681d      	ldr	r5, [r3, #0]
    7ad4:	7b21      	ldrb	r1, [r4, #12]
    7ad6:	b92d      	cbnz	r5, 7ae4 <notify_connected+0x18>
	if (!conn->err) {
    7ad8:	b951      	cbnz	r1, 7af0 <notify_connected+0x24>
		bt_gatt_connected(conn);
    7ada:	4620      	mov	r0, r4
}
    7adc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_gatt_connected(conn);
    7ae0:	f003 b984 	b.w	adec <bt_gatt_connected>
		if (cb->connected) {
    7ae4:	682b      	ldr	r3, [r5, #0]
    7ae6:	b10b      	cbz	r3, 7aec <notify_connected+0x20>
			cb->connected(conn, conn->err);
    7ae8:	4620      	mov	r0, r4
    7aea:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    7aec:	69ad      	ldr	r5, [r5, #24]
    7aee:	e7f1      	b.n	7ad4 <notify_connected+0x8>
}
    7af0:	bd38      	pop	{r3, r4, r5, pc}
    7af2:	bf00      	nop
    7af4:	200019bc 	.word	0x200019bc

00007af8 <send_frag>:
	return bt_send(buf);
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, uint8_t flags,
		      bool always_consume)
{
    7af8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7afc:	4604      	mov	r4, r0
    7afe:	460e      	mov	r6, r1
    7b00:	4691      	mov	r9, r2
    7b02:	461f      	mov	r7, r3
	struct bt_conn_tx *tx = tx_data(buf)->tx;
    7b04:	694d      	ldr	r5, [r1, #20]
	return z_impl_k_sem_take(sem, timeout);
    7b06:	f04f 33ff 	mov.w	r3, #4294967295
    7b0a:	f04f 32ff 	mov.w	r2, #4294967295
    7b0e:	4844      	ldr	r0, [pc, #272]	; (7c20 <send_frag+0x128>)
    7b10:	f007 fe58 	bl	f7c4 <z_impl_k_sem_take>

	/* Wait until the controller can accept ACL packets */
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);

	/* Check for disconnection while waiting for pkts_sem */
	if (conn->state != BT_CONN_CONNECTED) {
    7b14:	7b63      	ldrb	r3, [r4, #13]
    7b16:	2b07      	cmp	r3, #7
    7b18:	d151      	bne.n	7bbe <send_frag+0xc6>
	__asm__ volatile(
    7b1a:	f04f 0320 	mov.w	r3, #32
    7b1e:	f3ef 8211 	mrs	r2, BASEPRI
    7b22:	f383 8811 	msr	BASEPRI, r3
    7b26:	f3bf 8f6f 	isb	sy
		goto fail;
	}

	/* Add to pending, it must be done before bt_buf_set_type */
	key = irq_lock();
	if (tx) {
    7b2a:	2d00      	cmp	r5, #0
    7b2c:	d059      	beq.n	7be2 <send_frag+0xea>
	parent->next = child;
    7b2e:	2300      	movs	r3, #0
    7b30:	602b      	str	r3, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
    7b32:	69a3      	ldr	r3, [r4, #24]
    7b34:	2b00      	cmp	r3, #0
    7b36:	d151      	bne.n	7bdc <send_frag+0xe4>
	list->head = node;
    7b38:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
    7b3c:	f382 8811 	msr	BASEPRI, r2
    7b40:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
    7b44:	2104      	movs	r1, #4
    7b46:	f106 0008 	add.w	r0, r6, #8
    7b4a:	f00c fa9e 	bl	1408a <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    7b4e:	8823      	ldrh	r3, [r4, #0]
    7b50:	f009 09fd 	and.w	r9, r9, #253	; 0xfd
    7b54:	ea43 3909 	orr.w	r9, r3, r9, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    7b58:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    7b5a:	f8a0 9000 	strh.w	r9, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    7b5e:	3b04      	subs	r3, #4
    7b60:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    7b62:	2302      	movs	r3, #2
	return bt_send(buf);
    7b64:	4630      	mov	r0, r6
    7b66:	7533      	strb	r3, [r6, #20]
    7b68:	f7fe fcd2 	bl	6510 <bt_send>
		err = send_iso(conn, buf, flags);
	} else {
		err = send_acl(conn, buf, flags);
	}

	if (err) {
    7b6c:	4601      	mov	r1, r0
    7b6e:	2800      	cmp	r0, #0
    7b70:	d053      	beq.n	7c1a <send_frag+0x122>
    7b72:	4b2c      	ldr	r3, [pc, #176]	; (7c24 <send_frag+0x12c>)
    7b74:	4a2c      	ldr	r2, [pc, #176]	; (7c28 <send_frag+0x130>)
		BT_ERR("Unable to send to driver (err %d)", err);
    7b76:	482d      	ldr	r0, [pc, #180]	; (7c2c <send_frag+0x134>)
    7b78:	1ad2      	subs	r2, r2, r3
    7b7a:	08d2      	lsrs	r2, r2, #3
    7b7c:	0192      	lsls	r2, r2, #6
    7b7e:	f042 0201 	orr.w	r2, r2, #1
    7b82:	f009 f8a4 	bl	10cce <log_1>
	__asm__ volatile(
    7b86:	f04f 0320 	mov.w	r3, #32
    7b8a:	f3ef 8111 	mrs	r1, BASEPRI
    7b8e:	f383 8811 	msr	BASEPRI, r3
    7b92:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		/* Roll back the pending TX info */
		if (tx) {
    7b96:	2d00      	cmp	r5, #0
    7b98:	d039      	beq.n	7c0e <send_frag+0x116>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    7b9a:	2200      	movs	r2, #0
    7b9c:	6963      	ldr	r3, [r4, #20]
    7b9e:	b153      	cbz	r3, 7bb6 <send_frag+0xbe>
    7ba0:	429d      	cmp	r5, r3
    7ba2:	d131      	bne.n	7c08 <send_frag+0x110>
Z_GENLIST_REMOVE(slist, snode)
    7ba4:	682b      	ldr	r3, [r5, #0]
    7ba6:	bb4a      	cbnz	r2, 7bfc <send_frag+0x104>
    7ba8:	69a2      	ldr	r2, [r4, #24]
	list->head = node;
    7baa:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
    7bac:	4295      	cmp	r5, r2
    7bae:	d100      	bne.n	7bb2 <send_frag+0xba>
	list->tail = node;
    7bb0:	61a3      	str	r3, [r4, #24]
	parent->next = child;
    7bb2:	2300      	movs	r3, #0
    7bb4:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
    7bb6:	f381 8811 	msr	BASEPRI, r1
    7bba:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
    7bbe:	4818      	ldr	r0, [pc, #96]	; (7c20 <send_frag+0x128>)
    7bc0:	f007 fdda 	bl	f778 <z_impl_k_sem_give>

	return true;

fail:
	k_sem_give(bt_conn_get_pkts(conn));
	if (tx) {
    7bc4:	b115      	cbz	r5, 7bcc <send_frag+0xd4>
		tx_free(tx);
    7bc6:	4628      	mov	r0, r5
    7bc8:	f7ff ff76 	bl	7ab8 <tx_free>
	}

	if (always_consume) {
    7bcc:	b11f      	cbz	r7, 7bd6 <send_frag+0xde>
		net_buf_unref(buf);
    7bce:	4630      	mov	r0, r6
    7bd0:	f005 fb3a 	bl	d248 <net_buf_unref>
	}
	return false;
    7bd4:	2700      	movs	r7, #0
}
    7bd6:	4638      	mov	r0, r7
    7bd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7bdc:	601d      	str	r5, [r3, #0]
	list->tail = node;
    7bde:	61a5      	str	r5, [r4, #24]
}
    7be0:	e7ac      	b.n	7b3c <send_frag+0x44>
		tail_tx = (void *)sys_slist_peek_tail(&conn->tx_pending);
    7be2:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
    7be4:	b133      	cbz	r3, 7bf4 <send_frag+0xfc>
			pending_no_cb = &tail_tx->pending_no_cb;
    7be6:	f103 080c 	add.w	r8, r3, #12
    7bea:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
    7bec:	3301      	adds	r3, #1
    7bee:	f8c8 3000 	str.w	r3, [r8]
    7bf2:	e7a3      	b.n	7b3c <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
    7bf4:	69e3      	ldr	r3, [r4, #28]
    7bf6:	f104 081c 	add.w	r8, r4, #28
    7bfa:	e7f7      	b.n	7bec <send_frag+0xf4>
	parent->next = child;
    7bfc:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    7bfe:	69a3      	ldr	r3, [r4, #24]
    7c00:	429d      	cmp	r5, r3
	list->tail = node;
    7c02:	bf08      	it	eq
    7c04:	61a2      	streq	r2, [r4, #24]
}
    7c06:	e7d4      	b.n	7bb2 <send_frag+0xba>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    7c08:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    7c0a:	681b      	ldr	r3, [r3, #0]
    7c0c:	e7c7      	b.n	7b9e <send_frag+0xa6>
			(*pending_no_cb)--;
    7c0e:	f8d8 3000 	ldr.w	r3, [r8]
    7c12:	3b01      	subs	r3, #1
    7c14:	f8c8 3000 	str.w	r3, [r8]
    7c18:	e7cd      	b.n	7bb6 <send_frag+0xbe>
	return true;
    7c1a:	2701      	movs	r7, #1
    7c1c:	e7db      	b.n	7bd6 <send_frag+0xde>
    7c1e:	bf00      	nop
    7c20:	200000c8 	.word	0x200000c8
    7c24:	00015a00 	.word	0x00015a00
    7c28:	00015a10 	.word	0x00015a10
    7c2c:	00017b2e 	.word	0x00017b2e

00007c30 <bt_conn_get_pkts>:
}
    7c30:	4800      	ldr	r0, [pc, #0]	; (7c34 <bt_conn_get_pkts+0x4>)
    7c32:	4770      	bx	lr
    7c34:	200000c8 	.word	0x200000c8

00007c38 <notify_le_param_updated>:
{
    7c38:	b570      	push	{r4, r5, r6, lr}
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    7c3a:	1d03      	adds	r3, r0, #4
{
    7c3c:	4604      	mov	r4, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    7c3e:	e8d3 2faf 	lda	r2, [r3]
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    7c42:	0592      	lsls	r2, r2, #22
    7c44:	d515      	bpl.n	7c72 <notify_le_param_updated+0x3a>
	    conn->le.interval >= conn->le.interval_min &&
    7c46:	f8b0 209e 	ldrh.w	r2, [r0, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    7c4a:	f8b0 10a0 	ldrh.w	r1, [r0, #160]	; 0xa0
    7c4e:	4291      	cmp	r1, r2
    7c50:	d80f      	bhi.n	7c72 <notify_le_param_updated+0x3a>
	    conn->le.interval >= conn->le.interval_min &&
    7c52:	f8b0 10a2 	ldrh.w	r1, [r0, #162]	; 0xa2
    7c56:	4291      	cmp	r1, r2
    7c58:	d30b      	bcc.n	7c72 <notify_le_param_updated+0x3a>
	    conn->le.latency == conn->le.pending_latency &&
    7c5a:	e9d0 1229 	ldrd	r1, r2, [r0, #164]	; 0xa4
    7c5e:	4291      	cmp	r1, r2
    7c60:	d107      	bne.n	7c72 <notify_le_param_updated+0x3a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    7c62:	e8d3 2fef 	ldaex	r2, [r3]
    7c66:	f422 7200 	bic.w	r2, r2, #512	; 0x200
    7c6a:	e8c3 2fe1 	stlex	r1, r2, [r3]
    7c6e:	2900      	cmp	r1, #0
    7c70:	d1f7      	bne.n	7c62 <notify_le_param_updated+0x2a>
	for (cb = callback_list; cb; cb = cb->_next) {
    7c72:	4b08      	ldr	r3, [pc, #32]	; (7c94 <notify_le_param_updated+0x5c>)
    7c74:	681d      	ldr	r5, [r3, #0]
    7c76:	b905      	cbnz	r5, 7c7a <notify_le_param_updated+0x42>
}
    7c78:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_param_updated) {
    7c7a:	68ee      	ldr	r6, [r5, #12]
    7c7c:	b13e      	cbz	r6, 7c8e <notify_le_param_updated+0x56>
			cb->le_param_updated(conn, conn->le.interval,
    7c7e:	4620      	mov	r0, r4
    7c80:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    7c84:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
    7c88:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
    7c8c:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
    7c8e:	69ad      	ldr	r5, [r5, #24]
    7c90:	e7f1      	b.n	7c76 <notify_le_param_updated+0x3e>
    7c92:	bf00      	nop
    7c94:	200019bc 	.word	0x200019bc

00007c98 <le_param_req>:
{
    7c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7c9a:	4607      	mov	r7, r0
	if (!bt_le_conn_params_valid(param)) {
    7c9c:	4608      	mov	r0, r1
{
    7c9e:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    7ca0:	f00a fd38 	bl	12714 <bt_le_conn_params_valid>
    7ca4:	4604      	mov	r4, r0
    7ca6:	b910      	cbnz	r0, 7cae <le_param_req+0x16>
		return false;
    7ca8:	2400      	movs	r4, #0
}
    7caa:	4620      	mov	r0, r4
    7cac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
    7cae:	4b09      	ldr	r3, [pc, #36]	; (7cd4 <le_param_req+0x3c>)
    7cb0:	681e      	ldr	r6, [r3, #0]
    7cb2:	2e00      	cmp	r6, #0
    7cb4:	d0f9      	beq.n	7caa <le_param_req+0x12>
		if (!cb->le_param_req) {
    7cb6:	68b3      	ldr	r3, [r6, #8]
    7cb8:	b90b      	cbnz	r3, 7cbe <le_param_req+0x26>
	for (cb = callback_list; cb; cb = cb->_next) {
    7cba:	69b6      	ldr	r6, [r6, #24]
    7cbc:	e7f9      	b.n	7cb2 <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
    7cbe:	4629      	mov	r1, r5
    7cc0:	4638      	mov	r0, r7
    7cc2:	4798      	blx	r3
    7cc4:	2800      	cmp	r0, #0
    7cc6:	d0ef      	beq.n	7ca8 <le_param_req+0x10>
		if (!bt_le_conn_params_valid(param)) {
    7cc8:	4628      	mov	r0, r5
    7cca:	f00a fd23 	bl	12714 <bt_le_conn_params_valid>
    7cce:	2800      	cmp	r0, #0
    7cd0:	d1f3      	bne.n	7cba <le_param_req+0x22>
    7cd2:	e7e9      	b.n	7ca8 <le_param_req+0x10>
    7cd4:	200019bc 	.word	0x200019bc

00007cd8 <bt_conn_identity_resolved>:
{
    7cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->role == BT_HCI_ROLE_MASTER) {
    7cda:	78c3      	ldrb	r3, [r0, #3]
{
    7cdc:	4604      	mov	r4, r0
	if (conn->role == BT_HCI_ROLE_MASTER) {
    7cde:	b93b      	cbnz	r3, 7cf0 <bt_conn_identity_resolved+0x18>
		rpa = &conn->le.resp_addr;
    7ce0:	f100 0696 	add.w	r6, r0, #150	; 0x96
	for (cb = callback_list; cb; cb = cb->_next) {
    7ce4:	4b08      	ldr	r3, [pc, #32]	; (7d08 <bt_conn_identity_resolved+0x30>)
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    7ce6:	f104 0788 	add.w	r7, r4, #136	; 0x88
	for (cb = callback_list; cb; cb = cb->_next) {
    7cea:	681d      	ldr	r5, [r3, #0]
    7cec:	b91d      	cbnz	r5, 7cf6 <bt_conn_identity_resolved+0x1e>
}
    7cee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rpa = &conn->le.init_addr;
    7cf0:	f100 068f 	add.w	r6, r0, #143	; 0x8f
    7cf4:	e7f6      	b.n	7ce4 <bt_conn_identity_resolved+0xc>
		if (cb->identity_resolved) {
    7cf6:	692b      	ldr	r3, [r5, #16]
    7cf8:	b11b      	cbz	r3, 7d02 <bt_conn_identity_resolved+0x2a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    7cfa:	463a      	mov	r2, r7
    7cfc:	4631      	mov	r1, r6
    7cfe:	4620      	mov	r0, r4
    7d00:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    7d02:	69ad      	ldr	r5, [r5, #24]
    7d04:	e7f2      	b.n	7cec <bt_conn_identity_resolved+0x14>
    7d06:	bf00      	nop
    7d08:	200019bc 	.word	0x200019bc

00007d0c <bt_conn_security_changed>:
{
    7d0c:	b570      	push	{r4, r5, r6, lr}
	conn->required_sec_level = conn->sec_level;
    7d0e:	7a43      	ldrb	r3, [r0, #9]
{
    7d10:	4604      	mov	r4, r0
	conn->required_sec_level = conn->sec_level;
    7d12:	7283      	strb	r3, [r0, #10]
{
    7d14:	4615      	mov	r5, r2
	bt_l2cap_security_changed(conn, hci_err);
    7d16:	f00a ff0d 	bl	12b34 <bt_l2cap_security_changed>
	for (cb = callback_list; cb; cb = cb->_next) {
    7d1a:	4b0d      	ldr	r3, [pc, #52]	; (7d50 <bt_conn_security_changed+0x44>)
    7d1c:	681e      	ldr	r6, [r3, #0]
    7d1e:	b96e      	cbnz	r6, 7d3c <bt_conn_security_changed+0x30>
	if (!err && conn->sec_level >= BT_SECURITY_L2) {
    7d20:	b9a5      	cbnz	r5, 7d4c <bt_conn_security_changed+0x40>
    7d22:	7a63      	ldrb	r3, [r4, #9]
    7d24:	2b01      	cmp	r3, #1
    7d26:	d911      	bls.n	7d4c <bt_conn_security_changed+0x40>
		if (conn->type == BT_CONN_TYPE_LE) {
    7d28:	78a3      	ldrb	r3, [r4, #2]
    7d2a:	2b01      	cmp	r3, #1
    7d2c:	d10e      	bne.n	7d4c <bt_conn_security_changed+0x40>
			bt_keys_update_usage(conn->id, bt_conn_get_dst(conn));
    7d2e:	7a20      	ldrb	r0, [r4, #8]
    7d30:	f104 0188 	add.w	r1, r4, #136	; 0x88
}
    7d34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_keys_update_usage(conn->id, bt_conn_get_dst(conn));
    7d38:	f005 b9b6 	b.w	d0a8 <bt_keys_update_usage>
		if (cb->security_changed) {
    7d3c:	6973      	ldr	r3, [r6, #20]
    7d3e:	b11b      	cbz	r3, 7d48 <bt_conn_security_changed+0x3c>
			cb->security_changed(conn, conn->sec_level, err);
    7d40:	462a      	mov	r2, r5
    7d42:	4620      	mov	r0, r4
    7d44:	7a61      	ldrb	r1, [r4, #9]
    7d46:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    7d48:	69b6      	ldr	r6, [r6, #24]
    7d4a:	e7e8      	b.n	7d1e <bt_conn_security_changed+0x12>
}
    7d4c:	bd70      	pop	{r4, r5, r6, pc}
    7d4e:	bf00      	nop
    7d50:	200019bc 	.word	0x200019bc

00007d54 <bt_conn_cb_register>:
	cb->_next = callback_list;
    7d54:	4b02      	ldr	r3, [pc, #8]	; (7d60 <bt_conn_cb_register+0xc>)
    7d56:	681a      	ldr	r2, [r3, #0]
	callback_list = cb;
    7d58:	6018      	str	r0, [r3, #0]
	cb->_next = callback_list;
    7d5a:	6182      	str	r2, [r0, #24]
}
    7d5c:	4770      	bx	lr
    7d5e:	bf00      	nop
    7d60:	200019bc 	.word	0x200019bc

00007d64 <conn_cleanup>:

static struct k_poll_signal conn_change =
		K_POLL_SIGNAL_INITIALIZER(conn_change);

static void conn_cleanup(struct bt_conn *conn)
{
    7d64:	b570      	push	{r4, r5, r6, lr}
    7d66:	4604      	mov	r4, r0
	struct net_buf *buf;

	/* Give back any allocated buffers */
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
    7d68:	f100 0634 	add.w	r6, r0, #52	; 0x34
    7d6c:	2200      	movs	r2, #0
    7d6e:	2300      	movs	r3, #0
    7d70:	4630      	mov	r0, r6
    7d72:	f00c f922 	bl	13fba <net_buf_get>
    7d76:	4605      	mov	r5, r0
    7d78:	b958      	cbnz	r0, 7d92 <conn_cleanup+0x2e>
	}

	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);

	bt_conn_reset_rx_state(conn);
    7d7a:	4620      	mov	r0, r4
    7d7c:	f00a fdf6 	bl	1296c <bt_conn_reset_rx_state>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    7d80:	f104 0158 	add.w	r1, r4, #88	; 0x58
    7d84:	2200      	movs	r2, #0

	k_delayed_work_submit(&conn->deferred_work, K_NO_WAIT);
}
    7d86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7d8a:	2300      	movs	r3, #0
    7d8c:	4805      	ldr	r0, [pc, #20]	; (7da4 <conn_cleanup+0x40>)
    7d8e:	f007 be4f 	b.w	fa30 <k_delayed_work_submit_to_queue>
		if (tx_data(buf)->tx) {
    7d92:	6968      	ldr	r0, [r5, #20]
    7d94:	b108      	cbz	r0, 7d9a <conn_cleanup+0x36>
			tx_free(tx_data(buf)->tx);
    7d96:	f7ff fe8f 	bl	7ab8 <tx_free>
		net_buf_unref(buf);
    7d9a:	4628      	mov	r0, r5
    7d9c:	f005 fa54 	bl	d248 <net_buf_unref>
    7da0:	e7e4      	b.n	7d6c <conn_cleanup+0x8>
    7da2:	bf00      	nop
    7da4:	200010d0 	.word	0x200010d0

00007da8 <bt_conn_recv>:
{
    7da8:	b570      	push	{r4, r5, r6, lr}
    7daa:	4616      	mov	r6, r2
    7dac:	4604      	mov	r4, r0
    7dae:	460d      	mov	r5, r1
	tx_notify(conn);
    7db0:	f00a fd63 	bl	1287a <tx_notify>
	switch (flags) {
    7db4:	2e01      	cmp	r6, #1
    7db6:	d02e      	beq.n	7e16 <bt_conn_recv+0x6e>
    7db8:	2e02      	cmp	r6, #2
    7dba:	d15b      	bne.n	7e74 <bt_conn_recv+0xcc>
		if (conn->rx) {
    7dbc:	6923      	ldr	r3, [r4, #16]
    7dbe:	b163      	cbz	r3, 7dda <bt_conn_recv+0x32>
    7dc0:	4b37      	ldr	r3, [pc, #220]	; (7ea0 <bt_conn_recv+0xf8>)
    7dc2:	4938      	ldr	r1, [pc, #224]	; (7ea4 <bt_conn_recv+0xfc>)
			BT_ERR("Unexpected first L2CAP frame");
    7dc4:	4838      	ldr	r0, [pc, #224]	; (7ea8 <bt_conn_recv+0x100>)
    7dc6:	1ac9      	subs	r1, r1, r3
    7dc8:	08c9      	lsrs	r1, r1, #3
    7dca:	0189      	lsls	r1, r1, #6
    7dcc:	f041 0101 	orr.w	r1, r1, #1
    7dd0:	f008 ff70 	bl	10cb4 <log_0>
			bt_conn_reset_rx_state(conn);
    7dd4:	4620      	mov	r0, r4
    7dd6:	f00a fdc9 	bl	1296c <bt_conn_reset_rx_state>
		conn->rx = buf;
    7dda:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
    7ddc:	6923      	ldr	r3, [r4, #16]
    7dde:	8999      	ldrh	r1, [r3, #12]
    7de0:	2901      	cmp	r1, #1
    7de2:	d95b      	bls.n	7e9c <bt_conn_recv+0xf4>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
    7de4:	6898      	ldr	r0, [r3, #8]
	return ((uint16_t)src[1] << 8) | src[0];
    7de6:	7845      	ldrb	r5, [r0, #1]
    7de8:	7802      	ldrb	r2, [r0, #0]
    7dea:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
    7dee:	3204      	adds	r2, #4
    7df0:	b292      	uxth	r2, r2
	if (conn->rx->len < acl_total_len) {
    7df2:	428a      	cmp	r2, r1
    7df4:	d852      	bhi.n	7e9c <bt_conn_recv+0xf4>
	if (conn->rx->len > acl_total_len) {
    7df6:	d249      	bcs.n	7e8c <bt_conn_recv+0xe4>
    7df8:	4829      	ldr	r0, [pc, #164]	; (7ea0 <bt_conn_recv+0xf8>)
    7dfa:	4b2a      	ldr	r3, [pc, #168]	; (7ea4 <bt_conn_recv+0xfc>)
    7dfc:	1a1b      	subs	r3, r3, r0
    7dfe:	08db      	lsrs	r3, r3, #3
		BT_ERR("ACL len mismatch (%u > %u)",
    7e00:	019b      	lsls	r3, r3, #6
    7e02:	482a      	ldr	r0, [pc, #168]	; (7eac <bt_conn_recv+0x104>)
    7e04:	f043 0301 	orr.w	r3, r3, #1
    7e08:	f008 ff75 	bl	10cf6 <log_2>
		bt_conn_reset_rx_state(conn);
    7e0c:	4620      	mov	r0, r4
}
    7e0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
    7e12:	f00a bdab 	b.w	1296c <bt_conn_reset_rx_state>
		if (!conn->rx) {
    7e16:	6920      	ldr	r0, [r4, #16]
    7e18:	b968      	cbnz	r0, 7e36 <bt_conn_recv+0x8e>
    7e1a:	4922      	ldr	r1, [pc, #136]	; (7ea4 <bt_conn_recv+0xfc>)
    7e1c:	4b20      	ldr	r3, [pc, #128]	; (7ea0 <bt_conn_recv+0xf8>)
			BT_ERR("Unexpected L2CAP continuation");
    7e1e:	4824      	ldr	r0, [pc, #144]	; (7eb0 <bt_conn_recv+0x108>)
    7e20:	1ac9      	subs	r1, r1, r3
    7e22:	08c9      	lsrs	r1, r1, #3
    7e24:	0189      	lsls	r1, r1, #6
    7e26:	f041 0101 	orr.w	r1, r1, #1
			BT_ERR("Not enough buffer space for L2CAP data");
    7e2a:	f008 ff43 	bl	10cb4 <log_0>
			bt_conn_reset_rx_state(conn);
    7e2e:	4620      	mov	r0, r4
    7e30:	f00a fd9c 	bl	1296c <bt_conn_reset_rx_state>
    7e34:	e001      	b.n	7e3a <bt_conn_recv+0x92>
		if (!buf->len) {
    7e36:	89ae      	ldrh	r6, [r5, #12]
    7e38:	b926      	cbnz	r6, 7e44 <bt_conn_recv+0x9c>
			net_buf_unref(buf);
    7e3a:	4628      	mov	r0, r5
}
    7e3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
    7e40:	f005 ba02 	b.w	d248 <net_buf_unref>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
    7e44:	3008      	adds	r0, #8
    7e46:	f00c f94d 	bl	140e4 <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
    7e4a:	4286      	cmp	r6, r0
    7e4c:	d908      	bls.n	7e60 <bt_conn_recv+0xb8>
    7e4e:	4915      	ldr	r1, [pc, #84]	; (7ea4 <bt_conn_recv+0xfc>)
    7e50:	4b13      	ldr	r3, [pc, #76]	; (7ea0 <bt_conn_recv+0xf8>)
			BT_ERR("Not enough buffer space for L2CAP data");
    7e52:	4818      	ldr	r0, [pc, #96]	; (7eb4 <bt_conn_recv+0x10c>)
    7e54:	1ac9      	subs	r1, r1, r3
    7e56:	08c9      	lsrs	r1, r1, #3
    7e58:	0189      	lsls	r1, r1, #6
    7e5a:	f041 0101 	orr.w	r1, r1, #1
    7e5e:	e7e4      	b.n	7e2a <bt_conn_recv+0x82>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    7e60:	6920      	ldr	r0, [r4, #16]
    7e62:	89aa      	ldrh	r2, [r5, #12]
    7e64:	68a9      	ldr	r1, [r5, #8]
    7e66:	3008      	adds	r0, #8
    7e68:	f00c f8fe 	bl	14068 <net_buf_simple_add_mem>
		net_buf_unref(buf);
    7e6c:	4628      	mov	r0, r5
    7e6e:	f005 f9eb 	bl	d248 <net_buf_unref>
		break;
    7e72:	e7b3      	b.n	7ddc <bt_conn_recv+0x34>
    7e74:	4a0a      	ldr	r2, [pc, #40]	; (7ea0 <bt_conn_recv+0xf8>)
    7e76:	4b0b      	ldr	r3, [pc, #44]	; (7ea4 <bt_conn_recv+0xfc>)
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
    7e78:	4631      	mov	r1, r6
    7e7a:	1a9b      	subs	r3, r3, r2
    7e7c:	08db      	lsrs	r3, r3, #3
    7e7e:	019b      	lsls	r3, r3, #6
    7e80:	480d      	ldr	r0, [pc, #52]	; (7eb8 <bt_conn_recv+0x110>)
    7e82:	f043 0201 	orr.w	r2, r3, #1
    7e86:	f008 ff22 	bl	10cce <log_1>
		bt_conn_reset_rx_state(conn);
    7e8a:	e7d0      	b.n	7e2e <bt_conn_recv+0x86>
	conn->rx = NULL;
    7e8c:	2200      	movs	r2, #0
	bt_l2cap_recv(conn, buf);
    7e8e:	4620      	mov	r0, r4
	conn->rx = NULL;
    7e90:	6122      	str	r2, [r4, #16]
	bt_l2cap_recv(conn, buf);
    7e92:	4619      	mov	r1, r3
}
    7e94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf);
    7e98:	f000 bd1c 	b.w	88d4 <bt_l2cap_recv>
}
    7e9c:	bd70      	pop	{r4, r5, r6, pc}
    7e9e:	bf00      	nop
    7ea0:	00015a00 	.word	0x00015a00
    7ea4:	00015a10 	.word	0x00015a10
    7ea8:	000180c6 	.word	0x000180c6
    7eac:	00018146 	.word	0x00018146
    7eb0:	000180e3 	.word	0x000180e3
    7eb4:	00018101 	.word	0x00018101
    7eb8:	00018128 	.word	0x00018128

00007ebc <bt_conn_send_cb>:
{
    7ebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7ec0:	4698      	mov	r8, r3
	if (conn->state != BT_CONN_CONNECTED) {
    7ec2:	7b43      	ldrb	r3, [r0, #13]
{
    7ec4:	4606      	mov	r6, r0
	if (conn->state != BT_CONN_CONNECTED) {
    7ec6:	2b07      	cmp	r3, #7
{
    7ec8:	460d      	mov	r5, r1
    7eca:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
    7ecc:	d00f      	beq.n	7eee <bt_conn_send_cb+0x32>
    7ece:	4b2a      	ldr	r3, [pc, #168]	; (7f78 <bt_conn_send_cb+0xbc>)
    7ed0:	492a      	ldr	r1, [pc, #168]	; (7f7c <bt_conn_send_cb+0xc0>)
		BT_ERR("not connected!");
    7ed2:	482b      	ldr	r0, [pc, #172]	; (7f80 <bt_conn_send_cb+0xc4>)
    7ed4:	1ac9      	subs	r1, r1, r3
    7ed6:	08c9      	lsrs	r1, r1, #3
    7ed8:	0189      	lsls	r1, r1, #6
    7eda:	f041 0101 	orr.w	r1, r1, #1
    7ede:	f008 fee9 	bl	10cb4 <log_0>
		net_buf_unref(buf);
    7ee2:	4628      	mov	r0, r5
    7ee4:	f005 f9b0 	bl	d248 <net_buf_unref>
			return -ENOTCONN;
    7ee8:	f06f 0038 	mvn.w	r0, #56	; 0x38
    7eec:	e020      	b.n	7f30 <bt_conn_send_cb+0x74>
	if (cb) {
    7eee:	2a00      	cmp	r2, #0
    7ef0:	d040      	beq.n	7f74 <bt_conn_send_cb+0xb8>
	return z_impl_k_current_get();
    7ef2:	f007 fc3b 	bl	f76c <z_impl_k_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
    7ef6:	4b23      	ldr	r3, [pc, #140]	; (7f84 <bt_conn_send_cb+0xc8>)
    7ef8:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
    7efa:	4823      	ldr	r0, [pc, #140]	; (7f88 <bt_conn_send_cb+0xcc>)
    7efc:	bf07      	ittee	eq
    7efe:	2200      	moveq	r2, #0
    7f00:	2300      	moveq	r3, #0
    7f02:	f04f 32ff 	movne.w	r2, #4294967295
    7f06:	f04f 33ff 	movne.w	r3, #4294967295
    7f0a:	f007 f863 	bl	efd4 <z_impl_k_queue_get>
    7f0e:	4604      	mov	r4, r0
		if (!tx) {
    7f10:	b980      	cbnz	r0, 7f34 <bt_conn_send_cb+0x78>
    7f12:	4b19      	ldr	r3, [pc, #100]	; (7f78 <bt_conn_send_cb+0xbc>)
    7f14:	4919      	ldr	r1, [pc, #100]	; (7f7c <bt_conn_send_cb+0xc0>)
			BT_ERR("Unable to allocate TX context");
    7f16:	481d      	ldr	r0, [pc, #116]	; (7f8c <bt_conn_send_cb+0xd0>)
    7f18:	1ac9      	subs	r1, r1, r3
    7f1a:	08c9      	lsrs	r1, r1, #3
    7f1c:	0189      	lsls	r1, r1, #6
    7f1e:	f041 0101 	orr.w	r1, r1, #1
    7f22:	f008 fec7 	bl	10cb4 <log_0>
			net_buf_unref(buf);
    7f26:	4628      	mov	r0, r5
    7f28:	f005 f98e 	bl	d248 <net_buf_unref>
			return -ENOBUFS;
    7f2c:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
    7f30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->state != BT_CONN_CONNECTED) {
    7f34:	7b73      	ldrb	r3, [r6, #13]
    7f36:	2b07      	cmp	r3, #7
    7f38:	d010      	beq.n	7f5c <bt_conn_send_cb+0xa0>
    7f3a:	4b0f      	ldr	r3, [pc, #60]	; (7f78 <bt_conn_send_cb+0xbc>)
    7f3c:	490f      	ldr	r1, [pc, #60]	; (7f7c <bt_conn_send_cb+0xc0>)
			BT_WARN("Disconnected while allocating context");
    7f3e:	4814      	ldr	r0, [pc, #80]	; (7f90 <bt_conn_send_cb+0xd4>)
    7f40:	1ac9      	subs	r1, r1, r3
    7f42:	08c9      	lsrs	r1, r1, #3
    7f44:	0189      	lsls	r1, r1, #6
    7f46:	f041 0102 	orr.w	r1, r1, #2
    7f4a:	f008 feb3 	bl	10cb4 <log_0>
			net_buf_unref(buf);
    7f4e:	4628      	mov	r0, r5
    7f50:	f005 f97a 	bl	d248 <net_buf_unref>
			tx_free(tx);
    7f54:	4620      	mov	r0, r4
    7f56:	f7ff fdaf 	bl	7ab8 <tx_free>
    7f5a:	e7c5      	b.n	7ee8 <bt_conn_send_cb+0x2c>
		tx->pending_no_cb = 0U;
    7f5c:	2300      	movs	r3, #0
		tx->user_data = user_data;
    7f5e:	e9c0 7801 	strd	r7, r8, [r0, #4]
		tx->pending_no_cb = 0U;
    7f62:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
    7f64:	6168      	str	r0, [r5, #20]
	net_buf_put(&conn->tx_queue, buf);
    7f66:	f106 0034 	add.w	r0, r6, #52	; 0x34
    7f6a:	4629      	mov	r1, r5
    7f6c:	f00c f843 	bl	13ff6 <net_buf_put>
	return 0;
    7f70:	2000      	movs	r0, #0
    7f72:	e7dd      	b.n	7f30 <bt_conn_send_cb+0x74>
		tx_data(buf)->tx = NULL;
    7f74:	614a      	str	r2, [r1, #20]
    7f76:	e7f6      	b.n	7f66 <bt_conn_send_cb+0xaa>
    7f78:	00015a00 	.word	0x00015a00
    7f7c:	00015a10 	.word	0x00015a10
    7f80:	00018161 	.word	0x00018161
    7f84:	200010e8 	.word	0x200010e8
    7f88:	200006b8 	.word	0x200006b8
    7f8c:	00018170 	.word	0x00018170
    7f90:	0001818e 	.word	0x0001818e

00007f94 <bt_conn_prepare_events>:

	return 0;
}

int bt_conn_prepare_events(struct k_poll_event events[])
{
    7f94:	b538      	push	{r3, r4, r5, lr}
	int i, ev_count = 0;
	struct bt_conn *conn;

	BT_DBG("");

	conn_change.signaled = 0U;
    7f96:	2200      	movs	r2, #0
{
    7f98:	4604      	mov	r4, r0
	conn_change.signaled = 0U;
    7f9a:	4b17      	ldr	r3, [pc, #92]	; (7ff8 <bt_conn_prepare_events+0x64>)
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    7f9c:	2101      	movs	r1, #1
	conn_change.signaled = 0U;
    7f9e:	609a      	str	r2, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    7fa0:	f00d fb1e 	bl	155e0 <k_poll_event_init>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    7fa4:	4b15      	ldr	r3, [pc, #84]	; (7ffc <bt_conn_prepare_events+0x68>)
			  K_POLL_MODE_NOTIFY_ONLY, &conn_change);

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		conn = &acl_conns[i];

		if (!conn_prepare_events(conn, &events[ev_count])) {
    7fa6:	f104 0014 	add.w	r0, r4, #20
    7faa:	f103 02b8 	add.w	r2, r3, #184	; 0xb8
    7fae:	e8d2 2faf 	lda	r2, [r2]
    7fb2:	4619      	mov	r1, r3
	if (!atomic_get(&conn->ref)) {
    7fb4:	b90a      	cbnz	r2, 7fba <bt_conn_prepare_events+0x26>
		conn_cleanup(conn);
    7fb6:	2001      	movs	r0, #1
		}
	}
#endif

	return ev_count;
}
    7fb8:	bd38      	pop	{r3, r4, r5, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
    7fba:	7b5a      	ldrb	r2, [r3, #13]
    7fbc:	b97a      	cbnz	r2, 7fde <bt_conn_prepare_events+0x4a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    7fbe:	1d1a      	adds	r2, r3, #4
    7fc0:	e8d2 5fef 	ldaex	r5, [r2]
    7fc4:	f025 0c40 	bic.w	ip, r5, #64	; 0x40
    7fc8:	e8c2 cfee 	stlex	lr, ip, [r2]
    7fcc:	f1be 0f00 	cmp.w	lr, #0
    7fd0:	d1f6      	bne.n	7fc0 <bt_conn_prepare_events+0x2c>
    7fd2:	066a      	lsls	r2, r5, #25
    7fd4:	d503      	bpl.n	7fde <bt_conn_prepare_events+0x4a>
		conn_cleanup(conn);
    7fd6:	4618      	mov	r0, r3
    7fd8:	f7ff fec4 	bl	7d64 <conn_cleanup>
    7fdc:	e7eb      	b.n	7fb6 <bt_conn_prepare_events+0x22>
	if (conn->state != BT_CONN_CONNECTED) {
    7fde:	7b4b      	ldrb	r3, [r1, #13]
    7fe0:	2b07      	cmp	r3, #7
    7fe2:	d1e8      	bne.n	7fb6 <bt_conn_prepare_events+0x22>
	k_poll_event_init(&events[0],
    7fe4:	4b06      	ldr	r3, [pc, #24]	; (8000 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE>)
    7fe6:	2200      	movs	r2, #0
    7fe8:	2104      	movs	r1, #4
    7fea:	f00d faf9 	bl	155e0 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
    7fee:	2301      	movs	r3, #1
			ev_count++;
    7ff0:	2002      	movs	r0, #2
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
    7ff2:	f884 3020 	strb.w	r3, [r4, #32]
	return ev_count;
    7ff6:	e7df      	b.n	7fb8 <bt_conn_prepare_events+0x24>
    7ff8:	20000324 	.word	0x20000324
    7ffc:	20000be8 	.word	0x20000be8
    8000:	20000c1c 	.word	0x20000c1c

00008004 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
    8004:	b570      	push	{r4, r5, r6, lr}
    8006:	4606      	mov	r6, r0
    8008:	460d      	mov	r5, r1
	conn = bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
    800a:	4811      	ldr	r0, [pc, #68]	; (8050 <bt_conn_add_le+0x4c>)
    800c:	2101      	movs	r1, #1
    800e:	f00a fc5a 	bl	128c6 <bt_conn_new>
	if (!conn) {
    8012:	4604      	mov	r4, r0
    8014:	b1c8      	cbz	r0, 804a <bt_conn_add_le+0x46>
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    8016:	2230      	movs	r2, #48	; 0x30
    8018:	2100      	movs	r1, #0
    801a:	3058      	adds	r0, #88	; 0x58
    801c:	f00a f9a8 	bl	12370 <memset>
    8020:	4b0c      	ldr	r3, [pc, #48]	; (8054 <bt_conn_add_le+0x50>)
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    8022:	4a0d      	ldr	r2, [pc, #52]	; (8058 <bt_conn_add_le+0x54>)
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    8024:	65e3      	str	r3, [r4, #92]	; 0x5c
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    8026:	2300      	movs	r3, #0
	memcpy(dst, src, sizeof(*dst));
    8028:	4629      	mov	r1, r5
    802a:	e9c4 230b 	strd	r2, r3, [r4, #44]	; 0x2c
    802e:	62a3      	str	r3, [r4, #40]	; 0x28
    8030:	2207      	movs	r2, #7

	if (!conn) {
		return NULL;
	}

	conn->id = id;
    8032:	7226      	strb	r6, [r4, #8]
    8034:	f104 0088 	add.w	r0, r4, #136	; 0x88
    8038:	f00a f96f 	bl	1231a <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
    803c:	2301      	movs	r3, #1
    803e:	7263      	strb	r3, [r4, #9]
	conn->required_sec_level = BT_SECURITY_L1;
    8040:	72a3      	strb	r3, [r4, #10]
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
    8042:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    8044:	4b05      	ldr	r3, [pc, #20]	; (805c <bt_conn_add_le+0x58>)
    8046:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
    804a:	4620      	mov	r0, r4
    804c:	bd70      	pop	{r4, r5, r6, pc}
    804e:	bf00      	nop
    8050:	20000be8 	.word	0x20000be8
    8054:	000083f9 	.word	0x000083f9
    8058:	000128c1 	.word	0x000128c1
    805c:	00280018 	.word	0x00280018

00008060 <bt_conn_lookup_handle>:
		break;
	}
}

struct bt_conn *bt_conn_lookup_handle(uint16_t handle)
{
    8060:	4602      	mov	r2, r0
	struct bt_conn *conn;

	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
    8062:	2101      	movs	r1, #1
{
    8064:	b508      	push	{r3, lr}
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
    8066:	4803      	ldr	r0, [pc, #12]	; (8074 <bt_conn_lookup_handle+0x14>)
    8068:	f00a fccb 	bl	12a02 <conn_lookup_handle>
		return conn;
	}
#endif

	return NULL;
}
    806c:	2800      	cmp	r0, #0
    806e:	bf38      	it	cc
    8070:	2000      	movcc	r0, #0
    8072:	bd08      	pop	{r3, pc}
    8074:	20000be8 	.word	0x20000be8

00008078 <bt_conn_set_state>:
{
    8078:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == state) {
    807a:	7b46      	ldrb	r6, [r0, #13]
{
    807c:	4604      	mov	r4, r0
	if (conn->state == state) {
    807e:	428e      	cmp	r6, r1
{
    8080:	460d      	mov	r5, r1
	if (conn->state == state) {
    8082:	d115      	bne.n	80b0 <bt_conn_set_state+0x38>
    8084:	4b68      	ldr	r3, [pc, #416]	; (8228 <bt_conn_set_state+0x1b0>)
    8086:	4a69      	ldr	r2, [pc, #420]	; (822c <bt_conn_set_state+0x1b4>)
    8088:	2e08      	cmp	r6, #8
    808a:	eba2 0203 	sub.w	r2, r2, r3
    808e:	bf98      	it	ls
    8090:	4b67      	ldrls	r3, [pc, #412]	; (8230 <bt_conn_set_state+0x1b8>)
    8092:	ea4f 02d2 	mov.w	r2, r2, lsr #3
		BT_WARN("no transition %s", state2str(state));
    8096:	ea4f 1282 	mov.w	r2, r2, lsl #6
    809a:	bf94      	ite	ls
    809c:	f853 1026 	ldrls.w	r1, [r3, r6, lsl #2]
    80a0:	4964      	ldrhi	r1, [pc, #400]	; (8234 <bt_conn_set_state+0x1bc>)
    80a2:	4865      	ldr	r0, [pc, #404]	; (8238 <bt_conn_set_state+0x1c0>)
    80a4:	f042 0202 	orr.w	r2, r2, #2
}
    80a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_WARN("no valid (%u) state was set", state);
    80ac:	f008 be0f 	b.w	10cce <log_1>
	conn->state = state;
    80b0:	7341      	strb	r1, [r0, #13]
	switch (old_state) {
    80b2:	b90e      	cbnz	r6, 80b8 <bt_conn_set_state+0x40>
		bt_conn_ref(conn);
    80b4:	f00a fc83 	bl	129be <bt_conn_ref>
	switch (conn->state) {
    80b8:	7b63      	ldrb	r3, [r4, #13]
    80ba:	2b08      	cmp	r3, #8
    80bc:	f200 80a9 	bhi.w	8212 <bt_conn_set_state+0x19a>
    80c0:	e8df f003 	tbb	[pc, r3]
    80c4:	b1b1053e 	.word	0xb1b1053e
    80c8:	1cb1b1b1 	.word	0x1cb1b1b1
    80cc:	b1          	.byte	0xb1
    80cd:	00          	.byte	0x00
		tx->pending_no_cb = 0U;
    80ce:	2600      	movs	r6, #0
	z_impl_k_sem_give(sem);
    80d0:	4d5a      	ldr	r5, [pc, #360]	; (823c <bt_conn_set_state+0x1c4>)
	__asm__ volatile(
    80d2:	f04f 0320 	mov.w	r3, #32
    80d6:	f3ef 8211 	mrs	r2, BASEPRI
    80da:	f383 8811 	msr	BASEPRI, r3
    80de:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
    80e2:	69e3      	ldr	r3, [r4, #28]
    80e4:	2b00      	cmp	r3, #0
    80e6:	d075      	beq.n	81d4 <bt_conn_set_state+0x15c>
			conn->pending_no_cb--;
    80e8:	3b01      	subs	r3, #1
    80ea:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    80ec:	f382 8811 	msr	BASEPRI, r2
    80f0:	f3bf 8f6f 	isb	sy
    80f4:	4628      	mov	r0, r5
    80f6:	f007 fb3f 	bl	f778 <z_impl_k_sem_give>
}
    80fa:	e7ea      	b.n	80d2 <bt_conn_set_state+0x5a>
		if (conn->type == BT_CONN_TYPE_SCO) {
    80fc:	78a3      	ldrb	r3, [r4, #2]
    80fe:	2b04      	cmp	r3, #4
    8100:	f000 8091 	beq.w	8226 <bt_conn_set_state+0x1ae>
	z_impl_k_queue_init(queue);
    8104:	f104 0034 	add.w	r0, r4, #52	; 0x34
    8108:	f00c feb7 	bl	14e7a <z_impl_k_queue_init>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&signal, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(signal, result);
    810c:	2100      	movs	r1, #0
    810e:	484c      	ldr	r0, [pc, #304]	; (8240 <bt_conn_set_state+0x1c8>)
    8110:	f007 ff34 	bl	ff7c <z_impl_k_poll_signal_raise>
	list->head = NULL;
    8114:	2300      	movs	r3, #0
		bt_l2cap_connected(conn);
    8116:	4620      	mov	r0, r4
	list->tail = NULL;
    8118:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
    811c:	f000 fb12 	bl	8744 <bt_l2cap_connected>
		notify_connected(conn);
    8120:	4620      	mov	r0, r4
    8122:	f7ff fcd3 	bl	7acc <notify_connected>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    8126:	78e3      	ldrb	r3, [r4, #3]
    8128:	2b01      	cmp	r3, #1
    812a:	d17c      	bne.n	8226 <bt_conn_set_state+0x1ae>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    812c:	f104 0158 	add.w	r1, r4, #88	; 0x58
    8130:	f44f 3220 	mov.w	r2, #163840	; 0x28000
}
    8134:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8138:	2300      	movs	r3, #0
    813a:	4842      	ldr	r0, [pc, #264]	; (8244 <bt_conn_set_state+0x1cc>)
    813c:	f007 bc78 	b.w	fa30 <k_delayed_work_submit_to_queue>
		if (conn->type == BT_CONN_TYPE_SCO) {
    8140:	78a3      	ldrb	r3, [r4, #2]
    8142:	2b04      	cmp	r3, #4
    8144:	d104      	bne.n	8150 <bt_conn_set_state+0xd8>
			bt_conn_unref(conn);
    8146:	4620      	mov	r0, r4
}
    8148:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
    814c:	f00a bc4b 	b.w	129e6 <bt_conn_unref>
		switch (old_state) {
    8150:	2e08      	cmp	r6, #8
    8152:	d868      	bhi.n	8226 <bt_conn_set_state+0x1ae>
    8154:	a301      	add	r3, pc, #4	; (adr r3, 815c <bt_conn_set_state+0xe4>)
    8156:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
    815a:	bf00      	nop
    815c:	000081c1 	.word	0x000081c1
    8160:	00008181 	.word	0x00008181
    8164:	000081b3 	.word	0x000081b3
    8168:	00008147 	.word	0x00008147
    816c:	00008147 	.word	0x00008147
    8170:	000081b3 	.word	0x000081b3
    8174:	000081b3 	.word	0x000081b3
    8178:	000081c1 	.word	0x000081c1
    817c:	000081c1 	.word	0x000081c1
			tx_notify(conn);
    8180:	4620      	mov	r0, r4
    8182:	f00a fb7a 	bl	1287a <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
    8186:	78a3      	ldrb	r3, [r4, #2]
    8188:	2b01      	cmp	r3, #1
    818a:	d103      	bne.n	8194 <bt_conn_set_state+0x11c>
				k_delayed_work_cancel(&conn->deferred_work);
    818c:	f104 0058 	add.w	r0, r4, #88	; 0x58
    8190:	f00d f843 	bl	1521a <k_delayed_work_cancel>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    8194:	3404      	adds	r4, #4
    8196:	e8d4 3fef 	ldaex	r3, [r4]
    819a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    819e:	e8c4 3fe2 	stlex	r2, r3, [r4]
    81a2:	2a00      	cmp	r2, #0
    81a4:	d1f7      	bne.n	8196 <bt_conn_set_state+0x11e>
}
    81a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    81aa:	2100      	movs	r1, #0
    81ac:	4824      	ldr	r0, [pc, #144]	; (8240 <bt_conn_set_state+0x1c8>)
    81ae:	f007 bee5 	b.w	ff7c <z_impl_k_poll_signal_raise>
			if (conn->err) {
    81b2:	7b23      	ldrb	r3, [r4, #12]
    81b4:	2b00      	cmp	r3, #0
    81b6:	d0c6      	beq.n	8146 <bt_conn_set_state+0xce>
				notify_connected(conn);
    81b8:	4620      	mov	r0, r4
    81ba:	f7ff fc87 	bl	7acc <notify_connected>
    81be:	e7c2      	b.n	8146 <bt_conn_set_state+0xce>
    81c0:	4a1a      	ldr	r2, [pc, #104]	; (822c <bt_conn_set_state+0x1b4>)
    81c2:	4b19      	ldr	r3, [pc, #100]	; (8228 <bt_conn_set_state+0x1b0>)
			BT_WARN("Invalid (%u) old state", state);
    81c4:	4629      	mov	r1, r5
    81c6:	1ad2      	subs	r2, r2, r3
    81c8:	08d2      	lsrs	r2, r2, #3
    81ca:	0192      	lsls	r2, r2, #6
    81cc:	481e      	ldr	r0, [pc, #120]	; (8248 <bt_conn_set_state+0x1d0>)
    81ce:	f042 0202 	orr.w	r2, r2, #2
    81d2:	e769      	b.n	80a8 <bt_conn_set_state+0x30>
Z_GENLIST_IS_EMPTY(slist)
    81d4:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
    81d6:	b128      	cbz	r0, 81e4 <bt_conn_set_state+0x16c>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    81d8:	69a1      	ldr	r1, [r4, #24]
    81da:	6803      	ldr	r3, [r0, #0]
    81dc:	4288      	cmp	r0, r1
	list->head = node;
    81de:	6163      	str	r3, [r4, #20]
	list->tail = node;
    81e0:	bf08      	it	eq
    81e2:	61a3      	streq	r3, [r4, #24]
    81e4:	f382 8811 	msr	BASEPRI, r2
    81e8:	f3bf 8f6f 	isb	sy
		if (!node) {
    81ec:	b1d8      	cbz	r0, 8226 <bt_conn_set_state+0x1ae>
	__asm__ volatile(
    81ee:	f04f 0220 	mov.w	r2, #32
    81f2:	f3ef 8311 	mrs	r3, BASEPRI
    81f6:	f382 8811 	msr	BASEPRI, r2
    81fa:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
    81fe:	68c2      	ldr	r2, [r0, #12]
    8200:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
    8202:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
    8204:	f383 8811 	msr	BASEPRI, r3
    8208:	f3bf 8f6f 	isb	sy
		tx_free(tx);
    820c:	f7ff fc54 	bl	7ab8 <tx_free>
    8210:	e770      	b.n	80f4 <bt_conn_set_state+0x7c>
    8212:	4a06      	ldr	r2, [pc, #24]	; (822c <bt_conn_set_state+0x1b4>)
    8214:	4b04      	ldr	r3, [pc, #16]	; (8228 <bt_conn_set_state+0x1b0>)
		BT_WARN("no valid (%u) state was set", state);
    8216:	4629      	mov	r1, r5
    8218:	1ad2      	subs	r2, r2, r3
    821a:	08d2      	lsrs	r2, r2, #3
    821c:	0192      	lsls	r2, r2, #6
    821e:	480b      	ldr	r0, [pc, #44]	; (824c <bt_conn_set_state+0x1d4>)
    8220:	f042 0202 	orr.w	r2, r2, #2
    8224:	e740      	b.n	80a8 <bt_conn_set_state+0x30>
}
    8226:	bd70      	pop	{r4, r5, r6, pc}
    8228:	00015a00 	.word	0x00015a00
    822c:	00015a10 	.word	0x00015a10
    8230:	00016038 	.word	0x00016038
    8234:	000181b4 	.word	0x000181b4
    8238:	000181be 	.word	0x000181be
    823c:	200000c8 	.word	0x200000c8
    8240:	20000324 	.word	0x20000324
    8244:	200010d0 	.word	0x200010d0
    8248:	000181cf 	.word	0x000181cf
    824c:	000181e6 	.word	0x000181e6

00008250 <bt_conn_lookup_addr_le>:

	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
    8250:	b570      	push	{r4, r5, r6, lr}
    8252:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    8254:	480c      	ldr	r0, [pc, #48]	; (8288 <bt_conn_lookup_addr_le+0x38>)
{
    8256:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    8258:	f00a fbb1 	bl	129be <bt_conn_ref>

		if (!conn) {
    825c:	4604      	mov	r4, r0
    825e:	b128      	cbz	r0, 826c <bt_conn_lookup_addr_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
    8260:	7883      	ldrb	r3, [r0, #2]
    8262:	2b01      	cmp	r3, #1
    8264:	d004      	beq.n	8270 <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
    8266:	f00a fbbe 	bl	129e6 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
    826a:	2400      	movs	r4, #0
}
    826c:	4620      	mov	r0, r4
    826e:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
    8270:	4629      	mov	r1, r5
    8272:	4632      	mov	r2, r6
    8274:	f00a fb83 	bl	1297e <bt_conn_is_peer_addr_le>
    8278:	4605      	mov	r5, r0
    827a:	2800      	cmp	r0, #0
    827c:	d1f6      	bne.n	826c <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
    827e:	4620      	mov	r0, r4
    8280:	f00a fbb1 	bl	129e6 <bt_conn_unref>
	return NULL;
    8284:	462c      	mov	r4, r5
			continue;
    8286:	e7f1      	b.n	826c <bt_conn_lookup_addr_le+0x1c>
    8288:	20000be8 	.word	0x20000be8

0000828c <bt_conn_exists_le>:
{
    828c:	b510      	push	{r4, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
    828e:	f7ff ffdf 	bl	8250 <bt_conn_lookup_addr_le>
	if (conn) {
    8292:	4604      	mov	r4, r0
    8294:	b1b0      	cbz	r0, 82c4 <bt_conn_exists_le+0x38>
    8296:	4b0c      	ldr	r3, [pc, #48]	; (82c8 <bt_conn_exists_le+0x3c>)
    8298:	4a0c      	ldr	r2, [pc, #48]	; (82cc <bt_conn_exists_le+0x40>)
    829a:	1ad2      	subs	r2, r2, r3
		BT_WARN("Found valid connection in %s state",
    829c:	7b43      	ldrb	r3, [r0, #13]
    829e:	08d2      	lsrs	r2, r2, #3
    82a0:	2b08      	cmp	r3, #8
    82a2:	bf98      	it	ls
    82a4:	490a      	ldrls	r1, [pc, #40]	; (82d0 <bt_conn_exists_le+0x44>)
    82a6:	ea4f 1282 	mov.w	r2, r2, lsl #6
    82aa:	bf94      	ite	ls
    82ac:	f851 1023 	ldrls.w	r1, [r1, r3, lsl #2]
    82b0:	4908      	ldrhi	r1, [pc, #32]	; (82d4 <bt_conn_exists_le+0x48>)
    82b2:	4809      	ldr	r0, [pc, #36]	; (82d8 <bt_conn_exists_le+0x4c>)
    82b4:	f042 0202 	orr.w	r2, r2, #2
    82b8:	f008 fd09 	bl	10cce <log_1>
		bt_conn_unref(conn);
    82bc:	4620      	mov	r0, r4
    82be:	f00a fb92 	bl	129e6 <bt_conn_unref>
		return true;
    82c2:	2001      	movs	r0, #1
}
    82c4:	bd10      	pop	{r4, pc}
    82c6:	bf00      	nop
    82c8:	00015a00 	.word	0x00015a00
    82cc:	00015a10 	.word	0x00015a10
    82d0:	00016038 	.word	0x00016038
    82d4:	000181b4 	.word	0x000181b4
    82d8:	00018202 	.word	0x00018202

000082dc <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
    82dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    82de:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    82e0:	480f      	ldr	r0, [pc, #60]	; (8320 <bt_conn_lookup_state_le+0x44>)
{
    82e2:	460e      	mov	r6, r1
    82e4:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    82e6:	f00a fb6a 	bl	129be <bt_conn_ref>

		if (!conn) {
    82ea:	4604      	mov	r4, r0
    82ec:	b1b0      	cbz	r0, 831c <bt_conn_lookup_state_le+0x40>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
    82ee:	7883      	ldrb	r3, [r0, #2]
    82f0:	2b01      	cmp	r3, #1
    82f2:	d003      	beq.n	82fc <bt_conn_lookup_state_le+0x20>
			bt_conn_ref(conn);
    82f4:	f00a fb63 	bl	129be <bt_conn_ref>
		}

		return conn;
	}

	return NULL;
    82f8:	2400      	movs	r4, #0
			continue;
    82fa:	e00f      	b.n	831c <bt_conn_lookup_state_le+0x40>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
    82fc:	b146      	cbz	r6, 8310 <bt_conn_lookup_state_le+0x34>
    82fe:	4632      	mov	r2, r6
    8300:	4629      	mov	r1, r5
    8302:	f00a fb3c 	bl	1297e <bt_conn_is_peer_addr_le>
    8306:	b918      	cbnz	r0, 8310 <bt_conn_lookup_state_le+0x34>
			bt_conn_unref(conn);
    8308:	4620      	mov	r0, r4
    830a:	f00a fb6c 	bl	129e6 <bt_conn_unref>
    830e:	e7f3      	b.n	82f8 <bt_conn_lookup_state_le+0x1c>
		if (!(conn->state == state && conn->id == id)) {
    8310:	7b63      	ldrb	r3, [r4, #13]
    8312:	42bb      	cmp	r3, r7
    8314:	d1f8      	bne.n	8308 <bt_conn_lookup_state_le+0x2c>
    8316:	7a23      	ldrb	r3, [r4, #8]
    8318:	42ab      	cmp	r3, r5
    831a:	d1f5      	bne.n	8308 <bt_conn_lookup_state_le+0x2c>
}
    831c:	4620      	mov	r0, r4
    831e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8320:	20000be8 	.word	0x20000be8

00008324 <bt_conn_disconnect>:
			     param->pref_rx_phy, phy_opts);
}
#endif

int bt_conn_disconnect(struct bt_conn *conn, uint8_t reason)
{
    8324:	b538      	push	{r3, r4, r5, lr}
    8326:	7b43      	ldrb	r3, [r0, #13]
    8328:	4604      	mov	r4, r0
    832a:	3b02      	subs	r3, #2
    832c:	460d      	mov	r5, r1
    832e:	2b06      	cmp	r3, #6
    8330:	d805      	bhi.n	833e <bt_conn_disconnect+0x1a>
    8332:	e8df f003 	tbb	[pc, r3]
    8336:	0408      	.short	0x0408
    8338:	210c0e04 	.word	0x210c0e04
    833c:	0c          	.byte	0x0c
    833d:	00          	.byte	0x00
	    conn->type == BT_CONN_TYPE_LE) {
		bt_le_set_auto_conn(&conn->le.dst, NULL);
	}
#endif /* !defined(CONFIG_BT_WHITELIST) */

	switch (conn->state) {
    833e:	f06f 0538 	mvn.w	r5, #56	; 0x38
		return 0;
	case BT_CONN_DISCONNECTED:
	default:
		return -ENOTCONN;
	}
}
    8342:	4628      	mov	r0, r5
    8344:	bd38      	pop	{r3, r4, r5, pc}
		conn->err = reason;
    8346:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    8348:	2100      	movs	r1, #0
    834a:	f7ff fe95 	bl	8078 <bt_conn_set_state>
		return 0;
    834e:	2500      	movs	r5, #0
    8350:	e7f7      	b.n	8342 <bt_conn_disconnect+0x1e>
    8352:	490f      	ldr	r1, [pc, #60]	; (8390 <bt_conn_disconnect+0x6c>)
    8354:	4b0f      	ldr	r3, [pc, #60]	; (8394 <bt_conn_disconnect+0x70>)
		BT_WARN("Deprecated: Use bt_le_adv_stop instead");
    8356:	4810      	ldr	r0, [pc, #64]	; (8398 <bt_conn_disconnect+0x74>)
    8358:	1a5b      	subs	r3, r3, r1
    835a:	08db      	lsrs	r3, r3, #3
    835c:	019b      	lsls	r3, r3, #6
    835e:	f043 0102 	orr.w	r1, r3, #2
    8362:	f008 fca7 	bl	10cb4 <log_0>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    8366:	4620      	mov	r0, r4
		conn->err = reason;
    8368:	7325      	strb	r5, [r4, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    836a:	2100      	movs	r1, #0
    836c:	f7ff fe84 	bl	8078 <bt_conn_set_state>
}
    8370:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			return bt_le_adv_stop();
    8374:	f7ff b89c 	b.w	74b0 <bt_le_adv_stop>
	err = bt_hci_disconnect(conn->handle, reason);
    8378:	8800      	ldrh	r0, [r0, #0]
    837a:	f00a f9b0 	bl	126de <bt_hci_disconnect>
	if (err) {
    837e:	4605      	mov	r5, r0
    8380:	2800      	cmp	r0, #0
    8382:	d1de      	bne.n	8342 <bt_conn_disconnect+0x1e>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT);
    8384:	2108      	movs	r1, #8
    8386:	4620      	mov	r0, r4
    8388:	f7ff fe76 	bl	8078 <bt_conn_set_state>
	return 0;
    838c:	e7d9      	b.n	8342 <bt_conn_disconnect+0x1e>
    838e:	bf00      	nop
    8390:	00015a00 	.word	0x00015a00
    8394:	00015a10 	.word	0x00015a10
    8398:	00018225 	.word	0x00018225

0000839c <send_conn_le_param_update>:
{
    839c:	b538      	push	{r3, r4, r5, lr}
    839e:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
    83a0:	4608      	mov	r0, r1
{
    83a2:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    83a4:	f00a f9b6 	bl	12714 <bt_le_conn_params_valid>
    83a8:	b308      	cbz	r0, 83ee <send_conn_le_param_update+0x52>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    83aa:	4b12      	ldr	r3, [pc, #72]	; (83f4 <send_conn_le_param_update+0x58>)
    83ac:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
    83b0:	0799      	lsls	r1, r3, #30
    83b2:	d407      	bmi.n	83c4 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_L2CAP)) ||
    83b4:	78e3      	ldrb	r3, [r4, #3]
    83b6:	b173      	cbz	r3, 83d6 <send_conn_le_param_update+0x3a>
	return bt_l2cap_update_conn_param(conn, param);
    83b8:	4629      	mov	r1, r5
    83ba:	4620      	mov	r0, r4
}
    83bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
    83c0:	f000 bac0 	b.w	8944 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    83c4:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
    83c8:	079a      	lsls	r2, r3, #30
    83ca:	d5f3      	bpl.n	83b4 <send_conn_le_param_update+0x18>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    83cc:	1d23      	adds	r3, r4, #4
    83ce:	e8d3 3faf 	lda	r3, [r3]
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
    83d2:	055b      	lsls	r3, r3, #21
    83d4:	d4ee      	bmi.n	83b4 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
    83d6:	4629      	mov	r1, r5
    83d8:	4620      	mov	r0, r4
    83da:	f00a fb34 	bl	12a46 <bt_conn_le_conn_update>
		if (rc == 0) {
    83de:	b928      	cbnz	r0, 83ec <send_conn_le_param_update+0x50>
			conn->le.pending_latency = param->latency;
    83e0:	88ab      	ldrh	r3, [r5, #4]
    83e2:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
    83e6:	88eb      	ldrh	r3, [r5, #6]
    83e8:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
    83ec:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    83ee:	f06f 0015 	mvn.w	r0, #21
    83f2:	e7fb      	b.n	83ec <send_conn_le_param_update+0x50>
    83f4:	20000000 	.word	0x20000000

000083f8 <deferred_work>:
{
    83f8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
    83fa:	f810 3c4b 	ldrb.w	r3, [r0, #-75]
{
    83fe:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(work, struct bt_conn, deferred_work);
    8400:	f1a0 0658 	sub.w	r6, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
    8404:	b993      	cbnz	r3, 842c <deferred_work+0x34>
		bt_l2cap_disconnected(conn);
    8406:	4630      	mov	r0, r6
    8408:	f00a fb7e 	bl	12b08 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
    840c:	4b1b      	ldr	r3, [pc, #108]	; (847c <deferred_work+0x84>)
    840e:	681d      	ldr	r5, [r3, #0]
    8410:	b925      	cbnz	r5, 841c <deferred_work+0x24>
		bt_conn_unref(conn);
    8412:	4630      	mov	r0, r6
    8414:	f00a fae7 	bl	129e6 <bt_conn_unref>
}
    8418:	b002      	add	sp, #8
    841a:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->disconnected) {
    841c:	686b      	ldr	r3, [r5, #4]
    841e:	b11b      	cbz	r3, 8428 <deferred_work+0x30>
			cb->disconnected(conn, conn->err);
    8420:	4630      	mov	r0, r6
    8422:	f814 1c4c 	ldrb.w	r1, [r4, #-76]
    8426:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    8428:	69ad      	ldr	r5, [r5, #24]
    842a:	e7f1      	b.n	8410 <deferred_work+0x18>
	if (conn->type != BT_CONN_TYPE_LE) {
    842c:	f810 3c56 	ldrb.w	r3, [r0, #-86]
    8430:	2b01      	cmp	r3, #1
    8432:	d1f1      	bne.n	8418 <deferred_work+0x20>
	if (atomic_test_and_clear_bit(conn->flags,
    8434:	f1a0 0554 	sub.w	r5, r0, #84	; 0x54
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    8438:	e8d5 3fef 	ldaex	r3, [r5]
    843c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
    8440:	e8c5 2fe1 	stlex	r1, r2, [r5]
    8444:	2900      	cmp	r1, #0
    8446:	d1f7      	bne.n	8438 <deferred_work+0x40>
    8448:	059b      	lsls	r3, r3, #22
    844a:	d510      	bpl.n	846e <deferred_work+0x76>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
    844c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    844e:	9300      	str	r3, [sp, #0]
    8450:	6d23      	ldr	r3, [r4, #80]	; 0x50
    8452:	9301      	str	r3, [sp, #4]
		send_conn_le_param_update(conn, param);
    8454:	4669      	mov	r1, sp
    8456:	4630      	mov	r0, r6
    8458:	f7ff ffa0 	bl	839c <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    845c:	e8d5 3fef 	ldaex	r3, [r5]
    8460:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    8464:	e8c5 3fe2 	stlex	r2, r3, [r5]
    8468:	2a00      	cmp	r2, #0
    846a:	d0d5      	beq.n	8418 <deferred_work+0x20>
    846c:	e7f6      	b.n	845c <deferred_work+0x64>
		param = BT_LE_CONN_PARAM(
    846e:	466b      	mov	r3, sp
    8470:	4a03      	ldr	r2, [pc, #12]	; (8480 <deferred_work+0x88>)
    8472:	6810      	ldr	r0, [r2, #0]
    8474:	6851      	ldr	r1, [r2, #4]
    8476:	c303      	stmia	r3!, {r0, r1}
    8478:	e7ec      	b.n	8454 <deferred_work+0x5c>
    847a:	bf00      	nop
    847c:	200019bc 	.word	0x200019bc
    8480:	00015b78 	.word	0x00015b78

00008484 <bt_conn_create_pdu_timeout>:
						 const char *func, int line)
#else
struct net_buf *bt_conn_create_pdu_timeout(struct net_buf_pool *pool,
					   size_t reserve, k_timeout_t timeout)
#endif
{
    8484:	b538      	push	{r3, r4, r5, lr}
    8486:	460d      	mov	r5, r1
	return net_buf_alloc_fixed(pool, timeout);
    8488:	490c      	ldr	r1, [pc, #48]	; (84bc <bt_conn_create_pdu_timeout+0x38>)
    848a:	2800      	cmp	r0, #0
    848c:	bf08      	it	eq
    848e:	4608      	moveq	r0, r1
    8490:	f00b fd8e 	bl	13fb0 <net_buf_alloc_fixed>
#else
		buf = net_buf_alloc(pool, timeout);
#endif
	}

	if (!buf) {
    8494:	4604      	mov	r4, r0
    8496:	b958      	cbnz	r0, 84b0 <bt_conn_create_pdu_timeout+0x2c>
    8498:	4909      	ldr	r1, [pc, #36]	; (84c0 <bt_conn_create_pdu_timeout+0x3c>)
    849a:	4b0a      	ldr	r3, [pc, #40]	; (84c4 <bt_conn_create_pdu_timeout+0x40>)
		BT_WARN("Unable to allocate buffer within timeout");
    849c:	480a      	ldr	r0, [pc, #40]	; (84c8 <bt_conn_create_pdu_timeout+0x44>)
    849e:	1ac9      	subs	r1, r1, r3
    84a0:	08c9      	lsrs	r1, r1, #3
    84a2:	0189      	lsls	r1, r1, #6
    84a4:	f041 0102 	orr.w	r1, r1, #2
    84a8:	f008 fc04 	bl	10cb4 <log_0>

	reserve += sizeof(struct bt_hci_acl_hdr) + BT_BUF_RESERVE;
	net_buf_reserve(buf, reserve);

	return buf;
}
    84ac:	4620      	mov	r0, r4
    84ae:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_simple_reserve(&buf->b, reserve);
    84b0:	1d69      	adds	r1, r5, #5
    84b2:	3008      	adds	r0, #8
    84b4:	f00b fd9b 	bl	13fee <net_buf_simple_reserve>
	return buf;
    84b8:	e7f8      	b.n	84ac <bt_conn_create_pdu_timeout+0x28>
    84ba:	bf00      	nop
    84bc:	200006f8 	.word	0x200006f8
    84c0:	00015a10 	.word	0x00015a10
    84c4:	00015a00 	.word	0x00015a00
    84c8:	0001824c 	.word	0x0001824c

000084cc <bt_conn_create_frag_timeout>:
{
    84cc:	4601      	mov	r1, r0
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
    84ce:	4801      	ldr	r0, [pc, #4]	; (84d4 <bt_conn_create_frag_timeout+0x8>)
    84d0:	f7ff bfd8 	b.w	8484 <bt_conn_create_pdu_timeout>
    84d4:	20000748 	.word	0x20000748

000084d8 <create_frag.isra.0>:
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
    84d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    84dc:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
    84de:	f04f 33ff 	mov.w	r3, #4294967295
    84e2:	f04f 32ff 	mov.w	r2, #4294967295
    84e6:	2000      	movs	r0, #0
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
    84e8:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
    84ea:	f7ff ffef 	bl	84cc <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
    84ee:	7833      	ldrb	r3, [r6, #0]
		frag = bt_conn_create_frag(0);
    84f0:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
    84f2:	2b07      	cmp	r3, #7
    84f4:	f04f 0600 	mov.w	r6, #0
    84f8:	d005      	beq.n	8506 <create_frag.isra.0+0x2e>
		net_buf_unref(frag);
    84fa:	f004 fea5 	bl	d248 <net_buf_unref>
		return NULL;
    84fe:	4635      	mov	r5, r6
}
    8500:	4628      	mov	r0, r5
    8502:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
    8506:	6146      	str	r6, [r0, #20]
	return net_buf_simple_tailroom(&buf->b);
    8508:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
    850c:	4e0c      	ldr	r6, [pc, #48]	; (8540 <create_frag.isra.0+0x68>)
    850e:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    8510:	f8b6 80c4 	ldrh.w	r8, [r6, #196]	; 0xc4
    8514:	f00b fde6 	bl	140e4 <net_buf_simple_tailroom>
    8518:	4580      	cmp	r8, r0
    851a:	d20c      	bcs.n	8536 <create_frag.isra.0+0x5e>
	return bt_dev.le.acl_mtu;
    851c:	f8b6 60c4 	ldrh.w	r6, [r6, #196]	; 0xc4
	return net_buf_simple_add_mem(&buf->b, mem, len);
    8520:	f854 1f08 	ldr.w	r1, [r4, #8]!
    8524:	4632      	mov	r2, r6
    8526:	4638      	mov	r0, r7
    8528:	f00b fd9e 	bl	14068 <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
    852c:	4631      	mov	r1, r6
    852e:	4620      	mov	r0, r4
    8530:	f00b fdbc 	bl	140ac <net_buf_simple_pull>
    8534:	e7e4      	b.n	8500 <create_frag.isra.0+0x28>
	return net_buf_simple_tailroom(&buf->b);
    8536:	4638      	mov	r0, r7
    8538:	f00b fdd4 	bl	140e4 <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    853c:	b286      	uxth	r6, r0
    853e:	e7ef      	b.n	8520 <create_frag.isra.0+0x48>
    8540:	20000000 	.word	0x20000000

00008544 <bt_conn_process_tx>:
{
    8544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
    8546:	7b43      	ldrb	r3, [r0, #13]
{
    8548:	4605      	mov	r5, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
    854a:	b973      	cbnz	r3, 856a <bt_conn_process_tx+0x26>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    854c:	1d03      	adds	r3, r0, #4
    854e:	e8d3 2fef 	ldaex	r2, [r3]
    8552:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    8556:	e8c3 1fe4 	stlex	r4, r1, [r3]
    855a:	2c00      	cmp	r4, #0
    855c:	d1f7      	bne.n	854e <bt_conn_process_tx+0xa>
    855e:	0653      	lsls	r3, r2, #25
    8560:	d503      	bpl.n	856a <bt_conn_process_tx+0x26>
}
    8562:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		conn_cleanup(conn);
    8566:	f7ff bbfd 	b.w	7d64 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    856a:	2200      	movs	r2, #0
    856c:	2300      	movs	r3, #0
    856e:	f105 0034 	add.w	r0, r5, #52	; 0x34
    8572:	f00b fd22 	bl	13fba <net_buf_get>
	BT_ASSERT(buf);
    8576:	4604      	mov	r4, r0
    8578:	b960      	cbnz	r0, 8594 <bt_conn_process_tx+0x50>
    857a:	f240 535f 	movw	r3, #1375	; 0x55f
    857e:	4a1f      	ldr	r2, [pc, #124]	; (85fc <bt_conn_process_tx+0xb8>)
    8580:	491f      	ldr	r1, [pc, #124]	; (8600 <bt_conn_process_tx+0xbc>)
    8582:	4820      	ldr	r0, [pc, #128]	; (8604 <bt_conn_process_tx+0xc0>)
    8584:	f007 ff6f 	bl	10466 <printk>
    8588:	4040      	eors	r0, r0
    858a:	f380 8811 	msr	BASEPRI, r0
    858e:	f04f 0003 	mov.w	r0, #3
    8592:	df02      	svc	2
	return bt_dev.le.acl_mtu;
    8594:	4f1c      	ldr	r7, [pc, #112]	; (8608 <bt_conn_process_tx+0xc4>)
	if (buf->len <= conn_mtu(conn)) {
    8596:	89a1      	ldrh	r1, [r4, #12]
    8598:	f8b7 20c4 	ldrh.w	r2, [r7, #196]	; 0xc4
    859c:	4291      	cmp	r1, r2
    859e:	d807      	bhi.n	85b0 <bt_conn_process_tx+0x6c>
		return send_frag(conn, buf, FRAG_SINGLE, false);
    85a0:	2300      	movs	r3, #0
    85a2:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
    85a4:	4621      	mov	r1, r4
    85a6:	4628      	mov	r0, r5
    85a8:	f7ff faa6 	bl	7af8 <send_frag>
	if (!send_buf(conn, buf)) {
    85ac:	b140      	cbz	r0, 85c0 <bt_conn_process_tx+0x7c>
}
    85ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	frag = create_frag(conn, buf);
    85b0:	f105 060d 	add.w	r6, r5, #13
    85b4:	4621      	mov	r1, r4
    85b6:	4630      	mov	r0, r6
    85b8:	f7ff ff8e 	bl	84d8 <create_frag.isra.0>
	if (!frag) {
    85bc:	4601      	mov	r1, r0
    85be:	b920      	cbnz	r0, 85ca <bt_conn_process_tx+0x86>
		net_buf_unref(buf);
    85c0:	4620      	mov	r0, r4
}
    85c2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		net_buf_unref(buf);
    85c6:	f004 be3f 	b.w	d248 <net_buf_unref>
	if (!send_frag(conn, frag, FRAG_START, true)) {
    85ca:	2301      	movs	r3, #1
    85cc:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
    85ce:	4628      	mov	r0, r5
    85d0:	f7ff fa92 	bl	7af8 <send_frag>
    85d4:	2800      	cmp	r0, #0
    85d6:	d0f3      	beq.n	85c0 <bt_conn_process_tx+0x7c>
	while (buf->len > conn_mtu(conn)) {
    85d8:	89a2      	ldrh	r2, [r4, #12]
    85da:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
    85de:	429a      	cmp	r2, r3
    85e0:	d802      	bhi.n	85e8 <bt_conn_process_tx+0xa4>
	return send_frag(conn, buf, FRAG_END, false);
    85e2:	2300      	movs	r3, #0
    85e4:	2203      	movs	r2, #3
    85e6:	e7dd      	b.n	85a4 <bt_conn_process_tx+0x60>
		frag = create_frag(conn, buf);
    85e8:	4621      	mov	r1, r4
    85ea:	4630      	mov	r0, r6
    85ec:	f7ff ff74 	bl	84d8 <create_frag.isra.0>
		if (!frag) {
    85f0:	4601      	mov	r1, r0
    85f2:	2800      	cmp	r0, #0
    85f4:	d0e4      	beq.n	85c0 <bt_conn_process_tx+0x7c>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
    85f6:	2301      	movs	r3, #1
    85f8:	461a      	mov	r2, r3
    85fa:	e7e8      	b.n	85ce <bt_conn_process_tx+0x8a>
    85fc:	00018275 	.word	0x00018275
    8600:	000175bb 	.word	0x000175bb
    8604:	00017889 	.word	0x00017889
    8608:	20000000 	.word	0x20000000

0000860c <bt_conn_index>:
		__ASSERT(0 <= index && index < ARRAY_SIZE(sco_conns),
			"Invalid bt_conn pointer");
		break;
#endif
	default:
		index = conn - acl_conns;
    860c:	4b03      	ldr	r3, [pc, #12]	; (861c <bt_conn_index+0x10>)
    860e:	1ac0      	subs	r0, r0, r3
    8610:	4b03      	ldr	r3, [pc, #12]	; (8620 <bt_conn_index+0x14>)
    8612:	1180      	asrs	r0, r0, #6
    8614:	4358      	muls	r0, r3
			 "Invalid bt_conn pointer");
		break;
	}

	return (uint8_t)index;
}
    8616:	b2c0      	uxtb	r0, r0
    8618:	4770      	bx	lr
    861a:	bf00      	nop
    861c:	20000be8 	.word	0x20000be8
    8620:	aaaaaaab 	.word	0xaaaaaaab

00008624 <bt_conn_lookup_index>:

struct bt_conn *bt_conn_lookup_index(uint8_t index)
{
	if (index >= ARRAY_SIZE(acl_conns)) {
    8624:	b910      	cbnz	r0, 862c <bt_conn_lookup_index+0x8>
		return NULL;
	}

	return bt_conn_ref(&acl_conns[index]);
    8626:	4802      	ldr	r0, [pc, #8]	; (8630 <bt_conn_lookup_index+0xc>)
    8628:	f00a b9c9 	b.w	129be <bt_conn_ref>
}
    862c:	2000      	movs	r0, #0
    862e:	4770      	bx	lr
    8630:	20000be8 	.word	0x20000be8

00008634 <bt_conn_init>:

int bt_conn_init(void)
{
    8634:	b510      	push	{r4, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
    8636:	490b      	ldr	r1, [pc, #44]	; (8664 <bt_conn_init+0x30>)
    8638:	480b      	ldr	r0, [pc, #44]	; (8668 <bt_conn_init+0x34>)
    863a:	f00c fc2a 	bl	14e92 <k_queue_append>
    863e:	490b      	ldr	r1, [pc, #44]	; (866c <bt_conn_init+0x38>)
    8640:	4809      	ldr	r0, [pc, #36]	; (8668 <bt_conn_init+0x34>)
    8642:	f00c fc26 	bl	14e92 <k_queue_append>
    8646:	490a      	ldr	r1, [pc, #40]	; (8670 <bt_conn_init+0x3c>)
    8648:	4807      	ldr	r0, [pc, #28]	; (8668 <bt_conn_init+0x34>)
    864a:	f00c fc22 	bl	14e92 <k_queue_append>
	}

	bt_att_init();
    864e:	f00a fdb7 	bl	131c0 <bt_att_init>

	err = bt_smp_init();
    8652:	f004 fb25 	bl	cca0 <bt_smp_init>
	if (err) {
    8656:	4604      	mov	r4, r0
    8658:	b908      	cbnz	r0, 865e <bt_conn_init+0x2a>
		return err;
	}

	bt_l2cap_init();
    865a:	f00a fac1 	bl	12be0 <bt_l2cap_init>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
    865e:	4620      	mov	r0, r4
    8660:	bd10      	pop	{r4, pc}
    8662:	bf00      	nop
    8664:	200019c0 	.word	0x200019c0
    8668:	200006b8 	.word	0x200006b8
    866c:	200019d0 	.word	0x200019d0
    8670:	200019e0 	.word	0x200019e0

00008674 <l2cap_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
    8674:	4a0b      	ldr	r2, [pc, #44]	; (86a4 <l2cap_accept+0x30>)
{
    8676:	b508      	push	{r3, lr}
    8678:	4603      	mov	r3, r0
		if (l2cap->chan.chan.conn) {
    867a:	6810      	ldr	r0, [r2, #0]
    867c:	b918      	cbnz	r0, 8686 <l2cap_accept+0x12>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
    867e:	4b0a      	ldr	r3, [pc, #40]	; (86a8 <l2cap_accept+0x34>)
    8680:	6053      	str	r3, [r2, #4]
		*chan = &l2cap->chan.chan;
    8682:	600a      	str	r2, [r1, #0]
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
}
    8684:	bd08      	pop	{r3, pc}
    8686:	4909      	ldr	r1, [pc, #36]	; (86ac <l2cap_accept+0x38>)
    8688:	4a09      	ldr	r2, [pc, #36]	; (86b0 <l2cap_accept+0x3c>)
	BT_ERR("No available L2CAP context for conn %p", conn);
    868a:	480a      	ldr	r0, [pc, #40]	; (86b4 <l2cap_accept+0x40>)
    868c:	1a52      	subs	r2, r2, r1
    868e:	08d2      	lsrs	r2, r2, #3
    8690:	0192      	lsls	r2, r2, #6
    8692:	4619      	mov	r1, r3
    8694:	f042 0201 	orr.w	r2, r2, #1
    8698:	f008 fb19 	bl	10cce <log_1>
	return -ENOMEM;
    869c:	f06f 000b 	mvn.w	r0, #11
    86a0:	e7f0      	b.n	8684 <l2cap_accept+0x10>
    86a2:	bf00      	nop
    86a4:	20000ca8 	.word	0x20000ca8
    86a8:	0001607c 	.word	0x0001607c
    86ac:	00015a00 	.word	0x00015a00
    86b0:	00015a50 	.word	0x00015a50
    86b4:	00018302 	.word	0x00018302

000086b8 <l2cap_create_le_sig_pdu.isra.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    86b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    86ba:	4605      	mov	r5, r0
    86bc:	460f      	mov	r7, r1
    86be:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
    86c0:	2300      	movs	r3, #0
    86c2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    86c6:	2104      	movs	r1, #4
    86c8:	2000      	movs	r0, #0
    86ca:	f7ff fedb 	bl	8484 <bt_conn_create_pdu_timeout>
	if (!buf) {
    86ce:	4604      	mov	r4, r0
    86d0:	b960      	cbnz	r0, 86ec <l2cap_create_le_sig_pdu.isra.0+0x34>
    86d2:	4a0a      	ldr	r2, [pc, #40]	; (86fc <l2cap_create_le_sig_pdu.isra.0+0x44>)
    86d4:	4b0a      	ldr	r3, [pc, #40]	; (8700 <l2cap_create_le_sig_pdu.isra.0+0x48>)
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
    86d6:	4629      	mov	r1, r5
    86d8:	1ad2      	subs	r2, r2, r3
    86da:	08d2      	lsrs	r2, r2, #3
    86dc:	0192      	lsls	r2, r2, #6
    86de:	4809      	ldr	r0, [pc, #36]	; (8704 <l2cap_create_le_sig_pdu.isra.0+0x4c>)
    86e0:	f042 0201 	orr.w	r2, r2, #1
    86e4:	f008 faf3 	bl	10cce <log_1>
}
    86e8:	4620      	mov	r0, r4
    86ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
    86ec:	2104      	movs	r1, #4
    86ee:	3008      	adds	r0, #8
    86f0:	f00b fcb4 	bl	1405c <net_buf_simple_add>
	hdr->code = code;
    86f4:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
    86f6:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
    86f8:	8046      	strh	r6, [r0, #2]
	return buf;
    86fa:	e7f5      	b.n	86e8 <l2cap_create_le_sig_pdu.isra.0+0x30>
    86fc:	00015a50 	.word	0x00015a50
    8700:	00015a00 	.word	0x00015a00
    8704:	00018329 	.word	0x00018329

00008708 <l2cap_rtx_timeout>:
{
    8708:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn *conn = chan->chan.conn;
    870a:	4604      	mov	r4, r0
    870c:	4b0a      	ldr	r3, [pc, #40]	; (8738 <l2cap_rtx_timeout+0x30>)
    870e:	4a0b      	ldr	r2, [pc, #44]	; (873c <l2cap_rtx_timeout+0x34>)
    8710:	f854 5d10 	ldr.w	r5, [r4, #-16]!
    8714:	1ad2      	subs	r2, r2, r3
    8716:	08d2      	lsrs	r2, r2, #3
	BT_ERR("chan %p timeout", chan);
    8718:	0192      	lsls	r2, r2, #6
    871a:	4621      	mov	r1, r4
    871c:	4808      	ldr	r0, [pc, #32]	; (8740 <l2cap_rtx_timeout+0x38>)
    871e:	f042 0201 	orr.w	r2, r2, #1
    8722:	f008 fad4 	bl	10cce <log_1>
	bt_l2cap_chan_remove(conn, &chan->chan);
    8726:	4628      	mov	r0, r5
    8728:	4621      	mov	r1, r4
    872a:	f00a f9b6 	bl	12a9a <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
    872e:	4620      	mov	r0, r4
}
    8730:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_l2cap_chan_del(&chan->chan);
    8734:	f00a b9d3 	b.w	12ade <bt_l2cap_chan_del>
    8738:	00015a00 	.word	0x00015a00
    873c:	00015a50 	.word	0x00015a50
    8740:	00018351 	.word	0x00018351

00008744 <bt_l2cap_connected>:
{
    8744:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    8748:	4605      	mov	r5, r0
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    874a:	4e26      	ldr	r6, [pc, #152]	; (87e4 <bt_l2cap_connected+0xa0>)
    874c:	4f26      	ldr	r7, [pc, #152]	; (87e8 <bt_l2cap_connected+0xa4>)
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    874e:	f8df 809c 	ldr.w	r8, [pc, #156]	; 87ec <bt_l2cap_connected+0xa8>
    8752:	42be      	cmp	r6, r7
    8754:	d302      	bcc.n	875c <bt_l2cap_connected+0x18>
}
    8756:	b003      	add	sp, #12
    8758:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fchan->accept(conn, &chan) < 0) {
    875c:	4628      	mov	r0, r5
    875e:	6873      	ldr	r3, [r6, #4]
    8760:	a901      	add	r1, sp, #4
    8762:	4798      	blx	r3
    8764:	2800      	cmp	r0, #0
    8766:	db38      	blt.n	87da <bt_l2cap_connected+0x96>
		ch = BT_L2CAP_LE_CHAN(chan);
    8768:	9c01      	ldr	r4, [sp, #4]
		ch->rx.cid = fchan->cid;
    876a:	8833      	ldrh	r3, [r6, #0]
    876c:	2230      	movs	r2, #48	; 0x30
    876e:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
		ch->tx.cid = fchan->cid;
    8772:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    8776:	2100      	movs	r1, #0
    8778:	f104 0010 	add.w	r0, r4, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
    877c:	f8d6 9008 	ldr.w	r9, [r6, #8]
    8780:	f009 fdf6 	bl	12370 <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    8784:	2200      	movs	r2, #0
    8786:	f8c4 8014 	str.w	r8, [r4, #20]
    878a:	f104 0340 	add.w	r3, r4, #64	; 0x40
    878e:	e8d3 1fef 	ldaex	r1, [r3]
    8792:	e8c3 2fe0 	stlex	r0, r2, [r3]
    8796:	2800      	cmp	r0, #0
    8798:	d1f9      	bne.n	878e <bt_l2cap_connected+0x4a>
	parent->next = child;
    879a:	60a2      	str	r2, [r4, #8]
Z_GENLIST_APPEND(slist, snode)
    879c:	6d2a      	ldr	r2, [r5, #80]	; 0x50
	sys_slist_append(&conn->channels, &chan->node);
    879e:	f104 0308 	add.w	r3, r4, #8
    87a2:	b9e2      	cbnz	r2, 87de <bt_l2cap_connected+0x9a>
	list->head = node;
    87a4:	e9c5 3313 	strd	r3, r3, [r5, #76]	; 0x4c
		if (chan->ops->connected) {
    87a8:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
    87aa:	6025      	str	r5, [r4, #0]
		if (chan->ops->connected) {
    87ac:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
    87ae:	f8c4 900c 	str.w	r9, [r4, #12]
		if (chan->ops->connected) {
    87b2:	681b      	ldr	r3, [r3, #0]
    87b4:	b103      	cbz	r3, 87b8 <bt_l2cap_connected+0x74>
			chan->ops->connected(chan);
    87b6:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    87b8:	9b01      	ldr	r3, [sp, #4]
    87ba:	3340      	adds	r3, #64	; 0x40
    87bc:	e8d3 2fef 	ldaex	r2, [r3]
    87c0:	f042 0201 	orr.w	r2, r2, #1
    87c4:	e8c3 2fe1 	stlex	r1, r2, [r3]
    87c8:	2900      	cmp	r1, #0
    87ca:	d1f7      	bne.n	87bc <bt_l2cap_connected+0x78>
		if (chan->ops->status) {
    87cc:	9801      	ldr	r0, [sp, #4]
    87ce:	6843      	ldr	r3, [r0, #4]
    87d0:	699b      	ldr	r3, [r3, #24]
    87d2:	b113      	cbz	r3, 87da <bt_l2cap_connected+0x96>
			chan->ops->status(chan, chan->status);
    87d4:	f100 0140 	add.w	r1, r0, #64	; 0x40
    87d8:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    87da:	360c      	adds	r6, #12
    87dc:	e7b9      	b.n	8752 <bt_l2cap_connected+0xe>
	parent->next = child;
    87de:	6013      	str	r3, [r2, #0]
	list->tail = node;
    87e0:	652b      	str	r3, [r5, #80]	; 0x50
}
    87e2:	e7e1      	b.n	87a8 <bt_l2cap_connected+0x64>
    87e4:	00015944 	.word	0x00015944
    87e8:	00015968 	.word	0x00015968
    87ec:	00008709 	.word	0x00008709

000087f0 <l2cap_recv>:
	if (buf->len < sizeof(*hdr)) {
    87f0:	898b      	ldrh	r3, [r1, #12]
{
    87f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (buf->len < sizeof(*hdr)) {
    87f4:	2b03      	cmp	r3, #3
{
    87f6:	4606      	mov	r6, r0
    87f8:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    87fa:	d80a      	bhi.n	8812 <l2cap_recv+0x22>
    87fc:	492e      	ldr	r1, [pc, #184]	; (88b8 <l2cap_recv+0xc8>)
    87fe:	4b2f      	ldr	r3, [pc, #188]	; (88bc <l2cap_recv+0xcc>)
		BT_ERR("Too small L2CAP signaling PDU");
    8800:	482f      	ldr	r0, [pc, #188]	; (88c0 <l2cap_recv+0xd0>)
    8802:	1ac9      	subs	r1, r1, r3
    8804:	08c9      	lsrs	r1, r1, #3
    8806:	0189      	lsls	r1, r1, #6
    8808:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Invalid ident value in L2CAP PDU");
    880c:	f008 fa52 	bl	10cb4 <log_0>
		return 0;
    8810:	e013      	b.n	883a <l2cap_recv+0x4a>
	return net_buf_simple_pull_mem(&buf->b, len);
    8812:	2104      	movs	r1, #4
    8814:	f105 0008 	add.w	r0, r5, #8
    8818:	f00b fc50 	bl	140bc <net_buf_simple_pull_mem>
	if (buf->len != len) {
    881c:	89a9      	ldrh	r1, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
    881e:	8842      	ldrh	r2, [r0, #2]
    8820:	4604      	mov	r4, r0
	if (buf->len != len) {
    8822:	428a      	cmp	r2, r1
    8824:	d00c      	beq.n	8840 <l2cap_recv+0x50>
    8826:	4825      	ldr	r0, [pc, #148]	; (88bc <l2cap_recv+0xcc>)
    8828:	4b23      	ldr	r3, [pc, #140]	; (88b8 <l2cap_recv+0xc8>)
    882a:	1a1b      	subs	r3, r3, r0
    882c:	08db      	lsrs	r3, r3, #3
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
    882e:	019b      	lsls	r3, r3, #6
    8830:	4824      	ldr	r0, [pc, #144]	; (88c4 <l2cap_recv+0xd4>)
    8832:	f043 0301 	orr.w	r3, r3, #1
    8836:	f008 fa5e 	bl	10cf6 <log_2>
}
    883a:	2000      	movs	r0, #0
    883c:	b002      	add	sp, #8
    883e:	bd70      	pop	{r4, r5, r6, pc}
	if (!hdr->ident) {
    8840:	7843      	ldrb	r3, [r0, #1]
    8842:	b943      	cbnz	r3, 8856 <l2cap_recv+0x66>
    8844:	491c      	ldr	r1, [pc, #112]	; (88b8 <l2cap_recv+0xc8>)
    8846:	4b1d      	ldr	r3, [pc, #116]	; (88bc <l2cap_recv+0xcc>)
		BT_ERR("Invalid ident value in L2CAP PDU");
    8848:	481f      	ldr	r0, [pc, #124]	; (88c8 <l2cap_recv+0xd8>)
    884a:	1ac9      	subs	r1, r1, r3
    884c:	08c9      	lsrs	r1, r1, #3
    884e:	0189      	lsls	r1, r1, #6
    8850:	f041 0101 	orr.w	r1, r1, #1
    8854:	e7da      	b.n	880c <l2cap_recv+0x1c>
	switch (hdr->code) {
    8856:	7801      	ldrb	r1, [r0, #0]
    8858:	2901      	cmp	r1, #1
    885a:	d0ee      	beq.n	883a <l2cap_recv+0x4a>
    885c:	2913      	cmp	r1, #19
    885e:	d10a      	bne.n	8876 <l2cap_recv+0x86>
	if (buf->len < sizeof(*rsp)) {
    8860:	2a01      	cmp	r2, #1
    8862:	d8ea      	bhi.n	883a <l2cap_recv+0x4a>
    8864:	4914      	ldr	r1, [pc, #80]	; (88b8 <l2cap_recv+0xc8>)
    8866:	4b15      	ldr	r3, [pc, #84]	; (88bc <l2cap_recv+0xcc>)
		BT_ERR("Too small LE conn param rsp");
    8868:	4818      	ldr	r0, [pc, #96]	; (88cc <l2cap_recv+0xdc>)
    886a:	1ac9      	subs	r1, r1, r3
    886c:	08c9      	lsrs	r1, r1, #3
    886e:	0189      	lsls	r1, r1, #6
    8870:	f041 0101 	orr.w	r1, r1, #1
    8874:	e7ca      	b.n	880c <l2cap_recv+0x1c>
    8876:	4b11      	ldr	r3, [pc, #68]	; (88bc <l2cap_recv+0xcc>)
    8878:	4a0f      	ldr	r2, [pc, #60]	; (88b8 <l2cap_recv+0xc8>)
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
    887a:	4815      	ldr	r0, [pc, #84]	; (88d0 <l2cap_recv+0xe0>)
    887c:	1ad2      	subs	r2, r2, r3
    887e:	08d2      	lsrs	r2, r2, #3
    8880:	0192      	lsls	r2, r2, #6
    8882:	f042 0202 	orr.w	r2, r2, #2
    8886:	f008 fa22 	bl	10cce <log_1>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    888a:	7861      	ldrb	r1, [r4, #1]
    888c:	2202      	movs	r2, #2
    888e:	2001      	movs	r0, #1
		l2cap_send_reject(chan->conn, hdr->ident,
    8890:	6835      	ldr	r5, [r6, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    8892:	f7ff ff11 	bl	86b8 <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
    8896:	4604      	mov	r4, r0
    8898:	2800      	cmp	r0, #0
    889a:	d0ce      	beq.n	883a <l2cap_recv+0x4a>
	return net_buf_simple_add(&buf->b, len);
    889c:	2102      	movs	r1, #2
    889e:	3008      	adds	r0, #8
    88a0:	f00b fbdc 	bl	1405c <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
    88a4:	2300      	movs	r3, #0
		     bt_conn_tx_cb_t cb, void *user_data);

static inline void bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				 struct net_buf *buf)
{
	bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
    88a6:	4622      	mov	r2, r4
    88a8:	7003      	strb	r3, [r0, #0]
    88aa:	7043      	strb	r3, [r0, #1]
    88ac:	2105      	movs	r1, #5
    88ae:	4628      	mov	r0, r5
    88b0:	9300      	str	r3, [sp, #0]
    88b2:	f00a f95c 	bl	12b6e <bt_l2cap_send_cb>
}
    88b6:	e7c0      	b.n	883a <l2cap_recv+0x4a>
    88b8:	00015a50 	.word	0x00015a50
    88bc:	00015a00 	.word	0x00015a00
    88c0:	00018361 	.word	0x00018361
    88c4:	0001837f 	.word	0x0001837f
    88c8:	000183a0 	.word	0x000183a0
    88cc:	000183c1 	.word	0x000183c1
    88d0:	000183dd 	.word	0x000183dd

000088d4 <bt_l2cap_recv>:
{
    88d4:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
    88d6:	898b      	ldrh	r3, [r1, #12]
{
    88d8:	4605      	mov	r5, r0
	if (buf->len < sizeof(*hdr)) {
    88da:	2b03      	cmp	r3, #3
{
    88dc:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
    88de:	d80e      	bhi.n	88fe <bt_l2cap_recv+0x2a>
    88e0:	4914      	ldr	r1, [pc, #80]	; (8934 <bt_l2cap_recv+0x60>)
    88e2:	4b15      	ldr	r3, [pc, #84]	; (8938 <bt_l2cap_recv+0x64>)
		BT_ERR("Too small L2CAP PDU received");
    88e4:	4815      	ldr	r0, [pc, #84]	; (893c <bt_l2cap_recv+0x68>)
    88e6:	1ac9      	subs	r1, r1, r3
    88e8:	08c9      	lsrs	r1, r1, #3
    88ea:	0189      	lsls	r1, r1, #6
    88ec:	f041 0101 	orr.w	r1, r1, #1
    88f0:	f008 f9e0 	bl	10cb4 <log_0>
	net_buf_unref(buf);
    88f4:	4620      	mov	r0, r4
}
    88f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
    88fa:	f004 bca5 	b.w	d248 <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
    88fe:	2104      	movs	r1, #4
    8900:	f104 0008 	add.w	r0, r4, #8
    8904:	f00b fbda 	bl	140bc <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
    8908:	8841      	ldrh	r1, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
    890a:	4628      	mov	r0, r5
    890c:	f00a f958 	bl	12bc0 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    8910:	b950      	cbnz	r0, 8928 <bt_l2cap_recv+0x54>
    8912:	4b09      	ldr	r3, [pc, #36]	; (8938 <bt_l2cap_recv+0x64>)
    8914:	4a07      	ldr	r2, [pc, #28]	; (8934 <bt_l2cap_recv+0x60>)
		BT_WARN("Ignoring data for unknown CID 0x%04x", cid);
    8916:	480a      	ldr	r0, [pc, #40]	; (8940 <bt_l2cap_recv+0x6c>)
    8918:	1ad2      	subs	r2, r2, r3
    891a:	08d2      	lsrs	r2, r2, #3
    891c:	0192      	lsls	r2, r2, #6
    891e:	f042 0202 	orr.w	r2, r2, #2
    8922:	f008 f9d4 	bl	10cce <log_1>
		net_buf_unref(buf);
    8926:	e7e5      	b.n	88f4 <bt_l2cap_recv+0x20>
	chan->ops->recv(chan, buf);
    8928:	6843      	ldr	r3, [r0, #4]
    892a:	4621      	mov	r1, r4
    892c:	691b      	ldr	r3, [r3, #16]
    892e:	4798      	blx	r3
    8930:	e7e0      	b.n	88f4 <bt_l2cap_recv+0x20>
    8932:	bf00      	nop
    8934:	00015a50 	.word	0x00015a50
    8938:	00015a00 	.word	0x00015a00
    893c:	000183fb 	.word	0x000183fb
    8940:	00018418 	.word	0x00018418

00008944 <bt_l2cap_update_conn_param>:
{
    8944:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
    8946:	4b15      	ldr	r3, [pc, #84]	; (899c <bt_l2cap_update_conn_param+0x58>)
{
    8948:	4605      	mov	r5, r0
	ident++;
    894a:	781a      	ldrb	r2, [r3, #0]
{
    894c:	460c      	mov	r4, r1
	ident++;
    894e:	3201      	adds	r2, #1
	if (!ident) {
    8950:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		ident++;
    8954:	bf08      	it	eq
    8956:	2201      	moveq	r2, #1
    8958:	701a      	strb	r2, [r3, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    895a:	2012      	movs	r0, #18
    895c:	2208      	movs	r2, #8
    895e:	7819      	ldrb	r1, [r3, #0]
    8960:	f7ff feaa 	bl	86b8 <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
    8964:	4606      	mov	r6, r0
    8966:	b1b0      	cbz	r0, 8996 <bt_l2cap_update_conn_param+0x52>
	return net_buf_simple_add(&buf->b, len);
    8968:	2108      	movs	r1, #8
    896a:	4408      	add	r0, r1
    896c:	f00b fb76 	bl	1405c <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
    8970:	8822      	ldrh	r2, [r4, #0]
	bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
    8972:	2105      	movs	r1, #5
    8974:	8002      	strh	r2, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
    8976:	8862      	ldrh	r2, [r4, #2]
    8978:	8042      	strh	r2, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
    897a:	88a2      	ldrh	r2, [r4, #4]
    897c:	8082      	strh	r2, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
    897e:	88e2      	ldrh	r2, [r4, #6]
    8980:	2400      	movs	r4, #0
    8982:	80c2      	strh	r2, [r0, #6]
    8984:	4623      	mov	r3, r4
    8986:	4632      	mov	r2, r6
    8988:	4628      	mov	r0, r5
    898a:	9400      	str	r4, [sp, #0]
    898c:	f00a f8ef 	bl	12b6e <bt_l2cap_send_cb>
	return 0;
    8990:	4620      	mov	r0, r4
}
    8992:	b002      	add	sp, #8
    8994:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
    8996:	f06f 000b 	mvn.w	r0, #11
    899a:	e7fa      	b.n	8992 <bt_l2cap_update_conn_param+0x4e>
    899c:	20002df7 	.word	0x20002df7

000089a0 <att_cfm_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
    89a0:	4b02      	ldr	r3, [pc, #8]	; (89ac <att_cfm_sent+0xc>)
    89a2:	f8c1 3120 	str.w	r3, [r1, #288]	; 0x120

	att_sent(conn, user_data);
    89a6:	f00a b949 	b.w	12c3c <att_sent>
    89aa:	bf00      	nop
    89ac:	00012da5 	.word	0x00012da5

000089b0 <att_rsp_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
    89b0:	4b02      	ldr	r3, [pc, #8]	; (89bc <att_rsp_sent+0xc>)
    89b2:	f8c1 3120 	str.w	r3, [r1, #288]	; 0x120

	att_sent(conn, user_data);
    89b6:	f00a b941 	b.w	12c3c <att_sent>
    89ba:	bf00      	nop
    89bc:	00012d91 	.word	0x00012d91

000089c0 <att_req_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
    89c0:	4b02      	ldr	r3, [pc, #8]	; (89cc <att_req_sent+0xc>)
    89c2:	f8c1 3120 	str.w	r3, [r1, #288]	; 0x120

	att_sent(conn, user_data);
    89c6:	f00a b939 	b.w	12c3c <att_sent>
    89ca:	bf00      	nop
    89cc:	00008bc9 	.word	0x00008bc9

000089d0 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
    89d0:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
    89d2:	3808      	subs	r0, #8
    89d4:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
    89d6:	a901      	add	r1, sp, #4
    89d8:	4802      	ldr	r0, [pc, #8]	; (89e4 <bt_att_released+0x14>)
    89da:	f006 fa0f 	bl	edfc <k_mem_slab_free>
}
    89de:	b003      	add	sp, #12
    89e0:	f85d fb04 	ldr.w	pc, [sp], #4
    89e4:	200005d8 	.word	0x200005d8

000089e8 <find_type_cb>:
{
    89e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    89ec:	f642 0301 	movw	r3, #10241	; 0x2801
    89f0:	2500      	movs	r5, #0
{
    89f2:	b091      	sub	sp, #68	; 0x44
	struct bt_att_chan *chan = data->chan;
    89f4:	f8d2 9000 	ldr.w	r9, [r2]
{
    89f8:	4607      	mov	r7, r0
    89fa:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    89fc:	6800      	ldr	r0, [r0, #0]
    89fe:	a90b      	add	r1, sp, #44	; 0x2c
	struct bt_conn *conn = chan->chan.chan.conn;
    8a00:	f8d9 8008 	ldr.w	r8, [r9, #8]
{
    8a04:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    8a06:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
    8a0a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
    8a0e:	f009 fd40 	bl	12492 <bt_uuid_cmp>
    8a12:	2800      	cmp	r0, #0
    8a14:	d066      	beq.n	8ae4 <find_type_cb+0xfc>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
    8a16:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    8a1a:	6838      	ldr	r0, [r7, #0]
    8a1c:	a90b      	add	r1, sp, #44	; 0x2c
    8a1e:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
    8a22:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
    8a26:	f009 fd34 	bl	12492 <bt_uuid_cmp>
    8a2a:	b138      	cbz	r0, 8a3c <find_type_cb+0x54>
		if (data->group &&
    8a2c:	68a3      	ldr	r3, [r4, #8]
    8a2e:	b11b      	cbz	r3, 8a38 <find_type_cb+0x50>
    8a30:	885a      	ldrh	r2, [r3, #2]
    8a32:	42b2      	cmp	r2, r6
    8a34:	d200      	bcs.n	8a38 <find_type_cb+0x50>
			data->group->end_handle = sys_cpu_to_le16(handle);
    8a36:	805e      	strh	r6, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
    8a38:	2001      	movs	r0, #1
    8a3a:	e009      	b.n	8a50 <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
    8a3c:	6861      	ldr	r1, [r4, #4]
    8a3e:	4608      	mov	r0, r1
    8a40:	f00a f8f4 	bl	12c2c <net_buf_frags_len>
    8a44:	f8b9 305e 	ldrh.w	r3, [r9, #94]	; 0x5e
    8a48:	1a1b      	subs	r3, r3, r0
    8a4a:	2b03      	cmp	r3, #3
    8a4c:	d803      	bhi.n	8a56 <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
    8a4e:	2000      	movs	r0, #0
}
    8a50:	b011      	add	sp, #68	; 0x44
    8a52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
    8a56:	4608      	mov	r0, r1
    8a58:	f00b fade 	bl	14018 <net_buf_frag_last>
    8a5c:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
    8a5e:	6860      	ldr	r0, [r4, #4]
    8a60:	f00a f8e4 	bl	12c2c <net_buf_frags_len>
    8a64:	f8b9 a05e 	ldrh.w	sl, [r9, #94]	; 0x5e
	return net_buf_simple_tailroom(&buf->b);
    8a68:	f105 0b08 	add.w	fp, r5, #8
    8a6c:	ebaa 0a00 	sub.w	sl, sl, r0
    8a70:	4658      	mov	r0, fp
    8a72:	f00b fb37 	bl	140e4 <net_buf_simple_tailroom>
    8a76:	4582      	cmp	sl, r0
    8a78:	d237      	bcs.n	8aea <find_type_cb+0x102>
    8a7a:	6860      	ldr	r0, [r4, #4]
    8a7c:	f00a f8d6 	bl	12c2c <net_buf_frags_len>
    8a80:	f8b9 305e 	ldrh.w	r3, [r9, #94]	; 0x5e
    8a84:	1a18      	subs	r0, r3, r0
	if (!len) {
    8a86:	b970      	cbnz	r0, 8aa6 <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
    8a88:	6863      	ldr	r3, [r4, #4]
    8a8a:	7998      	ldrb	r0, [r3, #6]
    8a8c:	f004 fb20 	bl	d0d0 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
    8a90:	2200      	movs	r2, #0
    8a92:	2300      	movs	r3, #0
    8a94:	f00b fa8c 	bl	13fb0 <net_buf_alloc_fixed>
		if (!frag) {
    8a98:	4605      	mov	r5, r0
    8a9a:	2800      	cmp	r0, #0
    8a9c:	d0d7      	beq.n	8a4e <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
    8a9e:	4601      	mov	r1, r0
    8aa0:	6860      	ldr	r0, [r4, #4]
    8aa2:	f00b faca 	bl	1403a <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
    8aa6:	2300      	movs	r3, #0
    8aa8:	9300      	str	r3, [sp, #0]
    8aaa:	4639      	mov	r1, r7
    8aac:	f8d7 9004 	ldr.w	r9, [r7, #4]
    8ab0:	2310      	movs	r3, #16
    8ab2:	4640      	mov	r0, r8
    8ab4:	aa02      	add	r2, sp, #8
    8ab6:	47c8      	blx	r9
	if (read < 0) {
    8ab8:	1e07      	subs	r7, r0, #0
    8aba:	db13      	blt.n	8ae4 <find_type_cb+0xfc>
	if (read != data->value_len) {
    8abc:	7c22      	ldrb	r2, [r4, #16]
    8abe:	68e0      	ldr	r0, [r4, #12]
    8ac0:	42ba      	cmp	r2, r7
    8ac2:	d037      	beq.n	8b34 <find_type_cb+0x14c>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
    8ac4:	4601      	mov	r1, r0
    8ac6:	a80b      	add	r0, sp, #44	; 0x2c
    8ac8:	f009 fd0d 	bl	124e6 <bt_uuid_create>
    8acc:	b988      	cbnz	r0, 8af2 <find_type_cb+0x10a>
    8ace:	4a1b      	ldr	r2, [pc, #108]	; (8b3c <find_type_cb+0x154>)
    8ad0:	4b1b      	ldr	r3, [pc, #108]	; (8b40 <find_type_cb+0x158>)
			BT_WARN("Unable to create UUID: size %u", data->value_len);
    8ad2:	7c21      	ldrb	r1, [r4, #16]
    8ad4:	1ad2      	subs	r2, r2, r3
    8ad6:	08d2      	lsrs	r2, r2, #3
    8ad8:	0192      	lsls	r2, r2, #6
    8ada:	481a      	ldr	r0, [pc, #104]	; (8b44 <find_type_cb+0x15c>)
    8adc:	f042 0202 	orr.w	r2, r2, #2
			BT_WARN("Unable to create UUID: size %d", read);
    8ae0:	f008 f8f5 	bl	10cce <log_1>
	data->group = NULL;
    8ae4:	2300      	movs	r3, #0
    8ae6:	60a3      	str	r3, [r4, #8]
    8ae8:	e7a6      	b.n	8a38 <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
    8aea:	4658      	mov	r0, fp
    8aec:	f00b fafa 	bl	140e4 <net_buf_simple_tailroom>
    8af0:	e7c9      	b.n	8a86 <find_type_cb+0x9e>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
    8af2:	b2fa      	uxtb	r2, r7
    8af4:	a902      	add	r1, sp, #8
    8af6:	a806      	add	r0, sp, #24
    8af8:	f009 fcf5 	bl	124e6 <bt_uuid_create>
    8afc:	b948      	cbnz	r0, 8b12 <find_type_cb+0x12a>
    8afe:	4a0f      	ldr	r2, [pc, #60]	; (8b3c <find_type_cb+0x154>)
    8b00:	4b0f      	ldr	r3, [pc, #60]	; (8b40 <find_type_cb+0x158>)
			BT_WARN("Unable to create UUID: size %d", read);
    8b02:	4639      	mov	r1, r7
    8b04:	1ad2      	subs	r2, r2, r3
    8b06:	08d2      	lsrs	r2, r2, #3
    8b08:	0192      	lsls	r2, r2, #6
    8b0a:	480f      	ldr	r0, [pc, #60]	; (8b48 <find_type_cb+0x160>)
    8b0c:	f042 0202 	orr.w	r2, r2, #2
    8b10:	e7e6      	b.n	8ae0 <find_type_cb+0xf8>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
    8b12:	a906      	add	r1, sp, #24
    8b14:	a80b      	add	r0, sp, #44	; 0x2c
    8b16:	f009 fcbc 	bl	12492 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
    8b1a:	2800      	cmp	r0, #0
    8b1c:	d1e2      	bne.n	8ae4 <find_type_cb+0xfc>
	data->err = 0x00;
    8b1e:	2300      	movs	r3, #0
	return net_buf_simple_add(&buf->b, len);
    8b20:	2104      	movs	r1, #4
    8b22:	7463      	strb	r3, [r4, #17]
    8b24:	f105 0008 	add.w	r0, r5, #8
    8b28:	f00b fa98 	bl	1405c <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
    8b2c:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
    8b2e:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
    8b30:	8046      	strh	r6, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
    8b32:	e781      	b.n	8a38 <find_type_cb+0x50>
	} else if (memcmp(data->value, uuid, read)) {
    8b34:	a902      	add	r1, sp, #8
    8b36:	f009 fbe0 	bl	122fa <memcmp>
    8b3a:	e7ee      	b.n	8b1a <find_type_cb+0x132>
    8b3c:	00015a00 	.word	0x00015a00
    8b40:	00015a00 	.word	0x00015a00
    8b44:	0001844d 	.word	0x0001844d
    8b48:	0001846c 	.word	0x0001846c

00008b4c <att_get>:
{
    8b4c:	b510      	push	{r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    8b4e:	7b43      	ldrb	r3, [r0, #13]
    8b50:	2b07      	cmp	r3, #7
    8b52:	d00b      	beq.n	8b6c <att_get+0x20>
    8b54:	4917      	ldr	r1, [pc, #92]	; (8bb4 <att_get+0x68>)
    8b56:	4b18      	ldr	r3, [pc, #96]	; (8bb8 <att_get+0x6c>)
		BT_WARN("Not connected");
    8b58:	4818      	ldr	r0, [pc, #96]	; (8bbc <att_get+0x70>)
    8b5a:	1ac9      	subs	r1, r1, r3
    8b5c:	08c9      	lsrs	r1, r1, #3
    8b5e:	0189      	lsls	r1, r1, #6
    8b60:	f041 0102 	orr.w	r1, r1, #2
		BT_WARN("ATT channel flagged as disconnected");
    8b64:	f008 f8a6 	bl	10cb4 <log_0>
		return NULL;
    8b68:	2400      	movs	r4, #0
    8b6a:	e00e      	b.n	8b8a <att_get+0x3e>
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
    8b6c:	2104      	movs	r1, #4
    8b6e:	f00a f827 	bl	12bc0 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    8b72:	4604      	mov	r4, r0
    8b74:	b958      	cbnz	r0, 8b8e <att_get+0x42>
    8b76:	490f      	ldr	r1, [pc, #60]	; (8bb4 <att_get+0x68>)
    8b78:	4b0f      	ldr	r3, [pc, #60]	; (8bb8 <att_get+0x6c>)
		BT_ERR("Unable to find ATT channel");
    8b7a:	4811      	ldr	r0, [pc, #68]	; (8bc0 <att_get+0x74>)
    8b7c:	1ac9      	subs	r1, r1, r3
    8b7e:	08c9      	lsrs	r1, r1, #3
    8b80:	0189      	lsls	r1, r1, #6
    8b82:	f041 0101 	orr.w	r1, r1, #1
    8b86:	f008 f895 	bl	10cb4 <log_0>
}
    8b8a:	4620      	mov	r0, r4
    8b8c:	bd10      	pop	{r4, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    8b8e:	f100 03b8 	add.w	r3, r0, #184	; 0xb8
    8b92:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
    8b96:	075b      	lsls	r3, r3, #29
    8b98:	d508      	bpl.n	8bac <att_get+0x60>
    8b9a:	4906      	ldr	r1, [pc, #24]	; (8bb4 <att_get+0x68>)
    8b9c:	4b06      	ldr	r3, [pc, #24]	; (8bb8 <att_get+0x6c>)
		BT_WARN("ATT channel flagged as disconnected");
    8b9e:	4809      	ldr	r0, [pc, #36]	; (8bc4 <att_get+0x78>)
    8ba0:	1ac9      	subs	r1, r1, r3
    8ba2:	08c9      	lsrs	r1, r1, #3
    8ba4:	0189      	lsls	r1, r1, #6
    8ba6:	f041 0102 	orr.w	r1, r1, #2
    8baa:	e7db      	b.n	8b64 <att_get+0x18>
	return att_chan->att;
    8bac:	f850 4c08 	ldr.w	r4, [r0, #-8]
    8bb0:	e7eb      	b.n	8b8a <att_get+0x3e>
    8bb2:	bf00      	nop
    8bb4:	00015a00 	.word	0x00015a00
    8bb8:	00015a00 	.word	0x00015a00
    8bbc:	0001848b 	.word	0x0001848b
    8bc0:	00018499 	.word	0x00018499
    8bc4:	000184b4 	.word	0x000184b4

00008bc8 <chan_req_sent>:
	if (chan->req) {
    8bc8:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
    8bcc:	b13b      	cbz	r3, 8bde <chan_req_sent+0x16>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    8bce:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
    8bd2:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    8bd6:	2300      	movs	r3, #0
    8bd8:	4801      	ldr	r0, [pc, #4]	; (8be0 <chan_req_sent+0x18>)
    8bda:	f006 bf29 	b.w	fa30 <k_delayed_work_submit_to_queue>
}
    8bde:	4770      	bx	lr
    8be0:	200010d0 	.word	0x200010d0

00008be4 <bt_att_accept>:

	return chan;
}

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
    8be4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    8be6:	2300      	movs	r3, #0
{
    8be8:	4606      	mov	r6, r0
    8bea:	460f      	mov	r7, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    8bec:	2200      	movs	r2, #0
    8bee:	4669      	mov	r1, sp
    8bf0:	4829      	ldr	r0, [pc, #164]	; (8c98 <bt_att_accept+0xb4>)
    8bf2:	f006 f8d1 	bl	ed98 <k_mem_slab_alloc>
    8bf6:	4604      	mov	r4, r0
    8bf8:	b178      	cbz	r0, 8c1a <bt_att_accept+0x36>
		BT_ERR("No available ATT context for conn %p", conn);
    8bfa:	4631      	mov	r1, r6
    8bfc:	4a27      	ldr	r2, [pc, #156]	; (8c9c <bt_att_accept+0xb8>)
    8bfe:	4b28      	ldr	r3, [pc, #160]	; (8ca0 <bt_att_accept+0xbc>)
    8c00:	4828      	ldr	r0, [pc, #160]	; (8ca4 <bt_att_accept+0xc0>)
    8c02:	1ad2      	subs	r2, r2, r3
    8c04:	08d2      	lsrs	r2, r2, #3
    8c06:	0192      	lsls	r2, r2, #6
    8c08:	f042 0201 	orr.w	r2, r2, #1
		BT_ERR("No available ATT channel for conn %p", att->conn);
    8c0c:	f008 f85f 	bl	10cce <log_1>
	sys_slist_init(&att->reqs);
	sys_slist_init(&att->chans);

	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
    8c10:	f06f 040b 	mvn.w	r4, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
    8c14:	4620      	mov	r0, r4
    8c16:	b003      	add	sp, #12
    8c18:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)memset(att, 0, sizeof(*att));
    8c1a:	4601      	mov	r1, r0
    8c1c:	2244      	movs	r2, #68	; 0x44
    8c1e:	9800      	ldr	r0, [sp, #0]
    8c20:	f009 fba6 	bl	12370 <memset>
	att->conn = conn;
    8c24:	9d00      	ldr	r5, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
    8c26:	2200      	movs	r2, #0
	list->head = NULL;
    8c28:	e9c5 6400 	strd	r6, r4, [r5]
	list->tail = NULL;
    8c2c:	e9c5 440f 	strd	r4, r4, [r5, #60]	; 0x3c
    8c30:	60ac      	str	r4, [r5, #8]
    8c32:	2300      	movs	r3, #0
    8c34:	481c      	ldr	r0, [pc, #112]	; (8ca8 <bt_att_accept+0xc4>)
    8c36:	a901      	add	r1, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
    8c38:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
    8c3a:	f006 f8ad 	bl	ed98 <k_mem_slab_alloc>
    8c3e:	4604      	mov	r4, r0
    8c40:	b148      	cbz	r0, 8c56 <bt_att_accept+0x72>
    8c42:	4a16      	ldr	r2, [pc, #88]	; (8c9c <bt_att_accept+0xb8>)
    8c44:	4b16      	ldr	r3, [pc, #88]	; (8ca0 <bt_att_accept+0xbc>)
		BT_ERR("No available ATT channel for conn %p", att->conn);
    8c46:	6829      	ldr	r1, [r5, #0]
    8c48:	1ad2      	subs	r2, r2, r3
    8c4a:	08d2      	lsrs	r2, r2, #3
    8c4c:	0192      	lsls	r2, r2, #6
    8c4e:	4817      	ldr	r0, [pc, #92]	; (8cac <bt_att_accept+0xc8>)
    8c50:	f042 0201 	orr.w	r2, r2, #1
    8c54:	e7da      	b.n	8c0c <bt_att_accept+0x28>
	(void)memset(chan, 0, sizeof(*chan));
    8c56:	4601      	mov	r1, r0
    8c58:	f44f 7298 	mov.w	r2, #304	; 0x130
    8c5c:	9801      	ldr	r0, [sp, #4]
    8c5e:	f009 fb87 	bl	12370 <memset>
	chan->chan.chan.ops = &ops;
    8c62:	9801      	ldr	r0, [sp, #4]
    8c64:	4b12      	ldr	r3, [pc, #72]	; (8cb0 <bt_att_accept+0xcc>)
    8c66:	60c3      	str	r3, [r0, #12]
	z_impl_k_queue_init(queue);
    8c68:	30c8      	adds	r0, #200	; 0xc8
    8c6a:	f00c f906 	bl	14e7a <z_impl_k_queue_init>
	k_sem_init(&chan->tx_sem, CONFIG_BT_ATT_TX_MAX, CONFIG_BT_ATT_TX_MAX);
    8c6e:	9801      	ldr	r0, [sp, #4]
    8c70:	f500 7088 	add.w	r0, r0, #272	; 0x110
	return z_impl_k_sem_init(sem, initial_count, limit);
    8c74:	2203      	movs	r2, #3
    8c76:	4611      	mov	r1, r2
    8c78:	f00c fa57 	bl	1512a <z_impl_k_sem_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    8c7c:	9b01      	ldr	r3, [sp, #4]
    8c7e:	33c0      	adds	r3, #192	; 0xc0
    8c80:	e8d3 2fef 	ldaex	r2, [r3]
    8c84:	e8c3 4fe1 	stlex	r1, r4, [r3]
    8c88:	2900      	cmp	r1, #0
    8c8a:	d1f9      	bne.n	8c80 <bt_att_accept+0x9c>
	chan->att = att;
    8c8c:	9b01      	ldr	r3, [sp, #4]
    8c8e:	f843 5b08 	str.w	r5, [r3], #8
	*ch = &chan->chan.chan;
    8c92:	603b      	str	r3, [r7, #0]
	return 0;
    8c94:	e7be      	b.n	8c14 <bt_att_accept+0x30>
    8c96:	bf00      	nop
    8c98:	200005bc 	.word	0x200005bc
    8c9c:	00015a00 	.word	0x00015a00
    8ca0:	00015a00 	.word	0x00015a00
    8ca4:	000184d8 	.word	0x000184d8
    8ca8:	200005d8 	.word	0x200005d8
    8cac:	000184fd 	.word	0x000184fd
    8cb0:	20000334 	.word	0x20000334

00008cb4 <read_group_cb>:
{
    8cb4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    8cb8:	f04f 0800 	mov.w	r8, #0
    8cbc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
{
    8cc0:	4606      	mov	r6, r0
    8cc2:	460d      	mov	r5, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    8cc4:	6800      	ldr	r0, [r0, #0]
    8cc6:	a902      	add	r1, sp, #8
{
    8cc8:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
    8cca:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    8ccc:	f88d 8008 	strb.w	r8, [sp, #8]
    8cd0:	f8ad 300a 	strh.w	r3, [sp, #10]
    8cd4:	f009 fbdd 	bl	12492 <bt_uuid_cmp>
    8cd8:	b1a0      	cbz	r0, 8d04 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    8cda:	f642 0301 	movw	r3, #10241	; 0x2801
    8cde:	6830      	ldr	r0, [r6, #0]
    8ce0:	a903      	add	r1, sp, #12
    8ce2:	f88d 800c 	strb.w	r8, [sp, #12]
    8ce6:	f8ad 300e 	strh.w	r3, [sp, #14]
    8cea:	f009 fbd2 	bl	12492 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    8cee:	b148      	cbz	r0, 8d04 <read_group_cb+0x50>
		if (data->group &&
    8cf0:	6923      	ldr	r3, [r4, #16]
    8cf2:	b11b      	cbz	r3, 8cfc <read_group_cb+0x48>
    8cf4:	885a      	ldrh	r2, [r3, #2]
    8cf6:	42aa      	cmp	r2, r5
    8cf8:	d200      	bcs.n	8cfc <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
    8cfa:	805d      	strh	r5, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    8cfc:	2001      	movs	r0, #1
}
    8cfe:	b004      	add	sp, #16
    8d00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    8d04:	6861      	ldr	r1, [r4, #4]
    8d06:	6830      	ldr	r0, [r6, #0]
    8d08:	f009 fbc3 	bl	12492 <bt_uuid_cmp>
    8d0c:	b110      	cbz	r0, 8d14 <read_group_cb+0x60>
		data->group = NULL;
    8d0e:	2300      	movs	r3, #0
    8d10:	6123      	str	r3, [r4, #16]
    8d12:	e7f3      	b.n	8cfc <read_group_cb+0x48>
	if (data->rsp->len &&
    8d14:	68e3      	ldr	r3, [r4, #12]
    8d16:	68a0      	ldr	r0, [r4, #8]
    8d18:	781a      	ldrb	r2, [r3, #0]
    8d1a:	b13a      	cbz	r2, 8d2c <read_group_cb+0x78>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
    8d1c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
    8d20:	8981      	ldrh	r1, [r0, #12]
    8d22:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
    8d24:	4293      	cmp	r3, r2
    8d26:	da01      	bge.n	8d2c <read_group_cb+0x78>
		return BT_GATT_ITER_STOP;
    8d28:	2000      	movs	r0, #0
    8d2a:	e7e8      	b.n	8cfe <read_group_cb+0x4a>
    8d2c:	2104      	movs	r1, #4
    8d2e:	3008      	adds	r0, #8
    8d30:	f00b f994 	bl	1405c <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    8d34:	4b09      	ldr	r3, [pc, #36]	; (8d5c <read_group_cb+0xa8>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    8d36:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    8d38:	4631      	mov	r1, r6
	data->group->start_handle = sys_cpu_to_le16(handle);
    8d3a:	8005      	strh	r5, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
    8d3c:	8045      	strh	r5, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    8d3e:	68a2      	ldr	r2, [r4, #8]
    8d40:	9300      	str	r3, [sp, #0]
    8d42:	4638      	mov	r0, r7
    8d44:	2300      	movs	r3, #0
    8d46:	9401      	str	r4, [sp, #4]
    8d48:	f00a f836 	bl	12db8 <att_chan_read>
	if (read < 0) {
    8d4c:	2800      	cmp	r0, #0
    8d4e:	dbeb      	blt.n	8d28 <read_group_cb+0x74>
	if (!data->group) {
    8d50:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
    8d52:	3800      	subs	r0, #0
    8d54:	bf18      	it	ne
    8d56:	2001      	movne	r0, #1
    8d58:	e7d1      	b.n	8cfe <read_group_cb+0x4a>
    8d5a:	bf00      	nop
    8d5c:	00012d71 	.word	0x00012d71

00008d60 <read_type_cb>:
{
    8d60:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
    8d64:	f8d2 8000 	ldr.w	r8, [r2]
{
    8d68:	4606      	mov	r6, r0
    8d6a:	4689      	mov	r9, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    8d6c:	6800      	ldr	r0, [r0, #0]
    8d6e:	6851      	ldr	r1, [r2, #4]
{
    8d70:	4614      	mov	r4, r2
	struct bt_conn *conn = chan->chan.chan.conn;
    8d72:	f8d8 5008 	ldr.w	r5, [r8, #8]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    8d76:	f009 fb8c 	bl	12492 <bt_uuid_cmp>
    8d7a:	4607      	mov	r7, r0
    8d7c:	2800      	cmp	r0, #0
    8d7e:	d13e      	bne.n	8dfe <read_type_cb+0x9e>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    8d80:	4628      	mov	r0, r5
    8d82:	2215      	movs	r2, #21
    8d84:	4631      	mov	r1, r6
    8d86:	f00a fd23 	bl	137d0 <bt_gatt_check_perm>
    8d8a:	4605      	mov	r5, r0
    8d8c:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    8d8e:	b148      	cbz	r0, 8da4 <read_type_cb+0x44>
		if (data->rsp->len) {
    8d90:	68e3      	ldr	r3, [r4, #12]
    8d92:	781b      	ldrb	r3, [r3, #0]
    8d94:	b923      	cbnz	r3, 8da0 <read_type_cb+0x40>
		return BT_GATT_ITER_STOP;
    8d96:	2500      	movs	r5, #0
}
    8d98:	4628      	mov	r0, r5
    8d9a:	b003      	add	sp, #12
    8d9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data->err = 0x00;
    8da0:	7527      	strb	r7, [r4, #20]
    8da2:	e7f8      	b.n	8d96 <read_type_cb+0x36>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
    8da4:	68a0      	ldr	r0, [r4, #8]
    8da6:	f00b f937 	bl	14018 <net_buf_frag_last>
    8daa:	2102      	movs	r1, #2
    8dac:	3008      	adds	r0, #8
    8dae:	f00b f955 	bl	1405c <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    8db2:	4b14      	ldr	r3, [pc, #80]	; (8e04 <read_type_cb+0xa4>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
    8db4:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    8db6:	4631      	mov	r1, r6
	data->item->handle = sys_cpu_to_le16(handle);
    8db8:	f8a0 9000 	strh.w	r9, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    8dbc:	68a2      	ldr	r2, [r4, #8]
    8dbe:	9300      	str	r3, [sp, #0]
    8dc0:	4640      	mov	r0, r8
    8dc2:	462b      	mov	r3, r5
    8dc4:	9401      	str	r4, [sp, #4]
    8dc6:	f009 fff7 	bl	12db8 <att_chan_read>
	if (read < 0) {
    8dca:	2800      	cmp	r0, #0
    8dcc:	da07      	bge.n	8dde <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
    8dce:	f110 0fff 	cmn.w	r0, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
    8dd2:	bf32      	itee	cc
    8dd4:	200e      	movcc	r0, #14
		return -err;
    8dd6:	4240      	negcs	r0, r0
    8dd8:	b2c0      	uxtbcs	r0, r0
		data->err = err_to_att(read);
    8dda:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
    8ddc:	e7dc      	b.n	8d98 <read_type_cb+0x38>
	if (!data->item) {
    8dde:	6923      	ldr	r3, [r4, #16]
    8de0:	2b00      	cmp	r3, #0
    8de2:	d0d8      	beq.n	8d96 <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
    8de4:	68a0      	ldr	r0, [r4, #8]
    8de6:	f009 ff21 	bl	12c2c <net_buf_frags_len>
    8dea:	f8b8 505e 	ldrh.w	r5, [r8, #94]	; 0x5e
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    8dee:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
    8df0:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    8df2:	7818      	ldrb	r0, [r3, #0]
    8df4:	4285      	cmp	r5, r0
    8df6:	bf94      	ite	ls
    8df8:	2500      	movls	r5, #0
    8dfa:	2501      	movhi	r5, #1
    8dfc:	e7cc      	b.n	8d98 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
    8dfe:	2501      	movs	r5, #1
    8e00:	e7ca      	b.n	8d98 <read_type_cb+0x38>
    8e02:	bf00      	nop
    8e04:	00012c49 	.word	0x00012c49

00008e08 <bt_att_connected>:
{
    8e08:	b538      	push	{r3, r4, r5, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    8e0a:	2104      	movs	r1, #4
{
    8e0c:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    8e0e:	6800      	ldr	r0, [r0, #0]
    8e10:	f009 fec6 	bl	12ba0 <bt_l2cap_le_lookup_tx_cid>
	struct bt_att *att = att_chan->att;
    8e14:	f850 5c08 	ldr.w	r5, [r0, #-8]
	if (sys_slist_is_empty(&att->chans)) {
    8e18:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    8e1a:	b93b      	cbnz	r3, 8e2c <bt_att_connected+0x24>
	z_impl_k_queue_init(queue);
    8e1c:	f105 000c 	add.w	r0, r5, #12
    8e20:	f00c f82b 	bl	14e7a <z_impl_k_queue_init>
    8e24:	f105 0024 	add.w	r0, r5, #36	; 0x24
    8e28:	f00c f827 	bl	14e7a <z_impl_k_queue_init>
Z_GENLIST_PREPEND(slist, snode)
    8e2c:	6bea      	ldr	r2, [r5, #60]	; 0x3c
	sys_slist_prepend(&att->chans, &chan->node);
    8e2e:	f504 7392 	add.w	r3, r4, #292	; 0x124
	parent->next = child;
    8e32:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
Z_GENLIST_PREPEND(slist, snode)
    8e36:	6c2a      	ldr	r2, [r5, #64]	; 0x40
	list->head = node;
    8e38:	63eb      	str	r3, [r5, #60]	; 0x3c
Z_GENLIST_PREPEND(slist, snode)
    8e3a:	b902      	cbnz	r2, 8e3e <bt_att_connected+0x36>
	list->tail = node;
    8e3c:	642b      	str	r3, [r5, #64]	; 0x40
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    8e3e:	f104 03b8 	add.w	r3, r4, #184	; 0xb8
    8e42:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
    8e46:	071b      	lsls	r3, r3, #28
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    8e48:	bf58      	it	pl
    8e4a:	2317      	movpl	r3, #23
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    8e4c:	f04f 0230 	mov.w	r2, #48	; 0x30
    8e50:	bf5c      	itt	pl
    8e52:	f8a4 3056 	strhpl.w	r3, [r4, #86]	; 0x56
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
    8e56:	f8a4 304a 	strhpl.w	r3, [r4, #74]	; 0x4a
    8e5a:	2100      	movs	r1, #0
    8e5c:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
    8e60:	f009 fa86 	bl	12370 <memset>
    8e64:	4b01      	ldr	r3, [pc, #4]	; (8e6c <bt_att_connected+0x64>)
    8e66:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
}
    8e6a:	bd38      	pop	{r3, r4, r5, pc}
    8e6c:	00009bf1 	.word	0x00009bf1

00008e70 <prep_write_cb>:
{
    8e70:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    8e74:	4614      	mov	r4, r2
    8e76:	4606      	mov	r6, r0
    8e78:	460f      	mov	r7, r1
	data->err = bt_gatt_check_perm(data->conn, attr,
    8e7a:	222a      	movs	r2, #42	; 0x2a
    8e7c:	4601      	mov	r1, r0
    8e7e:	6820      	ldr	r0, [r4, #0]
    8e80:	f00a fca6 	bl	137d0 <bt_gatt_check_perm>
    8e84:	4605      	mov	r5, r0
    8e86:	7420      	strb	r0, [r4, #16]
	if (data->err) {
    8e88:	2800      	cmp	r0, #0
    8e8a:	d12e      	bne.n	8eea <prep_write_cb+0x7a>
	if (!(attr->perm & BT_GATT_PERM_PREPARE_WRITE)) {
    8e8c:	7cb3      	ldrb	r3, [r6, #18]
    8e8e:	065b      	lsls	r3, r3, #25
    8e90:	d516      	bpl.n	8ec0 <prep_write_cb+0x50>
	write = attr->write(data->conn, attr, data->value, data->len,
    8e92:	2301      	movs	r3, #1
    8e94:	9301      	str	r3, [sp, #4]
    8e96:	89e3      	ldrh	r3, [r4, #14]
    8e98:	4631      	mov	r1, r6
    8e9a:	9300      	str	r3, [sp, #0]
    8e9c:	f8d6 8008 	ldr.w	r8, [r6, #8]
    8ea0:	89a3      	ldrh	r3, [r4, #12]
    8ea2:	68a2      	ldr	r2, [r4, #8]
    8ea4:	6820      	ldr	r0, [r4, #0]
    8ea6:	47c0      	blx	r8
	if (write != 0) {
    8ea8:	b150      	cbz	r0, 8ec0 <prep_write_cb+0x50>
	if (err < 0 && err >= -0xff) {
    8eaa:	f110 0fff 	cmn.w	r0, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
    8eae:	bf32      	itee	cc
    8eb0:	230e      	movcc	r3, #14
		return -err;
    8eb2:	4243      	negcs	r3, r0
    8eb4:	b2db      	uxtbcs	r3, r3
		data->err = BT_ATT_ERR_PREPARE_QUEUE_FULL;
    8eb6:	7423      	strb	r3, [r4, #16]
}
    8eb8:	4628      	mov	r0, r5
    8eba:	b002      	add	sp, #8
    8ebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_alloc_fixed(pool, timeout);
    8ec0:	2200      	movs	r2, #0
    8ec2:	2300      	movs	r3, #0
    8ec4:	480a      	ldr	r0, [pc, #40]	; (8ef0 <prep_write_cb+0x80>)
    8ec6:	f00b f873 	bl	13fb0 <net_buf_alloc_fixed>
	data->buf = net_buf_alloc(&prep_pool, K_NO_WAIT);
    8eca:	6060      	str	r0, [r4, #4]
	if (!data->buf) {
    8ecc:	b908      	cbnz	r0, 8ed2 <prep_write_cb+0x62>
		data->err = BT_ATT_ERR_PREPARE_QUEUE_FULL;
    8ece:	2309      	movs	r3, #9
    8ed0:	e7f1      	b.n	8eb6 <prep_write_cb+0x46>
	attr_data->offset = data->offset;
    8ed2:	89e3      	ldrh	r3, [r4, #14]
	attr_data->handle = handle;
    8ed4:	8287      	strh	r7, [r0, #20]
	attr_data->offset = data->offset;
    8ed6:	82c3      	strh	r3, [r0, #22]
	return net_buf_simple_add_mem(&buf->b, mem, len);
    8ed8:	89a2      	ldrh	r2, [r4, #12]
    8eda:	68a1      	ldr	r1, [r4, #8]
    8edc:	3008      	adds	r0, #8
    8ede:	f00b f8c3 	bl	14068 <net_buf_simple_add_mem>
	data->err = 0U;
    8ee2:	2300      	movs	r3, #0
	return BT_GATT_ITER_CONTINUE;
    8ee4:	2501      	movs	r5, #1
	data->err = 0U;
    8ee6:	7423      	strb	r3, [r4, #16]
	return BT_GATT_ITER_CONTINUE;
    8ee8:	e7e6      	b.n	8eb8 <prep_write_cb+0x48>
		return BT_GATT_ITER_STOP;
    8eea:	2500      	movs	r5, #0
    8eec:	e7e4      	b.n	8eb8 <prep_write_cb+0x48>
    8eee:	bf00      	nop
    8ef0:	200007e8 	.word	0x200007e8

00008ef4 <chan_send>:
{
    8ef4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    8ef8:	688b      	ldr	r3, [r1, #8]
{
    8efa:	4605      	mov	r5, r0
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    8efc:	781b      	ldrb	r3, [r3, #0]
{
    8efe:	460c      	mov	r4, r1
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    8f00:	2bd2      	cmp	r3, #210	; 0xd2
{
    8f02:	4691      	mov	r9, r2
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    8f04:	d116      	bne.n	8f34 <chan_send+0x40>
		err = bt_smp_sign(chan->att->conn, buf);
    8f06:	6803      	ldr	r3, [r0, #0]
    8f08:	6818      	ldr	r0, [r3, #0]
    8f0a:	f003 fd21 	bl	c950 <bt_smp_sign>
		if (err) {
    8f0e:	4606      	mov	r6, r0
    8f10:	b180      	cbz	r0, 8f34 <chan_send+0x40>
    8f12:	4928      	ldr	r1, [pc, #160]	; (8fb4 <chan_send+0xc0>)
    8f14:	4b28      	ldr	r3, [pc, #160]	; (8fb8 <chan_send+0xc4>)
			BT_ERR("Error signing data");
    8f16:	4829      	ldr	r0, [pc, #164]	; (8fbc <chan_send+0xc8>)
    8f18:	1ac9      	subs	r1, r1, r3
    8f1a:	08c9      	lsrs	r1, r1, #3
    8f1c:	0189      	lsls	r1, r1, #6
    8f1e:	f041 0101 	orr.w	r1, r1, #1
    8f22:	f007 fec7 	bl	10cb4 <log_0>
		net_buf_unref(buf);
    8f26:	4620      	mov	r0, r4
    8f28:	f004 f98e 	bl	d248 <net_buf_unref>
}
    8f2c:	4630      	mov	r0, r6
    8f2e:	b003      	add	sp, #12
    8f30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
    8f34:	f104 0008 	add.w	r0, r4, #8
    8f38:	f00b f8d0 	bl	140dc <net_buf_simple_headroom>
	state->len = buf->len;
    8f3c:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    8f40:	4607      	mov	r7, r0
	chan->sent = cb ? cb : chan_cb(buf);
    8f42:	f1b9 0f00 	cmp.w	r9, #0
    8f46:	d10a      	bne.n	8f5e <chan_send+0x6a>
	switch (att_op_get_type(buf->data[0])) {
    8f48:	68a3      	ldr	r3, [r4, #8]
    8f4a:	7818      	ldrb	r0, [r3, #0]
    8f4c:	f009 fe8c 	bl	12c68 <att_op_get_type>
    8f50:	1e43      	subs	r3, r0, #1
    8f52:	b2db      	uxtb	r3, r3
    8f54:	2b04      	cmp	r3, #4
    8f56:	bf9c      	itt	ls
    8f58:	4a19      	ldrls	r2, [pc, #100]	; (8fc0 <chan_send+0xcc>)
    8f5a:	f852 9023 	ldrls.w	r9, [r2, r3, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    8f5e:	682b      	ldr	r3, [r5, #0]
    8f60:	4620      	mov	r0, r4
	chan->sent = cb ? cb : chan_cb(buf);
    8f62:	f8c5 9128 	str.w	r9, [r5, #296]	; 0x128
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    8f66:	681e      	ldr	r6, [r3, #0]
    8f68:	f00b f852 	bl	14010 <net_buf_ref>
    8f6c:	f8d5 1128 	ldr.w	r1, [r5, #296]	; 0x128
	if (cb == chan_rsp_sent) {
    8f70:	4b14      	ldr	r3, [pc, #80]	; (8fc4 <chan_send+0xd0>)
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    8f72:	4602      	mov	r2, r0
	if (cb == chan_rsp_sent) {
    8f74:	4299      	cmp	r1, r3
    8f76:	d019      	beq.n	8fac <chan_send+0xb8>
	} else if (cb == chan_cfm_sent) {
    8f78:	4b13      	ldr	r3, [pc, #76]	; (8fc8 <chan_send+0xd4>)
    8f7a:	4299      	cmp	r1, r3
    8f7c:	d018      	beq.n	8fb0 <chan_send+0xbc>
		return att_sent;
    8f7e:	f8df c05c 	ldr.w	ip, [pc, #92]	; 8fdc <chan_send+0xe8>
    8f82:	4b12      	ldr	r3, [pc, #72]	; (8fcc <chan_send+0xd8>)
    8f84:	4812      	ldr	r0, [pc, #72]	; (8fd0 <chan_send+0xdc>)
    8f86:	4561      	cmp	r1, ip
    8f88:	bf18      	it	ne
    8f8a:	4603      	movne	r3, r0
				&chan->chan.chan);
    8f8c:	3508      	adds	r5, #8
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    8f8e:	4630      	mov	r0, r6
    8f90:	2104      	movs	r1, #4
    8f92:	9500      	str	r5, [sp, #0]
    8f94:	f009 fdeb 	bl	12b6e <bt_l2cap_send_cb>
	if (!err) {
    8f98:	4606      	mov	r6, r0
    8f9a:	2800      	cmp	r0, #0
    8f9c:	d0c3      	beq.n	8f26 <chan_send+0x32>
	buf->data = buf->__buf + state->offset;
    8f9e:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    8fa0:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
    8fa4:	fa10 f787 	uxtah	r7, r0, r7
    8fa8:	60a7      	str	r7, [r4, #8]
}
    8faa:	e7bf      	b.n	8f2c <chan_send+0x38>
		return att_rsp_sent;
    8fac:	4b09      	ldr	r3, [pc, #36]	; (8fd4 <chan_send+0xe0>)
    8fae:	e7ed      	b.n	8f8c <chan_send+0x98>
		return att_cfm_sent;
    8fb0:	4b09      	ldr	r3, [pc, #36]	; (8fd8 <chan_send+0xe4>)
    8fb2:	e7eb      	b.n	8f8c <chan_send+0x98>
    8fb4:	00015a00 	.word	0x00015a00
    8fb8:	00015a00 	.word	0x00015a00
    8fbc:	00018522 	.word	0x00018522
    8fc0:	0001609c 	.word	0x0001609c
    8fc4:	00012d91 	.word	0x00012d91
    8fc8:	00012da5 	.word	0x00012da5
    8fcc:	000089c1 	.word	0x000089c1
    8fd0:	00012c3d 	.word	0x00012c3d
    8fd4:	000089b1 	.word	0x000089b1
    8fd8:	000089a1 	.word	0x000089a1
    8fdc:	00008bc9 	.word	0x00008bc9

00008fe0 <bt_att_chan_create_pdu>:
{
    8fe0:	b538      	push	{r3, r4, r5, lr}
    8fe2:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
    8fe4:	f8b0 105e 	ldrh.w	r1, [r0, #94]	; 0x5e
    8fe8:	3201      	adds	r2, #1
    8fea:	428a      	cmp	r2, r1
    8fec:	d90c      	bls.n	9008 <bt_att_chan_create_pdu+0x28>
    8fee:	481a      	ldr	r0, [pc, #104]	; (9058 <bt_att_chan_create_pdu+0x78>)
    8ff0:	4b1a      	ldr	r3, [pc, #104]	; (905c <bt_att_chan_create_pdu+0x7c>)
		return NULL;
    8ff2:	2400      	movs	r4, #0
    8ff4:	1a1b      	subs	r3, r3, r0
    8ff6:	08db      	lsrs	r3, r3, #3
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
    8ff8:	019b      	lsls	r3, r3, #6
    8ffa:	4819      	ldr	r0, [pc, #100]	; (9060 <bt_att_chan_create_pdu+0x80>)
    8ffc:	f043 0302 	orr.w	r3, r3, #2
    9000:	f007 fe79 	bl	10cf6 <log_2>
}
    9004:	4620      	mov	r0, r4
    9006:	bd38      	pop	{r3, r4, r5, pc}
	switch (att_op_get_type(op)) {
    9008:	4628      	mov	r0, r5
    900a:	f009 fe2d 	bl	12c68 <att_op_get_type>
    900e:	2802      	cmp	r0, #2
    9010:	d001      	beq.n	9016 <bt_att_chan_create_pdu+0x36>
    9012:	2804      	cmp	r0, #4
    9014:	d114      	bne.n	9040 <bt_att_chan_create_pdu+0x60>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
    9016:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    901a:	2300      	movs	r3, #0
		buf = bt_l2cap_create_pdu(NULL, 0);
    901c:	2100      	movs	r1, #0
    901e:	4608      	mov	r0, r1
    9020:	f009 fda2 	bl	12b68 <bt_l2cap_create_pdu_timeout>
    9024:	4604      	mov	r4, r0
	if (!buf) {
    9026:	b980      	cbnz	r0, 904a <bt_att_chan_create_pdu+0x6a>
    9028:	4b0b      	ldr	r3, [pc, #44]	; (9058 <bt_att_chan_create_pdu+0x78>)
    902a:	4a0c      	ldr	r2, [pc, #48]	; (905c <bt_att_chan_create_pdu+0x7c>)
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
    902c:	4629      	mov	r1, r5
    902e:	1ad2      	subs	r2, r2, r3
    9030:	08d2      	lsrs	r2, r2, #3
    9032:	0192      	lsls	r2, r2, #6
    9034:	480b      	ldr	r0, [pc, #44]	; (9064 <bt_att_chan_create_pdu+0x84>)
    9036:	f042 0201 	orr.w	r2, r2, #1
    903a:	f007 fe48 	bl	10cce <log_1>
		return NULL;
    903e:	e7e1      	b.n	9004 <bt_att_chan_create_pdu+0x24>
		buf = bt_l2cap_create_pdu(NULL, 0);
    9040:	f04f 32ff 	mov.w	r2, #4294967295
    9044:	f04f 33ff 	mov.w	r3, #4294967295
    9048:	e7e8      	b.n	901c <bt_att_chan_create_pdu+0x3c>
	return net_buf_simple_add(&buf->b, len);
    904a:	2101      	movs	r1, #1
    904c:	3008      	adds	r0, #8
    904e:	f00b f805 	bl	1405c <net_buf_simple_add>
	hdr->code = op;
    9052:	7005      	strb	r5, [r0, #0]
	return buf;
    9054:	e7d6      	b.n	9004 <bt_att_chan_create_pdu+0x24>
    9056:	bf00      	nop
    9058:	00015a00 	.word	0x00015a00
    905c:	00015a00 	.word	0x00015a00
    9060:	00018535 	.word	0x00018535
    9064:	00018329 	.word	0x00018329

00009068 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
    9068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    906c:	4688      	mov	r8, r1
    906e:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    9070:	2101      	movs	r1, #1
    9072:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
    9074:	4605      	mov	r5, r0
    9076:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    9078:	f7ff ffb2 	bl	8fe0 <bt_att_chan_create_pdu>
	if (!buf) {
    907c:	4604      	mov	r4, r0
    907e:	b178      	cbz	r0, 90a0 <send_err_rsp.part.0+0x38>
    9080:	2104      	movs	r1, #4
    9082:	3008      	adds	r0, #8
    9084:	f00a ffea 	bl	1405c <net_buf_simple_add>
	rsp->request = req;
    9088:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
    908c:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
    908e:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
    9092:	4621      	mov	r1, r4
    9094:	4628      	mov	r0, r5
}
    9096:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
    909a:	4a02      	ldr	r2, [pc, #8]	; (90a4 <send_err_rsp.part.0+0x3c>)
    909c:	f009 bfe7 	b.w	1306e <bt_att_chan_send_rsp>
}
    90a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    90a4:	00012d91 	.word	0x00012d91

000090a8 <bt_att_recv>:
	if (buf->len < sizeof(*hdr)) {
    90a8:	898b      	ldrh	r3, [r1, #12]
{
    90aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    90ae:	4604      	mov	r4, r0
    90b0:	4688      	mov	r8, r1
	if (buf->len < sizeof(*hdr)) {
    90b2:	b963      	cbnz	r3, 90ce <bt_att_recv+0x26>
    90b4:	4948      	ldr	r1, [pc, #288]	; (91d8 <bt_att_recv+0x130>)
    90b6:	4b49      	ldr	r3, [pc, #292]	; (91dc <bt_att_recv+0x134>)
		BT_ERR("Too small ATT PDU received");
    90b8:	4849      	ldr	r0, [pc, #292]	; (91e0 <bt_att_recv+0x138>)
    90ba:	1ac9      	subs	r1, r1, r3
    90bc:	08c9      	lsrs	r1, r1, #3
    90be:	0189      	lsls	r1, r1, #6
    90c0:	f041 0101 	orr.w	r1, r1, #1
			BT_WARN("Ignoring unexpected indication");
    90c4:	f007 fdf6 	bl	10cb4 <log_0>
}
    90c8:	2000      	movs	r0, #0
    90ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
    90ce:	2101      	movs	r1, #1
    90d0:	f108 0008 	add.w	r0, r8, #8
    90d4:	f00a fff2 	bl	140bc <net_buf_simple_pull_mem>
	if (!att_chan->att) {
    90d8:	f854 3c08 	ldr.w	r3, [r4, #-8]
    90dc:	4605      	mov	r5, r0
    90de:	2b00      	cmp	r3, #0
    90e0:	d0f2      	beq.n	90c8 <bt_att_recv+0x20>
		if (hdr->code == handlers[i].op) {
    90e2:	4a40      	ldr	r2, [pc, #256]	; (91e4 <bt_att_recv+0x13c>)
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    90e4:	2300      	movs	r3, #0
    90e6:	4694      	mov	ip, r2
		if (hdr->code == handlers[i].op) {
    90e8:	7801      	ldrb	r1, [r0, #0]
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
    90ea:	f1a4 0608 	sub.w	r6, r4, #8
		if (hdr->code == handlers[i].op) {
    90ee:	f812 0033 	ldrb.w	r0, [r2, r3, lsl #3]
    90f2:	4288      	cmp	r0, r1
    90f4:	d119      	bne.n	912a <bt_att_recv+0x82>
		if (handler->type == ATT_REQUEST &&
    90f6:	00d8      	lsls	r0, r3, #3
    90f8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    90fc:	789f      	ldrb	r7, [r3, #2]
    90fe:	2f01      	cmp	r7, #1
    9100:	d12e      	bne.n	9160 <bt_att_recv+0xb8>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    9102:	34b8      	adds	r4, #184	; 0xb8
    9104:	e8d4 3fef 	ldaex	r3, [r4]
    9108:	f043 0201 	orr.w	r2, r3, #1
    910c:	e8c4 2fe1 	stlex	r1, r2, [r4]
    9110:	2900      	cmp	r1, #0
    9112:	d1f7      	bne.n	9104 <bt_att_recv+0x5c>
    9114:	07da      	lsls	r2, r3, #31
    9116:	d539      	bpl.n	918c <bt_att_recv+0xe4>
    9118:	492f      	ldr	r1, [pc, #188]	; (91d8 <bt_att_recv+0x130>)
    911a:	4b30      	ldr	r3, [pc, #192]	; (91dc <bt_att_recv+0x134>)
			BT_WARN("Ignoring unexpected request");
    911c:	4832      	ldr	r0, [pc, #200]	; (91e8 <bt_att_recv+0x140>)
    911e:	1ac9      	subs	r1, r1, r3
    9120:	08c9      	lsrs	r1, r1, #3
    9122:	0189      	lsls	r1, r1, #6
    9124:	f041 0102 	orr.w	r1, r1, #2
    9128:	e7cc      	b.n	90c4 <bt_att_recv+0x1c>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    912a:	3301      	adds	r3, #1
    912c:	2b0e      	cmp	r3, #14
    912e:	d1de      	bne.n	90ee <bt_att_recv+0x46>
    9130:	4b2a      	ldr	r3, [pc, #168]	; (91dc <bt_att_recv+0x134>)
    9132:	4a29      	ldr	r2, [pc, #164]	; (91d8 <bt_att_recv+0x130>)
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
    9134:	482d      	ldr	r0, [pc, #180]	; (91ec <bt_att_recv+0x144>)
    9136:	1ad2      	subs	r2, r2, r3
    9138:	08d2      	lsrs	r2, r2, #3
    913a:	0192      	lsls	r2, r2, #6
    913c:	f042 0202 	orr.w	r2, r2, #2
    9140:	f007 fdc5 	bl	10cce <log_1>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
    9144:	7829      	ldrb	r1, [r5, #0]
    9146:	4608      	mov	r0, r1
    9148:	f009 fd8e 	bl	12c68 <att_op_get_type>
    914c:	2800      	cmp	r0, #0
    914e:	d0bb      	beq.n	90c8 <bt_att_recv+0x20>
	if (!req) {
    9150:	2900      	cmp	r1, #0
    9152:	d0b9      	beq.n	90c8 <bt_att_recv+0x20>
    9154:	2306      	movs	r3, #6
    9156:	2200      	movs	r2, #0
    9158:	4630      	mov	r0, r6
    915a:	f7ff ff85 	bl	9068 <send_err_rsp.part.0>
    915e:	e7b3      	b.n	90c8 <bt_att_recv+0x20>
		} else if (handler->type == ATT_INDICATION &&
    9160:	2f05      	cmp	r7, #5
    9162:	d113      	bne.n	918c <bt_att_recv+0xe4>
    9164:	34b8      	adds	r4, #184	; 0xb8
    9166:	e8d4 3fef 	ldaex	r3, [r4]
    916a:	f043 0202 	orr.w	r2, r3, #2
    916e:	e8c4 2fe1 	stlex	r1, r2, [r4]
    9172:	2900      	cmp	r1, #0
    9174:	d1f7      	bne.n	9166 <bt_att_recv+0xbe>
    9176:	079b      	lsls	r3, r3, #30
    9178:	d508      	bpl.n	918c <bt_att_recv+0xe4>
    917a:	4917      	ldr	r1, [pc, #92]	; (91d8 <bt_att_recv+0x130>)
    917c:	4b17      	ldr	r3, [pc, #92]	; (91dc <bt_att_recv+0x134>)
			BT_WARN("Ignoring unexpected indication");
    917e:	481c      	ldr	r0, [pc, #112]	; (91f0 <bt_att_recv+0x148>)
    9180:	1ac9      	subs	r1, r1, r3
    9182:	08c9      	lsrs	r1, r1, #3
    9184:	0189      	lsls	r1, r1, #6
    9186:	f041 0102 	orr.w	r1, r1, #2
    918a:	e79b      	b.n	90c4 <bt_att_recv+0x1c>
	if (buf->len < handler->expect_len) {
    918c:	eb0c 0300 	add.w	r3, ip, r0
    9190:	f8b8 100c 	ldrh.w	r1, [r8, #12]
    9194:	785a      	ldrb	r2, [r3, #1]
    9196:	428a      	cmp	r2, r1
    9198:	d90e      	bls.n	91b8 <bt_att_recv+0x110>
    919a:	4a10      	ldr	r2, [pc, #64]	; (91dc <bt_att_recv+0x134>)
    919c:	4b0e      	ldr	r3, [pc, #56]	; (91d8 <bt_att_recv+0x130>)
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
    919e:	4815      	ldr	r0, [pc, #84]	; (91f4 <bt_att_recv+0x14c>)
    91a0:	1a9b      	subs	r3, r3, r2
    91a2:	08db      	lsrs	r3, r3, #3
    91a4:	019b      	lsls	r3, r3, #6
    91a6:	782a      	ldrb	r2, [r5, #0]
    91a8:	f043 0301 	orr.w	r3, r3, #1
    91ac:	f007 fda3 	bl	10cf6 <log_2>
	if (handler->type == ATT_REQUEST && err) {
    91b0:	2f01      	cmp	r7, #1
    91b2:	d189      	bne.n	90c8 <bt_att_recv+0x20>
		err = BT_ATT_ERR_INVALID_PDU;
    91b4:	2304      	movs	r3, #4
    91b6:	e009      	b.n	91cc <bt_att_recv+0x124>
		err = handler->func(att_chan, buf);
    91b8:	685b      	ldr	r3, [r3, #4]
    91ba:	4641      	mov	r1, r8
    91bc:	4630      	mov	r0, r6
    91be:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
    91c0:	2f01      	cmp	r7, #1
		err = handler->func(att_chan, buf);
    91c2:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
    91c4:	d180      	bne.n	90c8 <bt_att_recv+0x20>
    91c6:	2800      	cmp	r0, #0
    91c8:	f43f af7e 	beq.w	90c8 <bt_att_recv+0x20>
		send_err_rsp(att_chan, hdr->code, 0, err);
    91cc:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
    91ce:	2900      	cmp	r1, #0
    91d0:	f43f af7a 	beq.w	90c8 <bt_att_recv+0x20>
    91d4:	e7bf      	b.n	9156 <bt_att_recv+0xae>
    91d6:	bf00      	nop
    91d8:	00015a00 	.word	0x00015a00
    91dc:	00015a00 	.word	0x00015a00
    91e0:	0001855a 	.word	0x0001855a
    91e4:	000160b0 	.word	0x000160b0
    91e8:	00018575 	.word	0x00018575
    91ec:	000185cf 	.word	0x000185cf
    91f0:	00018591 	.word	0x00018591
    91f4:	000185b0 	.word	0x000185b0

000091f8 <att_write_rsp>:
{
    91f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    91fc:	461f      	mov	r7, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    91fe:	6803      	ldr	r3, [r0, #0]
    9200:	460e      	mov	r6, r1
    9202:	3900      	subs	r1, #0
{
    9204:	4605      	mov	r5, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    9206:	bf18      	it	ne
    9208:	2101      	movne	r1, #1
{
    920a:	b086      	sub	sp, #24
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    920c:	6818      	ldr	r0, [r3, #0]
{
    920e:	4690      	mov	r8, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    9210:	f00a fb09 	bl	13826 <bt_gatt_change_aware>
    9214:	2800      	cmp	r0, #0
    9216:	d04e      	beq.n	92b6 <att_write_rsp+0xbe>
	if (!handle) {
    9218:	2f00      	cmp	r7, #0
    921a:	d04e      	beq.n	92ba <att_write_rsp+0xc2>
	(void)memset(&data, 0, sizeof(data));
    921c:	2218      	movs	r2, #24
    921e:	2100      	movs	r1, #0
    9220:	4668      	mov	r0, sp
    9222:	f009 f8a5 	bl	12370 <memset>
	if (rsp) {
    9226:	f1b8 0f00 	cmp.w	r8, #0
    922a:	d126      	bne.n	927a <att_write_rsp+0x82>
	data.conn = chan->att->conn;
    922c:	682b      	ldr	r3, [r5, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    922e:	4639      	mov	r1, r7
	data.conn = chan->att->conn;
    9230:	681b      	ldr	r3, [r3, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    9232:	4638      	mov	r0, r7
	data.conn = chan->att->conn;
    9234:	9300      	str	r3, [sp, #0]
	data.offset = offset;
    9236:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    923a:	4a21      	ldr	r2, [pc, #132]	; (92c0 <att_write_rsp+0xc8>)
	data.offset = offset;
    923c:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
    9240:	9b0d      	ldr	r3, [sp, #52]	; 0x34
	data.req = req;
    9242:	f88d 6008 	strb.w	r6, [sp, #8]
	data.value = value;
    9246:	9303      	str	r3, [sp, #12]
	data.len = len;
    9248:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    924c:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    9250:	2301      	movs	r3, #1
    9252:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    9256:	466b      	mov	r3, sp
    9258:	f009 fd33 	bl	12cc2 <bt_gatt_foreach_attr>
	if (data.err) {
    925c:	f89d 4014 	ldrb.w	r4, [sp, #20]
    9260:	b30c      	cbz	r4, 92a6 <att_write_rsp+0xae>
		if (rsp) {
    9262:	f1b8 0f00 	cmp.w	r8, #0
    9266:	d019      	beq.n	929c <att_write_rsp+0xa4>
			net_buf_unref(data.buf);
    9268:	9801      	ldr	r0, [sp, #4]
    926a:	f003 ffed 	bl	d248 <net_buf_unref>
	if (!req) {
    926e:	b976      	cbnz	r6, 928e <att_write_rsp+0x96>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    9270:	2400      	movs	r4, #0
}
    9272:	4620      	mov	r0, r4
    9274:	b006      	add	sp, #24
    9276:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
    927a:	2200      	movs	r2, #0
    927c:	4641      	mov	r1, r8
    927e:	4628      	mov	r0, r5
    9280:	f7ff feae 	bl	8fe0 <bt_att_chan_create_pdu>
    9284:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
    9286:	2800      	cmp	r0, #0
    9288:	d1d0      	bne.n	922c <att_write_rsp+0x34>
			return BT_ATT_ERR_UNLIKELY;
    928a:	240e      	movs	r4, #14
    928c:	e7f1      	b.n	9272 <att_write_rsp+0x7a>
    928e:	463a      	mov	r2, r7
    9290:	4631      	mov	r1, r6
    9292:	4628      	mov	r0, r5
    9294:	f89d 3014 	ldrb.w	r3, [sp, #20]
    9298:	f7ff fee6 	bl	9068 <send_err_rsp.part.0>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    929c:	2e18      	cmp	r6, #24
    929e:	d1e7      	bne.n	9270 <att_write_rsp+0x78>
    92a0:	f89d 4014 	ldrb.w	r4, [sp, #20]
    92a4:	e7e5      	b.n	9272 <att_write_rsp+0x7a>
	if (data.buf) {
    92a6:	9901      	ldr	r1, [sp, #4]
    92a8:	2900      	cmp	r1, #0
    92aa:	d0e1      	beq.n	9270 <att_write_rsp+0x78>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    92ac:	4628      	mov	r0, r5
    92ae:	4a05      	ldr	r2, [pc, #20]	; (92c4 <att_write_rsp+0xcc>)
    92b0:	f009 fedd 	bl	1306e <bt_att_chan_send_rsp>
    92b4:	e7dd      	b.n	9272 <att_write_rsp+0x7a>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    92b6:	2412      	movs	r4, #18
    92b8:	e7db      	b.n	9272 <att_write_rsp+0x7a>
		return BT_ATT_ERR_INVALID_HANDLE;
    92ba:	2401      	movs	r4, #1
    92bc:	e7d9      	b.n	9272 <att_write_rsp+0x7a>
    92be:	bf00      	nop
    92c0:	00012ecf 	.word	0x00012ecf
    92c4:	00012d91 	.word	0x00012d91

000092c8 <att_signed_write_cmd>:
{
    92c8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	handle = sys_le16_to_cpu(req->handle);
    92cc:	4688      	mov	r8, r1
{
    92ce:	460c      	mov	r4, r1
	handle = sys_le16_to_cpu(req->handle);
    92d0:	f858 3f08 	ldr.w	r3, [r8, #8]!
	struct bt_conn *conn = chan->chan.chan.conn;
    92d4:	6885      	ldr	r5, [r0, #8]
	return net_buf_simple_push(&buf->b, len);
    92d6:	2101      	movs	r1, #1
{
    92d8:	4606      	mov	r6, r0
    92da:	4640      	mov	r0, r8
	handle = sys_le16_to_cpu(req->handle);
    92dc:	881f      	ldrh	r7, [r3, #0]
    92de:	f00a fed4 	bl	1408a <net_buf_simple_push>
	err = bt_smp_sign_verify(conn, buf);
    92e2:	4628      	mov	r0, r5
    92e4:	4621      	mov	r1, r4
    92e6:	f003 fab7 	bl	c858 <bt_smp_sign_verify>
	if (err) {
    92ea:	4605      	mov	r5, r0
    92ec:	b168      	cbz	r0, 930a <att_signed_write_cmd+0x42>
    92ee:	4b12      	ldr	r3, [pc, #72]	; (9338 <att_signed_write_cmd+0x70>)
    92f0:	4912      	ldr	r1, [pc, #72]	; (933c <att_signed_write_cmd+0x74>)
		BT_ERR("Error verifying data");
    92f2:	4813      	ldr	r0, [pc, #76]	; (9340 <att_signed_write_cmd+0x78>)
    92f4:	1ac9      	subs	r1, r1, r3
    92f6:	08c9      	lsrs	r1, r1, #3
    92f8:	0189      	lsls	r1, r1, #6
    92fa:	f041 0101 	orr.w	r1, r1, #1
    92fe:	f007 fcd9 	bl	10cb4 <log_0>
		return 0;
    9302:	2000      	movs	r0, #0
}
    9304:	b004      	add	sp, #16
    9306:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_pull(&buf->b, len);
    930a:	2101      	movs	r1, #1
    930c:	4640      	mov	r0, r8
    930e:	f00a fecd 	bl	140ac <net_buf_simple_pull>
    9312:	2102      	movs	r1, #2
    9314:	4640      	mov	r0, r8
    9316:	f00a fec9 	bl	140ac <net_buf_simple_pull>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data,
    931a:	89a3      	ldrh	r3, [r4, #12]
    931c:	462a      	mov	r2, r5
    931e:	3b0c      	subs	r3, #12
    9320:	b29b      	uxth	r3, r3
    9322:	9302      	str	r3, [sp, #8]
    9324:	68a3      	ldr	r3, [r4, #8]
    9326:	4629      	mov	r1, r5
    9328:	e9cd 5300 	strd	r5, r3, [sp]
    932c:	4630      	mov	r0, r6
    932e:	463b      	mov	r3, r7
    9330:	f7ff ff62 	bl	91f8 <att_write_rsp>
    9334:	e7e6      	b.n	9304 <att_signed_write_cmd+0x3c>
    9336:	bf00      	nop
    9338:	00015a00 	.word	0x00015a00
    933c:	00015a00 	.word	0x00015a00
    9340:	000185e9 	.word	0x000185e9

00009344 <bt_att_create_pdu>:
{
    9344:	b570      	push	{r4, r5, r6, lr}
    9346:	460e      	mov	r6, r1
    9348:	4615      	mov	r5, r2
	att = att_get(conn);
    934a:	f7ff fbff 	bl	8b4c <att_get>
	if (!att) {
    934e:	b1c0      	cbz	r0, 9382 <bt_att_create_pdu+0x3e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    9350:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
	return list->head;
    9352:	1c69      	adds	r1, r5, #1
    9354:	b15b      	cbz	r3, 936e <bt_att_create_pdu+0x2a>
    9356:	f5b3 7096 	subs.w	r0, r3, #300	; 0x12c
    935a:	d008      	beq.n	936e <bt_att_create_pdu+0x2a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    935c:	681b      	ldr	r3, [r3, #0]
    935e:	b10b      	cbz	r3, 9364 <bt_att_create_pdu+0x20>
    9360:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
		if (len + sizeof(op) > chan->chan.tx.mtu) {
    9364:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
    9368:	4291      	cmp	r1, r2
    936a:	d90c      	bls.n	9386 <bt_att_create_pdu+0x42>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    936c:	b98b      	cbnz	r3, 9392 <bt_att_create_pdu+0x4e>
    936e:	4a0e      	ldr	r2, [pc, #56]	; (93a8 <bt_att_create_pdu+0x64>)
    9370:	4b0e      	ldr	r3, [pc, #56]	; (93ac <bt_att_create_pdu+0x68>)
	BT_WARN("No ATT channel for MTU %zu", len + sizeof(op));
    9372:	480f      	ldr	r0, [pc, #60]	; (93b0 <bt_att_create_pdu+0x6c>)
    9374:	1ad2      	subs	r2, r2, r3
    9376:	08d2      	lsrs	r2, r2, #3
    9378:	0192      	lsls	r2, r2, #6
    937a:	f042 0202 	orr.w	r2, r2, #2
    937e:	f007 fca6 	bl	10cce <log_1>
}
    9382:	2000      	movs	r0, #0
    9384:	bd70      	pop	{r4, r5, r6, pc}
		return bt_att_chan_create_pdu(chan, op, len);
    9386:	462a      	mov	r2, r5
    9388:	4631      	mov	r1, r6
}
    938a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
    938e:	f7ff be27 	b.w	8fe0 <bt_att_chan_create_pdu>
Z_GENLIST_PEEK_NEXT(slist, snode)
    9392:	f513 7496 	adds.w	r4, r3, #300	; 0x12c
    9396:	d004      	beq.n	93a2 <bt_att_create_pdu+0x5e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    9398:	f8d3 412c 	ldr.w	r4, [r3, #300]	; 0x12c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    939c:	b10c      	cbz	r4, 93a2 <bt_att_create_pdu+0x5e>
    939e:	f5a4 7496 	sub.w	r4, r4, #300	; 0x12c
{
    93a2:	4618      	mov	r0, r3
    93a4:	4623      	mov	r3, r4
    93a6:	e7dd      	b.n	9364 <bt_att_create_pdu+0x20>
    93a8:	00015a00 	.word	0x00015a00
    93ac:	00015a00 	.word	0x00015a00
    93b0:	000185fe 	.word	0x000185fe

000093b4 <att_exec_write_req>:
{
    93b4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    93b8:	4606      	mov	r6, r0
	uint8_t err = 0U;
    93ba:	2400      	movs	r4, #0
	return att_exec_write_rsp(chan, req->flags);
    93bc:	688b      	ldr	r3, [r1, #8]
	struct bt_conn *conn = chan->chan.chan.conn;
    93be:	6887      	ldr	r7, [r0, #8]
	return att_exec_write_rsp(chan, req->flags);
    93c0:	f893 8000 	ldrb.w	r8, [r3]
	while ((buf = net_buf_get(&chan->att->prep_queue, K_NO_WAIT))) {
    93c4:	6830      	ldr	r0, [r6, #0]
    93c6:	2200      	movs	r2, #0
    93c8:	2300      	movs	r3, #0
    93ca:	3024      	adds	r0, #36	; 0x24
    93cc:	f00a fdf5 	bl	13fba <net_buf_get>
    93d0:	4605      	mov	r5, r0
    93d2:	b978      	cbnz	r0, 93f4 <att_exec_write_req+0x40>
	if (err) {
    93d4:	bb54      	cbnz	r4, 942c <att_exec_write_req+0x78>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_EXEC_WRITE_RSP, 0);
    93d6:	2119      	movs	r1, #25
    93d8:	4622      	mov	r2, r4
    93da:	4638      	mov	r0, r7
    93dc:	f7ff ffb2 	bl	9344 <bt_att_create_pdu>
	if (!buf) {
    93e0:	4601      	mov	r1, r0
    93e2:	b328      	cbz	r0, 9430 <att_exec_write_req+0x7c>
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
    93e4:	4630      	mov	r0, r6
    93e6:	4a13      	ldr	r2, [pc, #76]	; (9434 <att_exec_write_req+0x80>)
    93e8:	f009 fe41 	bl	1306e <bt_att_chan_send_rsp>
}
    93ec:	4620      	mov	r0, r4
    93ee:	b004      	add	sp, #16
    93f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!err && flags == BT_ATT_FLAG_EXEC) {
    93f4:	b9b4      	cbnz	r4, 9424 <att_exec_write_req+0x70>
    93f6:	f1b8 0f01 	cmp.w	r8, #1
    93fa:	d113      	bne.n	9424 <att_exec_write_req+0x70>
			err = att_write_rsp(chan, BT_ATT_OP_EXEC_WRITE_REQ, 0,
    93fc:	89aa      	ldrh	r2, [r5, #12]
    93fe:	8aab      	ldrh	r3, [r5, #20]
    9400:	9202      	str	r2, [sp, #8]
    9402:	68aa      	ldr	r2, [r5, #8]
    9404:	2118      	movs	r1, #24
    9406:	9201      	str	r2, [sp, #4]
    9408:	8aea      	ldrh	r2, [r5, #22]
    940a:	4630      	mov	r0, r6
    940c:	9200      	str	r2, [sp, #0]
    940e:	4622      	mov	r2, r4
    9410:	f7ff fef2 	bl	91f8 <att_write_rsp>
			if (err) {
    9414:	4604      	mov	r4, r0
    9416:	b128      	cbz	r0, 9424 <att_exec_write_req+0x70>
	if (!req) {
    9418:	4603      	mov	r3, r0
    941a:	2118      	movs	r1, #24
    941c:	4630      	mov	r0, r6
    941e:	8aaa      	ldrh	r2, [r5, #20]
    9420:	f7ff fe22 	bl	9068 <send_err_rsp.part.0>
		net_buf_unref(buf);
    9424:	4628      	mov	r0, r5
    9426:	f003 ff0f 	bl	d248 <net_buf_unref>
    942a:	e7cb      	b.n	93c4 <att_exec_write_req+0x10>
		return 0;
    942c:	4604      	mov	r4, r0
    942e:	e7dd      	b.n	93ec <att_exec_write_req+0x38>
		return BT_ATT_ERR_UNLIKELY;
    9430:	240e      	movs	r4, #14
    9432:	e7db      	b.n	93ec <att_exec_write_req+0x38>
    9434:	00012d91 	.word	0x00012d91

00009438 <att_prepare_write_req>:
{
    9438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    943c:	460c      	mov	r4, r1
    943e:	4605      	mov	r5, r0
	return net_buf_simple_pull_mem(&buf->b, len);
    9440:	2104      	movs	r1, #4
    9442:	b087      	sub	sp, #28
    9444:	f104 0008 	add.w	r0, r4, #8
    9448:	f00a fe38 	bl	140bc <net_buf_simple_pull_mem>
	struct bt_conn *conn = chan->chan.chan.conn;
    944c:	f8d5 b008 	ldr.w	fp, [r5, #8]
	handle = sys_le16_to_cpu(req->handle);
    9450:	f8b0 a000 	ldrh.w	sl, [r0]
	offset = sys_le16_to_cpu(req->offset);
    9454:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!bt_gatt_change_aware(conn, true)) {
    9458:	2101      	movs	r1, #1
    945a:	4658      	mov	r0, fp
	return att_prep_write_rsp(chan, handle, offset, buf->data, buf->len);
    945c:	f8d4 8008 	ldr.w	r8, [r4, #8]
    9460:	89a7      	ldrh	r7, [r4, #12]
	handle = sys_le16_to_cpu(req->handle);
    9462:	fa1f f68a 	uxth.w	r6, sl
	if (!bt_gatt_change_aware(conn, true)) {
    9466:	f00a f9de 	bl	13826 <bt_gatt_change_aware>
    946a:	2800      	cmp	r0, #0
    946c:	d04b      	beq.n	9506 <att_prepare_write_req+0xce>
	if (!handle) {
    946e:	2e00      	cmp	r6, #0
    9470:	d04b      	beq.n	950a <att_prepare_write_req+0xd2>
	(void)memset(&data, 0, sizeof(data));
    9472:	2214      	movs	r2, #20
    9474:	2100      	movs	r1, #0
    9476:	a801      	add	r0, sp, #4
    9478:	f008 ff7a 	bl	12370 <memset>
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    947c:	2301      	movs	r3, #1
	bt_gatt_foreach_attr(handle, handle, prep_write_cb, &data);
    947e:	4631      	mov	r1, r6
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    9480:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, prep_write_cb, &data);
    9484:	4630      	mov	r0, r6
    9486:	4a23      	ldr	r2, [pc, #140]	; (9514 <att_prepare_write_req+0xdc>)
	data.len = len;
    9488:	b2ff      	uxtb	r7, r7
	bt_gatt_foreach_attr(handle, handle, prep_write_cb, &data);
    948a:	ab01      	add	r3, sp, #4
	data.conn = conn;
    948c:	f8cd b004 	str.w	fp, [sp, #4]
	data.offset = offset;
    9490:	f8ad 9012 	strh.w	r9, [sp, #18]
	data.value = value;
    9494:	f8cd 800c 	str.w	r8, [sp, #12]
	data.len = len;
    9498:	f8ad 7010 	strh.w	r7, [sp, #16]
	bt_gatt_foreach_attr(handle, handle, prep_write_cb, &data);
    949c:	f009 fc11 	bl	12cc2 <bt_gatt_foreach_attr>
	if (data.err) {
    94a0:	f89d 4014 	ldrb.w	r4, [sp, #20]
    94a4:	b154      	cbz	r4, 94bc <att_prepare_write_req+0x84>
	if (!req) {
    94a6:	4623      	mov	r3, r4
    94a8:	4632      	mov	r2, r6
    94aa:	2116      	movs	r1, #22
    94ac:	4628      	mov	r0, r5
    94ae:	f7ff fddb 	bl	9068 <send_err_rsp.part.0>
		return 0;
    94b2:	2400      	movs	r4, #0
}
    94b4:	4620      	mov	r0, r4
    94b6:	b007      	add	sp, #28
    94b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	net_buf_put(&chan->att->prep_queue, data.buf);
    94bc:	6828      	ldr	r0, [r5, #0]
    94be:	9902      	ldr	r1, [sp, #8]
    94c0:	3024      	adds	r0, #36	; 0x24
    94c2:	f00a fd98 	bl	13ff6 <net_buf_put>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_PREPARE_WRITE_RSP, 0);
    94c6:	4622      	mov	r2, r4
    94c8:	2117      	movs	r1, #23
    94ca:	4658      	mov	r0, fp
    94cc:	f7ff ff3a 	bl	9344 <bt_att_create_pdu>
    94d0:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    94d2:	b1e0      	cbz	r0, 950e <att_prepare_write_req+0xd6>
	return net_buf_simple_add(&buf->b, len);
    94d4:	2104      	movs	r1, #4
    94d6:	3008      	adds	r0, #8
    94d8:	f00a fdc0 	bl	1405c <net_buf_simple_add>
    94dc:	4606      	mov	r6, r0
	rsp->handle = sys_cpu_to_le16(handle);
    94de:	f8a0 a000 	strh.w	sl, [r0]
	rsp->offset = sys_cpu_to_le16(offset);
    94e2:	f8a0 9002 	strh.w	r9, [r0, #2]
    94e6:	9802      	ldr	r0, [sp, #8]
    94e8:	4639      	mov	r1, r7
    94ea:	3008      	adds	r0, #8
    94ec:	f00a fdb6 	bl	1405c <net_buf_simple_add>
	memcpy(rsp->value, value, len);
    94f0:	463a      	mov	r2, r7
    94f2:	4641      	mov	r1, r8
    94f4:	1d30      	adds	r0, r6, #4
    94f6:	f008 ff10 	bl	1231a <memcpy>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    94fa:	4628      	mov	r0, r5
    94fc:	4a06      	ldr	r2, [pc, #24]	; (9518 <att_prepare_write_req+0xe0>)
    94fe:	9902      	ldr	r1, [sp, #8]
    9500:	f009 fdb5 	bl	1306e <bt_att_chan_send_rsp>
	return 0;
    9504:	e7d6      	b.n	94b4 <att_prepare_write_req+0x7c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    9506:	2412      	movs	r4, #18
    9508:	e7d4      	b.n	94b4 <att_prepare_write_req+0x7c>
		return BT_ATT_ERR_INVALID_HANDLE;
    950a:	2401      	movs	r4, #1
    950c:	e7d2      	b.n	94b4 <att_prepare_write_req+0x7c>
		return BT_ATT_ERR_UNLIKELY;
    950e:	240e      	movs	r4, #14
    9510:	e7d0      	b.n	94b4 <att_prepare_write_req+0x7c>
    9512:	bf00      	nop
    9514:	00008e71 	.word	0x00008e71
    9518:	00012d91 	.word	0x00012d91

0000951c <att_read_group_req>:
{
    951c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
    9520:	7b0c      	ldrb	r4, [r1, #12]
{
    9522:	4605      	mov	r5, r0
	uint8_t uuid_len = buf->len - sizeof(*req);
    9524:	3c04      	subs	r4, #4
    9526:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
    9528:	2c02      	cmp	r4, #2
{
    952a:	4608      	mov	r0, r1
    952c:	b08c      	sub	sp, #48	; 0x30
	if (uuid_len != 2 && uuid_len != 16) {
    952e:	d001      	beq.n	9534 <att_read_group_req+0x18>
    9530:	2c10      	cmp	r4, #16
    9532:	d16f      	bne.n	9614 <att_read_group_req+0xf8>
	return net_buf_simple_pull_mem(&buf->b, len);
    9534:	2104      	movs	r1, #4
    9536:	3008      	adds	r0, #8
    9538:	f00a fdc0 	bl	140bc <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    953c:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
    9540:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    9542:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    9544:	1d01      	adds	r1, r0, #4
    9546:	4622      	mov	r2, r4
    9548:	4640      	mov	r0, r8
    954a:	f008 ffcc 	bl	124e6 <bt_uuid_create>
    954e:	2800      	cmp	r0, #0
    9550:	d062      	beq.n	9618 <att_read_group_req+0xfc>
	if (!start || !end) {
    9552:	2e00      	cmp	r6, #0
    9554:	d03a      	beq.n	95cc <att_read_group_req+0xb0>
    9556:	2400      	movs	r4, #0
    9558:	2f00      	cmp	r7, #0
    955a:	d036      	beq.n	95ca <att_read_group_req+0xae>
	if (start > end) {
    955c:	42be      	cmp	r6, r7
    955e:	d835      	bhi.n	95cc <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    9560:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    9564:	4640      	mov	r0, r8
    9566:	a901      	add	r1, sp, #4
    9568:	f88d 4004 	strb.w	r4, [sp, #4]
    956c:	f8ad 3006 	strh.w	r3, [sp, #6]
    9570:	f008 ff8f 	bl	12492 <bt_uuid_cmp>
    9574:	2800      	cmp	r0, #0
    9576:	d134      	bne.n	95e2 <att_read_group_req+0xc6>
	struct bt_conn *conn = chan->chan.chan.conn;
    9578:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    957a:	2214      	movs	r2, #20
    957c:	2100      	movs	r1, #0
    957e:	a807      	add	r0, sp, #28
    9580:	f008 fef6 	bl	12370 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    9584:	2201      	movs	r2, #1
    9586:	2111      	movs	r1, #17
    9588:	4620      	mov	r0, r4
    958a:	f7ff fedb 	bl	9344 <bt_att_create_pdu>
    958e:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
    9590:	2800      	cmp	r0, #0
    9592:	d041      	beq.n	9618 <att_read_group_req+0xfc>
	return net_buf_simple_add(&buf->b, len);
    9594:	2101      	movs	r1, #1
    9596:	3008      	adds	r0, #8
	data.uuid = uuid;
    9598:	e9cd 5807 	strd	r5, r8, [sp, #28]
    959c:	f00a fd5e 	bl	1405c <net_buf_simple_add>
	data.rsp->len = 0U;
    95a0:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    95a4:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    95a6:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
    95a8:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    95ac:	4639      	mov	r1, r7
    95ae:	4630      	mov	r0, r6
    95b0:	4a1a      	ldr	r2, [pc, #104]	; (961c <att_read_group_req+0x100>)
	data.group = NULL;
    95b2:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    95b6:	f009 fb84 	bl	12cc2 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
    95ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    95bc:	781c      	ldrb	r4, [r3, #0]
    95be:	bb1c      	cbnz	r4, 9608 <att_read_group_req+0xec>
		net_buf_unref(data.buf);
    95c0:	9809      	ldr	r0, [sp, #36]	; 0x24
    95c2:	f003 fe41 	bl	d248 <net_buf_unref>
	if (!req) {
    95c6:	230a      	movs	r3, #10
    95c8:	e018      	b.n	95fc <att_read_group_req+0xe0>
			*err = 0U;
    95ca:	463e      	mov	r6, r7
	if (!req) {
    95cc:	2301      	movs	r3, #1
    95ce:	4632      	mov	r2, r6
    95d0:	2110      	movs	r1, #16
    95d2:	4628      	mov	r0, r5
    95d4:	f7ff fd48 	bl	9068 <send_err_rsp.part.0>
		return 0;
    95d8:	2400      	movs	r4, #0
}
    95da:	4620      	mov	r0, r4
    95dc:	b00c      	add	sp, #48	; 0x30
    95de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
    95e2:	f642 0301 	movw	r3, #10241	; 0x2801
    95e6:	4640      	mov	r0, r8
    95e8:	a907      	add	r1, sp, #28
    95ea:	f88d 401c 	strb.w	r4, [sp, #28]
    95ee:	f8ad 301e 	strh.w	r3, [sp, #30]
    95f2:	f008 ff4e 	bl	12492 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    95f6:	2800      	cmp	r0, #0
    95f8:	d0be      	beq.n	9578 <att_read_group_req+0x5c>
	if (!req) {
    95fa:	2310      	movs	r3, #16
    95fc:	4632      	mov	r2, r6
    95fe:	2110      	movs	r1, #16
    9600:	4628      	mov	r0, r5
    9602:	f7ff fd31 	bl	9068 <send_err_rsp.part.0>
		return 0;
    9606:	e7e8      	b.n	95da <att_read_group_req+0xbe>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    9608:	4628      	mov	r0, r5
    960a:	4a05      	ldr	r2, [pc, #20]	; (9620 <att_read_group_req+0x104>)
    960c:	9909      	ldr	r1, [sp, #36]	; 0x24
    960e:	f009 fd2e 	bl	1306e <bt_att_chan_send_rsp>
	return 0;
    9612:	e7e1      	b.n	95d8 <att_read_group_req+0xbc>
		return BT_ATT_ERR_INVALID_PDU;
    9614:	2404      	movs	r4, #4
    9616:	e7e0      	b.n	95da <att_read_group_req+0xbe>
		return BT_ATT_ERR_UNLIKELY;
    9618:	240e      	movs	r4, #14
    961a:	e7de      	b.n	95da <att_read_group_req+0xbe>
    961c:	00008cb5 	.word	0x00008cb5
    9620:	00012d91 	.word	0x00012d91

00009624 <att_read_mult_req>:
{
    9624:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
    9628:	6886      	ldr	r6, [r0, #8]
{
    962a:	b085      	sub	sp, #20
	(void)memset(&data, 0, sizeof(data));
    962c:	2210      	movs	r2, #16
{
    962e:	4604      	mov	r4, r0
    9630:	460d      	mov	r5, r1
	(void)memset(&data, 0, sizeof(data));
    9632:	4668      	mov	r0, sp
    9634:	2100      	movs	r1, #0
    9636:	f008 fe9b 	bl	12370 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    963a:	2200      	movs	r2, #0
    963c:	210f      	movs	r1, #15
    963e:	4630      	mov	r0, r6
    9640:	f7ff fe80 	bl	9344 <bt_att_create_pdu>
    9644:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    9646:	b360      	cbz	r0, 96a2 <att_read_mult_req+0x7e>
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    9648:	f04f 0801 	mov.w	r8, #1
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    964c:	f8df 905c 	ldr.w	r9, [pc, #92]	; 96ac <att_read_mult_req+0x88>
	data.chan = chan;
    9650:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
    9652:	f105 0708 	add.w	r7, r5, #8
	while (buf->len >= sizeof(uint16_t)) {
    9656:	89ab      	ldrh	r3, [r5, #12]
    9658:	2b01      	cmp	r3, #1
    965a:	d805      	bhi.n	9668 <att_read_mult_req+0x44>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    965c:	4620      	mov	r0, r4
    965e:	4a12      	ldr	r2, [pc, #72]	; (96a8 <att_read_mult_req+0x84>)
    9660:	9902      	ldr	r1, [sp, #8]
    9662:	f009 fd04 	bl	1306e <bt_att_chan_send_rsp>
    9666:	e018      	b.n	969a <att_read_mult_req+0x76>
    9668:	4638      	mov	r0, r7
    966a:	f00a fd2f 	bl	140cc <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    966e:	466b      	mov	r3, sp
    9670:	464a      	mov	r2, r9
    9672:	4601      	mov	r1, r0
    9674:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    9676:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    967a:	f009 fb22 	bl	12cc2 <bt_gatt_foreach_attr>
		if (data.err) {
    967e:	f89d 300c 	ldrb.w	r3, [sp, #12]
    9682:	2b00      	cmp	r3, #0
    9684:	d0e7      	beq.n	9656 <att_read_mult_req+0x32>
			net_buf_unref(data.buf);
    9686:	9802      	ldr	r0, [sp, #8]
    9688:	f003 fdde 	bl	d248 <net_buf_unref>
	if (!req) {
    968c:	4632      	mov	r2, r6
    968e:	210e      	movs	r1, #14
    9690:	4620      	mov	r0, r4
    9692:	f89d 300c 	ldrb.w	r3, [sp, #12]
    9696:	f7ff fce7 	bl	9068 <send_err_rsp.part.0>
	return 0;
    969a:	2000      	movs	r0, #0
}
    969c:	b005      	add	sp, #20
    969e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_UNLIKELY;
    96a2:	200e      	movs	r0, #14
    96a4:	e7fa      	b.n	969c <att_read_mult_req+0x78>
    96a6:	bf00      	nop
    96a8:	00012d91 	.word	0x00012d91
    96ac:	00012f2b 	.word	0x00012f2b

000096b0 <att_read_rsp>:
{
    96b0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
    96b4:	f8d0 8008 	ldr.w	r8, [r0, #8]
{
    96b8:	4605      	mov	r5, r0
    96ba:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
    96bc:	4640      	mov	r0, r8
    96be:	2101      	movs	r1, #1
{
    96c0:	4614      	mov	r4, r2
    96c2:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
    96c4:	f00a f8af 	bl	13826 <bt_gatt_change_aware>
    96c8:	b390      	cbz	r0, 9730 <att_read_rsp+0x80>
	if (!handle) {
    96ca:	b39e      	cbz	r6, 9734 <att_read_rsp+0x84>
	(void)memset(&data, 0, sizeof(data));
    96cc:	2210      	movs	r2, #16
    96ce:	2100      	movs	r1, #0
    96d0:	4668      	mov	r0, sp
    96d2:	f008 fe4d 	bl	12370 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
    96d6:	2200      	movs	r2, #0
    96d8:	4621      	mov	r1, r4
    96da:	4640      	mov	r0, r8
    96dc:	f7ff fe32 	bl	9344 <bt_att_create_pdu>
    96e0:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    96e2:	b348      	cbz	r0, 9738 <att_read_rsp+0x88>
	data.offset = offset;
    96e4:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    96e8:	4631      	mov	r1, r6
	data.offset = offset;
    96ea:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    96ee:	2301      	movs	r3, #1
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    96f0:	4630      	mov	r0, r6
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    96f2:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    96f6:	4a11      	ldr	r2, [pc, #68]	; (973c <att_read_rsp+0x8c>)
    96f8:	466b      	mov	r3, sp
	data.chan = chan;
    96fa:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    96fc:	f009 fae1 	bl	12cc2 <bt_gatt_foreach_attr>
	if (data.err) {
    9700:	f89d 400c 	ldrb.w	r4, [sp, #12]
    9704:	b174      	cbz	r4, 9724 <att_read_rsp+0x74>
		net_buf_unref(data.buf);
    9706:	9802      	ldr	r0, [sp, #8]
    9708:	f003 fd9e 	bl	d248 <net_buf_unref>
	if (!req) {
    970c:	4632      	mov	r2, r6
    970e:	4639      	mov	r1, r7
    9710:	4628      	mov	r0, r5
    9712:	f89d 300c 	ldrb.w	r3, [sp, #12]
    9716:	f7ff fca7 	bl	9068 <send_err_rsp.part.0>
		return 0;
    971a:	2400      	movs	r4, #0
}
    971c:	4620      	mov	r0, r4
    971e:	b004      	add	sp, #16
    9720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    9724:	4628      	mov	r0, r5
    9726:	4a06      	ldr	r2, [pc, #24]	; (9740 <att_read_rsp+0x90>)
    9728:	9902      	ldr	r1, [sp, #8]
    972a:	f009 fca0 	bl	1306e <bt_att_chan_send_rsp>
	return 0;
    972e:	e7f5      	b.n	971c <att_read_rsp+0x6c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    9730:	2412      	movs	r4, #18
    9732:	e7f3      	b.n	971c <att_read_rsp+0x6c>
		return BT_ATT_ERR_INVALID_HANDLE;
    9734:	2401      	movs	r4, #1
    9736:	e7f1      	b.n	971c <att_read_rsp+0x6c>
		return BT_ATT_ERR_UNLIKELY;
    9738:	240e      	movs	r4, #14
    973a:	e7ef      	b.n	971c <att_read_rsp+0x6c>
    973c:	00012f2b 	.word	0x00012f2b
    9740:	00012d91 	.word	0x00012d91

00009744 <att_read_type_req>:
{
    9744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
    9748:	7b0c      	ldrb	r4, [r1, #12]
{
    974a:	4605      	mov	r5, r0
	uint8_t uuid_len = buf->len - sizeof(*req);
    974c:	3c04      	subs	r4, #4
    974e:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
    9750:	2c02      	cmp	r4, #2
{
    9752:	4608      	mov	r0, r1
    9754:	b08c      	sub	sp, #48	; 0x30
	if (uuid_len != 2 && uuid_len != 16) {
    9756:	d001      	beq.n	975c <att_read_type_req+0x18>
    9758:	2c10      	cmp	r4, #16
    975a:	d150      	bne.n	97fe <att_read_type_req+0xba>
	return net_buf_simple_pull_mem(&buf->b, len);
    975c:	2104      	movs	r1, #4
    975e:	3008      	adds	r0, #8
    9760:	f00a fcac 	bl	140bc <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    9764:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
    9768:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    976a:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    976c:	1d01      	adds	r1, r0, #4
    976e:	4622      	mov	r2, r4
    9770:	4640      	mov	r0, r8
    9772:	f008 feb8 	bl	124e6 <bt_uuid_create>
    9776:	b188      	cbz	r0, 979c <att_read_type_req+0x58>
	if (!start || !end) {
    9778:	b19e      	cbz	r6, 97a2 <att_read_type_req+0x5e>
    977a:	b18f      	cbz	r7, 97a0 <att_read_type_req+0x5c>
	if (start > end) {
    977c:	42b7      	cmp	r7, r6
    977e:	d310      	bcc.n	97a2 <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
    9780:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
    9782:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    9784:	2100      	movs	r1, #0
    9786:	eb0d 0002 	add.w	r0, sp, r2
    978a:	f008 fdf1 	bl	12370 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
    978e:	2201      	movs	r2, #1
    9790:	2109      	movs	r1, #9
    9792:	4620      	mov	r0, r4
    9794:	f7ff fdd6 	bl	9344 <bt_att_create_pdu>
    9798:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
    979a:	b968      	cbnz	r0, 97b8 <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
    979c:	240e      	movs	r4, #14
    979e:	e007      	b.n	97b0 <att_read_type_req+0x6c>
			*err = 0U;
    97a0:	463e      	mov	r6, r7
	if (!req) {
    97a2:	2301      	movs	r3, #1
    97a4:	4632      	mov	r2, r6
    97a6:	2108      	movs	r1, #8
    97a8:	4628      	mov	r0, r5
    97aa:	f7ff fc5d 	bl	9068 <send_err_rsp.part.0>
		return 0;
    97ae:	2400      	movs	r4, #0
}
    97b0:	4620      	mov	r0, r4
    97b2:	b00c      	add	sp, #48	; 0x30
    97b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
    97b8:	2101      	movs	r1, #1
    97ba:	3008      	adds	r0, #8
	data.uuid = uuid;
    97bc:	e9cd 5806 	strd	r5, r8, [sp, #24]
    97c0:	f00a fc4c 	bl	1405c <net_buf_simple_add>
	data.rsp->len = 0U;
    97c4:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    97c8:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    97ca:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    97cc:	4639      	mov	r1, r7
	data.rsp->len = 0U;
    97ce:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    97d2:	4a0c      	ldr	r2, [pc, #48]	; (9804 <att_read_type_req+0xc0>)
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    97d4:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    97d8:	4630      	mov	r0, r6
    97da:	ab06      	add	r3, sp, #24
    97dc:	f009 fa71 	bl	12cc2 <bt_gatt_foreach_attr>
	if (data.err) {
    97e0:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
    97e4:	b12c      	cbz	r4, 97f2 <att_read_type_req+0xae>
		net_buf_unref(data.buf);
    97e6:	9808      	ldr	r0, [sp, #32]
    97e8:	f003 fd2e 	bl	d248 <net_buf_unref>
	if (!req) {
    97ec:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    97f0:	e7d8      	b.n	97a4 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    97f2:	4628      	mov	r0, r5
    97f4:	4a04      	ldr	r2, [pc, #16]	; (9808 <att_read_type_req+0xc4>)
    97f6:	9908      	ldr	r1, [sp, #32]
    97f8:	f009 fc39 	bl	1306e <bt_att_chan_send_rsp>
	return 0;
    97fc:	e7d8      	b.n	97b0 <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
    97fe:	2404      	movs	r4, #4
    9800:	e7d6      	b.n	97b0 <att_read_type_req+0x6c>
    9802:	bf00      	nop
    9804:	00008d61 	.word	0x00008d61
    9808:	00012d91 	.word	0x00012d91

0000980c <att_find_type_req>:
{
    980c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9810:	4688      	mov	r8, r1
    9812:	4605      	mov	r5, r0
	return net_buf_simple_pull_mem(&buf->b, len);
    9814:	2106      	movs	r1, #6
    9816:	b086      	sub	sp, #24
    9818:	f108 0008 	add.w	r0, r8, #8
    981c:	f00a fc4e 	bl	140bc <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
    9820:	8807      	ldrh	r7, [r0, #0]
	if (!start || !end) {
    9822:	b317      	cbz	r7, 986a <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
    9824:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!start || !end) {
    9828:	f1b9 0f00 	cmp.w	r9, #0
    982c:	d01c      	beq.n	9868 <att_find_type_req+0x5c>
	if (start > end) {
    982e:	454f      	cmp	r7, r9
    9830:	d81b      	bhi.n	986a <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
    9832:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    9834:	2400      	movs	r4, #0
    9836:	f8ad 3002 	strh.w	r3, [sp, #2]
    983a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    983e:	4668      	mov	r0, sp
    9840:	a901      	add	r1, sp, #4
	value = buf->data;
    9842:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    9846:	f88d 4000 	strb.w	r4, [sp]
    984a:	f88d 4004 	strb.w	r4, [sp, #4]
    984e:	f8ad 3006 	strh.w	r3, [sp, #6]
    9852:	f008 fe1e 	bl	12492 <bt_uuid_cmp>
    9856:	4606      	mov	r6, r0
    9858:	b190      	cbz	r0, 9880 <att_find_type_req+0x74>
	if (!req) {
    985a:	230a      	movs	r3, #10
    985c:	463a      	mov	r2, r7
    985e:	2106      	movs	r1, #6
    9860:	4628      	mov	r0, r5
    9862:	f7ff fc01 	bl	9068 <send_err_rsp.part.0>
		return 0;
    9866:	e007      	b.n	9878 <att_find_type_req+0x6c>
			*err = 0U;
    9868:	464f      	mov	r7, r9
	if (!req) {
    986a:	2301      	movs	r3, #1
    986c:	463a      	mov	r2, r7
    986e:	2106      	movs	r1, #6
    9870:	4628      	mov	r0, r5
    9872:	f7ff fbf9 	bl	9068 <send_err_rsp.part.0>
		return 0;
    9876:	2400      	movs	r4, #0
}
    9878:	4620      	mov	r0, r4
    987a:	b006      	add	sp, #24
    987c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
    9880:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
    9884:	f8d5 8008 	ldr.w	r8, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    9888:	4601      	mov	r1, r0
    988a:	2214      	movs	r2, #20
    988c:	a801      	add	r0, sp, #4
    988e:	f008 fd6f 	bl	12370 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    9892:	4632      	mov	r2, r6
    9894:	2107      	movs	r1, #7
    9896:	4640      	mov	r0, r8
    9898:	f7ff fd54 	bl	9344 <bt_att_create_pdu>
    989c:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    989e:	b1e0      	cbz	r0, 98da <att_find_type_req+0xce>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    98a0:	230a      	movs	r3, #10
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    98a2:	4649      	mov	r1, r9
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    98a4:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    98a8:	4638      	mov	r0, r7
    98aa:	4a0d      	ldr	r2, [pc, #52]	; (98e0 <att_find_type_req+0xd4>)
    98ac:	ab01      	add	r3, sp, #4
	data.value_len = value_len;
    98ae:	f88d 4014 	strb.w	r4, [sp, #20]
	data.value = value;
    98b2:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	data.chan = chan;
    98b6:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    98b8:	f009 fa03 	bl	12cc2 <bt_gatt_foreach_attr>
	if (data.err) {
    98bc:	f89d 4015 	ldrb.w	r4, [sp, #21]
    98c0:	b12c      	cbz	r4, 98ce <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
    98c2:	9802      	ldr	r0, [sp, #8]
    98c4:	f003 fcc0 	bl	d248 <net_buf_unref>
	if (!req) {
    98c8:	f89d 3015 	ldrb.w	r3, [sp, #21]
    98cc:	e7ce      	b.n	986c <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    98ce:	4628      	mov	r0, r5
    98d0:	4a04      	ldr	r2, [pc, #16]	; (98e4 <att_find_type_req+0xd8>)
    98d2:	9902      	ldr	r1, [sp, #8]
    98d4:	f009 fbcb 	bl	1306e <bt_att_chan_send_rsp>
	return 0;
    98d8:	e7ce      	b.n	9878 <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
    98da:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
    98dc:	e7cc      	b.n	9878 <att_find_type_req+0x6c>
    98de:	bf00      	nop
    98e0:	000089e9 	.word	0x000089e9
    98e4:	00012d91 	.word	0x00012d91

000098e8 <att_find_info_req>:
{
    98e8:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
    98ea:	688b      	ldr	r3, [r1, #8]
{
    98ec:	4605      	mov	r5, r0
	start_handle = sys_le16_to_cpu(req->start_handle);
    98ee:	881e      	ldrh	r6, [r3, #0]
{
    98f0:	b085      	sub	sp, #20
	if (!start || !end) {
    98f2:	b19e      	cbz	r6, 991c <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
    98f4:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
    98f6:	b184      	cbz	r4, 991a <att_find_info_req+0x32>
	if (start > end) {
    98f8:	42b4      	cmp	r4, r6
    98fa:	d30f      	bcc.n	991c <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
    98fc:	6887      	ldr	r7, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
    98fe:	2210      	movs	r2, #16
    9900:	2100      	movs	r1, #0
    9902:	4668      	mov	r0, sp
    9904:	f008 fd34 	bl	12370 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
    9908:	2200      	movs	r2, #0
    990a:	2105      	movs	r1, #5
    990c:	4638      	mov	r0, r7
    990e:	f7ff fd19 	bl	9344 <bt_att_create_pdu>
    9912:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
    9914:	b958      	cbnz	r0, 992e <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
    9916:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
    9918:	e007      	b.n	992a <att_find_info_req+0x42>
			*err = 0U;
    991a:	4626      	mov	r6, r4
	if (!req) {
    991c:	2301      	movs	r3, #1
    991e:	4632      	mov	r2, r6
    9920:	2104      	movs	r1, #4
    9922:	4628      	mov	r0, r5
    9924:	f7ff fba0 	bl	9068 <send_err_rsp.part.0>
	return 0;
    9928:	2000      	movs	r0, #0
}
    992a:	b005      	add	sp, #20
    992c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    992e:	4621      	mov	r1, r4
    9930:	466b      	mov	r3, sp
    9932:	4630      	mov	r0, r6
    9934:	4a08      	ldr	r2, [pc, #32]	; (9958 <att_find_info_req+0x70>)
	data.chan = chan;
    9936:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    9938:	f009 f9c3 	bl	12cc2 <bt_gatt_foreach_attr>
	if (!data.rsp) {
    993c:	9c02      	ldr	r4, [sp, #8]
    993e:	b924      	cbnz	r4, 994a <att_find_info_req+0x62>
		net_buf_unref(data.buf);
    9940:	9801      	ldr	r0, [sp, #4]
    9942:	f003 fc81 	bl	d248 <net_buf_unref>
	if (!req) {
    9946:	230a      	movs	r3, #10
    9948:	e7e9      	b.n	991e <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    994a:	4628      	mov	r0, r5
    994c:	4a03      	ldr	r2, [pc, #12]	; (995c <att_find_info_req+0x74>)
    994e:	9901      	ldr	r1, [sp, #4]
    9950:	f009 fb8d 	bl	1306e <bt_att_chan_send_rsp>
    9954:	e7e8      	b.n	9928 <att_find_info_req+0x40>
    9956:	bf00      	nop
    9958:	00012cd9 	.word	0x00012cd9
    995c:	00012d91 	.word	0x00012d91

00009960 <att_mtu_req>:
{
    9960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->att->conn;
    9962:	4603      	mov	r3, r0
    9964:	f853 2bc0 	ldr.w	r2, [r3], #192
{
    9968:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
    996a:	6810      	ldr	r0, [r2, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    996c:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
    9970:	f3c3 04c0 	ubfx	r4, r3, #3, #1
    9974:	071b      	lsls	r3, r3, #28
    9976:	d41e      	bmi.n	99b6 <att_mtu_req+0x56>
	mtu_client = sys_le16_to_cpu(req->mtu);
    9978:	688b      	ldr	r3, [r1, #8]
    997a:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    997c:	2e16      	cmp	r6, #22
    997e:	d91c      	bls.n	99ba <att_mtu_req+0x5a>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
    9980:	2202      	movs	r2, #2
    9982:	2103      	movs	r1, #3
    9984:	f7ff fcde 	bl	9344 <bt_att_create_pdu>
	if (!pdu) {
    9988:	4607      	mov	r7, r0
    998a:	b1c0      	cbz	r0, 99be <att_mtu_req+0x5e>
	return net_buf_simple_add(&buf->b, len);
    998c:	2102      	movs	r1, #2
    998e:	3008      	adds	r0, #8
    9990:	f00a fb64 	bl	1405c <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
    9994:	2341      	movs	r3, #65	; 0x41
    9996:	7044      	strb	r4, [r0, #1]
    9998:	7003      	strb	r3, [r0, #0]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
    999a:	4639      	mov	r1, r7
    999c:	4628      	mov	r0, r5
    999e:	4a09      	ldr	r2, [pc, #36]	; (99c4 <att_mtu_req+0x64>)
    99a0:	f009 fb65 	bl	1306e <bt_att_chan_send_rsp>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
    99a4:	2e41      	cmp	r6, #65	; 0x41
    99a6:	bf28      	it	cs
    99a8:	2641      	movcs	r6, #65	; 0x41
	return 0;
    99aa:	4620      	mov	r0, r4
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
    99ac:	f8a5 6052 	strh.w	r6, [r5, #82]	; 0x52
	chan->chan.tx.mtu = chan->chan.rx.mtu;
    99b0:	f8a5 605e 	strh.w	r6, [r5, #94]	; 0x5e
}
    99b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
    99b6:	2006      	movs	r0, #6
    99b8:	e7fc      	b.n	99b4 <att_mtu_req+0x54>
		return BT_ATT_ERR_INVALID_PDU;
    99ba:	2004      	movs	r0, #4
    99bc:	e7fa      	b.n	99b4 <att_mtu_req+0x54>
		return BT_ATT_ERR_UNLIKELY;
    99be:	200e      	movs	r0, #14
    99c0:	e7f8      	b.n	99b4 <att_mtu_req+0x54>
    99c2:	bf00      	nop
    99c4:	00012d91 	.word	0x00012d91

000099c8 <bt_att_req_alloc>:

	return mtu;
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
    99c8:	b513      	push	{r0, r1, r4, lr}
	struct bt_att_req *req = NULL;
    99ca:	2400      	movs	r4, #0
{
    99cc:	4602      	mov	r2, r0
    99ce:	460b      	mov	r3, r1

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
    99d0:	4807      	ldr	r0, [pc, #28]	; (99f0 <bt_att_req_alloc+0x28>)
    99d2:	a901      	add	r1, sp, #4
	struct bt_att_req *req = NULL;
    99d4:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
    99d6:	f005 f9df 	bl	ed98 <k_mem_slab_alloc>
    99da:	4601      	mov	r1, r0
    99dc:	b930      	cbnz	r0, 99ec <bt_att_req_alloc+0x24>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
    99de:	221c      	movs	r2, #28
    99e0:	9801      	ldr	r0, [sp, #4]
    99e2:	f008 fcc5 	bl	12370 <memset>

	return req;
    99e6:	9801      	ldr	r0, [sp, #4]
}
    99e8:	b002      	add	sp, #8
    99ea:	bd10      	pop	{r4, pc}
		return NULL;
    99ec:	4620      	mov	r0, r4
    99ee:	e7fb      	b.n	99e8 <bt_att_req_alloc+0x20>
    99f0:	200005f4 	.word	0x200005f4

000099f4 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
    99f4:	b507      	push	{r0, r1, r2, lr}
    99f6:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	k_mem_slab_free(&req_slab, (void **)&req);
    99f8:	a901      	add	r1, sp, #4
    99fa:	4803      	ldr	r0, [pc, #12]	; (9a08 <bt_att_req_free+0x14>)
    99fc:	f005 f9fe 	bl	edfc <k_mem_slab_free>
}
    9a00:	b003      	add	sp, #12
    9a02:	f85d fb04 	ldr.w	pc, [sp], #4
    9a06:	bf00      	nop
    9a08:	200005f4 	.word	0x200005f4

00009a0c <att_handle_rsp>:
{
    9a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9a10:	4605      	mov	r5, r0
    9a12:	b085      	sub	sp, #20
	k_delayed_work_cancel(&chan->timeout_work);
    9a14:	30e0      	adds	r0, #224	; 0xe0
{
    9a16:	4689      	mov	r9, r1
    9a18:	4692      	mov	sl, r2
    9a1a:	4698      	mov	r8, r3
	k_delayed_work_cancel(&chan->timeout_work);
    9a1c:	f00b fbfd 	bl	1521a <k_delayed_work_cancel>
	if (!chan->req) {
    9a20:	f8d5 40c4 	ldr.w	r4, [r5, #196]	; 0xc4
    9a24:	bb64      	cbnz	r4, 9a80 <att_handle_rsp+0x74>
    9a26:	4932      	ldr	r1, [pc, #200]	; (9af0 <att_handle_rsp+0xe4>)
    9a28:	4b32      	ldr	r3, [pc, #200]	; (9af4 <att_handle_rsp+0xe8>)
		BT_WARN("No pending ATT request");
    9a2a:	4833      	ldr	r0, [pc, #204]	; (9af8 <att_handle_rsp+0xec>)
    9a2c:	1ac9      	subs	r1, r1, r3
    9a2e:	08c9      	lsrs	r1, r1, #3
    9a30:	0189      	lsls	r1, r1, #6
    9a32:	f041 0102 	orr.w	r1, r1, #2
    9a36:	f007 f93d 	bl	10cb4 <log_0>
	att_process(chan->att);
    9a3a:	f8d5 b000 	ldr.w	fp, [r5]
	node = sys_slist_get(&att->reqs);
    9a3e:	f10b 0004 	add.w	r0, fp, #4
    9a42:	f009 f8ce 	bl	12be2 <sys_slist_get>
	if (!node) {
    9a46:	4607      	mov	r7, r0
    9a48:	2800      	cmp	r0, #0
    9a4a:	d039      	beq.n	9ac0 <att_handle_rsp+0xb4>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    9a4c:	f8db 203c 	ldr.w	r2, [fp, #60]	; 0x3c
    9a50:	b15a      	cbz	r2, 9a6a <att_handle_rsp+0x5e>
    9a52:	f5b2 7096 	subs.w	r0, r2, #300	; 0x12c
    9a56:	d008      	beq.n	9a6a <att_handle_rsp+0x5e>
    9a58:	6816      	ldr	r6, [r2, #0]
    9a5a:	b10e      	cbz	r6, 9a60 <att_handle_rsp+0x54>
    9a5c:	f5a6 7696 	sub.w	r6, r6, #300	; 0x12c
		if (!chan->req) {
    9a60:	f8d0 20c4 	ldr.w	r2, [r0, #196]	; 0xc4
    9a64:	b33a      	cbz	r2, 9ab6 <att_handle_rsp+0xaa>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    9a66:	2e00      	cmp	r6, #0
    9a68:	d137      	bne.n	9ada <att_handle_rsp+0xce>
Z_GENLIST_PREPEND(slist, snode)
    9a6a:	f8db 2004 	ldr.w	r2, [fp, #4]
	parent->next = child;
    9a6e:	603a      	str	r2, [r7, #0]
Z_GENLIST_PREPEND(slist, snode)
    9a70:	f8db 2008 	ldr.w	r2, [fp, #8]
	list->head = node;
    9a74:	f8cb 7004 	str.w	r7, [fp, #4]
Z_GENLIST_PREPEND(slist, snode)
    9a78:	bb12      	cbnz	r2, 9ac0 <att_handle_rsp+0xb4>
	list->tail = node;
    9a7a:	f8cb 7008 	str.w	r7, [fp, #8]
}
    9a7e:	e01f      	b.n	9ac0 <att_handle_rsp+0xb4>
	if (chan->req == &cancel) {
    9a80:	4b1e      	ldr	r3, [pc, #120]	; (9afc <att_handle_rsp+0xf0>)
    9a82:	429c      	cmp	r4, r3
    9a84:	d103      	bne.n	9a8e <att_handle_rsp+0x82>
		chan->req = NULL;
    9a86:	2400      	movs	r4, #0
    9a88:	f8c5 40c4 	str.w	r4, [r5, #196]	; 0xc4
		goto process;
    9a8c:	e7d5      	b.n	9a3a <att_handle_rsp+0x2e>
	if (chan->req->buf) {
    9a8e:	6920      	ldr	r0, [r4, #16]
    9a90:	b128      	cbz	r0, 9a9e <att_handle_rsp+0x92>
		net_buf_unref(chan->req->buf);
    9a92:	f003 fbd9 	bl	d248 <net_buf_unref>
		chan->req->buf = NULL;
    9a96:	2200      	movs	r2, #0
    9a98:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
    9a9c:	611a      	str	r2, [r3, #16]
	chan->req->func = NULL;
    9a9e:	2600      	movs	r6, #0
	func = chan->req->func;
    9aa0:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
	params = chan->req->user_data;
    9aa4:	6983      	ldr	r3, [r0, #24]
	func = chan->req->func;
    9aa6:	6844      	ldr	r4, [r0, #4]
	chan->req->func = NULL;
    9aa8:	6046      	str	r6, [r0, #4]
	params = chan->req->user_data;
    9aaa:	9303      	str	r3, [sp, #12]
	att_req_destroy(chan->req);
    9aac:	f009 fb8a 	bl	131c4 <att_req_destroy>
	chan->req = NULL;
    9ab0:	f8c5 60c4 	str.w	r6, [r5, #196]	; 0xc4
    9ab4:	e7c1      	b.n	9a3a <att_handle_rsp+0x2e>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
    9ab6:	4639      	mov	r1, r7
    9ab8:	f009 fa87 	bl	12fca <bt_att_chan_req_send>
    9abc:	2800      	cmp	r0, #0
    9abe:	dbd2      	blt.n	9a66 <att_handle_rsp+0x5a>
	if (func) {
    9ac0:	b13c      	cbz	r4, 9ad2 <att_handle_rsp+0xc6>
		func(chan->att->conn, err, pdu, len, params);
    9ac2:	9b03      	ldr	r3, [sp, #12]
    9ac4:	6828      	ldr	r0, [r5, #0]
    9ac6:	9300      	str	r3, [sp, #0]
    9ac8:	464a      	mov	r2, r9
    9aca:	4653      	mov	r3, sl
    9acc:	4641      	mov	r1, r8
    9ace:	6800      	ldr	r0, [r0, #0]
    9ad0:	47a0      	blx	r4
}
    9ad2:	2000      	movs	r0, #0
    9ad4:	b005      	add	sp, #20
    9ad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
Z_GENLIST_PEEK_NEXT(slist, snode)
    9ada:	f516 7296 	adds.w	r2, r6, #300	; 0x12c
    9ade:	d004      	beq.n	9aea <att_handle_rsp+0xde>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    9ae0:	f8d6 212c 	ldr.w	r2, [r6, #300]	; 0x12c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    9ae4:	b10a      	cbz	r2, 9aea <att_handle_rsp+0xde>
    9ae6:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
	bt_att_func_t func = NULL;
    9aea:	4630      	mov	r0, r6
    9aec:	4616      	mov	r6, r2
    9aee:	e7b7      	b.n	9a60 <att_handle_rsp+0x54>
    9af0:	00015a00 	.word	0x00015a00
    9af4:	00015a00 	.word	0x00015a00
    9af8:	00018619 	.word	0x00018619
    9afc:	200019f0 	.word	0x200019f0

00009b00 <bt_att_encrypt_change>:
	if (!att_chan->att) {
    9b00:	f850 3c08 	ldr.w	r3, [r0, #-8]
{
    9b04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9b08:	4604      	mov	r4, r0
    9b0a:	460d      	mov	r5, r1
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
    9b0c:	f1a0 0608 	sub.w	r6, r0, #8
	if (!att_chan->att) {
    9b10:	b36b      	cbz	r3, 9b6e <bt_att_encrypt_change+0x6e>
	if (hci_status) {
    9b12:	b161      	cbz	r1, 9b2e <bt_att_encrypt_change+0x2e>
		if (att_chan->req && att_chan->req->retrying) {
    9b14:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
    9b18:	b34b      	cbz	r3, 9b6e <bt_att_encrypt_change+0x6e>
    9b1a:	7d1b      	ldrb	r3, [r3, #20]
    9b1c:	b33b      	cbz	r3, 9b6e <bt_att_encrypt_change+0x6e>
			att_handle_rsp(att_chan, NULL, 0,
    9b1e:	2200      	movs	r2, #0
    9b20:	4630      	mov	r0, r6
}
    9b22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			att_handle_rsp(att_chan, NULL, 0,
    9b26:	2305      	movs	r3, #5
    9b28:	4611      	mov	r1, r2
    9b2a:	f7ff bf6f 	b.w	9a0c <att_handle_rsp>
	struct bt_conn *conn = ch->chan.conn;
    9b2e:	6807      	ldr	r7, [r0, #0]
	bt_gatt_encrypt_change(conn);
    9b30:	4638      	mov	r0, r7
    9b32:	f001 f997 	bl	ae64 <bt_gatt_encrypt_change>
	if (conn->sec_level == BT_SECURITY_L1) {
    9b36:	7a7b      	ldrb	r3, [r7, #9]
    9b38:	2b01      	cmp	r3, #1
    9b3a:	d018      	beq.n	9b6e <bt_att_encrypt_change+0x6e>
	if (!(att_chan->req && att_chan->req->retrying)) {
    9b3c:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
    9b40:	b1ab      	cbz	r3, 9b6e <bt_att_encrypt_change+0x6e>
    9b42:	7d1a      	ldrb	r2, [r3, #20]
    9b44:	b19a      	cbz	r2, 9b6e <bt_att_encrypt_change+0x6e>
	bt_att_chan_send_rsp(att_chan, att_chan->req->buf,
    9b46:	6919      	ldr	r1, [r3, #16]
	switch (att_op_get_type(buf->data[0])) {
    9b48:	688b      	ldr	r3, [r1, #8]
    9b4a:	7818      	ldrb	r0, [r3, #0]
    9b4c:	f009 f88c 	bl	12c68 <att_op_get_type>
    9b50:	3801      	subs	r0, #1
    9b52:	b2c0      	uxtb	r0, r0
    9b54:	2804      	cmp	r0, #4
    9b56:	bf96      	itet	ls
    9b58:	4b06      	ldrls	r3, [pc, #24]	; (9b74 <bt_att_encrypt_change+0x74>)
    9b5a:	462a      	movhi	r2, r5
    9b5c:	f853 2020 	ldrls.w	r2, [r3, r0, lsl #2]
	bt_att_chan_send_rsp(att_chan, att_chan->req->buf,
    9b60:	4630      	mov	r0, r6
    9b62:	f009 fa84 	bl	1306e <bt_att_chan_send_rsp>
	att_chan->req->buf = NULL;
    9b66:	2200      	movs	r2, #0
    9b68:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
    9b6c:	611a      	str	r2, [r3, #16]
}
    9b6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9b72:	bf00      	nop
    9b74:	0001609c 	.word	0x0001609c

00009b78 <att_reset>:
{
    9b78:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    9b7a:	9003      	str	r0, [sp, #12]
	while ((buf = net_buf_get(&att->prep_queue, K_NO_WAIT))) {
    9b7c:	9803      	ldr	r0, [sp, #12]
    9b7e:	2200      	movs	r2, #0
    9b80:	2300      	movs	r3, #0
    9b82:	3024      	adds	r0, #36	; 0x24
    9b84:	f00a fa19 	bl	13fba <net_buf_get>
    9b88:	b980      	cbnz	r0, 9bac <att_reset+0x34>
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
    9b8a:	9803      	ldr	r0, [sp, #12]
    9b8c:	2200      	movs	r2, #0
    9b8e:	2300      	movs	r3, #0
    9b90:	300c      	adds	r0, #12
    9b92:	f00a fa12 	bl	13fba <net_buf_get>
    9b96:	b960      	cbnz	r0, 9bb2 <att_reset+0x3a>
	att->conn = NULL;
    9b98:	9a03      	ldr	r2, [sp, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    9b9a:	6855      	ldr	r5, [r2, #4]
	att->conn = NULL;
    9b9c:	6010      	str	r0, [r2, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    9b9e:	b95d      	cbnz	r5, 9bb8 <att_reset+0x40>
	k_mem_slab_free(&att_slab, (void **)&att);
    9ba0:	4812      	ldr	r0, [pc, #72]	; (9bec <att_reset+0x74>)
    9ba2:	a903      	add	r1, sp, #12
    9ba4:	f005 f92a 	bl	edfc <k_mem_slab_free>
}
    9ba8:	b004      	add	sp, #16
    9baa:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
    9bac:	f003 fb4c 	bl	d248 <net_buf_unref>
    9bb0:	e7e4      	b.n	9b7c <att_reset+0x4>
		net_buf_unref(buf);
    9bb2:	f003 fb49 	bl	d248 <net_buf_unref>
    9bb6:	e7e8      	b.n	9b8a <att_reset+0x12>
	return node->next;
    9bb8:	682c      	ldr	r4, [r5, #0]
    9bba:	2c00      	cmp	r4, #0
    9bbc:	bf38      	it	cc
    9bbe:	2400      	movcc	r4, #0
		if (req->func) {
    9bc0:	686e      	ldr	r6, [r5, #4]
    9bc2:	b136      	cbz	r6, 9bd2 <att_reset+0x5a>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0,
    9bc4:	69ab      	ldr	r3, [r5, #24]
    9bc6:	210e      	movs	r1, #14
    9bc8:	9300      	str	r3, [sp, #0]
    9bca:	2300      	movs	r3, #0
    9bcc:	461a      	mov	r2, r3
    9bce:	4618      	mov	r0, r3
    9bd0:	47b0      	blx	r6
		att_req_destroy(req);
    9bd2:	4628      	mov	r0, r5
    9bd4:	f009 faf6 	bl	131c4 <att_req_destroy>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    9bd8:	2c00      	cmp	r4, #0
    9bda:	d0e1      	beq.n	9ba0 <att_reset+0x28>
    9bdc:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    9bde:	4625      	mov	r5, r4
    9be0:	2b00      	cmp	r3, #0
    9be2:	bf38      	it	cc
    9be4:	2300      	movcc	r3, #0
    9be6:	461c      	mov	r4, r3
    9be8:	e7ea      	b.n	9bc0 <att_reset+0x48>
    9bea:	bf00      	nop
    9bec:	200005bc 	.word	0x200005bc

00009bf0 <att_timeout>:
{
    9bf0:	b570      	push	{r4, r5, r6, lr}
	struct bt_att *att = chan->att;
    9bf2:	4605      	mov	r5, r0
    9bf4:	4b0d      	ldr	r3, [pc, #52]	; (9c2c <att_timeout+0x3c>)
    9bf6:	490e      	ldr	r1, [pc, #56]	; (9c30 <att_timeout+0x40>)
    9bf8:	f855 6de0 	ldr.w	r6, [r5, #-224]!
    9bfc:	1ac9      	subs	r1, r1, r3
    9bfe:	08c9      	lsrs	r1, r1, #3
	BT_ERR("ATT Timeout");
    9c00:	0189      	lsls	r1, r1, #6
    9c02:	f041 0101 	orr.w	r1, r1, #1
{
    9c06:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
    9c08:	480a      	ldr	r0, [pc, #40]	; (9c34 <att_timeout+0x44>)
    9c0a:	f007 f853 	bl	10cb4 <log_0>
	att_chan_detach(chan);
    9c0e:	4628      	mov	r0, r5
    9c10:	f009 faec 	bl	131ec <att_chan_detach>
	if (!sys_slist_is_empty(&att->chans)) {
    9c14:	6bf5      	ldr	r5, [r6, #60]	; 0x3c
    9c16:	b945      	cbnz	r5, 9c2a <att_timeout+0x3a>
	att_reset(att);
    9c18:	4630      	mov	r0, r6
    9c1a:	f7ff ffad 	bl	9b78 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
    9c1e:	f854 0cd8 	ldr.w	r0, [r4, #-216]
    9c22:	f001 f9e9 	bl	aff8 <bt_gatt_disconnected>
	ch->chan.conn = NULL;
    9c26:	f844 5cd8 	str.w	r5, [r4, #-216]
}
    9c2a:	bd70      	pop	{r4, r5, r6, pc}
    9c2c:	00015a00 	.word	0x00015a00
    9c30:	00015a00 	.word	0x00015a00
    9c34:	00018630 	.word	0x00018630

00009c38 <db_hash_store>:

static void db_hash_store(void)
{
	int err;

	err = settings_save_one("bt/hash", &db_hash, sizeof(db_hash));
    9c38:	490a      	ldr	r1, [pc, #40]	; (9c64 <db_hash_store+0x2c>)
    9c3a:	2210      	movs	r2, #16
{
    9c3c:	b508      	push	{r3, lr}
	err = settings_save_one("bt/hash", &db_hash, sizeof(db_hash));
    9c3e:	480a      	ldr	r0, [pc, #40]	; (9c68 <db_hash_store+0x30>)
    9c40:	f7f9 f87a 	bl	2d38 <settings_save_one>
	if (err) {
    9c44:	4601      	mov	r1, r0
    9c46:	b158      	cbz	r0, 9c60 <db_hash_store+0x28>
    9c48:	4b08      	ldr	r3, [pc, #32]	; (9c6c <db_hash_store+0x34>)
    9c4a:	4a09      	ldr	r2, [pc, #36]	; (9c70 <db_hash_store+0x38>)
		BT_ERR("Failed to save Database Hash (err %d)", err);
    9c4c:	4809      	ldr	r0, [pc, #36]	; (9c74 <db_hash_store+0x3c>)
    9c4e:	1ad2      	subs	r2, r2, r3
    9c50:	08d2      	lsrs	r2, r2, #3
    9c52:	0192      	lsls	r2, r2, #6
    9c54:	f042 0201 	orr.w	r2, r2, #1
	}

	BT_DBG("Database Hash stored");
}
    9c58:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_ERR("Failed to save Database Hash (err %d)", err);
    9c5c:	f007 b837 	b.w	10cce <log_1>
}
    9c60:	bd08      	pop	{r3, pc}
    9c62:	bf00      	nop
    9c64:	20002df8 	.word	0x20002df8
    9c68:	00018643 	.word	0x00018643
    9c6c:	00015a00 	.word	0x00015a00
    9c70:	00015a28 	.word	0x00015a28
    9c74:	0001864b 	.word	0x0001864b

00009c78 <db_hash_set>:

static uint8_t stored_hash[16];

static int db_hash_set(const char *name, size_t len_rd,
		       settings_read_cb read_cb, void *cb_arg)
{
    9c78:	b510      	push	{r4, lr}
	ssize_t len;

	len = read_cb(cb_arg, stored_hash, sizeof(stored_hash));
    9c7a:	4618      	mov	r0, r3
{
    9c7c:	4614      	mov	r4, r2
	len = read_cb(cb_arg, stored_hash, sizeof(stored_hash));
    9c7e:	490a      	ldr	r1, [pc, #40]	; (9ca8 <db_hash_set+0x30>)
    9c80:	2210      	movs	r2, #16
    9c82:	47a0      	blx	r4
	if (len < 0) {
    9c84:	1e04      	subs	r4, r0, #0
    9c86:	da0c      	bge.n	9ca2 <db_hash_set+0x2a>
    9c88:	4a08      	ldr	r2, [pc, #32]	; (9cac <db_hash_set+0x34>)
    9c8a:	4b09      	ldr	r3, [pc, #36]	; (9cb0 <db_hash_set+0x38>)
		BT_ERR("Failed to decode value (err %zd)", len);
    9c8c:	4621      	mov	r1, r4
    9c8e:	1ad2      	subs	r2, r2, r3
    9c90:	08d2      	lsrs	r2, r2, #3
    9c92:	0192      	lsls	r2, r2, #6
    9c94:	4807      	ldr	r0, [pc, #28]	; (9cb4 <db_hash_set+0x3c>)
    9c96:	f042 0201 	orr.w	r2, r2, #1
    9c9a:	f007 f818 	bl	10cce <log_1>
	}

	BT_HEXDUMP_DBG(stored_hash, sizeof(stored_hash), "Stored Hash: ");

	return 0;
}
    9c9e:	4620      	mov	r0, r4
    9ca0:	bd10      	pop	{r4, pc}
	return 0;
    9ca2:	2400      	movs	r4, #0
    9ca4:	e7fb      	b.n	9c9e <db_hash_set+0x26>
    9ca6:	bf00      	nop
    9ca8:	20002e08 	.word	0x20002e08
    9cac:	00015a28 	.word	0x00015a28
    9cb0:	00015a00 	.word	0x00015a00
    9cb4:	00018671 	.word	0x00018671

00009cb8 <sc_store>:
{
    9cb8:	b570      	push	{r4, r5, r6, lr}
	if (cfg->id) {
    9cba:	4605      	mov	r5, r0
    9cbc:	f815 2b01 	ldrb.w	r2, [r5], #1
{
    9cc0:	4604      	mov	r4, r0
    9cc2:	b08c      	sub	sp, #48	; 0x30
	if (cfg->id) {
    9cc4:	b1fa      	cbz	r2, 9d06 <sc_store+0x4e>
		u8_to_dec(id_str, sizeof(id_str), cfg->id);
    9cc6:	ae02      	add	r6, sp, #8
    9cc8:	2104      	movs	r1, #4
    9cca:	4630      	mov	r0, r6
    9ccc:	f006 fb16 	bl	102fc <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "sc",
    9cd0:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "sc",
    9cd2:	462b      	mov	r3, r5
    9cd4:	2124      	movs	r1, #36	; 0x24
    9cd6:	4a0d      	ldr	r2, [pc, #52]	; (9d0c <sc_store+0x54>)
    9cd8:	a803      	add	r0, sp, #12
    9cda:	f7fb f865 	bl	4da8 <bt_settings_encode_key>
	err = settings_save_one(key, (char *)&cfg->data, sizeof(cfg->data));
    9cde:	f104 0108 	add.w	r1, r4, #8
    9ce2:	2204      	movs	r2, #4
    9ce4:	a803      	add	r0, sp, #12
    9ce6:	f7f9 f827 	bl	2d38 <settings_save_one>
	if (err) {
    9cea:	4601      	mov	r1, r0
    9cec:	b148      	cbz	r0, 9d02 <sc_store+0x4a>
    9cee:	4a08      	ldr	r2, [pc, #32]	; (9d10 <sc_store+0x58>)
    9cf0:	4b08      	ldr	r3, [pc, #32]	; (9d14 <sc_store+0x5c>)
		BT_ERR("failed to store SC (err %d)", err);
    9cf2:	4809      	ldr	r0, [pc, #36]	; (9d18 <sc_store+0x60>)
    9cf4:	1ad2      	subs	r2, r2, r3
    9cf6:	08d2      	lsrs	r2, r2, #3
    9cf8:	0192      	lsls	r2, r2, #6
    9cfa:	f042 0201 	orr.w	r2, r2, #1
    9cfe:	f006 ffe6 	bl	10cce <log_1>
}
    9d02:	b00c      	add	sp, #48	; 0x30
    9d04:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "sc",
    9d06:	9200      	str	r2, [sp, #0]
    9d08:	e7e3      	b.n	9cd2 <sc_store+0x1a>
    9d0a:	bf00      	nop
    9d0c:	000188d6 	.word	0x000188d6
    9d10:	00015a28 	.word	0x00015a28
    9d14:	00015a00 	.word	0x00015a00
    9d18:	00018692 	.word	0x00018692

00009d1c <gatt_send.constprop.0>:
static int gatt_send(struct bt_conn *conn, struct net_buf *buf,
    9d1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9d20:	4606      	mov	r6, r0
    9d22:	4688      	mov	r8, r1
    9d24:	4617      	mov	r7, r2
	if (params) {
    9d26:	461c      	mov	r4, r3
    9d28:	b34b      	cbz	r3, 9d7e <gatt_send.constprop.0+0x62>
		req = bt_att_req_alloc(BT_ATT_TIMEOUT);
    9d2a:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
    9d2e:	2100      	movs	r1, #0
    9d30:	f7ff fe4a 	bl	99c8 <bt_att_req_alloc>
		if (!req) {
    9d34:	4605      	mov	r5, r0
    9d36:	b920      	cbnz	r0, 9d42 <gatt_send.constprop.0+0x26>
			return -ENOMEM;
    9d38:	f06f 040b 	mvn.w	r4, #11
}
    9d3c:	4620      	mov	r0, r4
    9d3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		req->destroy = destroy;
    9d42:	2300      	movs	r3, #0
		req->user_data = params;
    9d44:	6184      	str	r4, [r0, #24]
		err = bt_att_req_send(conn, req);
    9d46:	4601      	mov	r1, r0
		req->buf = buf;
    9d48:	f8c0 8010 	str.w	r8, [r0, #16]
		req->func = func;
    9d4c:	6047      	str	r7, [r0, #4]
		req->destroy = destroy;
    9d4e:	6083      	str	r3, [r0, #8]
		err = bt_att_req_send(conn, req);
    9d50:	4630      	mov	r0, r6
    9d52:	f009 fad0 	bl	132f6 <bt_att_req_send>
		if (err) {
    9d56:	4604      	mov	r4, r0
    9d58:	2800      	cmp	r0, #0
    9d5a:	d0ef      	beq.n	9d3c <gatt_send.constprop.0+0x20>
			bt_att_req_free(req);
    9d5c:	4628      	mov	r0, r5
    9d5e:	f7ff fe49 	bl	99f4 <bt_att_req_free>
	if (err) {
    9d62:	2c00      	cmp	r4, #0
    9d64:	d0ea      	beq.n	9d3c <gatt_send.constprop.0+0x20>
    9d66:	4b08      	ldr	r3, [pc, #32]	; (9d88 <gatt_send.constprop.0+0x6c>)
    9d68:	4a08      	ldr	r2, [pc, #32]	; (9d8c <gatt_send.constprop.0+0x70>)
		BT_ERR("Error sending ATT PDU: %d", err);
    9d6a:	4621      	mov	r1, r4
    9d6c:	1ad2      	subs	r2, r2, r3
    9d6e:	08d2      	lsrs	r2, r2, #3
    9d70:	0192      	lsls	r2, r2, #6
    9d72:	4807      	ldr	r0, [pc, #28]	; (9d90 <gatt_send.constprop.0+0x74>)
    9d74:	f042 0201 	orr.w	r2, r2, #1
    9d78:	f006 ffa9 	bl	10cce <log_1>
    9d7c:	e7de      	b.n	9d3c <gatt_send.constprop.0+0x20>
		err = bt_att_send(conn, buf, NULL, NULL);
    9d7e:	461a      	mov	r2, r3
    9d80:	f009 fa6f 	bl	13262 <bt_att_send>
    9d84:	4604      	mov	r4, r0
    9d86:	e7ec      	b.n	9d62 <gatt_send.constprop.0+0x46>
    9d88:	00015a00 	.word	0x00015a00
    9d8c:	00015a28 	.word	0x00015a28
    9d90:	000186ae 	.word	0x000186ae

00009d94 <gatt_indicate>:
{
    9d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9d98:	4614      	mov	r4, r2
				sizeof(*ind) + params->len);
    9d9a:	8a92      	ldrh	r2, [r2, #20]
{
    9d9c:	4689      	mov	r9, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    9d9e:	3202      	adds	r2, #2
    9da0:	211d      	movs	r1, #29
{
    9da2:	4607      	mov	r7, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    9da4:	f7ff face 	bl	9344 <bt_att_create_pdu>
	if (!buf) {
    9da8:	4605      	mov	r5, r0
    9daa:	b1e8      	cbz	r0, 9de8 <gatt_indicate+0x54>
    9dac:	f100 0808 	add.w	r8, r0, #8
    9db0:	2102      	movs	r1, #2
    9db2:	4640      	mov	r0, r8
    9db4:	f00a f952 	bl	1405c <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
    9db8:	4606      	mov	r6, r0
    9dba:	8aa1      	ldrh	r1, [r4, #20]
    9dbc:	f826 9b02 	strh.w	r9, [r6], #2
    9dc0:	4640      	mov	r0, r8
    9dc2:	f00a f94b 	bl	1405c <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
    9dc6:	4630      	mov	r0, r6
    9dc8:	8aa2      	ldrh	r2, [r4, #20]
    9dca:	6921      	ldr	r1, [r4, #16]
    9dcc:	f008 faa5 	bl	1231a <memcpy>
	if (!params->func) {
    9dd0:	68a3      	ldr	r3, [r4, #8]
    9dd2:	b933      	cbnz	r3, 9de2 <gatt_indicate+0x4e>
		return gatt_send(conn, buf, NULL, NULL, NULL);
    9dd4:	461a      	mov	r2, r3
	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
    9dd6:	4629      	mov	r1, r5
    9dd8:	4638      	mov	r0, r7
}
    9dda:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
    9dde:	f7ff bf9d 	b.w	9d1c <gatt_send.constprop.0>
    9de2:	4623      	mov	r3, r4
    9de4:	4a07      	ldr	r2, [pc, #28]	; (9e04 <gatt_indicate+0x70>)
    9de6:	e7f6      	b.n	9dd6 <gatt_indicate+0x42>
    9de8:	4b07      	ldr	r3, [pc, #28]	; (9e08 <gatt_indicate+0x74>)
    9dea:	4908      	ldr	r1, [pc, #32]	; (9e0c <gatt_indicate+0x78>)
		BT_WARN("No buffer available to send indication");
    9dec:	4808      	ldr	r0, [pc, #32]	; (9e10 <gatt_indicate+0x7c>)
    9dee:	1ac9      	subs	r1, r1, r3
    9df0:	08c9      	lsrs	r1, r1, #3
    9df2:	0189      	lsls	r1, r1, #6
    9df4:	f041 0102 	orr.w	r1, r1, #2
    9df8:	f006 ff5c 	bl	10cb4 <log_0>
}
    9dfc:	f06f 000b 	mvn.w	r0, #11
    9e00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9e04:	00013377 	.word	0x00013377
    9e08:	00015a00 	.word	0x00015a00
    9e0c:	00015a28 	.word	0x00015a28
    9e10:	000186c8 	.word	0x000186c8

00009e14 <ccc_load>:
{
    9e14:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    9e16:	4b21      	ldr	r3, [pc, #132]	; (9e9c <ccc_load+0x88>)
{
    9e18:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    9e1a:	6882      	ldr	r2, [r0, #8]
    9e1c:	429a      	cmp	r2, r3
    9e1e:	d002      	beq.n	9e26 <ccc_load+0x12>
		return BT_GATT_ITER_CONTINUE;
    9e20:	2001      	movs	r0, #1
}
    9e22:	b002      	add	sp, #8
    9e24:	bd70      	pop	{r4, r5, r6, pc}
	if (!load->entry) {
    9e26:	68a3      	ldr	r3, [r4, #8]
	ccc = attr->user_data;
    9e28:	68c6      	ldr	r6, [r0, #12]
	if (!load->entry) {
    9e2a:	b94b      	cbnz	r3, 9e40 <ccc_load+0x2c>
	cfg = ccc_find_cfg(ccc, addr, id);
    9e2c:	4630      	mov	r0, r6
    9e2e:	7922      	ldrb	r2, [r4, #4]
    9e30:	6821      	ldr	r1, [r4, #0]
    9e32:	f009 fb63 	bl	134fc <ccc_find_cfg>
	if (!cfg) {
    9e36:	2800      	cmp	r0, #0
    9e38:	d0f2      	beq.n	9e20 <ccc_load+0xc>
	clear_ccc_cfg(cfg);
    9e3a:	f009 fab7 	bl	133ac <clear_ccc_cfg>
    9e3e:	e7ef      	b.n	9e20 <ccc_load+0xc>
	} else if (!load->count) {
    9e40:	68e0      	ldr	r0, [r4, #12]
    9e42:	2800      	cmp	r0, #0
    9e44:	d0ed      	beq.n	9e22 <ccc_load+0xe>
	if (load->entry->handle != handle) {
    9e46:	881b      	ldrh	r3, [r3, #0]
    9e48:	4299      	cmp	r1, r3
    9e4a:	d00a      	beq.n	9e62 <ccc_load+0x4e>
		if (load->entry->handle < handle) {
    9e4c:	d9e8      	bls.n	9e20 <ccc_load+0xc>
	load->count--;
    9e4e:	68e0      	ldr	r0, [r4, #12]
	load->entry++;
    9e50:	68a3      	ldr	r3, [r4, #8]
	load->count--;
    9e52:	3801      	subs	r0, #1
	load->entry++;
    9e54:	3304      	adds	r3, #4
	load->count--;
    9e56:	60e0      	str	r0, [r4, #12]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    9e58:	3800      	subs	r0, #0
    9e5a:	bf18      	it	ne
    9e5c:	2001      	movne	r0, #1
	load->entry++;
    9e5e:	60a3      	str	r3, [r4, #8]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    9e60:	e7df      	b.n	9e22 <ccc_load+0xe>
	cfg = ccc_find_cfg(ccc, load->addr_with_id.addr, load->addr_with_id.id);
    9e62:	4630      	mov	r0, r6
    9e64:	7922      	ldrb	r2, [r4, #4]
    9e66:	6821      	ldr	r1, [r4, #0]
    9e68:	f009 fb48 	bl	134fc <ccc_find_cfg>
	if (!cfg) {
    9e6c:	4605      	mov	r5, r0
    9e6e:	b980      	cbnz	r0, 9e92 <ccc_load+0x7e>
		cfg = ccc_find_cfg(ccc, BT_ADDR_LE_ANY, 0);
    9e70:	9000      	str	r0, [sp, #0]
    9e72:	4602      	mov	r2, r0
    9e74:	f8cd 0003 	str.w	r0, [sp, #3]
    9e78:	4669      	mov	r1, sp
    9e7a:	4630      	mov	r0, r6
    9e7c:	f009 fb3e 	bl	134fc <ccc_find_cfg>
		if (!cfg) {
    9e80:	4605      	mov	r5, r0
    9e82:	2800      	cmp	r0, #0
    9e84:	d0e3      	beq.n	9e4e <ccc_load+0x3a>
		bt_addr_le_copy(&cfg->peer, load->addr_with_id.addr);
    9e86:	6821      	ldr	r1, [r4, #0]
    9e88:	3001      	adds	r0, #1
    9e8a:	f009 fa8c 	bl	133a6 <bt_addr_le_copy>
		cfg->id = load->addr_with_id.id;
    9e8e:	7923      	ldrb	r3, [r4, #4]
    9e90:	702b      	strb	r3, [r5, #0]
	cfg->value = load->entry->value;
    9e92:	68a3      	ldr	r3, [r4, #8]
    9e94:	885b      	ldrh	r3, [r3, #2]
    9e96:	812b      	strh	r3, [r5, #8]
    9e98:	e7d9      	b.n	9e4e <ccc_load+0x3a>
    9e9a:	bf00      	nop
    9e9c:	00009f01 	.word	0x00009f01

00009ea0 <ccc_save>:
{
    9ea0:	b538      	push	{r3, r4, r5, lr}
    9ea2:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    9ea4:	4b0b      	ldr	r3, [pc, #44]	; (9ed4 <ccc_save+0x34>)
    9ea6:	6882      	ldr	r2, [r0, #8]
{
    9ea8:	460d      	mov	r5, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    9eaa:	429a      	cmp	r2, r3
    9eac:	d10f      	bne.n	9ece <ccc_save+0x2e>
	cfg = ccc_find_cfg(ccc, save->addr_with_id.addr, save->addr_with_id.id);
    9eae:	7922      	ldrb	r2, [r4, #4]
    9eb0:	6821      	ldr	r1, [r4, #0]
    9eb2:	68c0      	ldr	r0, [r0, #12]
    9eb4:	f009 fb22 	bl	134fc <ccc_find_cfg>
	if (!cfg) {
    9eb8:	b148      	cbz	r0, 9ece <ccc_save+0x2e>
	save->store[save->count].handle = handle;
    9eba:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
	save->store[save->count].value = cfg->value;
    9ebe:	8901      	ldrh	r1, [r0, #8]
    9ec0:	eb04 0283 	add.w	r2, r4, r3, lsl #2
	save->count++;
    9ec4:	3301      	adds	r3, #1
	save->store[save->count].handle = handle;
    9ec6:	8115      	strh	r5, [r2, #8]
	save->store[save->count].value = cfg->value;
    9ec8:	8151      	strh	r1, [r2, #10]
	save->count++;
    9eca:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
}
    9ece:	2001      	movs	r0, #1
    9ed0:	bd38      	pop	{r3, r4, r5, pc}
    9ed2:	bf00      	nop
    9ed4:	00009f01 	.word	0x00009f01

00009ed8 <remove_peer_from_attr>:
#endif /*CONFIG_BT_GATT_CACHING */
#endif /* CONFIG_BT_SETTINGS */

static uint8_t remove_peer_from_attr(const struct bt_gatt_attr *attr,
				     uint16_t handle, void *user_data)
{
    9ed8:	b508      	push	{r3, lr}
	const struct addr_with_id *addr_with_id = user_data;
	struct _bt_gatt_ccc *ccc;
	struct bt_gatt_ccc_cfg *cfg;

	/* Check if attribute is a CCC */
	if (attr->write != bt_gatt_attr_write_ccc) {
    9eda:	6881      	ldr	r1, [r0, #8]
{
    9edc:	4613      	mov	r3, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    9ede:	4a07      	ldr	r2, [pc, #28]	; (9efc <remove_peer_from_attr+0x24>)
    9ee0:	4291      	cmp	r1, r2
    9ee2:	d109      	bne.n	9ef8 <remove_peer_from_attr+0x20>
	}

	ccc = attr->user_data;

	/* Check if there is a cfg for the peer */
	cfg = ccc_find_cfg(ccc, addr_with_id->addr, addr_with_id->id);
    9ee4:	791a      	ldrb	r2, [r3, #4]
    9ee6:	6819      	ldr	r1, [r3, #0]
    9ee8:	68c0      	ldr	r0, [r0, #12]
    9eea:	f009 fb07 	bl	134fc <ccc_find_cfg>
	if (cfg) {
    9eee:	b118      	cbz	r0, 9ef8 <remove_peer_from_attr+0x20>
		memset(cfg, 0, sizeof(*cfg));
    9ef0:	220a      	movs	r2, #10
    9ef2:	2100      	movs	r1, #0
    9ef4:	f008 fa3c 	bl	12370 <memset>
	}

	return BT_GATT_ITER_CONTINUE;
}
    9ef8:	2001      	movs	r0, #1
    9efa:	bd08      	pop	{r3, pc}
    9efc:	00009f01 	.word	0x00009f01

00009f00 <bt_gatt_attr_write_ccc>:
{
    9f00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9f04:	461f      	mov	r7, r3
    9f06:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    9f0a:	4606      	mov	r6, r0
    9f0c:	4688      	mov	r8, r1
	struct _bt_gatt_ccc *ccc = attr->user_data;
    9f0e:	f8d1 900c 	ldr.w	r9, [r1, #12]
	if (offset) {
    9f12:	2b00      	cmp	r3, #0
    9f14:	d14a      	bne.n	9fac <bt_gatt_attr_write_ccc+0xac>
	if (!len || len > sizeof(uint16_t)) {
    9f16:	1e7b      	subs	r3, r7, #1
    9f18:	2b01      	cmp	r3, #1
    9f1a:	d84a      	bhi.n	9fb2 <bt_gatt_attr_write_ccc+0xb2>
	if (len < sizeof(uint16_t)) {
    9f1c:	2f01      	cmp	r7, #1
		value = *(uint8_t *)buf;
    9f1e:	7815      	ldrb	r5, [r2, #0]
    9f20:	bf18      	it	ne
    9f22:	7853      	ldrbne	r3, [r2, #1]
	cfg = find_ccc_cfg(conn, ccc);
    9f24:	4649      	mov	r1, r9
		value = *(uint8_t *)buf;
    9f26:	bf0c      	ite	eq
    9f28:	b2ad      	uxtheq	r5, r5
    9f2a:	ea45 2503 	orrne.w	r5, r5, r3, lsl #8
	cfg = find_ccc_cfg(conn, ccc);
    9f2e:	f009 faf4 	bl	1351a <find_ccc_cfg>
	if (!cfg) {
    9f32:	4604      	mov	r4, r0
    9f34:	b9e0      	cbnz	r0, 9f70 <bt_gatt_attr_write_ccc+0x70>
		if (!value) {
    9f36:	b915      	cbnz	r5, 9f3e <bt_gatt_attr_write_ccc+0x3e>
			return len;
    9f38:	4638      	mov	r0, r7
}
    9f3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
    9f3e:	4649      	mov	r1, r9
    9f40:	f009 faeb 	bl	1351a <find_ccc_cfg>
		if (!cfg) {
    9f44:	4604      	mov	r4, r0
    9f46:	b960      	cbnz	r0, 9f62 <bt_gatt_attr_write_ccc+0x62>
    9f48:	4b1b      	ldr	r3, [pc, #108]	; (9fb8 <bt_gatt_attr_write_ccc+0xb8>)
    9f4a:	491c      	ldr	r1, [pc, #112]	; (9fbc <bt_gatt_attr_write_ccc+0xbc>)
			BT_WARN("No space to store CCC cfg");
    9f4c:	481c      	ldr	r0, [pc, #112]	; (9fc0 <bt_gatt_attr_write_ccc+0xc0>)
    9f4e:	1ac9      	subs	r1, r1, r3
    9f50:	08c9      	lsrs	r1, r1, #3
    9f52:	0189      	lsls	r1, r1, #6
    9f54:	f041 0102 	orr.w	r1, r1, #2
    9f58:	f006 feac 	bl	10cb4 <log_0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    9f5c:	f06f 0010 	mvn.w	r0, #16
    9f60:	e7eb      	b.n	9f3a <bt_gatt_attr_write_ccc+0x3a>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    9f62:	f106 0188 	add.w	r1, r6, #136	; 0x88
    9f66:	3001      	adds	r0, #1
    9f68:	f009 fa1d 	bl	133a6 <bt_addr_le_copy>
		cfg->id = conn->id;
    9f6c:	7a33      	ldrb	r3, [r6, #8]
    9f6e:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
    9f70:	f8d9 3010 	ldr.w	r3, [r9, #16]
    9f74:	b973      	cbnz	r3, 9f94 <bt_gatt_attr_write_ccc+0x94>
	if (cfg->value != ccc->value) {
    9f76:	f8b9 300a 	ldrh.w	r3, [r9, #10]
	cfg->value = value;
    9f7a:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
    9f7c:	42ab      	cmp	r3, r5
    9f7e:	d003      	beq.n	9f88 <bt_gatt_attr_write_ccc+0x88>
		gatt_ccc_changed(attr, ccc);
    9f80:	4649      	mov	r1, r9
    9f82:	4640      	mov	r0, r8
    9f84:	f009 f9ed 	bl	13362 <gatt_ccc_changed>
	if (!value) {
    9f88:	2d00      	cmp	r5, #0
    9f8a:	d1d5      	bne.n	9f38 <bt_gatt_attr_write_ccc+0x38>
		clear_ccc_cfg(cfg);
    9f8c:	4620      	mov	r0, r4
    9f8e:	f009 fa0d 	bl	133ac <clear_ccc_cfg>
    9f92:	e7d1      	b.n	9f38 <bt_gatt_attr_write_ccc+0x38>
		ssize_t write = ccc->cfg_write(conn, attr, value);
    9f94:	462a      	mov	r2, r5
    9f96:	4641      	mov	r1, r8
    9f98:	4630      	mov	r0, r6
    9f9a:	4798      	blx	r3
		if (write < 0) {
    9f9c:	2800      	cmp	r0, #0
    9f9e:	dbcc      	blt.n	9f3a <bt_gatt_attr_write_ccc+0x3a>
		if (write != sizeof(value) && write != 1) {
    9fa0:	1e42      	subs	r2, r0, #1
    9fa2:	2a01      	cmp	r2, #1
    9fa4:	d9e7      	bls.n	9f76 <bt_gatt_attr_write_ccc+0x76>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
    9fa6:	f06f 000d 	mvn.w	r0, #13
    9faa:	e7c6      	b.n	9f3a <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    9fac:	f06f 0006 	mvn.w	r0, #6
    9fb0:	e7c3      	b.n	9f3a <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    9fb2:	f06f 000c 	mvn.w	r0, #12
    9fb6:	e7c0      	b.n	9f3a <bt_gatt_attr_write_ccc+0x3a>
    9fb8:	00015a00 	.word	0x00015a00
    9fbc:	00015a28 	.word	0x00015a28
    9fc0:	000186ef 	.word	0x000186ef

00009fc4 <sc_commit>:
{
    9fc4:	b510      	push	{r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    9fc6:	4c0a      	ldr	r4, [pc, #40]	; (9ff0 <sc_commit+0x2c>)
    9fc8:	f06f 0102 	mvn.w	r1, #2
    9fcc:	4620      	mov	r0, r4
    9fce:	f009 fa71 	bl	134b4 <atomic_and>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    9fd2:	e8d4 3faf 	lda	r3, [r4]
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    9fd6:	07db      	lsls	r3, r3, #31
    9fd8:	d507      	bpl.n	9fea <sc_commit+0x26>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    9fda:	f44f 72a4 	mov.w	r2, #328	; 0x148
    9fde:	2300      	movs	r3, #0
    9fe0:	4804      	ldr	r0, [pc, #16]	; (9ff4 <sc_commit+0x30>)
    9fe2:	f1a4 0130 	sub.w	r1, r4, #48	; 0x30
    9fe6:	f005 fd23 	bl	fa30 <k_delayed_work_submit_to_queue>
}
    9fea:	2000      	movs	r0, #0
    9fec:	bd10      	pop	{r4, pc}
    9fee:	bf00      	nop
    9ff0:	20000de0 	.word	0x20000de0
    9ff4:	200010d0 	.word	0x200010d0

00009ff8 <find_sc_cfg>:
{
    9ff8:	b570      	push	{r4, r5, r6, lr}
		if (id == sc_cfg[i].id &&
    9ffa:	4c0e      	ldr	r4, [pc, #56]	; (a034 <find_sc_cfg+0x3c>)
{
    9ffc:	4605      	mov	r5, r0
		if (id == sc_cfg[i].id &&
    9ffe:	7823      	ldrb	r3, [r4, #0]
{
    a000:	460e      	mov	r6, r1
		if (id == sc_cfg[i].id &&
    a002:	4283      	cmp	r3, r0
    a004:	d00a      	beq.n	a01c <find_sc_cfg+0x24>
    a006:	7b23      	ldrb	r3, [r4, #12]
    a008:	42ab      	cmp	r3, r5
    a00a:	d111      	bne.n	a030 <find_sc_cfg+0x38>
	return memcmp(a, b, sizeof(*a));
    a00c:	2207      	movs	r2, #7
    a00e:	4631      	mov	r1, r6
    a010:	4809      	ldr	r0, [pc, #36]	; (a038 <find_sc_cfg+0x40>)
    a012:	f008 f972 	bl	122fa <memcmp>
    a016:	b958      	cbnz	r0, a030 <find_sc_cfg+0x38>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    a018:	2001      	movs	r0, #1
    a01a:	e005      	b.n	a028 <find_sc_cfg+0x30>
    a01c:	2207      	movs	r2, #7
    a01e:	1c60      	adds	r0, r4, #1
    a020:	f008 f96b 	bl	122fa <memcmp>
		if (id == sc_cfg[i].id &&
    a024:	2800      	cmp	r0, #0
    a026:	d1ee      	bne.n	a006 <find_sc_cfg+0xe>
			return &sc_cfg[i];
    a028:	230c      	movs	r3, #12
    a02a:	fb03 4000 	mla	r0, r3, r0, r4
    a02e:	e000      	b.n	a032 <find_sc_cfg+0x3a>
	return NULL;
    a030:	2000      	movs	r0, #0
}
    a032:	bd70      	pop	{r4, r5, r6, pc}
    a034:	20002cfa 	.word	0x20002cfa
    a038:	20002d07 	.word	0x20002d07

0000a03c <sc_save>:
{
    a03c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    a040:	4680      	mov	r8, r0
    a042:	460f      	mov	r7, r1
    a044:	4616      	mov	r6, r2
    a046:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
    a048:	f7ff ffd6 	bl	9ff8 <find_sc_cfg>
	if (!cfg) {
    a04c:	4604      	mov	r4, r0
    a04e:	b9c8      	cbnz	r0, a084 <sc_save+0x48>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
    a050:	4669      	mov	r1, sp
    a052:	9000      	str	r0, [sp, #0]
    a054:	f8cd 0003 	str.w	r0, [sp, #3]
    a058:	f7ff ffce 	bl	9ff8 <find_sc_cfg>
		if (!cfg) {
    a05c:	4604      	mov	r4, r0
    a05e:	b960      	cbnz	r0, a07a <sc_save+0x3e>
    a060:	4915      	ldr	r1, [pc, #84]	; (a0b8 <sc_save+0x7c>)
    a062:	4b16      	ldr	r3, [pc, #88]	; (a0bc <sc_save+0x80>)
			BT_ERR("unable to save SC: no cfg left");
    a064:	4816      	ldr	r0, [pc, #88]	; (a0c0 <sc_save+0x84>)
    a066:	1ac9      	subs	r1, r1, r3
    a068:	08c9      	lsrs	r1, r1, #3
    a06a:	0189      	lsls	r1, r1, #6
    a06c:	f041 0101 	orr.w	r1, r1, #1
    a070:	f006 fe20 	bl	10cb4 <log_0>
}
    a074:	b002      	add	sp, #8
    a076:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bt_addr_le_copy(&cfg->peer, peer);
    a07a:	4639      	mov	r1, r7
		cfg->id = id;
    a07c:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
    a080:	f009 f991 	bl	133a6 <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
    a084:	8922      	ldrh	r2, [r4, #8]
    a086:	8963      	ldrh	r3, [r4, #10]
    a088:	b96a      	cbnz	r2, a0a6 <sc_save+0x6a>
    a08a:	b973      	cbnz	r3, a0aa <sc_save+0x6e>
		cfg->data.start = start;
    a08c:	8126      	strh	r6, [r4, #8]
		*end = new_end;
    a08e:	8165      	strh	r5, [r4, #10]
	    modified && bt_addr_le_is_bonded(cfg->id, &cfg->peer)) {
    a090:	4621      	mov	r1, r4
    a092:	f811 0b01 	ldrb.w	r0, [r1], #1
    a096:	f008 fbb0 	bl	127fa <bt_addr_le_is_bonded>
    a09a:	2800      	cmp	r0, #0
    a09c:	d0ea      	beq.n	a074 <sc_save+0x38>
		sc_store(cfg);
    a09e:	4620      	mov	r0, r4
    a0a0:	f7ff fe0a 	bl	9cb8 <sc_store>
    a0a4:	e7e6      	b.n	a074 <sc_save+0x38>
	if (new_start >= *start && new_end <= *end) {
    a0a6:	4296      	cmp	r6, r2
    a0a8:	d302      	bcc.n	a0b0 <sc_save+0x74>
    a0aa:	429d      	cmp	r5, r3
    a0ac:	d8ef      	bhi.n	a08e <sc_save+0x52>
    a0ae:	e7e1      	b.n	a074 <sc_save+0x38>
	if (*end < new_end) {
    a0b0:	429d      	cmp	r5, r3
		*start = new_start;
    a0b2:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
    a0b4:	d9ec      	bls.n	a090 <sc_save+0x54>
    a0b6:	e7ea      	b.n	a08e <sc_save+0x52>
    a0b8:	00015a28 	.word	0x00015a28
    a0bc:	00015a00 	.word	0x00015a00
    a0c0:	00018709 	.word	0x00018709

0000a0c4 <sc_set>:
{
    a0c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    a0c8:	460e      	mov	r6, r1
    a0ca:	4690      	mov	r8, r2
    a0cc:	4699      	mov	r9, r3
	if (!name) {
    a0ce:	4607      	mov	r7, r0
{
    a0d0:	b087      	sub	sp, #28
	if (!name) {
    a0d2:	b978      	cbnz	r0, a0f4 <sc_set+0x30>
    a0d4:	4937      	ldr	r1, [pc, #220]	; (a1b4 <sc_set+0xf0>)
    a0d6:	4b38      	ldr	r3, [pc, #224]	; (a1b8 <sc_set+0xf4>)
		BT_ERR("Insufficient number of arguments");
    a0d8:	4838      	ldr	r0, [pc, #224]	; (a1bc <sc_set+0xf8>)
    a0da:	1ac9      	subs	r1, r1, r3
    a0dc:	08c9      	lsrs	r1, r1, #3
    a0de:	0189      	lsls	r1, r1, #6
    a0e0:	f041 0101 	orr.w	r1, r1, #1
    a0e4:	f006 fde6 	bl	10cb4 <log_0>
		return -EINVAL;
    a0e8:	f06f 0515 	mvn.w	r5, #21
}
    a0ec:	4628      	mov	r0, r5
    a0ee:	b007      	add	sp, #28
    a0f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_settings_decode_key(name, &addr);
    a0f4:	a902      	add	r1, sp, #8
    a0f6:	f008 f9a8 	bl	1244a <bt_settings_decode_key>
	if (err) {
    a0fa:	4605      	mov	r5, r0
    a0fc:	b178      	cbz	r0, a11e <sc_set+0x5a>
    a0fe:	4a2e      	ldr	r2, [pc, #184]	; (a1b8 <sc_set+0xf4>)
    a100:	4c2c      	ldr	r4, [pc, #176]	; (a1b4 <sc_set+0xf0>)
		BT_ERR("Unable to decode address %s", log_strdup(name));
    a102:	4638      	mov	r0, r7
    a104:	1aa4      	subs	r4, r4, r2
    a106:	f7f7 fb99 	bl	183c <log_strdup>
    a10a:	08e4      	lsrs	r4, r4, #3
    a10c:	01a4      	lsls	r4, r4, #6
    a10e:	f044 0401 	orr.w	r4, r4, #1
    a112:	4601      	mov	r1, r0
    a114:	4622      	mov	r2, r4
    a116:	482a      	ldr	r0, [pc, #168]	; (a1c0 <sc_set+0xfc>)
    a118:	f006 fdd9 	bl	10cce <log_1>
    a11c:	e7e4      	b.n	a0e8 <sc_set+0x24>
	settings_name_next(name, &next);
    a11e:	4638      	mov	r0, r7
    a120:	a901      	add	r1, sp, #4
    a122:	f007 fa81 	bl	11628 <settings_name_next>
	if (!next) {
    a126:	9801      	ldr	r0, [sp, #4]
    a128:	b308      	cbz	r0, a16e <sc_set+0xaa>
		id = strtol(next, NULL, 10);
    a12a:	220a      	movs	r2, #10
    a12c:	4629      	mov	r1, r5
    a12e:	f008 f826 	bl	1217e <strtol>
    a132:	b2c7      	uxtb	r7, r0
	cfg = find_sc_cfg(id, &addr);
    a134:	4638      	mov	r0, r7
    a136:	a902      	add	r1, sp, #8
    a138:	f7ff ff5e 	bl	9ff8 <find_sc_cfg>
	if (!cfg && len_rd) {
    a13c:	4604      	mov	r4, r0
    a13e:	bb88      	cbnz	r0, a1a4 <sc_set+0xe0>
    a140:	2e00      	cmp	r6, #0
    a142:	d0d3      	beq.n	a0ec <sc_set+0x28>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
    a144:	a904      	add	r1, sp, #16
    a146:	9004      	str	r0, [sp, #16]
    a148:	f8cd 0013 	str.w	r0, [sp, #19]
    a14c:	f7ff ff54 	bl	9ff8 <find_sc_cfg>
		if (!cfg) {
    a150:	4604      	mov	r4, r0
    a152:	b970      	cbnz	r0, a172 <sc_set+0xae>
    a154:	4b18      	ldr	r3, [pc, #96]	; (a1b8 <sc_set+0xf4>)
    a156:	4917      	ldr	r1, [pc, #92]	; (a1b4 <sc_set+0xf0>)
			BT_ERR("Unable to restore SC: no cfg left");
    a158:	481a      	ldr	r0, [pc, #104]	; (a1c4 <sc_set+0x100>)
    a15a:	1ac9      	subs	r1, r1, r3
    a15c:	08c9      	lsrs	r1, r1, #3
    a15e:	0189      	lsls	r1, r1, #6
    a160:	f041 0101 	orr.w	r1, r1, #1
    a164:	f006 fda6 	bl	10cb4 <log_0>
			return -ENOMEM;
    a168:	f06f 050b 	mvn.w	r5, #11
    a16c:	e7be      	b.n	a0ec <sc_set+0x28>
		id = BT_ID_DEFAULT;
    a16e:	462f      	mov	r7, r5
    a170:	e7e0      	b.n	a134 <sc_set+0x70>
		cfg->id = id;
    a172:	f800 7b01 	strb.w	r7, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
    a176:	a902      	add	r1, sp, #8
    a178:	f009 f915 	bl	133a6 <bt_addr_le_copy>
		len = read_cb(cb_arg, &cfg->data, sizeof(cfg->data));
    a17c:	f104 0108 	add.w	r1, r4, #8
    a180:	2204      	movs	r2, #4
    a182:	4648      	mov	r0, r9
    a184:	47c0      	blx	r8
		if (len < 0) {
    a186:	1e04      	subs	r4, r0, #0
    a188:	dab0      	bge.n	a0ec <sc_set+0x28>
    a18a:	4b0b      	ldr	r3, [pc, #44]	; (a1b8 <sc_set+0xf4>)
    a18c:	4a09      	ldr	r2, [pc, #36]	; (a1b4 <sc_set+0xf0>)
			BT_ERR("Failed to decode value (err %zd)", len);
    a18e:	4621      	mov	r1, r4
    a190:	1ad2      	subs	r2, r2, r3
    a192:	08d2      	lsrs	r2, r2, #3
    a194:	0192      	lsls	r2, r2, #6
    a196:	480c      	ldr	r0, [pc, #48]	; (a1c8 <sc_set+0x104>)
    a198:	f042 0201 	orr.w	r2, r2, #1
    a19c:	f006 fd97 	bl	10cce <log_1>
			return len;
    a1a0:	4625      	mov	r5, r4
    a1a2:	e7a3      	b.n	a0ec <sc_set+0x28>
	if (len_rd) {
    a1a4:	2e00      	cmp	r6, #0
    a1a6:	d1e9      	bne.n	a17c <sc_set+0xb8>
		memset(cfg, 0, sizeof(*cfg));
    a1a8:	220c      	movs	r2, #12
    a1aa:	4631      	mov	r1, r6
    a1ac:	f008 f8e0 	bl	12370 <memset>
		BT_DBG("Removed SC for %s", bt_addr_le_str(&addr));
    a1b0:	e79c      	b.n	a0ec <sc_set+0x28>
    a1b2:	bf00      	nop
    a1b4:	00015a28 	.word	0x00015a28
    a1b8:	00015a00 	.word	0x00015a00
    a1bc:	0001744a 	.word	0x0001744a
    a1c0:	00018728 	.word	0x00018728
    a1c4:	00018744 	.word	0x00018744
    a1c8:	00018671 	.word	0x00018671

0000a1cc <find_cf_cfg_by_addr>:
{
    a1cc:	b570      	push	{r4, r5, r6, lr}
			if (id == cf_cfg[i].id &&
    a1ce:	4c0e      	ldr	r4, [pc, #56]	; (a208 <find_cf_cfg_by_addr+0x3c>)
{
    a1d0:	4606      	mov	r6, r0
			if (id == cf_cfg[i].id &&
    a1d2:	7823      	ldrb	r3, [r4, #0]
{
    a1d4:	460d      	mov	r5, r1
			if (id == cf_cfg[i].id &&
    a1d6:	4283      	cmp	r3, r0
    a1d8:	d00a      	beq.n	a1f0 <find_cf_cfg_by_addr+0x24>
    a1da:	7c23      	ldrb	r3, [r4, #16]
    a1dc:	42b3      	cmp	r3, r6
    a1de:	d111      	bne.n	a204 <find_cf_cfg_by_addr+0x38>
    a1e0:	2207      	movs	r2, #7
    a1e2:	4628      	mov	r0, r5
    a1e4:	4909      	ldr	r1, [pc, #36]	; (a20c <find_cf_cfg_by_addr+0x40>)
    a1e6:	f008 f888 	bl	122fa <memcmp>
    a1ea:	b958      	cbnz	r0, a204 <find_cf_cfg_by_addr+0x38>
		for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
    a1ec:	2001      	movs	r0, #1
    a1ee:	e006      	b.n	a1fe <find_cf_cfg_by_addr+0x32>
    a1f0:	2207      	movs	r2, #7
    a1f2:	4628      	mov	r0, r5
    a1f4:	1c61      	adds	r1, r4, #1
    a1f6:	f008 f880 	bl	122fa <memcmp>
			if (id == cf_cfg[i].id &&
    a1fa:	2800      	cmp	r0, #0
    a1fc:	d1ed      	bne.n	a1da <find_cf_cfg_by_addr+0xe>
				return &cf_cfg[i];
    a1fe:	eb04 1000 	add.w	r0, r4, r0, lsl #4
    a202:	e000      	b.n	a206 <find_cf_cfg_by_addr+0x3a>
	return NULL;
    a204:	2000      	movs	r0, #0
}
    a206:	bd70      	pop	{r4, r5, r6, pc}
    a208:	20001a0c 	.word	0x20001a0c
    a20c:	20001a1d 	.word	0x20001a1d

0000a210 <gatt_notify>:
{
    a210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a214:	4614      	mov	r4, r2
				sizeof(*nfy) + params->len);
    a216:	8992      	ldrh	r2, [r2, #12]
{
    a218:	4688      	mov	r8, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
    a21a:	3202      	adds	r2, #2
    a21c:	211b      	movs	r1, #27
{
    a21e:	4607      	mov	r7, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
    a220:	f7ff f890 	bl	9344 <bt_att_create_pdu>
	if (!buf) {
    a224:	4605      	mov	r5, r0
    a226:	b1c8      	cbz	r0, a25c <gatt_notify+0x4c>
    a228:	f100 0908 	add.w	r9, r0, #8
    a22c:	2102      	movs	r1, #2
    a22e:	4648      	mov	r0, r9
    a230:	f009 ff14 	bl	1405c <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
    a234:	4606      	mov	r6, r0
    a236:	89a1      	ldrh	r1, [r4, #12]
    a238:	f826 8b02 	strh.w	r8, [r6], #2
    a23c:	4648      	mov	r0, r9
    a23e:	f009 ff0d 	bl	1405c <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
    a242:	89a2      	ldrh	r2, [r4, #12]
    a244:	68a1      	ldr	r1, [r4, #8]
    a246:	4630      	mov	r0, r6
    a248:	f008 f867 	bl	1231a <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
    a24c:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    a250:	4629      	mov	r1, r5
    a252:	4638      	mov	r0, r7
}
    a254:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
    a258:	f009 b803 	b.w	13262 <bt_att_send>
    a25c:	4b06      	ldr	r3, [pc, #24]	; (a278 <gatt_notify+0x68>)
    a25e:	4907      	ldr	r1, [pc, #28]	; (a27c <gatt_notify+0x6c>)
		BT_WARN("No buffer available to send notification");
    a260:	4807      	ldr	r0, [pc, #28]	; (a280 <gatt_notify+0x70>)
    a262:	1ac9      	subs	r1, r1, r3
    a264:	08c9      	lsrs	r1, r1, #3
    a266:	0189      	lsls	r1, r1, #6
    a268:	f041 0102 	orr.w	r1, r1, #2
    a26c:	f006 fd22 	bl	10cb4 <log_0>
}
    a270:	f06f 000b 	mvn.w	r0, #11
    a274:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a278:	00015a00 	.word	0x00015a00
    a27c:	00015a28 	.word	0x00015a28
    a280:	00018766 	.word	0x00018766

0000a284 <notify_cb>:
{
    a284:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    a288:	4b33      	ldr	r3, [pc, #204]	; (a358 <notify_cb+0xd4>)
{
    a28a:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    a28c:	6882      	ldr	r2, [r0, #8]
{
    a28e:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    a290:	429a      	cmp	r2, r3
    a292:	d113      	bne.n	a2bc <notify_cb+0x38>
	ccc = attr->user_data;
    a294:	68c7      	ldr	r7, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
    a296:	4b31      	ldr	r3, [pc, #196]	; (a35c <notify_cb+0xd8>)
    a298:	429f      	cmp	r7, r3
    a29a:	d013      	beq.n	a2c4 <notify_cb+0x40>
		if (cfg->value != data->type) {
    a29c:	893a      	ldrh	r2, [r7, #8]
    a29e:	89a3      	ldrh	r3, [r4, #12]
    a2a0:	429a      	cmp	r2, r3
    a2a2:	d10b      	bne.n	a2bc <notify_cb+0x38>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    a2a4:	4639      	mov	r1, r7
    a2a6:	f811 0b01 	ldrb.w	r0, [r1], #1
    a2aa:	f7fd ffd1 	bl	8250 <bt_conn_lookup_addr_le>
		if (!conn) {
    a2ae:	4605      	mov	r5, r0
    a2b0:	b120      	cbz	r0, a2bc <notify_cb+0x38>
		if (conn->state != BT_CONN_CONNECTED) {
    a2b2:	7b43      	ldrb	r3, [r0, #13]
    a2b4:	2b07      	cmp	r3, #7
    a2b6:	d02d      	beq.n	a314 <notify_cb+0x90>
			bt_conn_unref(conn);
    a2b8:	f008 fb95 	bl	129e6 <bt_conn_unref>
	return BT_GATT_ITER_CONTINUE;
    a2bc:	2001      	movs	r0, #1
}
    a2be:	b003      	add	sp, #12
    a2c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    a2c4:	f04f 0800 	mov.w	r8, #0
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    a2c8:	46c1      	mov	r9, r8
    a2ca:	4d25      	ldr	r5, [pc, #148]	; (a360 <notify_cb+0xdc>)
    a2cc:	2207      	movs	r2, #7
    a2ce:	4669      	mov	r1, sp
    a2d0:	4628      	mov	r0, r5
    a2d2:	f8cd 9000 	str.w	r9, [sp]
    a2d6:	f8cd 9003 	str.w	r9, [sp, #3]
    a2da:	f008 f80e 	bl	122fa <memcmp>
    a2de:	b178      	cbz	r0, a300 <notify_cb+0x7c>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
    a2e0:	2207      	movs	r2, #7
    a2e2:	4629      	mov	r1, r5
    a2e4:	f815 0c01 	ldrb.w	r0, [r5, #-1]
    a2e8:	f7fd fff8 	bl	82dc <bt_conn_lookup_state_le>
			if (!conn) {
    a2ec:	b978      	cbnz	r0, a30e <notify_cb+0x8a>
				sc = (struct sc_data *)data->ind_params->data;
    a2ee:	6923      	ldr	r3, [r4, #16]
				sc_save(cfg->id, &cfg->peer,
    a2f0:	4629      	mov	r1, r5
				sc = (struct sc_data *)data->ind_params->data;
    a2f2:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
    a2f4:	f815 0c01 	ldrb.w	r0, [r5, #-1]
    a2f8:	8853      	ldrh	r3, [r2, #2]
    a2fa:	8812      	ldrh	r2, [r2, #0]
    a2fc:	f7ff fe9e 	bl	a03c <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    a300:	350c      	adds	r5, #12
    a302:	f1b8 0f00 	cmp.w	r8, #0
    a306:	d1c9      	bne.n	a29c <notify_cb+0x18>
    a308:	f04f 0801 	mov.w	r8, #1
    a30c:	e7de      	b.n	a2cc <notify_cb+0x48>
			bt_conn_unref(conn);
    a30e:	f008 fb6a 	bl	129e6 <bt_conn_unref>
    a312:	e7f5      	b.n	a300 <notify_cb+0x7c>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
    a314:	697b      	ldr	r3, [r7, #20]
    a316:	b123      	cbz	r3, a322 <notify_cb+0x9e>
    a318:	4631      	mov	r1, r6
    a31a:	4798      	blx	r3
    a31c:	b908      	cbnz	r0, a322 <notify_cb+0x9e>
			bt_conn_unref(conn);
    a31e:	4628      	mov	r0, r5
    a320:	e7ca      	b.n	a2b8 <notify_cb+0x34>
		if (data->type == BT_GATT_CCC_INDICATE) {
    a322:	89a3      	ldrh	r3, [r4, #12]
			err = gatt_indicate(conn, data->handle,
    a324:	4628      	mov	r0, r5
		if (data->type == BT_GATT_CCC_INDICATE) {
    a326:	2b02      	cmp	r3, #2
    a328:	88a1      	ldrh	r1, [r4, #4]
    a32a:	6922      	ldr	r2, [r4, #16]
    a32c:	d110      	bne.n	a350 <notify_cb+0xcc>
			err = gatt_indicate(conn, data->handle,
    a32e:	f7ff fd31 	bl	9d94 <gatt_indicate>
			if (err == 0) {
    a332:	4606      	mov	r6, r0
    a334:	b918      	cbnz	r0, a33e <notify_cb+0xba>
				data->ind_params->_ref++;
    a336:	6922      	ldr	r2, [r4, #16]
    a338:	7d93      	ldrb	r3, [r2, #22]
    a33a:	3301      	adds	r3, #1
    a33c:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
    a33e:	4628      	mov	r0, r5
    a340:	f008 fb51 	bl	129e6 <bt_conn_unref>
		if (err < 0) {
    a344:	2e00      	cmp	r6, #0
    a346:	f04f 0000 	mov.w	r0, #0
    a34a:	dbb8      	blt.n	a2be <notify_cb+0x3a>
		data->err = 0;
    a34c:	60a0      	str	r0, [r4, #8]
    a34e:	e7b5      	b.n	a2bc <notify_cb+0x38>
			err = gatt_notify(conn, data->handle, data->nfy_params);
    a350:	f7ff ff5e 	bl	a210 <gatt_notify>
    a354:	4606      	mov	r6, r0
    a356:	e7f2      	b.n	a33e <notify_cb+0xba>
    a358:	00009f01 	.word	0x00009f01
    a35c:	20000384 	.word	0x20000384
    a360:	20002cfb 	.word	0x20002cfb

0000a364 <find_cf_cfg>:
{
    a364:	b537      	push	{r0, r1, r2, r4, r5, lr}
		if (!conn) {
    a366:	4605      	mov	r5, r0
    a368:	4c15      	ldr	r4, [pc, #84]	; (a3c0 <find_cf_cfg+0x5c>)
    a36a:	b140      	cbz	r0, a37e <find_cf_cfg+0x1a>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    a36c:	4622      	mov	r2, r4
    a36e:	f812 1b01 	ldrb.w	r1, [r2], #1
    a372:	f008 fb04 	bl	1297e <bt_conn_is_peer_addr_le>
    a376:	b1c0      	cbz	r0, a3aa <find_cf_cfg+0x46>
}
    a378:	4620      	mov	r0, r4
    a37a:	b003      	add	sp, #12
    a37c:	bd30      	pop	{r4, r5, pc}
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    a37e:	9000      	str	r0, [sp, #0]
    a380:	2207      	movs	r2, #7
    a382:	f8cd 0003 	str.w	r0, [sp, #3]
    a386:	4669      	mov	r1, sp
    a388:	1c60      	adds	r0, r4, #1
    a38a:	f007 ffb6 	bl	122fa <memcmp>
    a38e:	2800      	cmp	r0, #0
    a390:	d0f2      	beq.n	a378 <find_cf_cfg+0x14>
    a392:	2207      	movs	r2, #7
    a394:	4669      	mov	r1, sp
    a396:	f104 0011 	add.w	r0, r4, #17
    a39a:	9500      	str	r5, [sp, #0]
    a39c:	f8cd 5003 	str.w	r5, [sp, #3]
    a3a0:	f007 ffab 	bl	122fa <memcmp>
    a3a4:	b948      	cbnz	r0, a3ba <find_cf_cfg+0x56>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
    a3a6:	3410      	adds	r4, #16
    a3a8:	e7e6      	b.n	a378 <find_cf_cfg+0x14>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    a3aa:	4628      	mov	r0, r5
    a3ac:	7c21      	ldrb	r1, [r4, #16]
    a3ae:	f104 0211 	add.w	r2, r4, #17
    a3b2:	f008 fae4 	bl	1297e <bt_conn_is_peer_addr_le>
    a3b6:	2800      	cmp	r0, #0
    a3b8:	d1f5      	bne.n	a3a6 <find_cf_cfg+0x42>
	return NULL;
    a3ba:	2400      	movs	r4, #0
    a3bc:	e7dc      	b.n	a378 <find_cf_cfg+0x14>
    a3be:	bf00      	nop
    a3c0:	20001a0c 	.word	0x20001a0c

0000a3c4 <cf_write>:
{
    a3c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a3c8:	461f      	mov	r7, r3
    a3ca:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    a3ce:	4680      	mov	r8, r0
	if (offset > sizeof(cfg->data)) {
    a3d0:	2b01      	cmp	r3, #1
{
    a3d2:	4616      	mov	r6, r2
	if (offset > sizeof(cfg->data)) {
    a3d4:	d847      	bhi.n	a466 <cf_write+0xa2>
	if (offset + len > sizeof(cfg->data)) {
    a3d6:	443b      	add	r3, r7
    a3d8:	2b01      	cmp	r3, #1
    a3da:	463d      	mov	r5, r7
    a3dc:	dc46      	bgt.n	a46c <cf_write+0xa8>
	cfg = find_cf_cfg(conn);
    a3de:	f7ff ffc1 	bl	a364 <find_cf_cfg>
	if (!cfg) {
    a3e2:	4604      	mov	r4, r0
    a3e4:	b990      	cbnz	r0, a40c <cf_write+0x48>
		cfg = find_cf_cfg(NULL);
    a3e6:	f7ff ffbd 	bl	a364 <find_cf_cfg>
	if (!cfg) {
    a3ea:	4604      	mov	r4, r0
    a3ec:	b970      	cbnz	r0, a40c <cf_write+0x48>
    a3ee:	4b22      	ldr	r3, [pc, #136]	; (a478 <cf_write+0xb4>)
    a3f0:	4922      	ldr	r1, [pc, #136]	; (a47c <cf_write+0xb8>)
		BT_WARN("No space to store Client Supported Features");
    a3f2:	4823      	ldr	r0, [pc, #140]	; (a480 <cf_write+0xbc>)
    a3f4:	1ac9      	subs	r1, r1, r3
    a3f6:	08c9      	lsrs	r1, r1, #3
    a3f8:	0189      	lsls	r1, r1, #6
    a3fa:	f041 0102 	orr.w	r1, r1, #2
    a3fe:	f006 fc59 	bl	10cb4 <log_0>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    a402:	f06f 0510 	mvn.w	r5, #16
}
    a406:	4628      	mov	r0, r5
    a408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
static bool cf_set_value(struct gatt_cf_cfg *cfg, const uint8_t *value, uint16_t len)
    a40c:	4632      	mov	r2, r6
    a40e:	eb07 0c06 	add.w	ip, r7, r6
	for (i = 0U; i < len && i <= last_byte; i++) {
    a412:	4562      	cmp	r2, ip
    a414:	d114      	bne.n	a440 <cf_write+0x7c>
	for (i = 0U; i < len && i < last_byte; i++) {
    a416:	b12f      	cbz	r7, a424 <cf_write+0x60>
		cfg->data[i] |= value[i] & (BIT(last_bit + 1) - 1);
    a418:	7833      	ldrb	r3, [r6, #0]
    a41a:	7a22      	ldrb	r2, [r4, #8]
    a41c:	f003 0307 	and.w	r3, r3, #7
    a420:	4313      	orrs	r3, r2
    a422:	7223      	strb	r3, [r4, #8]
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    a424:	f108 0188 	add.w	r1, r8, #136	; 0x88
    a428:	1c60      	adds	r0, r4, #1
    a42a:	f008 ffbc 	bl	133a6 <bt_addr_le_copy>
	cfg->id = conn->id;
    a42e:	4620      	mov	r0, r4
    a430:	f898 3008 	ldrb.w	r3, [r8, #8]
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
    a434:	2100      	movs	r1, #0
	cfg->id = conn->id;
    a436:	f800 3b0c 	strb.w	r3, [r0], #12
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
    a43a:	f009 f888 	bl	1354e <atomic_set_bit>
	return len;
    a43e:	e7e2      	b.n	a406 <cf_write+0x42>
		uint8_t chg_bits = value[i] ^ cfg->data[i];
    a440:	2300      	movs	r3, #0
    a442:	f812 1b01 	ldrb.w	r1, [r2], #1
    a446:	7a20      	ldrb	r0, [r4, #8]
    a448:	4041      	eors	r1, r0
			if ((BIT(bit) & chg_bits) &&
    a44a:	fa21 fe03 	lsr.w	lr, r1, r3
    a44e:	f01e 0f01 	tst.w	lr, #1
    a452:	d004      	beq.n	a45e <cf_write+0x9a>
    a454:	fa20 fe03 	lsr.w	lr, r0, r3
    a458:	f01e 0f01 	tst.w	lr, #1
    a45c:	d109      	bne.n	a472 <cf_write+0xae>
		for (bit = 0U; bit <= last_bit; bit++) {
    a45e:	3301      	adds	r3, #1
    a460:	2b03      	cmp	r3, #3
    a462:	d1f2      	bne.n	a44a <cf_write+0x86>
    a464:	e7d5      	b.n	a412 <cf_write+0x4e>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    a466:	f06f 0506 	mvn.w	r5, #6
    a46a:	e7cc      	b.n	a406 <cf_write+0x42>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    a46c:	f06f 050c 	mvn.w	r5, #12
    a470:	e7c9      	b.n	a406 <cf_write+0x42>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
    a472:	f06f 0512 	mvn.w	r5, #18
    a476:	e7c6      	b.n	a406 <cf_write+0x42>
    a478:	00015a00 	.word	0x00015a00
    a47c:	00015a28 	.word	0x00015a28
    a480:	0001878f 	.word	0x0001878f

0000a484 <sc_indicate_rsp>:
{
    a484:	b538      	push	{r3, r4, r5, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    a486:	4d10      	ldr	r5, [pc, #64]	; (a4c8 <sc_indicate_rsp+0x44>)
    a488:	4604      	mov	r4, r0
    a48a:	f06f 0102 	mvn.w	r1, #2
    a48e:	4628      	mov	r0, r5
    a490:	f009 f810 	bl	134b4 <atomic_and>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    a494:	e8d5 3faf 	lda	r3, [r5]
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    a498:	07da      	lsls	r2, r3, #31
    a49a:	d506      	bpl.n	a4aa <sc_indicate_rsp+0x26>
    a49c:	2200      	movs	r2, #0
    a49e:	2300      	movs	r3, #0
    a4a0:	480a      	ldr	r0, [pc, #40]	; (a4cc <sc_indicate_rsp+0x48>)
    a4a2:	f1a5 0130 	sub.w	r1, r5, #48	; 0x30
    a4a6:	f005 fac3 	bl	fa30 <k_delayed_work_submit_to_queue>
	cfg = find_cf_cfg(conn);
    a4aa:	4620      	mov	r0, r4
    a4ac:	f7ff ff5a 	bl	a364 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
    a4b0:	b140      	cbz	r0, a4c4 <sc_indicate_rsp+0x40>
    a4b2:	7a03      	ldrb	r3, [r0, #8]
    a4b4:	07db      	lsls	r3, r3, #31
    a4b6:	d505      	bpl.n	a4c4 <sc_indicate_rsp+0x40>
}
    a4b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
    a4bc:	2100      	movs	r1, #0
    a4be:	300c      	adds	r0, #12
    a4c0:	f009 b845 	b.w	1354e <atomic_set_bit>
}
    a4c4:	bd38      	pop	{r3, r4, r5, pc}
    a4c6:	bf00      	nop
    a4c8:	20000de0 	.word	0x20000de0
    a4cc:	200010d0 	.word	0x200010d0

0000a4d0 <cf_set>:
{
    a4d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    a4d4:	4689      	mov	r9, r1
    a4d6:	4617      	mov	r7, r2
    a4d8:	4698      	mov	r8, r3
	if (!name) {
    a4da:	4605      	mov	r5, r0
{
    a4dc:	b085      	sub	sp, #20
	if (!name) {
    a4de:	b978      	cbnz	r0, a500 <cf_set+0x30>
    a4e0:	4934      	ldr	r1, [pc, #208]	; (a5b4 <cf_set+0xe4>)
    a4e2:	4b35      	ldr	r3, [pc, #212]	; (a5b8 <cf_set+0xe8>)
		BT_ERR("Insufficient number of arguments");
    a4e4:	4835      	ldr	r0, [pc, #212]	; (a5bc <cf_set+0xec>)
    a4e6:	1ac9      	subs	r1, r1, r3
    a4e8:	08c9      	lsrs	r1, r1, #3
    a4ea:	0189      	lsls	r1, r1, #6
    a4ec:	f041 0101 	orr.w	r1, r1, #1
    a4f0:	f006 fbe0 	bl	10cb4 <log_0>
		return -EINVAL;
    a4f4:	f06f 0415 	mvn.w	r4, #21
}
    a4f8:	4620      	mov	r0, r4
    a4fa:	b005      	add	sp, #20
    a4fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_settings_decode_key(name, &addr);
    a500:	a902      	add	r1, sp, #8
    a502:	f007 ffa2 	bl	1244a <bt_settings_decode_key>
	if (err) {
    a506:	4604      	mov	r4, r0
    a508:	b178      	cbz	r0, a52a <cf_set+0x5a>
    a50a:	4a2b      	ldr	r2, [pc, #172]	; (a5b8 <cf_set+0xe8>)
    a50c:	4c29      	ldr	r4, [pc, #164]	; (a5b4 <cf_set+0xe4>)
		BT_ERR("Unable to decode address %s", log_strdup(name));
    a50e:	4628      	mov	r0, r5
    a510:	1aa4      	subs	r4, r4, r2
    a512:	f7f7 f993 	bl	183c <log_strdup>
    a516:	08e4      	lsrs	r4, r4, #3
    a518:	01a4      	lsls	r4, r4, #6
    a51a:	f044 0401 	orr.w	r4, r4, #1
    a51e:	4601      	mov	r1, r0
    a520:	4622      	mov	r2, r4
    a522:	4827      	ldr	r0, [pc, #156]	; (a5c0 <cf_set+0xf0>)
    a524:	f006 fbd3 	bl	10cce <log_1>
    a528:	e7e4      	b.n	a4f4 <cf_set+0x24>
	settings_name_next(name, &next);
    a52a:	4628      	mov	r0, r5
    a52c:	a901      	add	r1, sp, #4
    a52e:	f007 f87b 	bl	11628 <settings_name_next>
	if (!next) {
    a532:	9801      	ldr	r0, [sp, #4]
    a534:	b1d8      	cbz	r0, a56e <cf_set+0x9e>
		id = strtol(next, NULL, 10);
    a536:	220a      	movs	r2, #10
    a538:	4621      	mov	r1, r4
    a53a:	f007 fe20 	bl	1217e <strtol>
    a53e:	b2c6      	uxtb	r6, r0
	cfg = find_cf_cfg_by_addr(id, &addr);
    a540:	4630      	mov	r0, r6
    a542:	a902      	add	r1, sp, #8
    a544:	f7ff fe42 	bl	a1cc <find_cf_cfg_by_addr>
	if (!cfg) {
    a548:	4605      	mov	r5, r0
    a54a:	b9b8      	cbnz	r0, a57c <cf_set+0xac>
		cfg = find_cf_cfg(NULL);
    a54c:	f7ff ff0a 	bl	a364 <find_cf_cfg>
		if (!cfg) {
    a550:	4605      	mov	r5, r0
    a552:	b970      	cbnz	r0, a572 <cf_set+0xa2>
    a554:	4b18      	ldr	r3, [pc, #96]	; (a5b8 <cf_set+0xe8>)
    a556:	4917      	ldr	r1, [pc, #92]	; (a5b4 <cf_set+0xe4>)
			BT_ERR("Unable to restore CF: no cfg left");
    a558:	481a      	ldr	r0, [pc, #104]	; (a5c4 <cf_set+0xf4>)
    a55a:	1ac9      	subs	r1, r1, r3
    a55c:	08c9      	lsrs	r1, r1, #3
    a55e:	0189      	lsls	r1, r1, #6
    a560:	f041 0101 	orr.w	r1, r1, #1
    a564:	f006 fba6 	bl	10cb4 <log_0>
			return -ENOMEM;
    a568:	f06f 040b 	mvn.w	r4, #11
    a56c:	e7c4      	b.n	a4f8 <cf_set+0x28>
		id = BT_ID_DEFAULT;
    a56e:	4626      	mov	r6, r4
    a570:	e7e6      	b.n	a540 <cf_set+0x70>
		cfg->id = id;
    a572:	f800 6b01 	strb.w	r6, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
    a576:	a902      	add	r1, sp, #8
    a578:	f008 ff15 	bl	133a6 <bt_addr_le_copy>
	if (len_rd) {
    a57c:	f1b9 0f00 	cmp.w	r9, #0
    a580:	d013      	beq.n	a5aa <cf_set+0xda>
		len = read_cb(cb_arg, cfg->data, sizeof(cfg->data));
    a582:	f105 0108 	add.w	r1, r5, #8
    a586:	2201      	movs	r2, #1
    a588:	4640      	mov	r0, r8
    a58a:	47b8      	blx	r7
		if (len < 0) {
    a58c:	1e05      	subs	r5, r0, #0
    a58e:	dab3      	bge.n	a4f8 <cf_set+0x28>
    a590:	4b09      	ldr	r3, [pc, #36]	; (a5b8 <cf_set+0xe8>)
    a592:	4a08      	ldr	r2, [pc, #32]	; (a5b4 <cf_set+0xe4>)
			BT_ERR("Failed to decode value (err %zd)", len);
    a594:	4629      	mov	r1, r5
    a596:	1ad2      	subs	r2, r2, r3
    a598:	08d2      	lsrs	r2, r2, #3
    a59a:	0192      	lsls	r2, r2, #6
    a59c:	480a      	ldr	r0, [pc, #40]	; (a5c8 <cf_set+0xf8>)
    a59e:	f042 0201 	orr.w	r2, r2, #1
    a5a2:	f006 fb94 	bl	10cce <log_1>
			return len;
    a5a6:	462c      	mov	r4, r5
    a5a8:	e7a6      	b.n	a4f8 <cf_set+0x28>
		clear_cf_cfg(cfg);
    a5aa:	4628      	mov	r0, r5
    a5ac:	f008 ff8d 	bl	134ca <clear_cf_cfg>
    a5b0:	e7a2      	b.n	a4f8 <cf_set+0x28>
    a5b2:	bf00      	nop
    a5b4:	00015a28 	.word	0x00015a28
    a5b8:	00015a00 	.word	0x00015a00
    a5bc:	0001744a 	.word	0x0001744a
    a5c0:	00018728 	.word	0x00018728
    a5c4:	000187bb 	.word	0x000187bb
    a5c8:	00018671 	.word	0x00018671

0000a5cc <read_ppcp>:
{
    a5cc:	b513      	push	{r0, r1, r4, lr}
    a5ce:	4610      	mov	r0, r2
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
    a5d0:	f44f 1228 	mov.w	r2, #2752512	; 0x2a0000
{
    a5d4:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
    a5d8:	4c09      	ldr	r4, [pc, #36]	; (a600 <read_ppcp+0x34>)
	if (offset > value_len) {
    a5da:	2908      	cmp	r1, #8
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
    a5dc:	e9cd 4200 	strd	r4, r2, [sp]
	if (offset > value_len) {
    a5e0:	d80b      	bhi.n	a5fa <read_ppcp+0x2e>
	len = MIN(buf_len, value_len - offset);
    a5e2:	f1c1 0408 	rsb	r4, r1, #8
    a5e6:	429c      	cmp	r4, r3
    a5e8:	bfa8      	it	ge
    a5ea:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
    a5ec:	4469      	add	r1, sp
    a5ee:	4622      	mov	r2, r4
    a5f0:	f007 fe93 	bl	1231a <memcpy>
}
    a5f4:	4620      	mov	r0, r4
    a5f6:	b002      	add	sp, #8
    a5f8:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    a5fa:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
    a5fe:	e7f9      	b.n	a5f4 <read_ppcp+0x28>
    a600:	00280018 	.word	0x00280018

0000a604 <bt_gatt_clear_sc>:
{
    a604:	b570      	push	{r4, r5, r6, lr}
    a606:	b08c      	sub	sp, #48	; 0x30
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
    a608:	f7ff fcf6 	bl	9ff8 <find_sc_cfg>
	if (!cfg) {
    a60c:	4604      	mov	r4, r0
    a60e:	b318      	cbz	r0, a658 <bt_gatt_clear_sc+0x54>
		if (cfg->id) {
    a610:	4605      	mov	r5, r0
    a612:	f815 2b01 	ldrb.w	r2, [r5], #1
    a616:	b312      	cbz	r2, a65e <bt_gatt_clear_sc+0x5a>
			u8_to_dec(id_str, sizeof(id_str), cfg->id);
    a618:	ae02      	add	r6, sp, #8
    a61a:	2104      	movs	r1, #4
    a61c:	4630      	mov	r0, r6
    a61e:	f005 fe6d 	bl	102fc <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "sc",
    a622:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "sc",
    a624:	2124      	movs	r1, #36	; 0x24
    a626:	462b      	mov	r3, r5
    a628:	4a0e      	ldr	r2, [pc, #56]	; (a664 <bt_gatt_clear_sc+0x60>)
    a62a:	a803      	add	r0, sp, #12
    a62c:	f7fa fbbc 	bl	4da8 <bt_settings_encode_key>
		err = settings_delete(key);
    a630:	a803      	add	r0, sp, #12
    a632:	f006 ffd2 	bl	115da <settings_delete>
		if (err) {
    a636:	4601      	mov	r1, r0
    a638:	b148      	cbz	r0, a64e <bt_gatt_clear_sc+0x4a>
    a63a:	4a0b      	ldr	r2, [pc, #44]	; (a668 <bt_gatt_clear_sc+0x64>)
    a63c:	4b0b      	ldr	r3, [pc, #44]	; (a66c <bt_gatt_clear_sc+0x68>)
			BT_ERR("failed to delete SC (err %d)", err);
    a63e:	480c      	ldr	r0, [pc, #48]	; (a670 <bt_gatt_clear_sc+0x6c>)
    a640:	1ad2      	subs	r2, r2, r3
    a642:	08d2      	lsrs	r2, r2, #3
    a644:	0192      	lsls	r2, r2, #6
    a646:	f042 0201 	orr.w	r2, r2, #1
    a64a:	f006 fb40 	bl	10cce <log_1>
	memset(cfg, 0, sizeof(*cfg));
    a64e:	220c      	movs	r2, #12
    a650:	2100      	movs	r1, #0
    a652:	4620      	mov	r0, r4
    a654:	f007 fe8c 	bl	12370 <memset>
}
    a658:	2000      	movs	r0, #0
    a65a:	b00c      	add	sp, #48	; 0x30
    a65c:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "sc",
    a65e:	9200      	str	r2, [sp, #0]
    a660:	e7e0      	b.n	a624 <bt_gatt_clear_sc+0x20>
    a662:	bf00      	nop
    a664:	000188d6 	.word	0x000188d6
    a668:	00015a28 	.word	0x00015a28
    a66c:	00015a00 	.word	0x00015a00
    a670:	000187dd 	.word	0x000187dd

0000a674 <sc_clear>:
{
    a674:	b570      	push	{r4, r5, r6, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    a676:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
    a67a:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    a67c:	4631      	mov	r1, r6
    a67e:	7a00      	ldrb	r0, [r0, #8]
    a680:	f008 f8bb 	bl	127fa <bt_addr_le_is_bonded>
    a684:	4605      	mov	r5, r0
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
    a686:	4631      	mov	r1, r6
    a688:	7a20      	ldrb	r0, [r4, #8]
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    a68a:	b17d      	cbz	r5, a6ac <sc_clear+0x38>
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
    a68c:	f7ff ffba 	bl	a604 <bt_gatt_clear_sc>
		if (err) {
    a690:	4601      	mov	r1, r0
    a692:	b1a0      	cbz	r0, a6be <sc_clear+0x4a>
}
    a694:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a698:	4a09      	ldr	r2, [pc, #36]	; (a6c0 <sc_clear+0x4c>)
    a69a:	4b0a      	ldr	r3, [pc, #40]	; (a6c4 <sc_clear+0x50>)
			BT_ERR("Failed to clear SC %d", err);
    a69c:	480a      	ldr	r0, [pc, #40]	; (a6c8 <sc_clear+0x54>)
    a69e:	1ad2      	subs	r2, r2, r3
    a6a0:	08d2      	lsrs	r2, r2, #3
    a6a2:	0192      	lsls	r2, r2, #6
    a6a4:	f042 0201 	orr.w	r2, r2, #1
    a6a8:	f006 bb11 	b.w	10cce <log_1>
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
    a6ac:	f7ff fca4 	bl	9ff8 <find_sc_cfg>
		if (cfg) {
    a6b0:	b128      	cbz	r0, a6be <sc_clear+0x4a>
	memset(cfg, 0, sizeof(*cfg));
    a6b2:	4629      	mov	r1, r5
}
    a6b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
    a6b8:	220c      	movs	r2, #12
    a6ba:	f007 be59 	b.w	12370 <memset>
}
    a6be:	bd70      	pop	{r4, r5, r6, pc}
    a6c0:	00015a28 	.word	0x00015a28
    a6c4:	00015a00 	.word	0x00015a00
    a6c8:	000187fa 	.word	0x000187fa

0000a6cc <disconnected_cb>:
{
    a6cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    a6d0:	4b1f      	ldr	r3, [pc, #124]	; (a750 <disconnected_cb+0x84>)
{
    a6d2:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    a6d4:	6882      	ldr	r2, [r0, #8]
{
    a6d6:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    a6d8:	429a      	cmp	r2, r3
    a6da:	d102      	bne.n	a6e2 <disconnected_cb+0x16>
	ccc = attr->user_data;
    a6dc:	68c4      	ldr	r4, [r0, #12]
	if (!ccc->value) {
    a6de:	8963      	ldrh	r3, [r4, #10]
    a6e0:	b9c3      	cbnz	r3, a714 <disconnected_cb+0x48>
}
    a6e2:	2001      	movs	r0, #1
    a6e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    a6e8:	f105 0888 	add.w	r8, r5, #136	; 0x88
    a6ec:	4641      	mov	r1, r8
    a6ee:	7a28      	ldrb	r0, [r5, #8]
    a6f0:	f008 f883 	bl	127fa <bt_addr_le_is_bonded>
    a6f4:	b948      	cbnz	r0, a70a <disconnected_cb+0x3e>
				if (ccc == &sc_ccc) {
    a6f6:	4b17      	ldr	r3, [pc, #92]	; (a754 <disconnected_cb+0x88>)
    a6f8:	429c      	cmp	r4, r3
    a6fa:	d102      	bne.n	a702 <disconnected_cb+0x36>
					sc_clear(conn);
    a6fc:	4628      	mov	r0, r5
    a6fe:	f7ff ffb9 	bl	a674 <sc_clear>
				clear_ccc_cfg(cfg);
    a702:	4620      	mov	r0, r4
    a704:	f008 fe52 	bl	133ac <clear_ccc_cfg>
	if (!value_used) {
    a708:	e019      	b.n	a73e <disconnected_cb+0x72>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    a70a:	4641      	mov	r1, r8
    a70c:	4638      	mov	r0, r7
    a70e:	f008 fe4a 	bl	133a6 <bt_addr_le_copy>
	if (!value_used) {
    a712:	e014      	b.n	a73e <disconnected_cb+0x72>
		if (!cfg->value) {
    a714:	8923      	ldrh	r3, [r4, #8]
    a716:	b193      	cbz	r3, a73e <disconnected_cb+0x72>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    a718:	4627      	mov	r7, r4
    a71a:	f817 1b01 	ldrb.w	r1, [r7], #1
    a71e:	4628      	mov	r0, r5
    a720:	463a      	mov	r2, r7
    a722:	f008 f92c 	bl	1297e <bt_conn_is_peer_addr_le>
    a726:	2800      	cmp	r0, #0
    a728:	d1de      	bne.n	a6e8 <disconnected_cb+0x1c>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    a72a:	4639      	mov	r1, r7
    a72c:	7820      	ldrb	r0, [r4, #0]
    a72e:	f7fd fd8f 	bl	8250 <bt_conn_lookup_addr_le>
			if (tmp) {
    a732:	b120      	cbz	r0, a73e <disconnected_cb+0x72>
				if (tmp->state == BT_CONN_CONNECTED) {
    a734:	7b45      	ldrb	r5, [r0, #13]
				bt_conn_unref(tmp);
    a736:	f008 f956 	bl	129e6 <bt_conn_unref>
	if (!value_used) {
    a73a:	2d07      	cmp	r5, #7
    a73c:	d0d1      	beq.n	a6e2 <disconnected_cb+0x16>
		ccc->value = 0U;
    a73e:	2100      	movs	r1, #0
		if (ccc->cfg_changed) {
    a740:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
    a742:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
    a744:	2b00      	cmp	r3, #0
    a746:	d0cc      	beq.n	a6e2 <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
    a748:	4630      	mov	r0, r6
    a74a:	4798      	blx	r3
    a74c:	e7c9      	b.n	a6e2 <disconnected_cb+0x16>
    a74e:	bf00      	nop
    a750:	00009f01 	.word	0x00009f01
    a754:	20000384 	.word	0x20000384

0000a758 <bt_gatt_init>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    a758:	2201      	movs	r2, #1
{
    a75a:	b510      	push	{r4, lr}
    a75c:	4b22      	ldr	r3, [pc, #136]	; (a7e8 <bt_gatt_init+0x90>)
    a75e:	e8d3 1fef 	ldaex	r1, [r3]
    a762:	2900      	cmp	r1, #0
    a764:	d103      	bne.n	a76e <bt_gatt_init+0x16>
    a766:	e8c3 2fe0 	stlex	r0, r2, [r3]
    a76a:	2800      	cmp	r0, #0
    a76c:	d1f7      	bne.n	a75e <bt_gatt_init+0x6>
	if (!atomic_cas(&init, 0, 1)) {
    a76e:	d134      	bne.n	a7da <bt_gatt_init+0x82>
    a770:	4b1e      	ldr	r3, [pc, #120]	; (a7ec <bt_gatt_init+0x94>)
    a772:	e8d3 1fef 	ldaex	r1, [r3]
    a776:	2900      	cmp	r1, #0
    a778:	d103      	bne.n	a782 <bt_gatt_init+0x2a>
    a77a:	e8c3 2fe0 	stlex	r0, r2, [r3]
    a77e:	2800      	cmp	r0, #0
    a780:	d1f7      	bne.n	a772 <bt_gatt_init+0x1a>
	if (!atomic_cas(&service_init, 0, 1)) {
    a782:	d108      	bne.n	a796 <bt_gatt_init+0x3e>
    a784:	2000      	movs	r0, #0
    a786:	4a1a      	ldr	r2, [pc, #104]	; (a7f0 <bt_gatt_init+0x98>)
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    a788:	491a      	ldr	r1, [pc, #104]	; (a7f4 <bt_gatt_init+0x9c>)
    a78a:	8813      	ldrh	r3, [r2, #0]
    a78c:	4c1a      	ldr	r4, [pc, #104]	; (a7f8 <bt_gatt_init+0xa0>)
    a78e:	42a1      	cmp	r1, r4
    a790:	d324      	bcc.n	a7dc <bt_gatt_init+0x84>
    a792:	b100      	cbz	r0, a796 <bt_gatt_init+0x3e>
    a794:	8013      	strh	r3, [r2, #0]
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    a796:	4c19      	ldr	r4, [pc, #100]	; (a7fc <bt_gatt_init+0xa4>)
    a798:	2230      	movs	r2, #48	; 0x30
    a79a:	2100      	movs	r1, #0
    a79c:	4620      	mov	r0, r4
    a79e:	f007 fde7 	bl	12370 <memset>
    a7a2:	4b17      	ldr	r3, [pc, #92]	; (a800 <bt_gatt_init+0xa8>)
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    a7a4:	4621      	mov	r1, r4
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    a7a6:	6063      	str	r3, [r4, #4]
    a7a8:	4c16      	ldr	r4, [pc, #88]	; (a804 <bt_gatt_init+0xac>)
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    a7aa:	2300      	movs	r3, #0
    a7ac:	f44f 72a4 	mov.w	r2, #328	; 0x148
    a7b0:	4815      	ldr	r0, [pc, #84]	; (a808 <bt_gatt_init+0xb0>)
    a7b2:	f005 f93d 	bl	fa30 <k_delayed_work_submit_to_queue>
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    a7b6:	f104 0020 	add.w	r0, r4, #32
    a7ba:	2230      	movs	r2, #48	; 0x30
    a7bc:	2100      	movs	r1, #0
    a7be:	f007 fdd7 	bl	12370 <memset>
    a7c2:	4b12      	ldr	r3, [pc, #72]	; (a80c <bt_gatt_init+0xb4>)
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    a7c4:	3450      	adds	r4, #80	; 0x50
    a7c6:	f844 3c2c 	str.w	r3, [r4, #-44]
    a7ca:	e8d4 3fef 	ldaex	r3, [r4]
    a7ce:	f043 0302 	orr.w	r3, r3, #2
    a7d2:	e8c4 3fe2 	stlex	r2, r3, [r4]
    a7d6:	2a00      	cmp	r2, #0
    a7d8:	d1f7      	bne.n	a7ca <bt_gatt_init+0x72>
}
    a7da:	bd10      	pop	{r4, pc}
		last_static_handle += svc->attr_count;
    a7dc:	6848      	ldr	r0, [r1, #4]
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    a7de:	3108      	adds	r1, #8
		last_static_handle += svc->attr_count;
    a7e0:	4403      	add	r3, r0
    a7e2:	b29b      	uxth	r3, r3
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    a7e4:	2001      	movs	r0, #1
    a7e6:	e7d2      	b.n	a78e <bt_gatt_init+0x36>
    a7e8:	20001a2c 	.word	0x20001a2c
    a7ec:	20001a48 	.word	0x20001a48
    a7f0:	20002cf8 	.word	0x20002cf8
    a7f4:	00015968 	.word	0x00015968
    a7f8:	00015988 	.word	0x00015988
    a7fc:	20000d60 	.word	0x20000d60
    a800:	000137cb 	.word	0x000137cb
    a804:	20000d90 	.word	0x20000d90
    a808:	200010d0 	.word	0x200010d0
    a80c:	0000ac6d 	.word	0x0000ac6d

0000a810 <bt_gatt_attr_get_handle>:
	if (!attr) {
    a810:	4603      	mov	r3, r0
{
    a812:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
    a816:	b148      	cbz	r0, a82c <bt_gatt_attr_get_handle+0x1c>
	if (attr->handle) {
    a818:	8a00      	ldrh	r0, [r0, #16]
    a81a:	b938      	cbnz	r0, a82c <bt_gatt_attr_get_handle+0x1c>
	uint16_t handle = 1;
    a81c:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    a81e:	f04f 0c14 	mov.w	ip, #20
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    a822:	4911      	ldr	r1, [pc, #68]	; (a868 <bt_gatt_attr_get_handle+0x58>)
    a824:	f8df e044 	ldr.w	lr, [pc, #68]	; a86c <bt_gatt_attr_get_handle+0x5c>
    a828:	4571      	cmp	r1, lr
    a82a:	d301      	bcc.n	a830 <bt_gatt_attr_get_handle+0x20>
}
    a82c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((attr < &static_svc->attrs[0]) ||
    a830:	e9d1 7600 	ldrd	r7, r6, [r1]
    a834:	42bb      	cmp	r3, r7
    a836:	d304      	bcc.n	a842 <bt_gatt_attr_get_handle+0x32>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    a838:	fb0c 7206 	mla	r2, ip, r6, r7
    a83c:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
    a83e:	4293      	cmp	r3, r2
    a840:	d90e      	bls.n	a860 <bt_gatt_attr_get_handle+0x50>
			handle += static_svc->attr_count;
    a842:	19a2      	adds	r2, r4, r6
    a844:	b292      	uxth	r2, r2
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    a846:	4614      	mov	r4, r2
    a848:	3108      	adds	r1, #8
    a84a:	e7ed      	b.n	a828 <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
    a84c:	fb0c 7805 	mla	r8, ip, r5, r7
    a850:	4543      	cmp	r3, r8
    a852:	d007      	beq.n	a864 <bt_gatt_attr_get_handle+0x54>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
    a854:	3501      	adds	r5, #1
    a856:	1962      	adds	r2, r4, r5
    a858:	42b5      	cmp	r5, r6
    a85a:	b292      	uxth	r2, r2
    a85c:	d1f6      	bne.n	a84c <bt_gatt_attr_get_handle+0x3c>
    a85e:	e7f2      	b.n	a846 <bt_gatt_attr_get_handle+0x36>
    a860:	2500      	movs	r5, #0
    a862:	e7f8      	b.n	a856 <bt_gatt_attr_get_handle+0x46>
    a864:	4610      	mov	r0, r2
    a866:	e7e1      	b.n	a82c <bt_gatt_attr_get_handle+0x1c>
    a868:	00015968 	.word	0x00015968
    a86c:	00015988 	.word	0x00015988

0000a870 <bt_gatt_foreach_attr_type>:
{
    a870:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a874:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
    a876:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
    a87a:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
    a87e:	4607      	mov	r7, r0
		num_matches = UINT16_MAX;
    a880:	2d00      	cmp	r5, #0
    a882:	bf08      	it	eq
    a884:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
    a886:	4b24      	ldr	r3, [pc, #144]	; (a918 <bt_gatt_foreach_attr_type+0xa8>)
{
    a888:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
    a88a:	881b      	ldrh	r3, [r3, #0]
{
    a88c:	9100      	str	r1, [sp, #0]
	if (start_handle <= last_static_handle) {
    a88e:	4283      	cmp	r3, r0
    a890:	d23c      	bcs.n	a90c <bt_gatt_foreach_attr_type+0x9c>
}
    a892:	b003      	add	sp, #12
    a894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
    a898:	6873      	ldr	r3, [r6, #4]
    a89a:	4423      	add	r3, r4
    a89c:	42bb      	cmp	r3, r7
    a89e:	d232      	bcs.n	a906 <bt_gatt_foreach_attr_type+0x96>
				handle += static_svc->attr_count;
    a8a0:	b29c      	uxth	r4, r3
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    a8a2:	3608      	adds	r6, #8
    a8a4:	4b1d      	ldr	r3, [pc, #116]	; (a91c <bt_gatt_foreach_attr_type+0xac>)
    a8a6:	429e      	cmp	r6, r3
    a8a8:	d3f6      	bcc.n	a898 <bt_gatt_foreach_attr_type+0x28>
    a8aa:	e7f2      	b.n	a892 <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    a8ac:	4640      	mov	r0, r8
    a8ae:	5889      	ldr	r1, [r1, r2]
    a8b0:	9301      	str	r3, [sp, #4]
    a8b2:	f007 fdee 	bl	12492 <bt_uuid_cmp>
    a8b6:	9b01      	ldr	r3, [sp, #4]
    a8b8:	b190      	cbz	r0, a8e0 <bt_gatt_foreach_attr_type+0x70>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    a8ba:	3401      	adds	r4, #1
    a8bc:	f10a 0a01 	add.w	sl, sl, #1
    a8c0:	b2a4      	uxth	r4, r4
    a8c2:	6873      	ldr	r3, [r6, #4]
    a8c4:	4553      	cmp	r3, sl
    a8c6:	d9ec      	bls.n	a8a2 <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
    a8c8:	9b00      	ldr	r3, [sp, #0]
    a8ca:	429c      	cmp	r4, r3
    a8cc:	d8e1      	bhi.n	a892 <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
    a8ce:	42bc      	cmp	r4, r7
    a8d0:	d3f3      	bcc.n	a8ba <bt_gatt_foreach_attr_type+0x4a>
				if (gatt_foreach_iter(&static_svc->attrs[i],
    a8d2:	fb0b f20a 	mul.w	r2, fp, sl
    a8d6:	6831      	ldr	r1, [r6, #0]
    a8d8:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    a8da:	f1b8 0f00 	cmp.w	r8, #0
    a8de:	d1e5      	bne.n	a8ac <bt_gatt_foreach_attr_type+0x3c>
	if (attr_data && attr_data != attr->user_data) {
    a8e0:	f1b9 0f00 	cmp.w	r9, #0
    a8e4:	d10b      	bne.n	a8fe <bt_gatt_foreach_attr_type+0x8e>
	*num_matches -= 1;
    a8e6:	3d01      	subs	r5, #1
	result = func(attr, handle, user_data);
    a8e8:	4618      	mov	r0, r3
	*num_matches -= 1;
    a8ea:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
    a8ec:	4621      	mov	r1, r4
    a8ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    a8f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a8f2:	4798      	blx	r3
	if (!*num_matches) {
    a8f4:	2d00      	cmp	r5, #0
    a8f6:	d0cc      	beq.n	a892 <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
    a8f8:	2800      	cmp	r0, #0
    a8fa:	d1de      	bne.n	a8ba <bt_gatt_foreach_attr_type+0x4a>
    a8fc:	e7c9      	b.n	a892 <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
    a8fe:	68da      	ldr	r2, [r3, #12]
    a900:	4591      	cmp	r9, r2
    a902:	d1da      	bne.n	a8ba <bt_gatt_foreach_attr_type+0x4a>
    a904:	e7ef      	b.n	a8e6 <bt_gatt_foreach_attr_type+0x76>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    a906:	f04f 0a00 	mov.w	sl, #0
    a90a:	e7da      	b.n	a8c2 <bt_gatt_foreach_attr_type+0x52>
		uint16_t handle = 1;
    a90c:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
    a90e:	f04f 0b14 	mov.w	fp, #20
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    a912:	4e03      	ldr	r6, [pc, #12]	; (a920 <bt_gatt_foreach_attr_type+0xb0>)
    a914:	e7c6      	b.n	a8a4 <bt_gatt_foreach_attr_type+0x34>
    a916:	bf00      	nop
    a918:	20002cf8 	.word	0x20002cf8
    a91c:	00015988 	.word	0x00015988
    a920:	00015968 	.word	0x00015968

0000a924 <db_hash_gen>:
	uint8_t key[16] = {};
    a924:	2300      	movs	r3, #0
{
    a926:	b530      	push	{r4, r5, lr}
    a928:	b0c9      	sub	sp, #292	; 0x124
    a92a:	4604      	mov	r4, r0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
    a92c:	4669      	mov	r1, sp
    a92e:	aa1c      	add	r2, sp, #112	; 0x70
    a930:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
    a932:	e9cd 3300 	strd	r3, r3, [sp]
    a936:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
    a93a:	f007 f8fe 	bl	11b3a <tc_cmac_setup>
    a93e:	b958      	cbnz	r0, a958 <db_hash_gen+0x34>
    a940:	4918      	ldr	r1, [pc, #96]	; (a9a4 <db_hash_gen+0x80>)
    a942:	4b19      	ldr	r3, [pc, #100]	; (a9a8 <db_hash_gen+0x84>)
		BT_ERR("Unable to setup AES CMAC");
    a944:	4819      	ldr	r0, [pc, #100]	; (a9ac <db_hash_gen+0x88>)
    a946:	1ac9      	subs	r1, r1, r3
    a948:	08c9      	lsrs	r1, r1, #3
    a94a:	0189      	lsls	r1, r1, #6
    a94c:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Unable to calculate hash");
    a950:	f006 f9b0 	bl	10cb4 <log_0>
}
    a954:	b049      	add	sp, #292	; 0x124
    a956:	bd30      	pop	{r4, r5, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
    a958:	f64f 71ff 	movw	r1, #65535	; 0xffff
    a95c:	2001      	movs	r0, #1
    a95e:	4a14      	ldr	r2, [pc, #80]	; (a9b0 <db_hash_gen+0x8c>)
    a960:	ab04      	add	r3, sp, #16
    a962:	f008 ff27 	bl	137b4 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash, &state.state) == TC_CRYPTO_FAIL) {
    a966:	4813      	ldr	r0, [pc, #76]	; (a9b4 <db_hash_gen+0x90>)
    a968:	a904      	add	r1, sp, #16
    a96a:	f007 f97d 	bl	11c68 <tc_cmac_final>
    a96e:	b940      	cbnz	r0, a982 <db_hash_gen+0x5e>
    a970:	490c      	ldr	r1, [pc, #48]	; (a9a4 <db_hash_gen+0x80>)
    a972:	4b0d      	ldr	r3, [pc, #52]	; (a9a8 <db_hash_gen+0x84>)
		BT_ERR("Unable to calculate hash");
    a974:	4810      	ldr	r0, [pc, #64]	; (a9b8 <db_hash_gen+0x94>)
    a976:	1ac9      	subs	r1, r1, r3
    a978:	08c9      	lsrs	r1, r1, #3
    a97a:	0189      	lsls	r1, r1, #6
    a97c:	f041 0101 	orr.w	r1, r1, #1
    a980:	e7e6      	b.n	a950 <db_hash_gen+0x2c>
	if (tc_cmac_final(db_hash, &state.state) == TC_CRYPTO_FAIL) {
    a982:	2208      	movs	r2, #8
    a984:	4b0b      	ldr	r3, [pc, #44]	; (a9b4 <db_hash_gen+0x90>)
    a986:	f103 0110 	add.w	r1, r3, #16
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
    a98a:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
    a98c:	f811 5d01 	ldrb.w	r5, [r1, #-1]!
	for (i = 0; i < (length/2); i++) {
    a990:	3a01      	subs	r2, #1
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
    a992:	f803 5b01 	strb.w	r5, [r3], #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
    a996:	7008      	strb	r0, [r1, #0]
	for (i = 0; i < (length/2); i++) {
    a998:	d1f7      	bne.n	a98a <db_hash_gen+0x66>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
    a99a:	2c00      	cmp	r4, #0
    a99c:	d0da      	beq.n	a954 <db_hash_gen+0x30>
		db_hash_store();
    a99e:	f7ff f94b 	bl	9c38 <db_hash_store>
    a9a2:	e7d7      	b.n	a954 <db_hash_gen+0x30>
    a9a4:	00015a28 	.word	0x00015a28
    a9a8:	00015a00 	.word	0x00015a00
    a9ac:	00018810 	.word	0x00018810
    a9b0:	00013409 	.word	0x00013409
    a9b4:	20002df8 	.word	0x20002df8
    a9b8:	00018829 	.word	0x00018829

0000a9bc <db_hash_commit>:
{
    a9bc:	b510      	push	{r4, lr}
	err = k_delayed_work_cancel(&db_hash_work);
    a9be:	4823      	ldr	r0, [pc, #140]	; (aa4c <db_hash_commit+0x90>)
    a9c0:	f00a fc2b 	bl	1521a <k_delayed_work_cancel>
	if (!err) {
    a9c4:	b908      	cbnz	r0, a9ca <db_hash_commit+0xe>
		db_hash_gen(false);
    a9c6:	f7ff ffad 	bl	a924 <db_hash_gen>
	if (!memcmp(stored_hash, db_hash, sizeof(stored_hash))) {
    a9ca:	2210      	movs	r2, #16
    a9cc:	4920      	ldr	r1, [pc, #128]	; (aa50 <db_hash_commit+0x94>)
    a9ce:	4821      	ldr	r0, [pc, #132]	; (aa54 <db_hash_commit+0x98>)
    a9d0:	f007 fc93 	bl	122fa <memcmp>
    a9d4:	b948      	cbnz	r0, a9ea <db_hash_commit+0x2e>
		k_delayed_work_cancel(&gatt_sc.work);
    a9d6:	4820      	ldr	r0, [pc, #128]	; (aa58 <db_hash_commit+0x9c>)
    a9d8:	f00a fc1f 	bl	1521a <k_delayed_work_cancel>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    a9dc:	f06f 0101 	mvn.w	r1, #1
    a9e0:	481e      	ldr	r0, [pc, #120]	; (aa5c <db_hash_commit+0xa0>)
    a9e2:	f008 fd67 	bl	134b4 <atomic_and>
}
    a9e6:	2000      	movs	r0, #0
    a9e8:	bd10      	pop	{r4, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    a9ea:	491d      	ldr	r1, [pc, #116]	; (aa60 <db_hash_commit+0xa4>)
    a9ec:	f101 0350 	add.w	r3, r1, #80	; 0x50
    a9f0:	e8d3 2fef 	ldaex	r2, [r3]
    a9f4:	f042 0001 	orr.w	r0, r2, #1
    a9f8:	e8c3 0fe4 	stlex	r4, r0, [r3]
    a9fc:	2c00      	cmp	r4, #0
    a9fe:	d1f7      	bne.n	a9f0 <db_hash_commit+0x34>
	if (!atomic_test_and_set_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    aa00:	f012 0f01 	tst.w	r2, #1
    aa04:	460a      	mov	r2, r1
    aa06:	d10f      	bne.n	aa28 <db_hash_commit+0x6c>
		gatt_sc.start = start;
    aa08:	4a16      	ldr	r2, [pc, #88]	; (aa64 <db_hash_commit+0xa8>)
    aa0a:	618a      	str	r2, [r1, #24]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    aa0c:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_test_bit(gatt_sc.flags, SC_INDICATE_PENDING)) {
    aa10:	079b      	lsls	r3, r3, #30
    aa12:	d406      	bmi.n	aa22 <db_hash_commit+0x66>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    aa14:	f44f 72a4 	mov.w	r2, #328	; 0x148
    aa18:	2300      	movs	r3, #0
    aa1a:	490f      	ldr	r1, [pc, #60]	; (aa58 <db_hash_commit+0x9c>)
    aa1c:	4812      	ldr	r0, [pc, #72]	; (aa68 <db_hash_commit+0xac>)
    aa1e:	f005 f807 	bl	fa30 <k_delayed_work_submit_to_queue>
	db_hash_store();
    aa22:	f7ff f909 	bl	9c38 <db_hash_store>
	return 0;
    aa26:	e7de      	b.n	a9e6 <db_hash_commit+0x2a>
	if (new_start >= *start && new_end <= *end) {
    aa28:	8b48      	ldrh	r0, [r1, #26]
    aa2a:	8b09      	ldrh	r1, [r1, #24]
    aa2c:	2901      	cmp	r1, #1
    aa2e:	f64f 71ff 	movw	r1, #65535	; 0xffff
    aa32:	d805      	bhi.n	aa40 <db_hash_commit+0x84>
    aa34:	4288      	cmp	r0, r1
    aa36:	d0f4      	beq.n	aa22 <db_hash_commit+0x66>
		*end = new_end;
    aa38:	f64f 71ff 	movw	r1, #65535	; 0xffff
    aa3c:	8351      	strh	r1, [r2, #26]
    aa3e:	e7e5      	b.n	aa0c <db_hash_commit+0x50>
		*start = new_start;
    aa40:	2401      	movs	r4, #1
	if (*end < new_end) {
    aa42:	4288      	cmp	r0, r1
		*start = new_start;
    aa44:	8314      	strh	r4, [r2, #24]
	if (*end < new_end) {
    aa46:	d0e1      	beq.n	aa0c <db_hash_commit+0x50>
    aa48:	e7f6      	b.n	aa38 <db_hash_commit+0x7c>
    aa4a:	bf00      	nop
    aa4c:	20000d60 	.word	0x20000d60
    aa50:	20002df8 	.word	0x20002df8
    aa54:	20002e08 	.word	0x20002e08
    aa58:	20000db0 	.word	0x20000db0
    aa5c:	20000de0 	.word	0x20000de0
    aa60:	20000d90 	.word	0x20000d90
    aa64:	ffff0001 	.word	0xffff0001
    aa68:	200010d0 	.word	0x200010d0

0000aa6c <ccc_set_direct>:
{
    aa6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    aa70:	b0b9      	sub	sp, #228	; 0xe4
    aa72:	4688      	mov	r8, r1
    aa74:	4614      	mov	r4, r2
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
    aa76:	4939      	ldr	r1, [pc, #228]	; (ab5c <ccc_set_direct+0xf0>)
    aa78:	466a      	mov	r2, sp
    aa7a:	9840      	ldr	r0, [sp, #256]	; 0x100
{
    aa7c:	461f      	mov	r7, r3
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
    aa7e:	f006 fdb0 	bl	115e2 <settings_name_steq>
    aa82:	b978      	cbnz	r0, aaa4 <ccc_set_direct+0x38>
    aa84:	4b36      	ldr	r3, [pc, #216]	; (ab60 <ccc_set_direct+0xf4>)
    aa86:	4937      	ldr	r1, [pc, #220]	; (ab64 <ccc_set_direct+0xf8>)
			BT_ERR("Invalid key");
    aa88:	4837      	ldr	r0, [pc, #220]	; (ab68 <ccc_set_direct+0xfc>)
    aa8a:	1ac9      	subs	r1, r1, r3
    aa8c:	08c9      	lsrs	r1, r1, #3
    aa8e:	0189      	lsls	r1, r1, #6
    aa90:	f041 0101 	orr.w	r1, r1, #1
    aa94:	f006 f90e 	bl	10cb4 <log_0>
			return -EINVAL;
    aa98:	f06f 0515 	mvn.w	r5, #21
}
    aa9c:	4628      	mov	r0, r5
    aa9e:	b039      	add	sp, #228	; 0xe4
    aaa0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return ccc_set(name, len, read_cb, cb_arg);
    aaa4:	9e00      	ldr	r6, [sp, #0]
		settings_name_next(name, &next);
    aaa6:	a901      	add	r1, sp, #4
    aaa8:	4630      	mov	r0, r6
    aaaa:	f006 fdbd 	bl	11628 <settings_name_next>
		if (!name) {
    aaae:	b96e      	cbnz	r6, aacc <ccc_set_direct+0x60>
    aab0:	492c      	ldr	r1, [pc, #176]	; (ab64 <ccc_set_direct+0xf8>)
    aab2:	4b2b      	ldr	r3, [pc, #172]	; (ab60 <ccc_set_direct+0xf4>)
			BT_ERR("Insufficient number of arguments");
    aab4:	482d      	ldr	r0, [pc, #180]	; (ab6c <ccc_set_direct+0x100>)
    aab6:	1ac9      	subs	r1, r1, r3
    aab8:	08c9      	lsrs	r1, r1, #3
    aaba:	0189      	lsls	r1, r1, #6
    aabc:	f041 0101 	orr.w	r1, r1, #1
    aac0:	f006 f8f8 	bl	10cb4 <log_0>
			return -EINVAL;
    aac4:	f06f 0415 	mvn.w	r4, #21
			return -EINVAL;
    aac8:	4625      	mov	r5, r4
    aaca:	e7e7      	b.n	aa9c <ccc_set_direct+0x30>
		} else if (!next) {
    aacc:	9801      	ldr	r0, [sp, #4]
    aace:	b9c8      	cbnz	r0, ab04 <ccc_set_direct+0x98>
		err = bt_settings_decode_key(name, &addr);
    aad0:	f10d 0908 	add.w	r9, sp, #8
			load.addr_with_id.id = strtol(next, NULL, 10);
    aad4:	f88d 0014 	strb.w	r0, [sp, #20]
		err = bt_settings_decode_key(name, &addr);
    aad8:	4649      	mov	r1, r9
    aada:	4630      	mov	r0, r6
    aadc:	f007 fcb5 	bl	1244a <bt_settings_decode_key>
		if (err) {
    aae0:	4605      	mov	r5, r0
    aae2:	b1a0      	cbz	r0, ab0e <ccc_set_direct+0xa2>
    aae4:	4a1e      	ldr	r2, [pc, #120]	; (ab60 <ccc_set_direct+0xf4>)
    aae6:	4c1f      	ldr	r4, [pc, #124]	; (ab64 <ccc_set_direct+0xf8>)
			BT_ERR("Unable to decode address %s", log_strdup(name));
    aae8:	4630      	mov	r0, r6
    aaea:	1aa4      	subs	r4, r4, r2
    aaec:	f7f6 fea6 	bl	183c <log_strdup>
    aaf0:	08e4      	lsrs	r4, r4, #3
    aaf2:	01a4      	lsls	r4, r4, #6
    aaf4:	f044 0401 	orr.w	r4, r4, #1
    aaf8:	4601      	mov	r1, r0
    aafa:	4622      	mov	r2, r4
    aafc:	481c      	ldr	r0, [pc, #112]	; (ab70 <ccc_set_direct+0x104>)
    aafe:	f006 f8e6 	bl	10cce <log_1>
    ab02:	e7df      	b.n	aac4 <ccc_set_direct+0x58>
			load.addr_with_id.id = strtol(next, NULL, 10);
    ab04:	220a      	movs	r2, #10
    ab06:	2100      	movs	r1, #0
    ab08:	f007 fb39 	bl	1217e <strtol>
    ab0c:	e7e0      	b.n	aad0 <ccc_set_direct+0x64>
		load.addr_with_id.addr = &addr;
    ab0e:	f8cd 9010 	str.w	r9, [sp, #16]
		if (len_rd) {
    ab12:	f1b8 0f00 	cmp.w	r8, #0
    ab16:	d01d      	beq.n	ab54 <ccc_set_direct+0xe8>
			len = read_cb(cb_arg, ccc_store, sizeof(ccc_store));
    ab18:	ae08      	add	r6, sp, #32
    ab1a:	22c0      	movs	r2, #192	; 0xc0
    ab1c:	4631      	mov	r1, r6
    ab1e:	4638      	mov	r0, r7
    ab20:	47a0      	blx	r4
			if (len < 0) {
    ab22:	1e04      	subs	r4, r0, #0
    ab24:	da0b      	bge.n	ab3e <ccc_set_direct+0xd2>
    ab26:	4b0e      	ldr	r3, [pc, #56]	; (ab60 <ccc_set_direct+0xf4>)
    ab28:	4a0e      	ldr	r2, [pc, #56]	; (ab64 <ccc_set_direct+0xf8>)
				BT_ERR("Failed to decode value (err %zd)", len);
    ab2a:	4621      	mov	r1, r4
    ab2c:	1ad2      	subs	r2, r2, r3
    ab2e:	08d2      	lsrs	r2, r2, #3
    ab30:	0192      	lsls	r2, r2, #6
    ab32:	4810      	ldr	r0, [pc, #64]	; (ab74 <ccc_set_direct+0x108>)
    ab34:	f042 0201 	orr.w	r2, r2, #1
    ab38:	f006 f8c9 	bl	10cce <log_1>
				return len;
    ab3c:	e7c4      	b.n	aac8 <ccc_set_direct+0x5c>
			load.count = len / sizeof(*ccc_store);
    ab3e:	08a4      	lsrs	r4, r4, #2
			load.entry = ccc_store;
    ab40:	9606      	str	r6, [sp, #24]
			load.count = len / sizeof(*ccc_store);
    ab42:	9407      	str	r4, [sp, #28]
		bt_gatt_foreach_attr(0x0001, 0xffff, ccc_load, &load);
    ab44:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ab48:	2001      	movs	r0, #1
    ab4a:	4a0b      	ldr	r2, [pc, #44]	; (ab78 <ccc_set_direct+0x10c>)
    ab4c:	ab04      	add	r3, sp, #16
    ab4e:	f008 fe31 	bl	137b4 <bt_gatt_foreach_attr>
	return 0;
    ab52:	e7a3      	b.n	aa9c <ccc_set_direct+0x30>
			load.count = 0;
    ab54:	e9cd 0006 	strd	r0, r0, [sp, #24]
    ab58:	e7f4      	b.n	ab44 <ccc_set_direct+0xd8>
    ab5a:	bf00      	nop
    ab5c:	00018842 	.word	0x00018842
    ab60:	00015a00 	.word	0x00015a00
    ab64:	00015a28 	.word	0x00015a28
    ab68:	00018849 	.word	0x00018849
    ab6c:	0001744a 	.word	0x0001744a
    ab70:	00018728 	.word	0x00018728
    ab74:	00018671 	.word	0x00018671
    ab78:	00009e15 	.word	0x00009e15

0000ab7c <bt_gatt_indicate>:
{
    ab7c:	b530      	push	{r4, r5, lr}
    ab7e:	4604      	mov	r4, r0
    ab80:	460d      	mov	r5, r1
    ab82:	b08b      	sub	sp, #44	; 0x2c
    ab84:	4b36      	ldr	r3, [pc, #216]	; (ac60 <bt_gatt_indicate+0xe4>)
    ab86:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    ab8a:	079a      	lsls	r2, r3, #30
    ab8c:	d561      	bpl.n	ac52 <bt_gatt_indicate+0xd6>
	data.attr = params->attr;
    ab8e:	6848      	ldr	r0, [r1, #4]
    ab90:	9005      	str	r0, [sp, #20]
	if (conn && conn->state != BT_CONN_CONNECTED) {
    ab92:	b114      	cbz	r4, ab9a <bt_gatt_indicate+0x1e>
    ab94:	7b63      	ldrb	r3, [r4, #13]
    ab96:	2b07      	cmp	r3, #7
    ab98:	d15e      	bne.n	ac58 <bt_gatt_indicate+0xdc>
	data.handle = bt_gatt_attr_get_handle(data.attr);
    ab9a:	f7ff fe39 	bl	a810 <bt_gatt_attr_get_handle>
    ab9e:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (!data.handle) {
    aba2:	b918      	cbnz	r0, abac <bt_gatt_indicate+0x30>
		return -ENOENT;
    aba4:	f06f 0001 	mvn.w	r0, #1
}
    aba8:	b00b      	add	sp, #44	; 0x2c
    abaa:	bd30      	pop	{r4, r5, pc}
	if (params->uuid) {
    abac:	682a      	ldr	r2, [r5, #0]
    abae:	b9ba      	cbnz	r2, abe0 <bt_gatt_indicate+0x64>
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
    abb0:	9b05      	ldr	r3, [sp, #20]
    abb2:	a904      	add	r1, sp, #16
    abb4:	6818      	ldr	r0, [r3, #0]
    abb6:	2300      	movs	r3, #0
    abb8:	f88d 3010 	strb.w	r3, [sp, #16]
    abbc:	f642 0303 	movw	r3, #10243	; 0x2803
    abc0:	f8ad 3012 	strh.w	r3, [sp, #18]
    abc4:	f007 fc65 	bl	12492 <bt_uuid_cmp>
    abc8:	b1d0      	cbz	r0, ac00 <bt_gatt_indicate+0x84>
	if (conn) {
    abca:	f8bd 0018 	ldrh.w	r0, [sp, #24]
    abce:	b324      	cbz	r4, ac1a <bt_gatt_indicate+0x9e>
		params->_ref = 1;
    abd0:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
    abd2:	4601      	mov	r1, r0
    abd4:	462a      	mov	r2, r5
    abd6:	4620      	mov	r0, r4
		params->_ref = 1;
    abd8:	75ab      	strb	r3, [r5, #22]
		return gatt_indicate(conn, data.handle, params);
    abda:	f7ff f8db 	bl	9d94 <gatt_indicate>
    abde:	e7e3      	b.n	aba8 <bt_gatt_indicate+0x2c>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    abe0:	a905      	add	r1, sp, #20
    abe2:	9102      	str	r1, [sp, #8]
    abe4:	491f      	ldr	r1, [pc, #124]	; (ac64 <bt_gatt_indicate+0xe8>)
	found->attr = NULL;
    abe6:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    abe8:	9101      	str	r1, [sp, #4]
    abea:	2101      	movs	r1, #1
    abec:	9100      	str	r1, [sp, #0]
    abee:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
    abf2:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    abf4:	f7ff fe3c 	bl	a870 <bt_gatt_foreach_attr_type>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
    abf8:	9b05      	ldr	r3, [sp, #20]
    abfa:	2b00      	cmp	r3, #0
    abfc:	d1d8      	bne.n	abb0 <bt_gatt_indicate+0x34>
    abfe:	e7d1      	b.n	aba4 <bt_gatt_indicate+0x28>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
    ac00:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
    ac02:	68c3      	ldr	r3, [r0, #12]
    ac04:	799b      	ldrb	r3, [r3, #6]
    ac06:	069b      	lsls	r3, r3, #26
    ac08:	d402      	bmi.n	ac10 <bt_gatt_indicate+0x94>
			return -EINVAL;
    ac0a:	f06f 0015 	mvn.w	r0, #21
    ac0e:	e7cb      	b.n	aba8 <bt_gatt_indicate+0x2c>
		data.handle = bt_gatt_attr_value_handle(data.attr);
    ac10:	f008 fd82 	bl	13718 <bt_gatt_attr_value_handle>
    ac14:	f8ad 0018 	strh.w	r0, [sp, #24]
    ac18:	e7d7      	b.n	abca <bt_gatt_indicate+0x4e>
	data.err = -ENOTCONN;
    ac1a:	f06f 0338 	mvn.w	r3, #56	; 0x38
    ac1e:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
    ac20:	2302      	movs	r3, #2
    ac22:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    ac26:	f642 1302 	movw	r3, #10498	; 0x2902
    ac2a:	f8ad 3012 	strh.w	r3, [sp, #18]
    ac2e:	ab05      	add	r3, sp, #20
    ac30:	9302      	str	r3, [sp, #8]
    ac32:	4b0d      	ldr	r3, [pc, #52]	; (ac68 <bt_gatt_indicate+0xec>)
    ac34:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ac38:	9301      	str	r3, [sp, #4]
    ac3a:	2301      	movs	r3, #1
	params->_ref = 0;
    ac3c:	75ac      	strb	r4, [r5, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    ac3e:	9300      	str	r3, [sp, #0]
    ac40:	aa04      	add	r2, sp, #16
    ac42:	4623      	mov	r3, r4
	data.ind_params = params;
    ac44:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    ac46:	f88d 4010 	strb.w	r4, [sp, #16]
    ac4a:	f7ff fe11 	bl	a870 <bt_gatt_foreach_attr_type>
	return data.err;
    ac4e:	9807      	ldr	r0, [sp, #28]
    ac50:	e7aa      	b.n	aba8 <bt_gatt_indicate+0x2c>
		return -EAGAIN;
    ac52:	f06f 000a 	mvn.w	r0, #10
    ac56:	e7a7      	b.n	aba8 <bt_gatt_indicate+0x2c>
		return -ENOTCONN;
    ac58:	f06f 0038 	mvn.w	r0, #56	; 0x38
    ac5c:	e7a4      	b.n	aba8 <bt_gatt_indicate+0x2c>
    ac5e:	bf00      	nop
    ac60:	20000094 	.word	0x20000094
    ac64:	0001339b 	.word	0x0001339b
    ac68:	0000a285 	.word	0x0000a285

0000ac6c <sc_process>:
{
    ac6c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    ac6e:	4604      	mov	r4, r0
	sc_range[0] = sys_cpu_to_le16(sc->start);
    ac70:	f850 3c08 	ldr.w	r3, [r0, #-8]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
    ac74:	f100 0530 	add.w	r5, r0, #48	; 0x30
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    ac78:	f06f 0101 	mvn.w	r1, #1
    ac7c:	f1a0 0620 	sub.w	r6, r0, #32
    ac80:	4628      	mov	r0, r5
	sc_range[0] = sys_cpu_to_le16(sc->start);
    ac82:	9301      	str	r3, [sp, #4]
    ac84:	f008 fc16 	bl	134b4 <atomic_and>
	sc->params.attr = &_1_gatt_svc.attrs[2];
    ac88:	4b0d      	ldr	r3, [pc, #52]	; (acc0 <sc_process+0x54>)
	sc->start = 0U;
    ac8a:	2000      	movs	r0, #0
	sc->params.attr = &_1_gatt_svc.attrs[2];
    ac8c:	f844 3c1c 	str.w	r3, [r4, #-28]
	sc->params.func = sc_indicate_rsp;
    ac90:	4b0c      	ldr	r3, [pc, #48]	; (acc4 <sc_process+0x58>)
	if (bt_gatt_indicate(NULL, &sc->params)) {
    ac92:	4631      	mov	r1, r6
	sc->params.func = sc_indicate_rsp;
    ac94:	f844 3c18 	str.w	r3, [r4, #-24]
	sc->params.data = &sc_range[0];
    ac98:	ab01      	add	r3, sp, #4
    ac9a:	f844 3c10 	str.w	r3, [r4, #-16]
	sc->params.len = sizeof(sc_range);
    ac9e:	2304      	movs	r3, #4
	sc->start = 0U;
    aca0:	f824 0c08 	strh.w	r0, [r4, #-8]
	sc->end = 0U;
    aca4:	f824 0c06 	strh.w	r0, [r4, #-6]
	sc->params.len = sizeof(sc_range);
    aca8:	f824 3c0c 	strh.w	r3, [r4, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
    acac:	f7ff ff66 	bl	ab7c <bt_gatt_indicate>
    acb0:	b918      	cbnz	r0, acba <sc_process+0x4e>
	atomic_set_bit(sc->flags, SC_INDICATE_PENDING);
    acb2:	2101      	movs	r1, #1
    acb4:	4628      	mov	r0, r5
    acb6:	f008 fc4a 	bl	1354e <atomic_set_bit>
}
    acba:	b002      	add	sp, #8
    acbc:	bd70      	pop	{r4, r5, r6, pc}
    acbe:	bf00      	nop
    acc0:	00016158 	.word	0x00016158
    acc4:	0000a485 	.word	0x0000a485

0000acc8 <update_ccc>:
{
    acc8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    accc:	4b3e      	ldr	r3, [pc, #248]	; (adc8 <update_ccc+0x100>)
{
    acce:	4616      	mov	r6, r2
	struct bt_conn *conn = data->conn;
    acd0:	6815      	ldr	r5, [r2, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
    acd2:	6882      	ldr	r2, [r0, #8]
{
    acd4:	4604      	mov	r4, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    acd6:	429a      	cmp	r2, r3
    acd8:	d11c      	bne.n	ad14 <update_ccc+0x4c>
	ccc = attr->user_data;
    acda:	68c7      	ldr	r7, [r0, #12]
		if (!cfg->value ||
    acdc:	893b      	ldrh	r3, [r7, #8]
    acde:	b1cb      	cbz	r3, ad14 <update_ccc+0x4c>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    ace0:	463a      	mov	r2, r7
    ace2:	4628      	mov	r0, r5
    ace4:	f812 1b01 	ldrb.w	r1, [r2], #1
    ace8:	f007 fe49 	bl	1297e <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
    acec:	b190      	cbz	r0, ad14 <update_ccc+0x4c>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
    acee:	222a      	movs	r2, #42	; 0x2a
    acf0:	4621      	mov	r1, r4
    acf2:	4628      	mov	r0, r5
    acf4:	f008 fd6c 	bl	137d0 <bt_gatt_check_perm>
		if (err) {
    acf8:	b308      	cbz	r0, ad3e <update_ccc+0x76>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
    acfa:	2803      	cmp	r0, #3
    acfc:	d10e      	bne.n	ad1c <update_ccc+0x54>
    acfe:	4a33      	ldr	r2, [pc, #204]	; (adcc <update_ccc+0x104>)
    ad00:	4b33      	ldr	r3, [pc, #204]	; (add0 <update_ccc+0x108>)
				BT_WARN("CCC %p not writable", attr);
    ad02:	4621      	mov	r1, r4
    ad04:	1ad2      	subs	r2, r2, r3
    ad06:	08d2      	lsrs	r2, r2, #3
    ad08:	0192      	lsls	r2, r2, #6
    ad0a:	4832      	ldr	r0, [pc, #200]	; (add4 <update_ccc+0x10c>)
    ad0c:	f042 0202 	orr.w	r2, r2, #2
    ad10:	f005 ffdd 	bl	10cce <log_1>
}
    ad14:	2001      	movs	r0, #1
    ad16:	b002      	add	sp, #8
    ad18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				sec = BT_SECURITY_L3;
    ad1c:	2805      	cmp	r0, #5
			    bt_conn_get_security(conn) < sec) {
    ad1e:	4628      	mov	r0, r5
				sec = BT_SECURITY_L3;
    ad20:	bf14      	ite	ne
    ad22:	f04f 0802 	movne.w	r8, #2
    ad26:	f04f 0803 	moveq.w	r8, #3
			    bt_conn_get_security(conn) < sec) {
    ad2a:	f007 fe1d 	bl	12968 <bt_conn_get_security>
			if (IS_ENABLED(CONFIG_BT_SMP) &&
    ad2e:	4580      	cmp	r8, r0
    ad30:	d905      	bls.n	ad3e <update_ccc+0x76>
				if (data->sec < sec) {
    ad32:	7933      	ldrb	r3, [r6, #4]
    ad34:	4543      	cmp	r3, r8
    ad36:	d2ed      	bcs.n	ad14 <update_ccc+0x4c>
					data->sec = sec;
    ad38:	f886 8004 	strb.w	r8, [r6, #4]
    ad3c:	e7ea      	b.n	ad14 <update_ccc+0x4c>
		gatt_ccc_changed(attr, ccc);
    ad3e:	4639      	mov	r1, r7
    ad40:	4620      	mov	r0, r4
    ad42:	f008 fb0e 	bl	13362 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
    ad46:	4b24      	ldr	r3, [pc, #144]	; (add8 <update_ccc+0x110>)
    ad48:	429f      	cmp	r7, r3
    ad4a:	d1e3      	bne.n	ad14 <update_ccc+0x4c>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
    ad4c:	7a28      	ldrb	r0, [r5, #8]
    ad4e:	f105 0188 	add.w	r1, r5, #136	; 0x88
    ad52:	f7ff f951 	bl	9ff8 <find_sc_cfg>
	if (!cfg) {
    ad56:	4604      	mov	r4, r0
    ad58:	2800      	cmp	r0, #0
    ad5a:	d0db      	beq.n	ad14 <update_ccc+0x4c>
	if (!(cfg->data.start || cfg->data.end)) {
    ad5c:	8902      	ldrh	r2, [r0, #8]
    ad5e:	8943      	ldrh	r3, [r0, #10]
    ad60:	ea52 0103 	orrs.w	r1, r2, r3
    ad64:	d0d6      	beq.n	ad14 <update_ccc+0x4c>
	index = bt_conn_index(conn);
    ad66:	4628      	mov	r0, r5
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
    ad68:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
    ad6c:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
    ad70:	f7fd fc4c 	bl	860c <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
    ad74:	2318      	movs	r3, #24
    ad76:	4919      	ldr	r1, [pc, #100]	; (addc <update_ccc+0x114>)
    ad78:	4a19      	ldr	r2, [pc, #100]	; (ade0 <update_ccc+0x118>)
    ad7a:	fb03 1300 	mla	r3, r3, r0, r1
    ad7e:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
    ad80:	4a18      	ldr	r2, [pc, #96]	; (ade4 <update_ccc+0x11c>)
    ad82:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
    ad84:	aa01      	add	r2, sp, #4
    ad86:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
    ad88:	2204      	movs	r2, #4
    ad8a:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    ad8c:	b203      	sxth	r3, r0
    ad8e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    ad92:	4628      	mov	r0, r5
    ad94:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    ad98:	f7ff fef0 	bl	ab7c <bt_gatt_indicate>
    ad9c:	b148      	cbz	r0, adb2 <update_ccc+0xea>
    ad9e:	490b      	ldr	r1, [pc, #44]	; (adcc <update_ccc+0x104>)
    ada0:	4b0b      	ldr	r3, [pc, #44]	; (add0 <update_ccc+0x108>)
		BT_ERR("SC restore indication failed");
    ada2:	4811      	ldr	r0, [pc, #68]	; (ade8 <update_ccc+0x120>)
    ada4:	1ac9      	subs	r1, r1, r3
    ada6:	08c9      	lsrs	r1, r1, #3
    ada8:	0189      	lsls	r1, r1, #6
    adaa:	f041 0101 	orr.w	r1, r1, #1
    adae:	f005 ff81 	bl	10cb4 <log_0>
	memset(&cfg->data, 0, sizeof(cfg->data));
    adb2:	2204      	movs	r2, #4
    adb4:	2100      	movs	r1, #0
    adb6:	f104 0008 	add.w	r0, r4, #8
    adba:	f007 fad9 	bl	12370 <memset>
		sc_store(cfg);
    adbe:	4620      	mov	r0, r4
    adc0:	f7fe ff7a 	bl	9cb8 <sc_store>
    adc4:	e7a6      	b.n	ad14 <update_ccc+0x4c>
    adc6:	bf00      	nop
    adc8:	00009f01 	.word	0x00009f01
    adcc:	00015a28 	.word	0x00015a28
    add0:	00015a00 	.word	0x00015a00
    add4:	00018855 	.word	0x00018855
    add8:	20000384 	.word	0x20000384
    addc:	20001a30 	.word	0x20001a30
    ade0:	00016158 	.word	0x00016158
    ade4:	00013563 	.word	0x00013563
    ade8:	00018869 	.word	0x00018869

0000adec <bt_gatt_connected>:
	data.sec = BT_SECURITY_L1;
    adec:	2301      	movs	r3, #1
{
    adee:	b570      	push	{r4, r5, r6, lr}
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    adf0:	f100 0588 	add.w	r5, r0, #136	; 0x88
{
    adf4:	b08e      	sub	sp, #56	; 0x38
    adf6:	4604      	mov	r4, r0
	data.conn = conn;
    adf8:	9003      	str	r0, [sp, #12]
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    adfa:	4629      	mov	r1, r5
    adfc:	7a00      	ldrb	r0, [r0, #8]
	data.sec = BT_SECURITY_L1;
    adfe:	f88d 3010 	strb.w	r3, [sp, #16]
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    ae02:	f007 fcfa 	bl	127fa <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
    ae06:	b190      	cbz	r0, ae2e <bt_gatt_connected+0x42>
		if (conn->id) {
    ae08:	7a22      	ldrb	r2, [r4, #8]
    ae0a:	b31a      	cbz	r2, ae54 <bt_gatt_connected+0x68>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
    ae0c:	ae02      	add	r6, sp, #8
    ae0e:	2104      	movs	r1, #4
    ae10:	4630      	mov	r0, r6
    ae12:	f005 fa73 	bl	102fc <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
    ae16:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "ccc",
    ae18:	2124      	movs	r1, #36	; 0x24
    ae1a:	4a0f      	ldr	r2, [pc, #60]	; (ae58 <bt_gatt_connected+0x6c>)
    ae1c:	a805      	add	r0, sp, #20
    ae1e:	462b      	mov	r3, r5
    ae20:	f7f9 ffc2 	bl	4da8 <bt_settings_encode_key>
		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
    ae24:	aa05      	add	r2, sp, #20
    ae26:	4610      	mov	r0, r2
    ae28:	490c      	ldr	r1, [pc, #48]	; (ae5c <bt_gatt_connected+0x70>)
    ae2a:	f7f7 ffe9 	bl	2e00 <settings_load_subtree_direct>
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    ae2e:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ae32:	2001      	movs	r0, #1
    ae34:	4a0a      	ldr	r2, [pc, #40]	; (ae60 <bt_gatt_connected+0x74>)
    ae36:	ab03      	add	r3, sp, #12
    ae38:	f008 fcbc 	bl	137b4 <bt_gatt_foreach_attr>
	    bt_conn_get_security(conn) < data.sec) {
    ae3c:	4620      	mov	r0, r4
    ae3e:	f007 fd93 	bl	12968 <bt_conn_get_security>
    ae42:	f89d 1010 	ldrb.w	r1, [sp, #16]
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    ae46:	4288      	cmp	r0, r1
    ae48:	d202      	bcs.n	ae50 <bt_gatt_connected+0x64>
		bt_conn_set_security(conn, data.sec);
    ae4a:	4620      	mov	r0, r4
    ae4c:	f007 fd5d 	bl	1290a <bt_conn_set_security>
}
    ae50:	b00e      	add	sp, #56	; 0x38
    ae52:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "ccc",
    ae54:	9200      	str	r2, [sp, #0]
    ae56:	e7df      	b.n	ae18 <bt_gatt_connected+0x2c>
    ae58:	00018845 	.word	0x00018845
    ae5c:	0000aa6d 	.word	0x0000aa6d
    ae60:	0000acc9 	.word	0x0000acc9

0000ae64 <bt_gatt_encrypt_change>:
{
    ae64:	b507      	push	{r0, r1, r2, lr}
	data.conn = conn;
    ae66:	9000      	str	r0, [sp, #0]
	data.sec = BT_SECURITY_L1;
    ae68:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    ae6a:	466b      	mov	r3, sp
    ae6c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ae70:	4a03      	ldr	r2, [pc, #12]	; (ae80 <bt_gatt_encrypt_change+0x1c>)
	data.sec = BT_SECURITY_L1;
    ae72:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    ae76:	f008 fc9d 	bl	137b4 <bt_gatt_foreach_attr>
}
    ae7a:	b003      	add	sp, #12
    ae7c:	f85d fb04 	ldr.w	pc, [sp], #4
    ae80:	0000acc9 	.word	0x0000acc9

0000ae84 <db_hash_read>:
{
    ae84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ae86:	4604      	mov	r4, r0
	err = k_delayed_work_cancel(&db_hash_work);
    ae88:	4810      	ldr	r0, [pc, #64]	; (aecc <db_hash_read+0x48>)
{
    ae8a:	4615      	mov	r5, r2
    ae8c:	461f      	mov	r7, r3
    ae8e:	f8bd 6018 	ldrh.w	r6, [sp, #24]
	err = k_delayed_work_cancel(&db_hash_work);
    ae92:	f00a f9c2 	bl	1521a <k_delayed_work_cancel>
	if (!err) {
    ae96:	b910      	cbnz	r0, ae9e <db_hash_read+0x1a>
		db_hash_gen(true);
    ae98:	2001      	movs	r0, #1
    ae9a:	f7ff fd43 	bl	a924 <db_hash_gen>
	bt_gatt_change_aware(conn, true);
    ae9e:	2101      	movs	r1, #1
    aea0:	4620      	mov	r0, r4
    aea2:	f008 fcc0 	bl	13826 <bt_gatt_change_aware>
	if (offset > value_len) {
    aea6:	2e10      	cmp	r6, #16
    aea8:	d80c      	bhi.n	aec4 <db_hash_read+0x40>
	len = MIN(buf_len, value_len - offset);
    aeaa:	f1c6 0410 	rsb	r4, r6, #16
    aeae:	42bc      	cmp	r4, r7
    aeb0:	bfa8      	it	ge
    aeb2:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
    aeb4:	4906      	ldr	r1, [pc, #24]	; (aed0 <db_hash_read+0x4c>)
    aeb6:	4622      	mov	r2, r4
    aeb8:	4628      	mov	r0, r5
    aeba:	4431      	add	r1, r6
    aebc:	f007 fa2d 	bl	1231a <memcpy>
}
    aec0:	4620      	mov	r0, r4
    aec2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    aec4:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash,
    aec8:	e7fa      	b.n	aec0 <db_hash_read+0x3c>
    aeca:	bf00      	nop
    aecc:	20000d60 	.word	0x20000d60
    aed0:	20002df8 	.word	0x20002df8

0000aed4 <bt_gatt_store_ccc>:
	save.count = 0;
    aed4:	2300      	movs	r3, #0
{
    aed6:	b570      	push	{r4, r5, r6, lr}
    aed8:	4604      	mov	r4, r0
    aeda:	b0c0      	sub	sp, #256	; 0x100
    aedc:	460d      	mov	r5, r1
	save.addr_with_id.addr = addr;
    aede:	910d      	str	r1, [sp, #52]	; 0x34
	save.addr_with_id.id = id;
    aee0:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
	save.count = 0;
    aee4:	933f      	str	r3, [sp, #252]	; 0xfc
	bt_gatt_foreach_attr(0x0001, 0xffff, ccc_save, &save);
    aee6:	f64f 71ff 	movw	r1, #65535	; 0xffff
    aeea:	2001      	movs	r0, #1
    aeec:	4a16      	ldr	r2, [pc, #88]	; (af48 <bt_gatt_store_ccc+0x74>)
    aeee:	ab0d      	add	r3, sp, #52	; 0x34
    aef0:	f008 fc60 	bl	137b4 <bt_gatt_foreach_attr>
	if (id) {
    aef4:	b31c      	cbz	r4, af3e <bt_gatt_store_ccc+0x6a>
		u8_to_dec(id_str, sizeof(id_str), id);
    aef6:	ae03      	add	r6, sp, #12
    aef8:	4622      	mov	r2, r4
    aefa:	2104      	movs	r1, #4
    aefc:	4630      	mov	r0, r6
    aefe:	f005 f9fd 	bl	102fc <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, id_str);
    af02:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
    af04:	4a11      	ldr	r2, [pc, #68]	; (af4c <bt_gatt_store_ccc+0x78>)
    af06:	462b      	mov	r3, r5
    af08:	2124      	movs	r1, #36	; 0x24
    af0a:	a804      	add	r0, sp, #16
    af0c:	f7f9 ff4c 	bl	4da8 <bt_settings_encode_key>
	if (save.count) {
    af10:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
    af12:	b1b2      	cbz	r2, af42 <bt_gatt_store_ccc+0x6e>
		len = save.count * sizeof(*save.store);
    af14:	0092      	lsls	r2, r2, #2
		str = (char *)save.store;
    af16:	a90f      	add	r1, sp, #60	; 0x3c
	err = settings_save_one(key, str, len);
    af18:	a804      	add	r0, sp, #16
    af1a:	f7f7 ff0d 	bl	2d38 <settings_save_one>
	if (err) {
    af1e:	4604      	mov	r4, r0
    af20:	b150      	cbz	r0, af38 <bt_gatt_store_ccc+0x64>
    af22:	4a0b      	ldr	r2, [pc, #44]	; (af50 <bt_gatt_store_ccc+0x7c>)
    af24:	4b0b      	ldr	r3, [pc, #44]	; (af54 <bt_gatt_store_ccc+0x80>)
		BT_ERR("Failed to store CCCs (err %d)", err);
    af26:	4601      	mov	r1, r0
    af28:	1ad2      	subs	r2, r2, r3
    af2a:	08d2      	lsrs	r2, r2, #3
    af2c:	0192      	lsls	r2, r2, #6
    af2e:	480a      	ldr	r0, [pc, #40]	; (af58 <bt_gatt_store_ccc+0x84>)
    af30:	f042 0201 	orr.w	r2, r2, #1
    af34:	f005 fecb 	bl	10cce <log_1>
}
    af38:	4620      	mov	r0, r4
    af3a:	b040      	add	sp, #256	; 0x100
    af3c:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
    af3e:	9400      	str	r4, [sp, #0]
    af40:	e7e0      	b.n	af04 <bt_gatt_store_ccc+0x30>
		str = NULL;
    af42:	4611      	mov	r1, r2
    af44:	e7e8      	b.n	af18 <bt_gatt_store_ccc+0x44>
    af46:	bf00      	nop
    af48:	00009ea1 	.word	0x00009ea1
    af4c:	00018845 	.word	0x00018845
    af50:	00015a28 	.word	0x00015a28
    af54:	00015a00 	.word	0x00015a00
    af58:	00018886 	.word	0x00018886

0000af5c <bt_gatt_clear>:
		gatt_sub_remove(NULL, sub, prev, params);
	}
}

int bt_gatt_clear(uint8_t id, const bt_addr_le_t *addr)
{
    af5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    af5e:	4604      	mov	r4, r0
    af60:	b08f      	sub	sp, #60	; 0x3c
	bt_gatt_foreach_attr(0x0001, 0xffff, remove_peer_from_attr,
    af62:	ae03      	add	r6, sp, #12
{
    af64:	460d      	mov	r5, r1
	struct addr_with_id addr_with_id = {
    af66:	9103      	str	r1, [sp, #12]
    af68:	f88d 0010 	strb.w	r0, [sp, #16]
	bt_gatt_foreach_attr(0x0001, 0xffff, remove_peer_from_attr,
    af6c:	4633      	mov	r3, r6
    af6e:	f64f 71ff 	movw	r1, #65535	; 0xffff
    af72:	2001      	movs	r0, #1
    af74:	4a1d      	ldr	r2, [pc, #116]	; (afec <bt_gatt_clear+0x90>)
    af76:	f008 fc1d 	bl	137b4 <bt_gatt_foreach_attr>
		if (id) {
    af7a:	b394      	cbz	r4, afe2 <bt_gatt_clear+0x86>
			u8_to_dec(id_str, sizeof(id_str), id);
    af7c:	af02      	add	r7, sp, #8
    af7e:	4622      	mov	r2, r4
    af80:	2104      	movs	r1, #4
    af82:	4638      	mov	r0, r7
    af84:	f005 f9ba 	bl	102fc <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
    af88:	9700      	str	r7, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "ccc",
    af8a:	462b      	mov	r3, r5
    af8c:	2124      	movs	r1, #36	; 0x24
    af8e:	4a18      	ldr	r2, [pc, #96]	; (aff0 <bt_gatt_clear+0x94>)
    af90:	a805      	add	r0, sp, #20
    af92:	f7f9 ff09 	bl	4da8 <bt_settings_encode_key>
		return settings_delete(key);
    af96:	a805      	add	r0, sp, #20
    af98:	f006 fb1f 	bl	115da <settings_delete>
	int err;

	err = bt_gatt_clear_ccc(id, addr);
	if (err < 0) {
    af9c:	2800      	cmp	r0, #0
    af9e:	db1e      	blt.n	afde <bt_gatt_clear+0x82>
		return err;
	}

	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
		err = bt_gatt_clear_sc(id, addr);
    afa0:	4629      	mov	r1, r5
    afa2:	4620      	mov	r0, r4
    afa4:	f7ff fb2e 	bl	a604 <bt_gatt_clear_sc>
		if (err < 0) {
    afa8:	2800      	cmp	r0, #0
    afaa:	db18      	blt.n	afde <bt_gatt_clear+0x82>
	cfg = find_cf_cfg_by_addr(id, addr);
    afac:	4629      	mov	r1, r5
    afae:	4620      	mov	r0, r4
    afb0:	f7ff f90c 	bl	a1cc <find_cf_cfg_by_addr>
	if (cfg) {
    afb4:	b108      	cbz	r0, afba <bt_gatt_clear+0x5e>
		clear_cf_cfg(cfg);
    afb6:	f008 fa88 	bl	134ca <clear_cf_cfg>
		if (id) {
    afba:	b1a4      	cbz	r4, afe6 <bt_gatt_clear+0x8a>
			u8_to_dec(id_str, sizeof(id_str), id);
    afbc:	4622      	mov	r2, r4
    afbe:	2104      	movs	r1, #4
    afc0:	4630      	mov	r0, r6
    afc2:	f005 f99b 	bl	102fc <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
    afc6:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "cf",
    afc8:	462b      	mov	r3, r5
    afca:	2124      	movs	r1, #36	; 0x24
    afcc:	4a09      	ldr	r2, [pc, #36]	; (aff4 <bt_gatt_clear+0x98>)
    afce:	a805      	add	r0, sp, #20
    afd0:	f7f9 feea 	bl	4da8 <bt_settings_encode_key>
		return settings_delete(key);
    afd4:	a805      	add	r0, sp, #20
    afd6:	f006 fb00 	bl	115da <settings_delete>
		}
	}

	if (IS_ENABLED(CONFIG_BT_GATT_CACHING)) {
		err = bt_gatt_clear_cf(id, addr);
		if (err < 0) {
    afda:	ea00 70e0 	and.w	r0, r0, r0, asr #31
	if (IS_ENABLED(CONFIG_BT_GATT_CLIENT)) {
		bt_gatt_clear_subscriptions(id, addr);
	}

	return 0;
}
    afde:	b00f      	add	sp, #60	; 0x3c
    afe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
			bt_settings_encode_key(key, sizeof(key), "ccc",
    afe2:	9400      	str	r4, [sp, #0]
    afe4:	e7d1      	b.n	af8a <bt_gatt_clear+0x2e>
			bt_settings_encode_key(key, sizeof(key), "cf",
    afe6:	9400      	str	r4, [sp, #0]
    afe8:	e7ee      	b.n	afc8 <bt_gatt_clear+0x6c>
    afea:	bf00      	nop
    afec:	00009ed9 	.word	0x00009ed9
    aff0:	00018845 	.word	0x00018845
    aff4:	000188d0 	.word	0x000188d0

0000aff8 <bt_gatt_disconnected>:

void bt_gatt_disconnected(struct bt_conn *conn)
{
    aff8:	b5f0      	push	{r4, r5, r6, r7, lr}
    affa:	4604      	mov	r4, r0
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    affc:	4603      	mov	r3, r0
    affe:	f64f 71ff 	movw	r1, #65535	; 0xffff
    b002:	2001      	movs	r0, #1
{
    b004:	b08d      	sub	sp, #52	; 0x34
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    b006:	4a37      	ldr	r2, [pc, #220]	; (b0e4 <bt_gatt_disconnected+0xec>)
		k_delayed_work_cancel(&gatt_ccc_store.work);
	}
#endif

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    b008:	f104 0588 	add.w	r5, r4, #136	; 0x88
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    b00c:	f008 fbd2 	bl	137b4 <bt_gatt_foreach_attr>
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    b010:	4629      	mov	r1, r5
    b012:	7a20      	ldrb	r0, [r4, #8]
    b014:	f007 fbf1 	bl	127fa <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
    b018:	2800      	cmp	r0, #0
    b01a:	d035      	beq.n	b088 <bt_gatt_disconnected+0x90>
		bt_gatt_store_ccc(conn->id, &conn->le.dst);
    b01c:	4629      	mov	r1, r5
    b01e:	7a20      	ldrb	r0, [r4, #8]
    b020:	f7ff ff58 	bl	aed4 <bt_gatt_store_ccc>
	cfg = find_cf_cfg(conn);
    b024:	4620      	mov	r0, r4
    b026:	f7ff f99d 	bl	a364 <find_cf_cfg>
	if (!cfg) {
    b02a:	4606      	mov	r6, r0
    b02c:	2800      	cmp	r0, #0
    b02e:	d04a      	beq.n	b0c6 <bt_gatt_disconnected+0xce>
		if (conn->id) {
    b030:	7a22      	ldrb	r2, [r4, #8]
		str = (char *)cfg->data;
    b032:	3608      	adds	r6, #8
		if (conn->id) {
    b034:	2a00      	cmp	r2, #0
    b036:	d048      	beq.n	b0ca <bt_gatt_disconnected+0xd2>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
    b038:	af02      	add	r7, sp, #8
    b03a:	2104      	movs	r1, #4
    b03c:	4638      	mov	r0, r7
    b03e:	f005 f95d 	bl	102fc <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
    b042:	462b      	mov	r3, r5
    b044:	9700      	str	r7, [sp, #0]
    b046:	2124      	movs	r1, #36	; 0x24
    b048:	4a27      	ldr	r2, [pc, #156]	; (b0e8 <bt_gatt_disconnected+0xf0>)
    b04a:	a803      	add	r0, sp, #12
    b04c:	f7f9 feac 	bl	4da8 <bt_settings_encode_key>
	if (!cfg || !conn->id) {
    b050:	7a23      	ldrb	r3, [r4, #8]
    b052:	2701      	movs	r7, #1
    b054:	b93b      	cbnz	r3, b066 <bt_gatt_disconnected+0x6e>
		bt_settings_encode_key(key, sizeof(key), "cf",
    b056:	2300      	movs	r3, #0
    b058:	2124      	movs	r1, #36	; 0x24
    b05a:	9300      	str	r3, [sp, #0]
    b05c:	4a22      	ldr	r2, [pc, #136]	; (b0e8 <bt_gatt_disconnected+0xf0>)
    b05e:	462b      	mov	r3, r5
    b060:	a803      	add	r0, sp, #12
    b062:	f7f9 fea1 	bl	4da8 <bt_settings_encode_key>
	err = settings_save_one(key, str, len);
    b066:	4631      	mov	r1, r6
    b068:	463a      	mov	r2, r7
    b06a:	a803      	add	r0, sp, #12
    b06c:	f7f7 fe64 	bl	2d38 <settings_save_one>
	if (err) {
    b070:	4601      	mov	r1, r0
    b072:	b148      	cbz	r0, b088 <bt_gatt_disconnected+0x90>
    b074:	4a1d      	ldr	r2, [pc, #116]	; (b0ec <bt_gatt_disconnected+0xf4>)
    b076:	4b1e      	ldr	r3, [pc, #120]	; (b0f0 <bt_gatt_disconnected+0xf8>)
		BT_ERR("Failed to store Client Features (err %d)", err);
    b078:	481e      	ldr	r0, [pc, #120]	; (b0f4 <bt_gatt_disconnected+0xfc>)
    b07a:	1ad2      	subs	r2, r2, r3
    b07c:	08d2      	lsrs	r2, r2, #3
    b07e:	0192      	lsls	r2, r2, #6
    b080:	f042 0201 	orr.w	r2, r2, #1
    b084:	f005 fe23 	bl	10cce <log_1>
		bt_gatt_store_cf(conn);
	}

	/* Make sure to clear the CCC entry when using lazy loading */
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    b088:	4629      	mov	r1, r5
    b08a:	7a20      	ldrb	r0, [r4, #8]
    b08c:	f007 fbb5 	bl	127fa <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
    b090:	b150      	cbz	r0, b0a8 <bt_gatt_disconnected+0xb0>
		struct addr_with_id addr_with_id = {
    b092:	7a23      	ldrb	r3, [r4, #8]
			.addr = &conn->le.dst,
			.id = conn->id,
		};
		bt_gatt_foreach_attr(0x0001, 0xffff,
    b094:	f64f 71ff 	movw	r1, #65535	; 0xffff
		struct addr_with_id addr_with_id = {
    b098:	f88d 3010 	strb.w	r3, [sp, #16]
		bt_gatt_foreach_attr(0x0001, 0xffff,
    b09c:	2001      	movs	r0, #1
    b09e:	4a16      	ldr	r2, [pc, #88]	; (b0f8 <bt_gatt_disconnected+0x100>)
    b0a0:	ab03      	add	r3, sp, #12
		struct addr_with_id addr_with_id = {
    b0a2:	9503      	str	r5, [sp, #12]
		bt_gatt_foreach_attr(0x0001, 0xffff,
    b0a4:	f008 fb86 	bl	137b4 <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
    b0a8:	4620      	mov	r0, r4
    b0aa:	f7ff f95b 	bl	a364 <find_cf_cfg>
	if (!cfg) {
    b0ae:	4606      	mov	r6, r0
    b0b0:	b138      	cbz	r0, b0c2 <bt_gatt_disconnected+0xca>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    b0b2:	4629      	mov	r1, r5
    b0b4:	7a20      	ldrb	r0, [r4, #8]
    b0b6:	f007 fba0 	bl	127fa <bt_addr_le_is_bonded>
    b0ba:	b940      	cbnz	r0, b0ce <bt_gatt_disconnected+0xd6>
		clear_cf_cfg(cfg);
    b0bc:	4630      	mov	r0, r6
    b0be:	f008 fa04 	bl	134ca <clear_cf_cfg>
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
    b0c2:	b00d      	add	sp, #52	; 0x34
    b0c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		len = 0;
    b0c6:	4607      	mov	r7, r0
    b0c8:	e7c5      	b.n	b056 <bt_gatt_disconnected+0x5e>
    b0ca:	2701      	movs	r7, #1
    b0cc:	e7c3      	b.n	b056 <bt_gatt_disconnected+0x5e>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    b0ce:	4629      	mov	r1, r5
    b0d0:	1c70      	adds	r0, r6, #1
    b0d2:	f008 f968 	bl	133a6 <bt_addr_le_copy>
    b0d6:	f06f 0102 	mvn.w	r1, #2
    b0da:	f106 000c 	add.w	r0, r6, #12
    b0de:	f008 f9e9 	bl	134b4 <atomic_and>
}
    b0e2:	e7ee      	b.n	b0c2 <bt_gatt_disconnected+0xca>
    b0e4:	0000a6cd 	.word	0x0000a6cd
    b0e8:	000188d0 	.word	0x000188d0
    b0ec:	00015a28 	.word	0x00015a28
    b0f0:	00015a00 	.word	0x00015a00
    b0f4:	000188a4 	.word	0x000188a4
    b0f8:	00009ed9 	.word	0x00009ed9

0000b0fc <get_io_capa>:
	       BT_CMD_TEST(bt_dev.supported_commands, 34, 2);
}

static uint8_t get_io_capa(void)
{
	if (!bt_auth) {
    b0fc:	4b10      	ldr	r3, [pc, #64]	; (b140 <get_io_capa+0x44>)
    b0fe:	681b      	ldr	r3, [r3, #0]
    b100:	b1bb      	cbz	r3, b132 <get_io_capa+0x36>
		goto no_callbacks;
	}

	/* Passkey Confirmation is valid only for LE SC */
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
    b102:	681a      	ldr	r2, [r3, #0]
    b104:	b142      	cbz	r2, b118 <get_io_capa+0x1c>
    b106:	6859      	ldr	r1, [r3, #4]
    b108:	b131      	cbz	r1, b118 <get_io_capa+0x1c>
    b10a:	6899      	ldr	r1, [r3, #8]
    b10c:	b911      	cbnz	r1, b114 <get_io_capa+0x18>
	    (bt_auth->passkey_confirm || !sc_supported)) {
    b10e:	490d      	ldr	r1, [pc, #52]	; (b144 <get_io_capa+0x48>)
    b110:	7809      	ldrb	r1, [r1, #0]
    b112:	b939      	cbnz	r1, b124 <get_io_capa+0x28>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
    b114:	2004      	movs	r0, #4
    b116:	4770      	bx	lr
	}

	/* DisplayYesNo is useful only for LE SC */
	if (sc_supported && bt_auth->passkey_display &&
    b118:	490a      	ldr	r1, [pc, #40]	; (b144 <get_io_capa+0x48>)
    b11a:	7809      	ldrb	r1, [r1, #0]
    b11c:	b111      	cbz	r1, b124 <get_io_capa+0x28>
    b11e:	b10a      	cbz	r2, b124 <get_io_capa+0x28>
    b120:	6899      	ldr	r1, [r3, #8]
    b122:	b941      	cbnz	r1, b136 <get_io_capa+0x3a>
	    bt_auth->passkey_confirm) {
		return BT_SMP_IO_DISPLAY_YESNO;
	}

	if (bt_auth->passkey_entry) {
    b124:	685b      	ldr	r3, [r3, #4]
    b126:	b943      	cbnz	r3, b13a <get_io_capa+0x3e>
			return BT_SMP_IO_KEYBOARD_ONLY;
		}
	}

	if (bt_auth->passkey_display) {
		return BT_SMP_IO_DISPLAY_ONLY;
    b128:	2a00      	cmp	r2, #0
    b12a:	bf0c      	ite	eq
    b12c:	2003      	moveq	r0, #3
    b12e:	2000      	movne	r0, #0
    b130:	4770      	bx	lr
no_callbacks:
	if (IS_ENABLED(CONFIG_BT_FIXED_PASSKEY) &&
	    fixed_passkey != BT_PASSKEY_INVALID) {
		return BT_SMP_IO_DISPLAY_ONLY;
	} else {
		return BT_SMP_IO_NO_INPUT_OUTPUT;
    b132:	2003      	movs	r0, #3
    b134:	4770      	bx	lr
		return BT_SMP_IO_DISPLAY_YESNO;
    b136:	2001      	movs	r0, #1
    b138:	4770      	bx	lr
			return BT_SMP_IO_KEYBOARD_ONLY;
    b13a:	2002      	movs	r0, #2
	}
}
    b13c:	4770      	bx	lr
    b13e:	bf00      	nop
    b140:	200019b8 	.word	0x200019b8
    b144:	20002e19 	.word	0x20002e19

0000b148 <smp_sign_buf>:
 * msg buffer contains message itself, 32 bit count and signature,
 * so total buffer size is len + 4 + 8 octets.
 * API is Little Endian to make it suitable for Bluetooth.
 */
static int smp_sign_buf(const uint8_t *key, uint8_t *msg, uint16_t len)
{
    b148:	b5f0      	push	{r4, r5, r6, r7, lr}
    b14a:	460d      	mov	r5, r1
    b14c:	4606      	mov	r6, r0
	uint8_t *m = msg;
	uint32_t cnt = UNALIGNED_GET((uint32_t *)&msg[len]);
    b14e:	588b      	ldr	r3, [r1, r2]
	int err;

	BT_DBG("Signing msg %s len %u key %s", bt_hex(msg, len), len,
	       bt_hex(key, 16));

	sys_mem_swap(m, len + sizeof(cnt));
    b150:	1d14      	adds	r4, r2, #4
{
    b152:	b08b      	sub	sp, #44	; 0x2c
	uint32_t cnt = UNALIGNED_GET((uint32_t *)&msg[len]);
    b154:	188f      	adds	r7, r1, r2
	sys_mem_swap(m, len + sizeof(cnt));
    b156:	4628      	mov	r0, r5
    b158:	4621      	mov	r1, r4
	uint32_t cnt = UNALIGNED_GET((uint32_t *)&msg[len]);
    b15a:	9301      	str	r3, [sp, #4]
	sys_mem_swap(m, len + sizeof(cnt));
    b15c:	f008 fb93 	bl	13886 <sys_mem_swap>
	sys_memcpy_swap(key_s, key, 16);
    b160:	4631      	mov	r1, r6
    b162:	2210      	movs	r2, #16
    b164:	a802      	add	r0, sp, #8
    b166:	f008 fb84 	bl	13872 <sys_memcpy_swap>

	err = bt_smp_aes_cmac(key_s, m, len + sizeof(cnt), tmp);
    b16a:	4622      	mov	r2, r4
    b16c:	4629      	mov	r1, r5
    b16e:	ab06      	add	r3, sp, #24
    b170:	a802      	add	r0, sp, #8
    b172:	f008 fba8 	bl	138c6 <bt_smp_aes_cmac>
	if (err) {
    b176:	4606      	mov	r6, r0
    b178:	b160      	cbz	r0, b194 <smp_sign_buf+0x4c>
    b17a:	4910      	ldr	r1, [pc, #64]	; (b1bc <smp_sign_buf+0x74>)
    b17c:	4b10      	ldr	r3, [pc, #64]	; (b1c0 <smp_sign_buf+0x78>)
		BT_ERR("Data signing failed");
    b17e:	4811      	ldr	r0, [pc, #68]	; (b1c4 <smp_sign_buf+0x7c>)
    b180:	1ac9      	subs	r1, r1, r3
    b182:	08c9      	lsrs	r1, r1, #3
    b184:	0189      	lsls	r1, r1, #6
    b186:	f041 0101 	orr.w	r1, r1, #1
    b18a:	f005 fd93 	bl	10cb4 <log_0>
	memcpy(sig, tmp + 4, 12);

	BT_DBG("sig %s", bt_hex(sig, 12));

	return 0;
}
    b18e:	4630      	mov	r0, r6
    b190:	b00b      	add	sp, #44	; 0x2c
    b192:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sys_mem_swap(tmp, sizeof(tmp));
    b194:	a806      	add	r0, sp, #24
    b196:	2110      	movs	r1, #16
    b198:	f008 fb75 	bl	13886 <sys_mem_swap>
	memcpy(tmp + 4, &cnt, sizeof(cnt));
    b19c:	2204      	movs	r2, #4
    b19e:	a807      	add	r0, sp, #28
    b1a0:	eb0d 0102 	add.w	r1, sp, r2
    b1a4:	f007 f8b9 	bl	1231a <memcpy>
	sys_mem_swap(m, len + sizeof(cnt));
    b1a8:	4621      	mov	r1, r4
    b1aa:	4628      	mov	r0, r5
    b1ac:	f008 fb6b 	bl	13886 <sys_mem_swap>
	memcpy(sig, tmp + 4, 12);
    b1b0:	220c      	movs	r2, #12
    b1b2:	4638      	mov	r0, r7
    b1b4:	a907      	add	r1, sp, #28
    b1b6:	f007 f8b0 	bl	1231a <memcpy>
	return 0;
    b1ba:	e7e8      	b.n	b18e <smp_sign_buf+0x46>
    b1bc:	00015a68 	.word	0x00015a68
    b1c0:	00015a00 	.word	0x00015a00
    b1c4:	000188e1 	.word	0x000188e1

0000b1c8 <smp_dhkey_generate>:
{
    b1c8:	b538      	push	{r3, r4, r5, lr}
    b1ca:	4604      	mov	r4, r0
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
    b1cc:	f100 05bc 	add.w	r5, r0, #188	; 0xbc
    b1d0:	2108      	movs	r1, #8
    b1d2:	4628      	mov	r0, r5
    b1d4:	f008 fb66 	bl	138a4 <atomic_set_bit>
	err = bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready);
    b1d8:	490a      	ldr	r1, [pc, #40]	; (b204 <smp_dhkey_generate+0x3c>)
    b1da:	f204 100f 	addw	r0, r4, #271	; 0x10f
    b1de:	f7fc fb91 	bl	7904 <bt_dh_key_gen>
	if (err) {
    b1e2:	b170      	cbz	r0, b202 <smp_dhkey_generate+0x3a>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
    b1e4:	2108      	movs	r1, #8
    b1e6:	4628      	mov	r0, r5
    b1e8:	f008 fbfc 	bl	139e4 <atomic_clear_bit>
    b1ec:	4b06      	ldr	r3, [pc, #24]	; (b208 <smp_dhkey_generate+0x40>)
    b1ee:	4907      	ldr	r1, [pc, #28]	; (b20c <smp_dhkey_generate+0x44>)
		BT_ERR("Failed to generate DHKey");
    b1f0:	4807      	ldr	r0, [pc, #28]	; (b210 <smp_dhkey_generate+0x48>)
    b1f2:	1ac9      	subs	r1, r1, r3
    b1f4:	08c9      	lsrs	r1, r1, #3
    b1f6:	0189      	lsls	r1, r1, #6
    b1f8:	f041 0101 	orr.w	r1, r1, #1
    b1fc:	f005 fd5a 	bl	10cb4 <log_0>
		return BT_SMP_ERR_UNSPECIFIED;
    b200:	2008      	movs	r0, #8
}
    b202:	bd38      	pop	{r3, r4, r5, pc}
    b204:	00013bdf 	.word	0x00013bdf
    b208:	00015a00 	.word	0x00015a00
    b20c:	00015a68 	.word	0x00015a68
    b210:	000188f5 	.word	0x000188f5

0000b214 <get_auth.isra.0>:
	if (sc_supported) {
    b214:	4b0c      	ldr	r3, [pc, #48]	; (b248 <get_auth.isra.0+0x34>)
static uint8_t get_auth(struct bt_conn *conn, uint8_t auth)
    b216:	b510      	push	{r4, lr}
	if (sc_supported) {
    b218:	781b      	ldrb	r3, [r3, #0]
    b21a:	b17b      	cbz	r3, b23c <get_auth.isra.0+0x28>
		auth &= BT_SMP_AUTH_MASK_SC;
    b21c:	f000 040f 	and.w	r4, r0, #15
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
    b220:	f7ff ff6c 	bl	b0fc <get_io_capa>
	if (bondable) {
    b224:	4b09      	ldr	r3, [pc, #36]	; (b24c <get_auth.isra.0+0x38>)
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
    b226:	2803      	cmp	r0, #3
	if (bondable) {
    b228:	781b      	ldrb	r3, [r3, #0]
		auth &= ~(BT_SMP_AUTH_MITM);
    b22a:	bf0c      	ite	eq
    b22c:	f004 040b 	andeq.w	r4, r4, #11
		auth |= BT_SMP_AUTH_MITM;
    b230:	f044 0404 	orrne.w	r4, r4, #4
	if (bondable) {
    b234:	b12b      	cbz	r3, b242 <get_auth.isra.0+0x2e>
		auth |= BT_SMP_AUTH_BONDING;
    b236:	f044 0001 	orr.w	r0, r4, #1
}
    b23a:	bd10      	pop	{r4, pc}
		auth &= BT_SMP_AUTH_MASK;
    b23c:	f000 0407 	and.w	r4, r0, #7
    b240:	e7ee      	b.n	b220 <get_auth.isra.0+0xc>
		auth &= ~BT_SMP_AUTH_BONDING;
    b242:	f004 00fe 	and.w	r0, r4, #254	; 0xfe
    b246:	e7f8      	b.n	b23a <get_auth.isra.0+0x26>
    b248:	20002e19 	.word	0x20002e19
    b24c:	20000524 	.word	0x20000524

0000b250 <smp_chan_get>:
{
    b250:	b510      	push	{r4, lr}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
    b252:	2106      	movs	r1, #6
    b254:	f007 fcb4 	bl	12bc0 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    b258:	4604      	mov	r4, r0
    b25a:	b948      	cbnz	r0, b270 <smp_chan_get+0x20>
    b25c:	4905      	ldr	r1, [pc, #20]	; (b274 <smp_chan_get+0x24>)
    b25e:	4b06      	ldr	r3, [pc, #24]	; (b278 <smp_chan_get+0x28>)
		BT_ERR("Unable to find SMP channel");
    b260:	4806      	ldr	r0, [pc, #24]	; (b27c <smp_chan_get+0x2c>)
    b262:	1ac9      	subs	r1, r1, r3
    b264:	08c9      	lsrs	r1, r1, #3
    b266:	0189      	lsls	r1, r1, #6
    b268:	f041 0101 	orr.w	r1, r1, #1
    b26c:	f005 fd22 	bl	10cb4 <log_0>
}
    b270:	4620      	mov	r0, r4
    b272:	bd10      	pop	{r4, pc}
    b274:	00015a68 	.word	0x00015a68
    b278:	00015a00 	.word	0x00015a00
    b27c:	0001890e 	.word	0x0001890e

0000b280 <bt_smp_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_smp *smp = &bt_smp_pool[i];

		if (smp->chan.chan.conn) {
    b280:	4a0b      	ldr	r2, [pc, #44]	; (b2b0 <bt_smp_accept+0x30>)
{
    b282:	b508      	push	{r3, lr}
    b284:	4603      	mov	r3, r0
		if (smp->chan.chan.conn) {
    b286:	6810      	ldr	r0, [r2, #0]
    b288:	b918      	cbnz	r0, b292 <bt_smp_accept+0x12>
			continue;
		}

		smp->chan.chan.ops = &ops;
    b28a:	4b0a      	ldr	r3, [pc, #40]	; (b2b4 <bt_smp_accept+0x34>)
    b28c:	6053      	str	r3, [r2, #4]

		*chan = &smp->chan.chan;
    b28e:	600a      	str	r2, [r1, #0]
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
}
    b290:	bd08      	pop	{r3, pc}
    b292:	4909      	ldr	r1, [pc, #36]	; (b2b8 <bt_smp_accept+0x38>)
    b294:	4a09      	ldr	r2, [pc, #36]	; (b2bc <bt_smp_accept+0x3c>)
	BT_ERR("No available SMP context for conn %p", conn);
    b296:	480a      	ldr	r0, [pc, #40]	; (b2c0 <bt_smp_accept+0x40>)
    b298:	1a52      	subs	r2, r2, r1
    b29a:	08d2      	lsrs	r2, r2, #3
    b29c:	0192      	lsls	r2, r2, #6
    b29e:	4619      	mov	r1, r3
    b2a0:	f042 0201 	orr.w	r2, r2, #1
    b2a4:	f005 fd13 	bl	10cce <log_1>
	return -ENOMEM;
    b2a8:	f06f 000b 	mvn.w	r0, #11
    b2ac:	e7f0      	b.n	b290 <bt_smp_accept+0x10>
    b2ae:	bf00      	nop
    b2b0:	20000de8 	.word	0x20000de8
    b2b4:	000162d4 	.word	0x000162d4
    b2b8:	00015a00 	.word	0x00015a00
    b2bc:	00015a68 	.word	0x00015a68
    b2c0:	00018929 	.word	0x00018929

0000b2c4 <smp_init>:
{
    b2c4:	b538      	push	{r3, r4, r5, lr}
    b2c6:	4604      	mov	r4, r0
	(void)memset((uint8_t *)smp + sizeof(smp->chan), 0,
    b2c8:	f100 05b8 	add.w	r5, r0, #184	; 0xb8
    b2cc:	22f0      	movs	r2, #240	; 0xf0
    b2ce:	2100      	movs	r1, #0
    b2d0:	4628      	mov	r0, r5
    b2d2:	f007 f84d 	bl	12370 <memset>
	if (bt_rand(smp->prnd, 16)) {
    b2d6:	f104 00df 	add.w	r0, r4, #223	; 0xdf
    b2da:	2110      	movs	r1, #16
    b2dc:	f7fc fbd4 	bl	7a88 <bt_rand>
    b2e0:	4604      	mov	r4, r0
    b2e2:	b948      	cbnz	r0, b2f8 <smp_init+0x34>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
    b2e4:	2105      	movs	r1, #5
    b2e6:	4628      	mov	r0, r5
    b2e8:	f008 fadc 	bl	138a4 <atomic_set_bit>
	sc_public_key = bt_pub_key_get();
    b2ec:	f7fc fafc 	bl	78e8 <bt_pub_key_get>
    b2f0:	4b02      	ldr	r3, [pc, #8]	; (b2fc <smp_init+0x38>)
    b2f2:	6018      	str	r0, [r3, #0]
}
    b2f4:	4620      	mov	r0, r4
    b2f6:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    b2f8:	2408      	movs	r4, #8
    b2fa:	e7fb      	b.n	b2f4 <smp_init+0x30>
    b2fc:	20001a4c 	.word	0x20001a4c

0000b300 <smp_send.isra.0>:
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
    b300:	4613      	mov	r3, r2
	bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL);
    b302:	2200      	movs	r2, #0
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
    b304:	b513      	push	{r0, r1, r4, lr}
	bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL);
    b306:	9200      	str	r2, [sp, #0]
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
    b308:	4604      	mov	r4, r0
	bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL);
    b30a:	460a      	mov	r2, r1
    b30c:	6800      	ldr	r0, [r0, #0]
    b30e:	2106      	movs	r1, #6
    b310:	f007 fc2d 	bl	12b6e <bt_l2cap_send_cb>
    b314:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    b318:	2300      	movs	r3, #0
    b31a:	4804      	ldr	r0, [pc, #16]	; (b32c <smp_send.isra.0+0x2c>)
    b31c:	f504 71d4 	add.w	r1, r4, #424	; 0x1a8
}
    b320:	b002      	add	sp, #8
    b322:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b326:	f004 bb83 	b.w	fa30 <k_delayed_work_submit_to_queue>
    b32a:	bf00      	nop
    b32c:	200010d0 	.word	0x200010d0

0000b330 <smp_find>:
{
    b330:	4601      	mov	r1, r0
    b332:	b508      	push	{r3, lr}
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
    b334:	4803      	ldr	r0, [pc, #12]	; (b344 <smp_find+0x14>)
    b336:	f008 fb7c 	bl	13a32 <atomic_test_bit>
    b33a:	2800      	cmp	r0, #0
}
    b33c:	4802      	ldr	r0, [pc, #8]	; (b348 <smp_find+0x18>)
    b33e:	bf08      	it	eq
    b340:	2000      	moveq	r0, #0
    b342:	bd08      	pop	{r3, pc}
    b344:	20000ea4 	.word	0x20000ea4
    b348:	20000de8 	.word	0x20000de8

0000b34c <smp_send_pairing_confirm>:
{
    b34c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	switch (smp->method) {
    b34e:	f890 40c0 	ldrb.w	r4, [r0, #192]	; 0xc0
{
    b352:	4605      	mov	r5, r0
	switch (smp->method) {
    b354:	2c02      	cmp	r4, #2
    b356:	d824      	bhi.n	b3a2 <smp_send_pairing_confirm+0x56>
    b358:	b14c      	cbz	r4, b36e <smp_send_pairing_confirm+0x22>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    b35a:	f890 3194 	ldrb.w	r3, [r0, #404]	; 0x194
    b35e:	f8d0 4190 	ldr.w	r4, [r0, #400]	; 0x190
    b362:	40dc      	lsrs	r4, r3
    b364:	f004 0401 	and.w	r4, r4, #1
		r |= 0x80;
    b368:	f064 047f 	orn	r4, r4, #127	; 0x7f
    b36c:	b2e4      	uxtb	r4, r4
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
    b36e:	2103      	movs	r1, #3
    b370:	4628      	mov	r0, r5
    b372:	f008 fb64 	bl	13a3e <smp_create_pdu.isra.0>
	if (!buf) {
    b376:	4606      	mov	r6, r0
    b378:	b300      	cbz	r0, b3bc <smp_send_pairing_confirm+0x70>
    b37a:	2110      	movs	r1, #16
    b37c:	3008      	adds	r0, #8
    b37e:	f008 fe6d 	bl	1405c <net_buf_simple_add>
	if (smp_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
    b382:	9000      	str	r0, [sp, #0]
    b384:	4816      	ldr	r0, [pc, #88]	; (b3e0 <smp_send_pairing_confirm+0x94>)
    b386:	4623      	mov	r3, r4
    b388:	6800      	ldr	r0, [r0, #0]
    b38a:	f105 02df 	add.w	r2, r5, #223	; 0xdf
    b38e:	f205 110f 	addw	r1, r5, #271	; 0x10f
    b392:	f008 fab4 	bl	138fe <smp_f4>
    b396:	4604      	mov	r4, r0
    b398:	b1a0      	cbz	r0, b3c4 <smp_send_pairing_confirm+0x78>
		net_buf_unref(buf);
    b39a:	4630      	mov	r0, r6
    b39c:	f001 ff54 	bl	d248 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
    b3a0:	e00c      	b.n	b3bc <smp_send_pairing_confirm+0x70>
	switch (smp->method) {
    b3a2:	2c03      	cmp	r4, #3
    b3a4:	d00c      	beq.n	b3c0 <smp_send_pairing_confirm+0x74>
    b3a6:	4a0f      	ldr	r2, [pc, #60]	; (b3e4 <smp_send_pairing_confirm+0x98>)
    b3a8:	4b0f      	ldr	r3, [pc, #60]	; (b3e8 <smp_send_pairing_confirm+0x9c>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
    b3aa:	4621      	mov	r1, r4
    b3ac:	1ad2      	subs	r2, r2, r3
    b3ae:	08d2      	lsrs	r2, r2, #3
    b3b0:	0192      	lsls	r2, r2, #6
    b3b2:	480e      	ldr	r0, [pc, #56]	; (b3ec <smp_send_pairing_confirm+0xa0>)
    b3b4:	f042 0201 	orr.w	r2, r2, #1
    b3b8:	f005 fc89 	bl	10cce <log_1>
		return BT_SMP_ERR_UNSPECIFIED;
    b3bc:	2008      	movs	r0, #8
    b3be:	e00c      	b.n	b3da <smp_send_pairing_confirm+0x8e>
	switch (smp->method) {
    b3c0:	2400      	movs	r4, #0
    b3c2:	e7d4      	b.n	b36e <smp_send_pairing_confirm+0x22>
	smp_send(smp, buf, NULL, NULL);
    b3c4:	4602      	mov	r2, r0
    b3c6:	4631      	mov	r1, r6
    b3c8:	4628      	mov	r0, r5
    b3ca:	f7ff ff99 	bl	b300 <smp_send.isra.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
    b3ce:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
    b3d2:	4621      	mov	r1, r4
    b3d4:	f008 fb06 	bl	139e4 <atomic_clear_bit>
	return 0;
    b3d8:	4620      	mov	r0, r4
}
    b3da:	b002      	add	sp, #8
    b3dc:	bd70      	pop	{r4, r5, r6, pc}
    b3de:	bf00      	nop
    b3e0:	20001a4c 	.word	0x20001a4c
    b3e4:	00015a68 	.word	0x00015a68
    b3e8:	00015a00 	.word	0x00015a00
    b3ec:	0001894e 	.word	0x0001894e

0000b3f0 <compute_and_check_and_send_slave_dhcheck>:
	(void)memset(r, 0, sizeof(r));
    b3f0:	2210      	movs	r2, #16
{
    b3f2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    b3f6:	4604      	mov	r4, r0
    b3f8:	b0a3      	sub	sp, #140	; 0x8c
	(void)memset(r, 0, sizeof(r));
    b3fa:	2100      	movs	r1, #0
    b3fc:	eb0d 0002 	add.w	r0, sp, r2
    b400:	f006 ffb6 	bl	12370 <memset>
	switch (smp->method) {
    b404:	f894 10c0 	ldrb.w	r1, [r4, #192]	; 0xc0
    b408:	2905      	cmp	r1, #5
    b40a:	f200 809a 	bhi.w	b542 <compute_and_check_and_send_slave_dhcheck+0x152>
    b40e:	e8df f001 	tbb	[pc, r1]
    b412:	0309      	.short	0x0309
    b414:	8f980903 	.word	0x8f980903
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
    b418:	2204      	movs	r2, #4
    b41a:	f504 71c8 	add.w	r1, r4, #400	; 0x190
    b41e:	a804      	add	r0, sp, #16
			memcpy(r, smp->oobd_remote->r, sizeof(r));
    b420:	f006 ff7b 	bl	1231a <memcpy>
	uint8_t m[53] = { 0x00, /* counter */
    b424:	4b79      	ldr	r3, [pc, #484]	; (b60c <compute_and_check_and_send_slave_dhcheck+0x21c>)
		   &smp->chan.chan.conn->le.init_addr,
    b426:	f8d4 9000 	ldr.w	r9, [r4]
	uint8_t m[53] = { 0x00, /* counter */
    b42a:	aa14      	add	r2, sp, #80	; 0x50
    b42c:	f103 0630 	add.w	r6, r3, #48	; 0x30
    b430:	4615      	mov	r5, r2
    b432:	6818      	ldr	r0, [r3, #0]
    b434:	6859      	ldr	r1, [r3, #4]
    b436:	3308      	adds	r3, #8
    b438:	c503      	stmia	r5!, {r0, r1}
    b43a:	42b3      	cmp	r3, r6
    b43c:	462a      	mov	r2, r5
    b43e:	d1f7      	bne.n	b430 <compute_and_check_and_send_slave_dhcheck+0x40>
    b440:	6818      	ldr	r0, [r3, #0]
    b442:	791b      	ldrb	r3, [r3, #4]
    b444:	6028      	str	r0, [r5, #0]
    b446:	712b      	strb	r3, [r5, #4]
	sys_memcpy_swap(ws, w, 32);
    b448:	ad0c      	add	r5, sp, #48	; 0x30
    b44a:	2220      	movs	r2, #32
    b44c:	4628      	mov	r0, r5
    b44e:	f204 114f 	addw	r1, r4, #335	; 0x14f
    b452:	f008 fa0e 	bl	13872 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(salt, ws, 32, t);
    b456:	2220      	movs	r2, #32
    b458:	4629      	mov	r1, r5
    b45a:	486d      	ldr	r0, [pc, #436]	; (b610 <compute_and_check_and_send_slave_dhcheck+0x220>)
    b45c:	ab08      	add	r3, sp, #32
    b45e:	f008 fa32 	bl	138c6 <bt_smp_aes_cmac>
	if (err) {
    b462:	2800      	cmp	r0, #0
    b464:	f040 80c9 	bne.w	b5fa <compute_and_check_and_send_slave_dhcheck+0x20a>
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
    b468:	f104 07ef 	add.w	r7, r4, #239	; 0xef
	sys_memcpy_swap(m + 5, n1, 16);
    b46c:	2210      	movs	r2, #16
    b46e:	4639      	mov	r1, r7
    b470:	f10d 0055 	add.w	r0, sp, #85	; 0x55
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
    b474:	f104 08df 	add.w	r8, r4, #223	; 0xdf
	sys_memcpy_swap(m + 5, n1, 16);
    b478:	f008 f9fb 	bl	13872 <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
    b47c:	2210      	movs	r2, #16
    b47e:	4641      	mov	r1, r8
    b480:	f10d 0065 	add.w	r0, sp, #101	; 0x65
    b484:	f008 f9f5 	bl	13872 <sys_memcpy_swap>
	m[37] = a1->type;
    b488:	f899 308f 	ldrb.w	r3, [r9, #143]	; 0x8f
	sys_memcpy_swap(m + 38, a1->a.val, 6);
    b48c:	2206      	movs	r2, #6
    b48e:	f109 0190 	add.w	r1, r9, #144	; 0x90
    b492:	f10d 0076 	add.w	r0, sp, #118	; 0x76
	m[37] = a1->type;
    b496:	f88d 3075 	strb.w	r3, [sp, #117]	; 0x75
	sys_memcpy_swap(m + 38, a1->a.val, 6);
    b49a:	f008 f9ea 	bl	13872 <sys_memcpy_swap>
	m[44] = a2->type;
    b49e:	f899 3096 	ldrb.w	r3, [r9, #150]	; 0x96
	sys_memcpy_swap(m + 45, a2->a.val, 6);
    b4a2:	2206      	movs	r2, #6
    b4a4:	f109 0197 	add.w	r1, r9, #151	; 0x97
    b4a8:	f10d 007d 	add.w	r0, sp, #125	; 0x7d
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
    b4ac:	f204 167f 	addw	r6, r4, #383	; 0x17f
	m[44] = a2->type;
    b4b0:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
	sys_memcpy_swap(m + 45, a2->a.val, 6);
    b4b4:	f008 f9dd 	bl	13872 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(t, m, sizeof(m), mackey);
    b4b8:	4633      	mov	r3, r6
    b4ba:	2235      	movs	r2, #53	; 0x35
    b4bc:	a914      	add	r1, sp, #80	; 0x50
    b4be:	a808      	add	r0, sp, #32
    b4c0:	f008 fa01 	bl	138c6 <bt_smp_aes_cmac>
	if (err) {
    b4c4:	2800      	cmp	r0, #0
    b4c6:	f040 8098 	bne.w	b5fa <compute_and_check_and_send_slave_dhcheck+0x20a>
	sys_mem_swap(mackey, 16);
    b4ca:	2110      	movs	r1, #16
    b4cc:	4630      	mov	r0, r6
    b4ce:	f008 f9da 	bl	13886 <sys_mem_swap>
	m[0] = 0x01;
    b4d2:	2301      	movs	r3, #1
		   smp->tk)) {
    b4d4:	f104 09ff 	add.w	r9, r4, #255	; 0xff
	m[0] = 0x01;
    b4d8:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
    b4dc:	2235      	movs	r2, #53	; 0x35
    b4de:	464b      	mov	r3, r9
    b4e0:	a914      	add	r1, sp, #80	; 0x50
    b4e2:	a808      	add	r0, sp, #32
    b4e4:	f008 f9ef 	bl	138c6 <bt_smp_aes_cmac>
	if (err) {
    b4e8:	2800      	cmp	r0, #0
    b4ea:	f040 8086 	bne.w	b5fa <compute_and_check_and_send_slave_dhcheck+0x20a>
	sys_mem_swap(ltk, 16);
    b4ee:	2110      	movs	r1, #16
    b4f0:	4648      	mov	r0, r9
    b4f2:	f008 f9c8 	bl	13886 <sys_mem_swap>
		   &smp->chan.chan.conn->le.resp_addr,
    b4f6:	4622      	mov	r2, r4
    b4f8:	f852 3bc9 	ldr.w	r3, [r2], #201
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
    b4fc:	a914      	add	r1, sp, #80	; 0x50
    b4fe:	9103      	str	r1, [sp, #12]
		   &smp->chan.chan.conn->le.init_addr, e)) {
    b500:	f103 018f 	add.w	r1, r3, #143	; 0x8f
		   &smp->chan.chan.conn->le.resp_addr,
    b504:	3396      	adds	r3, #150	; 0x96
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
    b506:	e9cd 2300 	strd	r2, r3, [sp]
    b50a:	9102      	str	r1, [sp, #8]
    b50c:	463a      	mov	r2, r7
    b50e:	4641      	mov	r1, r8
    b510:	4630      	mov	r0, r6
    b512:	ab04      	add	r3, sp, #16
    b514:	f008 fa19 	bl	1394a <smp_f6>
    b518:	b1f8      	cbz	r0, b55a <compute_and_check_and_send_slave_dhcheck+0x16a>
    b51a:	493e      	ldr	r1, [pc, #248]	; (b614 <compute_and_check_and_send_slave_dhcheck+0x224>)
    b51c:	4b3e      	ldr	r3, [pc, #248]	; (b618 <compute_and_check_and_send_slave_dhcheck+0x228>)
		BT_ERR("Calculate local DHKey check failed");
    b51e:	483f      	ldr	r0, [pc, #252]	; (b61c <compute_and_check_and_send_slave_dhcheck+0x22c>)
    b520:	1ac9      	subs	r1, r1, r3
    b522:	08c9      	lsrs	r1, r1, #3
    b524:	0189      	lsls	r1, r1, #6
    b526:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Calculate LTK failed");
    b52a:	f005 fbc3 	bl	10cb4 <log_0>
    b52e:	e012      	b.n	b556 <compute_and_check_and_send_slave_dhcheck+0x166>
		if (smp->oobd_remote) {
    b530:	f8d4 119c 	ldr.w	r1, [r4, #412]	; 0x19c
    b534:	2900      	cmp	r1, #0
    b536:	f43f af75 	beq.w	b424 <compute_and_check_and_send_slave_dhcheck+0x34>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
    b53a:	2210      	movs	r2, #16
    b53c:	eb0d 0002 	add.w	r0, sp, r2
    b540:	e76e      	b.n	b420 <compute_and_check_and_send_slave_dhcheck+0x30>
    b542:	4a34      	ldr	r2, [pc, #208]	; (b614 <compute_and_check_and_send_slave_dhcheck+0x224>)
    b544:	4b34      	ldr	r3, [pc, #208]	; (b618 <compute_and_check_and_send_slave_dhcheck+0x228>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
    b546:	4836      	ldr	r0, [pc, #216]	; (b620 <compute_and_check_and_send_slave_dhcheck+0x230>)
    b548:	1ad2      	subs	r2, r2, r3
    b54a:	08d2      	lsrs	r2, r2, #3
    b54c:	0192      	lsls	r2, r2, #6
    b54e:	f042 0201 	orr.w	r2, r2, #1
    b552:	f005 fbbc 	bl	10cce <log_1>
		return BT_SMP_ERR_UNSPECIFIED;
    b556:	2008      	movs	r0, #8
    b558:	e04a      	b.n	b5f0 <compute_and_check_and_send_slave_dhcheck+0x200>
	if (smp->method == LE_SC_OOB) {
    b55a:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    b55e:	2b05      	cmp	r3, #5
    b560:	d107      	bne.n	b572 <compute_and_check_and_send_slave_dhcheck+0x182>
			memcpy(r, smp->oobd_local->r, sizeof(r));
    b562:	2210      	movs	r2, #16
		if (smp->oobd_local) {
    b564:	f8d4 1198 	ldr.w	r1, [r4, #408]	; 0x198
			memcpy(r, smp->oobd_local->r, sizeof(r));
    b568:	eb0d 0002 	add.w	r0, sp, r2
		if (smp->oobd_local) {
    b56c:	b1d9      	cbz	r1, b5a6 <compute_and_check_and_send_slave_dhcheck+0x1b6>
			memcpy(r, smp->oobd_local->r, sizeof(r));
    b56e:	f006 fed4 	bl	1231a <memcpy>
		   &smp->chan.chan.conn->le.init_addr,
    b572:	4622      	mov	r2, r4
    b574:	f852 3bc2 	ldr.w	r3, [r2], #194
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
    b578:	4630      	mov	r0, r6
		   &smp->chan.chan.conn->le.resp_addr, re)) {
    b57a:	f103 0196 	add.w	r1, r3, #150	; 0x96
		   &smp->chan.chan.conn->le.init_addr,
    b57e:	338f      	adds	r3, #143	; 0x8f
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
    b580:	e9cd 2300 	strd	r2, r3, [sp]
    b584:	9102      	str	r1, [sp, #8]
    b586:	4642      	mov	r2, r8
    b588:	4639      	mov	r1, r7
    b58a:	9503      	str	r5, [sp, #12]
    b58c:	ab04      	add	r3, sp, #16
    b58e:	f008 f9dc 	bl	1394a <smp_f6>
    b592:	b158      	cbz	r0, b5ac <compute_and_check_and_send_slave_dhcheck+0x1bc>
    b594:	491f      	ldr	r1, [pc, #124]	; (b614 <compute_and_check_and_send_slave_dhcheck+0x224>)
    b596:	4b20      	ldr	r3, [pc, #128]	; (b618 <compute_and_check_and_send_slave_dhcheck+0x228>)
		BT_ERR("Calculate remote DHKey check failed");
    b598:	4822      	ldr	r0, [pc, #136]	; (b624 <compute_and_check_and_send_slave_dhcheck+0x234>)
    b59a:	1ac9      	subs	r1, r1, r3
    b59c:	08c9      	lsrs	r1, r1, #3
    b59e:	0189      	lsls	r1, r1, #6
    b5a0:	f041 0101 	orr.w	r1, r1, #1
    b5a4:	e7c1      	b.n	b52a <compute_and_check_and_send_slave_dhcheck+0x13a>
			memset(r, 0, sizeof(r));
    b5a6:	f006 fee3 	bl	12370 <memset>
    b5aa:	e7e2      	b.n	b572 <compute_and_check_and_send_slave_dhcheck+0x182>
	if (memcmp(smp->e, re, 16)) {
    b5ac:	4629      	mov	r1, r5
    b5ae:	2210      	movs	r2, #16
    b5b0:	f204 106f 	addw	r0, r4, #367	; 0x16f
    b5b4:	f006 fea1 	bl	122fa <memcmp>
    b5b8:	4605      	mov	r5, r0
    b5ba:	b9e0      	cbnz	r0, b5f6 <compute_and_check_and_send_slave_dhcheck+0x206>
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
    b5bc:	210d      	movs	r1, #13
    b5be:	4620      	mov	r0, r4
    b5c0:	f008 fa3d 	bl	13a3e <smp_create_pdu.isra.0>
	if (!buf) {
    b5c4:	4606      	mov	r6, r0
    b5c6:	2800      	cmp	r0, #0
    b5c8:	d0c5      	beq.n	b556 <compute_and_check_and_send_slave_dhcheck+0x166>
    b5ca:	2110      	movs	r1, #16
    b5cc:	3008      	adds	r0, #8
    b5ce:	f008 fd45 	bl	1405c <net_buf_simple_add>
	memcpy(req->e, e, sizeof(req->e));
    b5d2:	2210      	movs	r2, #16
    b5d4:	a914      	add	r1, sp, #80	; 0x50
    b5d6:	f006 fea0 	bl	1231a <memcpy>
	smp_send(smp, buf, NULL, NULL);
    b5da:	462a      	mov	r2, r5
    b5dc:	4631      	mov	r1, r6
    b5de:	4620      	mov	r0, r4
    b5e0:	f7ff fe8e 	bl	b300 <smp_send.isra.0>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    b5e4:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
    b5e8:	2101      	movs	r1, #1
    b5ea:	f008 f95b 	bl	138a4 <atomic_set_bit>
	return 0;
    b5ee:	4628      	mov	r0, r5
}
    b5f0:	b023      	add	sp, #140	; 0x8c
    b5f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
    b5f6:	200b      	movs	r0, #11
    b5f8:	e7fa      	b.n	b5f0 <compute_and_check_and_send_slave_dhcheck+0x200>
    b5fa:	4906      	ldr	r1, [pc, #24]	; (b614 <compute_and_check_and_send_slave_dhcheck+0x224>)
    b5fc:	4b06      	ldr	r3, [pc, #24]	; (b618 <compute_and_check_and_send_slave_dhcheck+0x228>)
		BT_ERR("Calculate LTK failed");
    b5fe:	480a      	ldr	r0, [pc, #40]	; (b628 <compute_and_check_and_send_slave_dhcheck+0x238>)
    b600:	1ac9      	subs	r1, r1, r3
    b602:	08c9      	lsrs	r1, r1, #3
    b604:	0189      	lsls	r1, r1, #6
    b606:	f041 0101 	orr.w	r1, r1, #1
    b60a:	e78e      	b.n	b52a <compute_and_check_and_send_slave_dhcheck+0x13a>
    b60c:	00015b80 	.word	0x00015b80
    b610:	00018d2b 	.word	0x00018d2b
    b614:	00015a68 	.word	0x00015a68
    b618:	00015a00 	.word	0x00015a00
    b61c:	0001896a 	.word	0x0001896a
    b620:	0001894e 	.word	0x0001894e
    b624:	0001898d 	.word	0x0001898d
    b628:	000189b1 	.word	0x000189b1

0000b62c <smp_public_key_slave>:
{
    b62c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
    b630:	f100 06bc 	add.w	r6, r0, #188	; 0xbc
{
    b634:	4604      	mov	r4, r0
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
    b636:	210e      	movs	r1, #14
    b638:	4630      	mov	r0, r6
    b63a:	f008 f9fa 	bl	13a32 <atomic_test_bit>
    b63e:	b998      	cbnz	r0, b668 <smp_public_key_slave+0x3c>
	    memcmp(smp->pkey, sc_public_key, 64) == 0) {
    b640:	4b4c      	ldr	r3, [pc, #304]	; (b774 <smp_public_key_slave+0x148>)
    b642:	2240      	movs	r2, #64	; 0x40
    b644:	6819      	ldr	r1, [r3, #0]
    b646:	f204 100f 	addw	r0, r4, #271	; 0x10f
    b64a:	f006 fe56 	bl	122fa <memcmp>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
    b64e:	b958      	cbnz	r0, b668 <smp_public_key_slave+0x3c>
    b650:	4949      	ldr	r1, [pc, #292]	; (b778 <smp_public_key_slave+0x14c>)
    b652:	4b4a      	ldr	r3, [pc, #296]	; (b77c <smp_public_key_slave+0x150>)
		BT_WARN("Remote is using identical public key");
    b654:	484a      	ldr	r0, [pc, #296]	; (b780 <smp_public_key_slave+0x154>)
    b656:	1ac9      	subs	r1, r1, r3
    b658:	08c9      	lsrs	r1, r1, #3
    b65a:	0189      	lsls	r1, r1, #6
    b65c:	f041 0102 	orr.w	r1, r1, #2
    b660:	f005 fb28 	bl	10cb4 <log_0>
		return BT_SMP_ERR_UNSPECIFIED;
    b664:	2008      	movs	r0, #8
    b666:	e031      	b.n	b6cc <smp_public_key_slave+0xa0>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
    b668:	210c      	movs	r1, #12
    b66a:	4620      	mov	r0, r4
    b66c:	f008 f9e7 	bl	13a3e <smp_create_pdu.isra.0>
	if (!req_buf) {
    b670:	4605      	mov	r5, r0
    b672:	2800      	cmp	r0, #0
    b674:	d0f6      	beq.n	b664 <smp_public_key_slave+0x38>
    b676:	2140      	movs	r1, #64	; 0x40
    b678:	3008      	adds	r0, #8
    b67a:	f008 fcef 	bl	1405c <net_buf_simple_add>
	memcpy(req->x, sc_public_key, sizeof(req->x));
    b67e:	f8df 80f4 	ldr.w	r8, [pc, #244]	; b774 <smp_public_key_slave+0x148>
    b682:	2220      	movs	r2, #32
    b684:	f8d8 1000 	ldr.w	r1, [r8]
    b688:	4607      	mov	r7, r0
    b68a:	f006 fe46 	bl	1231a <memcpy>
	memcpy(req->y, &sc_public_key[32], sizeof(req->y));
    b68e:	2220      	movs	r2, #32
    b690:	f8d8 1000 	ldr.w	r1, [r8]
    b694:	18b8      	adds	r0, r7, r2
    b696:	4411      	add	r1, r2
    b698:	f006 fe3f 	bl	1231a <memcpy>
	smp_send(smp, req_buf, NULL, NULL);
    b69c:	4629      	mov	r1, r5
    b69e:	2200      	movs	r2, #0
    b6a0:	4620      	mov	r0, r4
    b6a2:	f7ff fe2d 	bl	b300 <smp_send.isra.0>
	switch (smp->method) {
    b6a6:	f894 10c0 	ldrb.w	r1, [r4, #192]	; 0xc0
    b6aa:	2905      	cmp	r1, #5
    b6ac:	d854      	bhi.n	b758 <smp_public_key_slave+0x12c>
    b6ae:	e8df f001 	tbb	[pc, r1]
    b6b2:	3603      	.short	0x3603
    b6b4:	5153030f 	.word	0x5153030f
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    b6b8:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    b6bc:	2104      	movs	r1, #4
    b6be:	f008 f8f1 	bl	138a4 <atomic_set_bit>
		err = smp_send_pairing_confirm(smp);
    b6c2:	4620      	mov	r0, r4
    b6c4:	f7ff fe42 	bl	b34c <smp_send_pairing_confirm>
		if (err) {
    b6c8:	2800      	cmp	r0, #0
    b6ca:	d036      	beq.n	b73a <smp_public_key_slave+0x10e>
}
    b6cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
    b6d0:	2104      	movs	r1, #4
    b6d2:	f504 70c8 	add.w	r0, r4, #400	; 0x190
    b6d6:	f7fc f9d7 	bl	7a88 <bt_rand>
    b6da:	2800      	cmp	r0, #0
    b6dc:	d1c2      	bne.n	b664 <smp_public_key_slave+0x38>
		smp->passkey %= 1000000;
    b6de:	f8d4 1190 	ldr.w	r1, [r4, #400]	; 0x190
    b6e2:	4a28      	ldr	r2, [pc, #160]	; (b784 <smp_public_key_slave+0x158>)
	if (bt_auth && bt_auth->passkey_display) {
    b6e4:	4d28      	ldr	r5, [pc, #160]	; (b788 <smp_public_key_slave+0x15c>)
		smp->passkey %= 1000000;
    b6e6:	fbb1 f3f2 	udiv	r3, r1, r2
    b6ea:	fb02 1313 	mls	r3, r2, r3, r1
    b6ee:	f8c4 3190 	str.w	r3, [r4, #400]	; 0x190
	if (bt_auth && bt_auth->passkey_display) {
    b6f2:	682b      	ldr	r3, [r5, #0]
	smp->passkey_round = 0U;
    b6f4:	f884 0194 	strb.w	r0, [r4, #404]	; 0x194
	if (bt_auth && bt_auth->passkey_display) {
    b6f8:	b15b      	cbz	r3, b712 <smp_public_key_slave+0xe6>
    b6fa:	681b      	ldr	r3, [r3, #0]
    b6fc:	b14b      	cbz	r3, b712 <smp_public_key_slave+0xe6>
		atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
    b6fe:	210b      	movs	r1, #11
    b700:	4630      	mov	r0, r6
    b702:	f008 f8cf 	bl	138a4 <atomic_set_bit>
		bt_auth->passkey_display(smp->chan.chan.conn, smp->passkey);
    b706:	682b      	ldr	r3, [r5, #0]
    b708:	f8d4 1190 	ldr.w	r1, [r4, #400]	; 0x190
    b70c:	681b      	ldr	r3, [r3, #0]
    b70e:	6820      	ldr	r0, [r4, #0]
    b710:	4798      	blx	r3
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    b712:	2103      	movs	r1, #3
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    b714:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    b718:	f008 f8c4 	bl	138a4 <atomic_set_bit>
		break;
    b71c:	e00d      	b.n	b73a <smp_public_key_slave+0x10e>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    b71e:	2103      	movs	r1, #3
    b720:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    b724:	f008 f8be 	bl	138a4 <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    b728:	4630      	mov	r0, r6
    b72a:	210a      	movs	r1, #10
    b72c:	f008 f8ba 	bl	138a4 <atomic_set_bit>
		bt_auth->passkey_entry(smp->chan.chan.conn);
    b730:	4b15      	ldr	r3, [pc, #84]	; (b788 <smp_public_key_slave+0x15c>)
    b732:	6820      	ldr	r0, [r4, #0]
    b734:	681b      	ldr	r3, [r3, #0]
    b736:	685b      	ldr	r3, [r3, #4]
    b738:	4798      	blx	r3
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
    b73a:	4630      	mov	r0, r6
    b73c:	2107      	movs	r1, #7
    b73e:	f008 f8b1 	bl	138a4 <atomic_set_bit>
	if (!smp_find(SMP_FLAG_DHKEY_GEN)) {
    b742:	2008      	movs	r0, #8
    b744:	f7ff fdf4 	bl	b330 <smp_find>
    b748:	b988      	cbnz	r0, b76e <smp_public_key_slave+0x142>
		return smp_dhkey_generate(smp);
    b74a:	4620      	mov	r0, r4
}
    b74c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return smp_dhkey_generate(smp);
    b750:	f7ff bd3a 	b.w	b1c8 <smp_dhkey_generate>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    b754:	2104      	movs	r1, #4
    b756:	e7dd      	b.n	b714 <smp_public_key_slave+0xe8>
    b758:	4b08      	ldr	r3, [pc, #32]	; (b77c <smp_public_key_slave+0x150>)
    b75a:	4a07      	ldr	r2, [pc, #28]	; (b778 <smp_public_key_slave+0x14c>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
    b75c:	480b      	ldr	r0, [pc, #44]	; (b78c <smp_public_key_slave+0x160>)
    b75e:	1ad2      	subs	r2, r2, r3
    b760:	08d2      	lsrs	r2, r2, #3
    b762:	0192      	lsls	r2, r2, #6
    b764:	f042 0201 	orr.w	r2, r2, #1
    b768:	f005 fab1 	bl	10cce <log_1>
    b76c:	e77a      	b.n	b664 <smp_public_key_slave+0x38>
	return 0;
    b76e:	2000      	movs	r0, #0
    b770:	e7ac      	b.n	b6cc <smp_public_key_slave+0xa0>
    b772:	bf00      	nop
    b774:	20001a4c 	.word	0x20001a4c
    b778:	00015a68 	.word	0x00015a68
    b77c:	00015a00 	.word	0x00015a00
    b780:	000189c6 	.word	0x000189c6
    b784:	000f4240 	.word	0x000f4240
    b788:	200019b8 	.word	0x200019b8
    b78c:	0001894e 	.word	0x0001894e

0000b790 <smp_public_key>:
{
    b790:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_public_key *req = (void *)buf->data;
    b792:	688e      	ldr	r6, [r1, #8]
	memcpy(smp->pkey, req->x, 32);
    b794:	f200 150f 	addw	r5, r0, #271	; 0x10f
{
    b798:	4604      	mov	r4, r0
	memcpy(smp->pkey, req->x, 32);
    b79a:	2220      	movs	r2, #32
    b79c:	4631      	mov	r1, r6
    b79e:	4628      	mov	r0, r5
    b7a0:	f006 fdbb 	bl	1231a <memcpy>
	memcpy(&smp->pkey[32], req->y, 32);
    b7a4:	2220      	movs	r2, #32
    b7a6:	f204 102f 	addw	r0, r4, #303	; 0x12f
    b7aa:	18b1      	adds	r1, r6, r2
    b7ac:	f006 fdb5 	bl	1231a <memcpy>
	if (memcmp(smp->pkey, sc_debug_public_key, 64) == 0) {
    b7b0:	2240      	movs	r2, #64	; 0x40
    b7b2:	4628      	mov	r0, r5
    b7b4:	491d      	ldr	r1, [pc, #116]	; (b82c <smp_public_key+0x9c>)
    b7b6:	f006 fda0 	bl	122fa <memcmp>
    b7ba:	b148      	cbz	r0, b7d0 <smp_public_key+0x40>
	if (!sc_public_key) {
    b7bc:	4b1c      	ldr	r3, [pc, #112]	; (b830 <smp_public_key+0xa0>)
    b7be:	681d      	ldr	r5, [r3, #0]
    b7c0:	bb75      	cbnz	r5, b820 <smp_public_key+0x90>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
    b7c2:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
    b7c6:	2106      	movs	r1, #6
    b7c8:	f008 f86c 	bl	138a4 <atomic_set_bit>
		return 0;
    b7cc:	4628      	mov	r0, r5
}
    b7ce:	bd70      	pop	{r4, r5, r6, pc}
    b7d0:	4b18      	ldr	r3, [pc, #96]	; (b834 <smp_public_key+0xa4>)
    b7d2:	4919      	ldr	r1, [pc, #100]	; (b838 <smp_public_key+0xa8>)
		BT_INFO("Remote is using Debug Public key");
    b7d4:	4819      	ldr	r0, [pc, #100]	; (b83c <smp_public_key+0xac>)
    b7d6:	1ac9      	subs	r1, r1, r3
    b7d8:	08c9      	lsrs	r1, r1, #3
    b7da:	0189      	lsls	r1, r1, #6
    b7dc:	f041 0103 	orr.w	r1, r1, #3
    b7e0:	f005 fa68 	bl	10cb4 <log_0>
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
    b7e4:	210e      	movs	r1, #14
    b7e6:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
    b7ea:	f008 f85b 	bl	138a4 <atomic_set_bit>
		if (!update_debug_keys_check(smp)) {
    b7ee:	6825      	ldr	r5, [r4, #0]
	if (!conn->le.keys) {
    b7f0:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
    b7f4:	b933      	cbnz	r3, b804 <smp_public_key+0x74>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    b7f6:	7a28      	ldrb	r0, [r5, #8]
    b7f8:	f105 0188 	add.w	r1, r5, #136	; 0x88
    b7fc:	f001 fa66 	bl	cccc <bt_keys_get_addr>
    b800:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
	if (!conn->le.keys ||
    b804:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
    b808:	2b00      	cmp	r3, #0
    b80a:	d0d7      	beq.n	b7bc <smp_public_key+0x2c>
    b80c:	89da      	ldrh	r2, [r3, #14]
    b80e:	f002 0224 	and.w	r2, r2, #36	; 0x24
    b812:	2a00      	cmp	r2, #0
    b814:	d0d2      	beq.n	b7bc <smp_public_key+0x2c>
	if (conn->le.keys->flags & BT_KEYS_DEBUG) {
    b816:	7b5b      	ldrb	r3, [r3, #13]
    b818:	079b      	lsls	r3, r3, #30
    b81a:	d5cf      	bpl.n	b7bc <smp_public_key+0x2c>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
    b81c:	2003      	movs	r0, #3
    b81e:	e7d6      	b.n	b7ce <smp_public_key+0x3e>
	err = smp_public_key_slave(smp);
    b820:	4620      	mov	r0, r4
}
    b822:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = smp_public_key_slave(smp);
    b826:	f7ff bf01 	b.w	b62c <smp_public_key_slave>
    b82a:	bf00      	nop
    b82c:	00018d3b 	.word	0x00018d3b
    b830:	20001a4c 	.word	0x20001a4c
    b834:	00015a00 	.word	0x00015a00
    b838:	00015a68 	.word	0x00015a68
    b83c:	000189eb 	.word	0x000189eb

0000b840 <smp_ident_info>:
{
    b840:	b570      	push	{r4, r5, r6, lr}
    b842:	460b      	mov	r3, r1
    b844:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    b846:	210d      	movs	r1, #13
    b848:	30bc      	adds	r0, #188	; 0xbc
    b84a:	f008 f8f2 	bl	13a32 <atomic_test_bit>
    b84e:	b308      	cbz	r0, b894 <smp_ident_info+0x54>
		struct bt_smp_ident_info *req = (void *)buf->data;
    b850:	689e      	ldr	r6, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
    b852:	6823      	ldr	r3, [r4, #0]
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
    b854:	2002      	movs	r0, #2
    b856:	f103 0588 	add.w	r5, r3, #136	; 0x88
    b85a:	462a      	mov	r2, r5
    b85c:	7a19      	ldrb	r1, [r3, #8]
    b85e:	f008 fb92 	bl	13f86 <bt_keys_get_type>
		if (!keys) {
    b862:	b990      	cbnz	r0, b88a <smp_ident_info+0x4a>
    b864:	4a0f      	ldr	r2, [pc, #60]	; (b8a4 <smp_ident_info+0x64>)
    b866:	4c10      	ldr	r4, [pc, #64]	; (b8a8 <smp_ident_info+0x68>)
			BT_ERR("Unable to get keys for %s",
    b868:	4628      	mov	r0, r5
    b86a:	1aa4      	subs	r4, r4, r2
    b86c:	f7f9 f97c 	bl	4b68 <bt_addr_le_str_real>
    b870:	f7f5 ffe4 	bl	183c <log_strdup>
    b874:	08e4      	lsrs	r4, r4, #3
    b876:	01a4      	lsls	r4, r4, #6
    b878:	f044 0401 	orr.w	r4, r4, #1
    b87c:	4601      	mov	r1, r0
    b87e:	4622      	mov	r2, r4
    b880:	480a      	ldr	r0, [pc, #40]	; (b8ac <smp_ident_info+0x6c>)
    b882:	f005 fa24 	bl	10cce <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
    b886:	2008      	movs	r0, #8
}
    b888:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(keys->irk.val, req->irk, 16);
    b88a:	2210      	movs	r2, #16
    b88c:	4631      	mov	r1, r6
    b88e:	302a      	adds	r0, #42	; 0x2a
    b890:	f006 fd43 	bl	1231a <memcpy>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
    b894:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    b898:	2109      	movs	r1, #9
    b89a:	f008 f803 	bl	138a4 <atomic_set_bit>
	return 0;
    b89e:	2000      	movs	r0, #0
    b8a0:	e7f2      	b.n	b888 <smp_ident_info+0x48>
    b8a2:	bf00      	nop
    b8a4:	00015a00 	.word	0x00015a00
    b8a8:	00015a68 	.word	0x00015a68
    b8ac:	00018a0c 	.word	0x00018a0c

0000b8b0 <smp_encrypt_info>:
{
    b8b0:	b570      	push	{r4, r5, r6, lr}
    b8b2:	460b      	mov	r3, r1
    b8b4:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    b8b6:	210d      	movs	r1, #13
    b8b8:	30bc      	adds	r0, #188	; 0xbc
    b8ba:	f008 f8ba 	bl	13a32 <atomic_test_bit>
    b8be:	b308      	cbz	r0, b904 <smp_encrypt_info+0x54>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
    b8c0:	689e      	ldr	r6, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
    b8c2:	6823      	ldr	r3, [r4, #0]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
    b8c4:	2004      	movs	r0, #4
    b8c6:	f103 0588 	add.w	r5, r3, #136	; 0x88
    b8ca:	462a      	mov	r2, r5
    b8cc:	7a19      	ldrb	r1, [r3, #8]
    b8ce:	f008 fb5a 	bl	13f86 <bt_keys_get_type>
		if (!keys) {
    b8d2:	b990      	cbnz	r0, b8fa <smp_encrypt_info+0x4a>
    b8d4:	4a0f      	ldr	r2, [pc, #60]	; (b914 <smp_encrypt_info+0x64>)
    b8d6:	4c10      	ldr	r4, [pc, #64]	; (b918 <smp_encrypt_info+0x68>)
			BT_ERR("Unable to get keys for %s",
    b8d8:	4628      	mov	r0, r5
    b8da:	1aa4      	subs	r4, r4, r2
    b8dc:	f7f9 f944 	bl	4b68 <bt_addr_le_str_real>
    b8e0:	f7f5 ffac 	bl	183c <log_strdup>
    b8e4:	08e4      	lsrs	r4, r4, #3
    b8e6:	01a4      	lsls	r4, r4, #6
    b8e8:	f044 0401 	orr.w	r4, r4, #1
    b8ec:	4601      	mov	r1, r0
    b8ee:	4622      	mov	r2, r4
    b8f0:	480a      	ldr	r0, [pc, #40]	; (b91c <smp_encrypt_info+0x6c>)
    b8f2:	f005 f9ec 	bl	10cce <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
    b8f6:	2008      	movs	r0, #8
}
    b8f8:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(keys->ltk.val, req->ltk, 16);
    b8fa:	2210      	movs	r2, #16
    b8fc:	4631      	mov	r1, r6
    b8fe:	301a      	adds	r0, #26
    b900:	f006 fd0b 	bl	1231a <memcpy>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_MASTER_IDENT);
    b904:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    b908:	2107      	movs	r1, #7
    b90a:	f007 ffcb 	bl	138a4 <atomic_set_bit>
	return 0;
    b90e:	2000      	movs	r0, #0
    b910:	e7f2      	b.n	b8f8 <smp_encrypt_info+0x48>
    b912:	bf00      	nop
    b914:	00015a00 	.word	0x00015a00
    b918:	00015a68 	.word	0x00015a68
    b91c:	00018a0c 	.word	0x00018a0c

0000b920 <smp_pairing_req>:
{
    b920:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_smp_pairing *req = (void *)buf->data;
    b924:	688d      	ldr	r5, [r1, #8]
{
    b926:	4604      	mov	r4, r0
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    b928:	78eb      	ldrb	r3, [r5, #3]
    b92a:	3b07      	subs	r3, #7
    b92c:	2b09      	cmp	r3, #9
    b92e:	d904      	bls.n	b93a <smp_pairing_req+0x1a>
		return BT_SMP_ERR_ENC_KEY_SIZE;
    b930:	2506      	movs	r5, #6
}
    b932:	4628      	mov	r0, r5
    b934:	b002      	add	sp, #8
    b936:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	struct bt_conn *conn = smp->chan.chan.conn;
    b93a:	6807      	ldr	r7, [r0, #0]
	if (!conn->le.keys) {
    b93c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
    b940:	b163      	cbz	r3, b95c <smp_pairing_req+0x3c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
    b942:	f104 06bc 	add.w	r6, r4, #188	; 0xbc
    b946:	210f      	movs	r1, #15
    b948:	4630      	mov	r0, r6
    b94a:	f008 f872 	bl	13a32 <atomic_test_bit>
    b94e:	b980      	cbnz	r0, b972 <smp_pairing_req+0x52>
		int ret = smp_init(smp);
    b950:	4620      	mov	r0, r4
    b952:	f7ff fcb7 	bl	b2c4 <smp_init>
		if (ret) {
    b956:	b160      	cbz	r0, b972 <smp_pairing_req+0x52>
			return ret;
    b958:	b2c5      	uxtb	r5, r0
    b95a:	e7ea      	b.n	b932 <smp_pairing_req+0x12>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    b95c:	7a38      	ldrb	r0, [r7, #8]
    b95e:	f107 0188 	add.w	r1, r7, #136	; 0x88
    b962:	f001 f9b3 	bl	cccc <bt_keys_get_addr>
    b966:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
		if (!conn->le.keys) {
    b96a:	2800      	cmp	r0, #0
    b96c:	d1e9      	bne.n	b942 <smp_pairing_req+0x22>
			return BT_SMP_ERR_UNSPECIFIED;
    b96e:	2508      	movs	r5, #8
    b970:	e7df      	b.n	b932 <smp_pairing_req+0x12>
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
    b972:	2301      	movs	r3, #1
	memcpy(smp->preq + 1, req, sizeof(*req));
    b974:	2206      	movs	r2, #6
    b976:	4629      	mov	r1, r5
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
    b978:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
	memcpy(smp->preq + 1, req, sizeof(*req));
    b97c:	f104 00c2 	add.w	r0, r4, #194	; 0xc2
    b980:	f006 fccb 	bl	1231a <memcpy>
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
    b984:	2302      	movs	r3, #2
    b986:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
	rsp->auth_req = get_auth(conn, req->auth_req);
    b98a:	78a8      	ldrb	r0, [r5, #2]
    b98c:	f7ff fc42 	bl	b214 <get_auth.isra.0>
    b990:	f884 00cb 	strb.w	r0, [r4, #203]	; 0xcb
    b994:	4680      	mov	r8, r0
	rsp->io_capability = get_io_capa();
    b996:	f7ff fbb1 	bl	b0fc <get_io_capa>
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
    b99a:	4bb5      	ldr	r3, [pc, #724]	; (bc70 <smp_pairing_req+0x350>)
	rsp->io_capability = get_io_capa();
    b99c:	f884 00c9 	strb.w	r0, [r4, #201]	; 0xc9
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
    b9a0:	781b      	ldrb	r3, [r3, #0]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    b9a2:	f018 0f08 	tst.w	r8, #8
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
    b9a6:	f884 30ca 	strb.w	r3, [r4, #202]	; 0xca
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
    b9aa:	f04f 0310 	mov.w	r3, #16
    b9ae:	f884 30cc 	strb.w	r3, [r4, #204]	; 0xcc
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
    b9b2:	792b      	ldrb	r3, [r5, #4]
    b9b4:	f003 0307 	and.w	r3, r3, #7
    b9b8:	f884 30cd 	strb.w	r3, [r4, #205]	; 0xcd
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
    b9bc:	796b      	ldrb	r3, [r5, #5]
    b9be:	f003 0307 	and.w	r3, r3, #7
    b9c2:	f884 30ce 	strb.w	r3, [r4, #206]	; 0xce
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    b9c6:	d012      	beq.n	b9ee <smp_pairing_req+0xce>
    b9c8:	78ab      	ldrb	r3, [r5, #2]
    b9ca:	0719      	lsls	r1, r3, #28
    b9cc:	d50f      	bpl.n	b9ee <smp_pairing_req+0xce>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
    b9ce:	2105      	movs	r1, #5
    b9d0:	4630      	mov	r0, r6
    b9d2:	f007 ff67 	bl	138a4 <atomic_set_bit>
		rsp->init_key_dist &= RECV_KEYS_SC;
    b9d6:	f894 30cd 	ldrb.w	r3, [r4, #205]	; 0xcd
    b9da:	f003 0306 	and.w	r3, r3, #6
    b9de:	f884 30cd 	strb.w	r3, [r4, #205]	; 0xcd
		rsp->resp_key_dist &= SEND_KEYS_SC;
    b9e2:	f894 30ce 	ldrb.w	r3, [r4, #206]	; 0xce
    b9e6:	f003 0306 	and.w	r3, r3, #6
    b9ea:	f884 30ce 	strb.w	r3, [r4, #206]	; 0xce
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
    b9ee:	f894 30cb 	ldrb.w	r3, [r4, #203]	; 0xcb
    b9f2:	069a      	lsls	r2, r3, #26
    b9f4:	d506      	bpl.n	ba04 <smp_pairing_req+0xe4>
    b9f6:	78ab      	ldrb	r3, [r5, #2]
    b9f8:	069b      	lsls	r3, r3, #26
    b9fa:	d503      	bpl.n	ba04 <smp_pairing_req+0xe4>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
    b9fc:	2114      	movs	r1, #20
    b9fe:	4630      	mov	r0, r6
    ba00:	f007 ff50 	bl	138a4 <atomic_set_bit>
	smp->local_dist = rsp->resp_key_dist;
    ba04:	f894 30ce 	ldrb.w	r3, [r4, #206]	; 0xce
    ba08:	f884 31a0 	strb.w	r3, [r4, #416]	; 0x1a0
	smp->remote_dist = rsp->init_key_dist;
    ba0c:	f894 30cd 	ldrb.w	r3, [r4, #205]	; 0xcd
    ba10:	f884 31a1 	strb.w	r3, [r4, #417]	; 0x1a1
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
    ba14:	f894 30cb 	ldrb.w	r3, [r4, #203]	; 0xcb
    ba18:	07d8      	lsls	r0, r3, #31
    ba1a:	d506      	bpl.n	ba2a <smp_pairing_req+0x10a>
    ba1c:	78ab      	ldrb	r3, [r5, #2]
    ba1e:	07d9      	lsls	r1, r3, #31
    ba20:	d503      	bpl.n	ba2a <smp_pairing_req+0x10a>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
    ba22:	210d      	movs	r1, #13
    ba24:	4630      	mov	r0, r6
    ba26:	f007 ff3d 	bl	138a4 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
    ba2a:	2103      	movs	r1, #3
    ba2c:	4630      	mov	r0, r6
    ba2e:	f007 ff39 	bl	138a4 <atomic_set_bit>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    ba32:	2105      	movs	r1, #5
	smp->method = get_pair_method(smp, req->io_capability);
    ba34:	782d      	ldrb	r5, [r5, #0]
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    ba36:	f007 fffc 	bl	13a32 <atomic_test_bit>
    ba3a:	f8d4 8000 	ldr.w	r8, [r4]
    ba3e:	2800      	cmp	r0, #0
    ba40:	d151      	bne.n	bae6 <smp_pairing_req+0x1c6>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
    ba42:	2d04      	cmp	r5, #4
    ba44:	d81d      	bhi.n	ba82 <smp_pairing_req+0x162>
	if ((req->oob_flag & rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
    ba46:	f894 20ca 	ldrb.w	r2, [r4, #202]	; 0xca
    ba4a:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
    ba4e:	4013      	ands	r3, r2
    ba50:	07da      	lsls	r2, r3, #31
    ba52:	d465      	bmi.n	bb20 <smp_pairing_req+0x200>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
    ba54:	f894 00c4 	ldrb.w	r0, [r4, #196]	; 0xc4
    ba58:	f894 30cb 	ldrb.w	r3, [r4, #203]	; 0xcb
    ba5c:	4318      	orrs	r0, r3
    ba5e:	f010 0004 	ands.w	r0, r0, #4
    ba62:	d00e      	beq.n	ba82 <smp_pairing_req+0x162>
	method = gen_method_legacy[remote_io][get_io_capa()];
    ba64:	f7ff fb4a 	bl	b0fc <get_io_capa>
    ba68:	4b82      	ldr	r3, [pc, #520]	; (bc74 <smp_pairing_req+0x354>)
    ba6a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    ba6e:	441d      	add	r5, r3
    ba70:	5c28      	ldrb	r0, [r5, r0]
	if (method == PASSKEY_ROLE) {
    ba72:	2804      	cmp	r0, #4
    ba74:	d105      	bne.n	ba82 <smp_pairing_req+0x162>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    ba76:	f898 3003 	ldrb.w	r3, [r8, #3]
			method = PASSKEY_INPUT;
    ba7a:	2b00      	cmp	r3, #0
    ba7c:	bf0c      	ite	eq
    ba7e:	2002      	moveq	r0, #2
    ba80:	2001      	movne	r0, #1
	smp->method = get_pair_method(smp, req->io_capability);
    ba82:	f884 00c0 	strb.w	r0, [r4, #192]	; 0xc0
	if (!conn->le.keys) {
    ba86:	f8d8 30b4 	ldr.w	r3, [r8, #180]	; 0xb4
    ba8a:	b93b      	cbnz	r3, ba9c <smp_pairing_req+0x17c>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    ba8c:	f898 0008 	ldrb.w	r0, [r8, #8]
    ba90:	f108 0188 	add.w	r1, r8, #136	; 0x88
    ba94:	f001 f91a 	bl	cccc <bt_keys_get_addr>
    ba98:	f8c8 00b4 	str.w	r0, [r8, #180]	; 0xb4
	if (!conn->le.keys ||
    ba9c:	f8d8 20b4 	ldr.w	r2, [r8, #180]	; 0xb4
    baa0:	2a00      	cmp	r2, #0
    baa2:	d143      	bne.n	bb2c <smp_pairing_req+0x20c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    baa4:	2105      	movs	r1, #5
    baa6:	4630      	mov	r0, r6
    baa8:	f007 ffc3 	bl	13a32 <atomic_test_bit>
    baac:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    bab0:	2800      	cmp	r0, #0
    bab2:	f040 80f3 	bne.w	bc9c <smp_pairing_req+0x37c>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    bab6:	461d      	mov	r5, r3
    bab8:	2b00      	cmp	r3, #0
    baba:	d155      	bne.n	bb68 <smp_pairing_req+0x248>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    babc:	210f      	movs	r1, #15
    babe:	4630      	mov	r0, r6
    bac0:	f007 ffb7 	bl	13a32 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    bac4:	2800      	cmp	r0, #0
    bac6:	d14f      	bne.n	bb68 <smp_pairing_req+0x248>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    bac8:	4f6b      	ldr	r7, [pc, #428]	; (bc78 <smp_pairing_req+0x358>)
    baca:	683b      	ldr	r3, [r7, #0]
    bacc:	2b00      	cmp	r3, #0
    bace:	d04b      	beq.n	bb68 <smp_pairing_req+0x248>
	    bt_auth && bt_auth->pairing_confirm) {
    bad0:	695b      	ldr	r3, [r3, #20]
    bad2:	2b00      	cmp	r3, #0
    bad4:	d048      	beq.n	bb68 <smp_pairing_req+0x248>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    bad6:	4630      	mov	r0, r6
    bad8:	210a      	movs	r1, #10
    bada:	f007 fee3 	bl	138a4 <atomic_set_bit>
		bt_auth->pairing_confirm(smp->chan.chan.conn);
    bade:	683b      	ldr	r3, [r7, #0]
    bae0:	6820      	ldr	r0, [r4, #0]
    bae2:	695b      	ldr	r3, [r3, #20]
    bae4:	e0b6      	b.n	bc54 <smp_pairing_req+0x334>
	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
    bae6:	f894 00c4 	ldrb.w	r0, [r4, #196]	; 0xc4
    baea:	f894 20cb 	ldrb.w	r2, [r4, #203]	; 0xcb
    baee:	ea00 0302 	and.w	r3, r0, r2
    baf2:	071b      	lsls	r3, r3, #28
    baf4:	d506      	bpl.n	bb04 <smp_pairing_req+0x1e4>
		if ((req->oob_flag | rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
    baf6:	f894 10ca 	ldrb.w	r1, [r4, #202]	; 0xca
    bafa:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
    bafe:	430b      	orrs	r3, r1
    bb00:	07d9      	lsls	r1, r3, #31
    bb02:	d40f      	bmi.n	bb24 <smp_pairing_req+0x204>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
    bb04:	2d04      	cmp	r5, #4
    bb06:	d80f      	bhi.n	bb28 <smp_pairing_req+0x208>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
    bb08:	4310      	orrs	r0, r2
    bb0a:	f010 0004 	ands.w	r0, r0, #4
    bb0e:	d0b8      	beq.n	ba82 <smp_pairing_req+0x162>
	return gen_method_sc[remote_io][get_io_capa()];
    bb10:	f7ff faf4 	bl	b0fc <get_io_capa>
    bb14:	4b59      	ldr	r3, [pc, #356]	; (bc7c <smp_pairing_req+0x35c>)
    bb16:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    bb1a:	441d      	add	r5, r3
    bb1c:	5c28      	ldrb	r0, [r5, r0]
    bb1e:	e7b0      	b.n	ba82 <smp_pairing_req+0x162>
		return LEGACY_OOB;
    bb20:	2006      	movs	r0, #6
    bb22:	e7ae      	b.n	ba82 <smp_pairing_req+0x162>
			return LE_SC_OOB;
    bb24:	2005      	movs	r0, #5
    bb26:	e7ac      	b.n	ba82 <smp_pairing_req+0x162>
		return JUST_WORKS;
    bb28:	2000      	movs	r0, #0
    bb2a:	e7aa      	b.n	ba82 <smp_pairing_req+0x162>
	    !(conn->le.keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
    bb2c:	89d1      	ldrh	r1, [r2, #14]
	if (!conn->le.keys ||
    bb2e:	f011 0f24 	tst.w	r1, #36	; 0x24
    bb32:	d0b7      	beq.n	baa4 <smp_pairing_req+0x184>
	return MIN(req->max_key_size, rsp->max_key_size);
    bb34:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
    bb38:	f894 00c5 	ldrb.w	r0, [r4, #197]	; 0xc5
	if (conn->le.keys->enc_size > get_encryption_key_size(smp)) {
    bb3c:	7b12      	ldrb	r2, [r2, #12]
    bb3e:	4283      	cmp	r3, r0
    bb40:	bf28      	it	cs
    bb42:	4603      	movcs	r3, r0
    bb44:	429a      	cmp	r2, r3
    bb46:	d901      	bls.n	bb4c <smp_pairing_req+0x22c>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
    bb48:	2503      	movs	r5, #3
    bb4a:	e6f2      	b.n	b932 <smp_pairing_req+0x12>
	if ((conn->le.keys->keys & BT_KEYS_LTK_P256) &&
    bb4c:	068a      	lsls	r2, r1, #26
    bb4e:	d404      	bmi.n	bb5a <smp_pairing_req+0x23a>
	if (!IS_ENABLED(CONFIG_BT_SMP_ALLOW_UNAUTH_OVERWRITE) &&
    bb50:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    bb54:	2b00      	cmp	r3, #0
    bb56:	d1a5      	bne.n	baa4 <smp_pairing_req+0x184>
    bb58:	e7f6      	b.n	bb48 <smp_pairing_req+0x228>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    bb5a:	2105      	movs	r1, #5
    bb5c:	4630      	mov	r0, r6
    bb5e:	f007 ff68 	bl	13a32 <atomic_test_bit>
	if ((conn->le.keys->keys & BT_KEYS_LTK_P256) &&
    bb62:	2800      	cmp	r0, #0
    bb64:	d1f4      	bne.n	bb50 <smp_pairing_req+0x230>
    bb66:	e7ef      	b.n	bb48 <smp_pairing_req+0x228>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    bb68:	2103      	movs	r1, #3
    bb6a:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    bb6e:	f007 fe99 	bl	138a4 <atomic_set_bit>
	ret = send_pairing_rsp(smp);
    bb72:	4620      	mov	r0, r4
    bb74:	f007 ff9c 	bl	13ab0 <send_pairing_rsp>
	if (ret) {
    bb78:	4605      	mov	r5, r0
    bb7a:	2800      	cmp	r0, #0
    bb7c:	f47f aed9 	bne.w	b932 <smp_pairing_req+0x12>
	struct bt_conn *conn = smp->chan.chan.conn;
    bb80:	6827      	ldr	r7, [r4, #0]
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
    bb82:	f107 0188 	add.w	r1, r7, #136	; 0x88
    bb86:	7a38      	ldrb	r0, [r7, #8]
    bb88:	f001 f964 	bl	ce54 <bt_keys_find_addr>
	if (keys && (keys->flags & BT_KEYS_AUTHENTICATED) &&
    bb8c:	f894 10c0 	ldrb.w	r1, [r4, #192]	; 0xc0
    bb90:	b170      	cbz	r0, bbb0 <smp_pairing_req+0x290>
    bb92:	7b43      	ldrb	r3, [r0, #13]
    bb94:	07db      	lsls	r3, r3, #31
    bb96:	d50b      	bpl.n	bbb0 <smp_pairing_req+0x290>
    bb98:	b951      	cbnz	r1, bbb0 <smp_pairing_req+0x290>
    bb9a:	4b39      	ldr	r3, [pc, #228]	; (bc80 <smp_pairing_req+0x360>)
    bb9c:	4939      	ldr	r1, [pc, #228]	; (bc84 <smp_pairing_req+0x364>)
		BT_ERR("JustWorks failed, authenticated keys present");
    bb9e:	483a      	ldr	r0, [pc, #232]	; (bc88 <smp_pairing_req+0x368>)
    bba0:	1ac9      	subs	r1, r1, r3
    bba2:	08c9      	lsrs	r1, r1, #3
    bba4:	0189      	lsls	r1, r1, #6
    bba6:	f041 0101 	orr.w	r1, r1, #1
    bbaa:	f005 f883 	bl	10cb4 <log_0>
		return BT_SMP_ERR_UNSPECIFIED;
    bbae:	e6de      	b.n	b96e <smp_pairing_req+0x4e>
	switch (smp->method) {
    bbb0:	2906      	cmp	r1, #6
    bbb2:	d851      	bhi.n	bc58 <smp_pairing_req+0x338>
    bbb4:	e8df f001 	tbb	[pc, r1]
    bbb8:	5018466e 	.word	0x5018466e
    bbbc:	5050      	.short	0x5050
    bbbe:	04          	.byte	0x04
    bbbf:	00          	.byte	0x00
		if (bt_auth && bt_auth->oob_data_request) {
    bbc0:	4f2d      	ldr	r7, [pc, #180]	; (bc78 <smp_pairing_req+0x358>)
    bbc2:	683b      	ldr	r3, [r7, #0]
    bbc4:	2b00      	cmp	r3, #0
    bbc6:	d067      	beq.n	bc98 <smp_pairing_req+0x378>
    bbc8:	68db      	ldr	r3, [r3, #12]
    bbca:	2b00      	cmp	r3, #0
    bbcc:	d064      	beq.n	bc98 <smp_pairing_req+0x378>
			struct bt_conn_oob_info info = {
    bbce:	2300      	movs	r3, #0
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    bbd0:	4630      	mov	r0, r6
    bbd2:	210a      	movs	r1, #10
			struct bt_conn_oob_info info = {
    bbd4:	f8ad 3004 	strh.w	r3, [sp, #4]
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    bbd8:	f007 fe64 	bl	138a4 <atomic_set_bit>
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
    bbdc:	683b      	ldr	r3, [r7, #0]
    bbde:	6820      	ldr	r0, [r4, #0]
    bbe0:	68db      	ldr	r3, [r3, #12]
    bbe2:	a901      	add	r1, sp, #4
    bbe4:	4798      	blx	r3
		break;
    bbe6:	e6a4      	b.n	b932 <smp_pairing_req+0x12>
			if (bt_rand(&passkey, sizeof(passkey))) {
    bbe8:	2104      	movs	r1, #4
    bbea:	eb0d 0001 	add.w	r0, sp, r1
    bbee:	f7fb ff4b 	bl	7a88 <bt_rand>
    bbf2:	2800      	cmp	r0, #0
    bbf4:	f47f aebb 	bne.w	b96e <smp_pairing_req+0x4e>
			passkey %= 1000000;
    bbf8:	9901      	ldr	r1, [sp, #4]
    bbfa:	4a24      	ldr	r2, [pc, #144]	; (bc8c <smp_pairing_req+0x36c>)
		if (bt_auth && bt_auth->passkey_display) {
    bbfc:	f8df 8078 	ldr.w	r8, [pc, #120]	; bc78 <smp_pairing_req+0x358>
			passkey %= 1000000;
    bc00:	fbb1 f3f2 	udiv	r3, r1, r2
    bc04:	fb02 1313 	mls	r3, r2, r3, r1
    bc08:	9301      	str	r3, [sp, #4]
		if (bt_auth && bt_auth->passkey_display) {
    bc0a:	f8d8 3000 	ldr.w	r3, [r8]
    bc0e:	b15b      	cbz	r3, bc28 <smp_pairing_req+0x308>
    bc10:	681b      	ldr	r3, [r3, #0]
    bc12:	b14b      	cbz	r3, bc28 <smp_pairing_req+0x308>
			atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
    bc14:	210b      	movs	r1, #11
    bc16:	4630      	mov	r0, r6
    bc18:	f007 fe44 	bl	138a4 <atomic_set_bit>
			bt_auth->passkey_display(conn, passkey);
    bc1c:	f8d8 3000 	ldr.w	r3, [r8]
    bc20:	4638      	mov	r0, r7
    bc22:	681b      	ldr	r3, [r3, #0]
    bc24:	9901      	ldr	r1, [sp, #4]
    bc26:	4798      	blx	r3
		sys_put_le32(passkey, smp->tk);
    bc28:	9b01      	ldr	r3, [sp, #4]
	dst[1] = val >> 8;
    bc2a:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
    bc2e:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
	sys_put_le16(val >> 16, &dst[2]);
    bc32:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    bc34:	f884 3101 	strb.w	r3, [r4, #257]	; 0x101
	dst[1] = val >> 8;
    bc38:	0a1b      	lsrs	r3, r3, #8
    bc3a:	f884 2100 	strb.w	r2, [r4, #256]	; 0x100
    bc3e:	f884 3102 	strb.w	r3, [r4, #258]	; 0x102
}
    bc42:	e676      	b.n	b932 <smp_pairing_req+0x12>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    bc44:	4630      	mov	r0, r6
    bc46:	210a      	movs	r1, #10
    bc48:	f007 fe2c 	bl	138a4 <atomic_set_bit>
		bt_auth->passkey_entry(conn);
    bc4c:	4638      	mov	r0, r7
    bc4e:	4b0a      	ldr	r3, [pc, #40]	; (bc78 <smp_pairing_req+0x358>)
    bc50:	681b      	ldr	r3, [r3, #0]
    bc52:	685b      	ldr	r3, [r3, #4]
		bt_auth->pairing_confirm(smp->chan.chan.conn);
    bc54:	4798      	blx	r3
		return 0;
    bc56:	e66c      	b.n	b932 <smp_pairing_req+0x12>
    bc58:	4b09      	ldr	r3, [pc, #36]	; (bc80 <smp_pairing_req+0x360>)
    bc5a:	4a0a      	ldr	r2, [pc, #40]	; (bc84 <smp_pairing_req+0x364>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
    bc5c:	480c      	ldr	r0, [pc, #48]	; (bc90 <smp_pairing_req+0x370>)
    bc5e:	1ad2      	subs	r2, r2, r3
    bc60:	08d2      	lsrs	r2, r2, #3
    bc62:	0192      	lsls	r2, r2, #6
    bc64:	f042 0201 	orr.w	r2, r2, #1
    bc68:	f005 f831 	bl	10cce <log_1>
		return BT_SMP_ERR_UNSPECIFIED;
    bc6c:	e67f      	b.n	b96e <smp_pairing_req+0x4e>
    bc6e:	bf00      	nop
    bc70:	20002e18 	.word	0x20002e18
    bc74:	00018cf9 	.word	0x00018cf9
    bc78:	200019b8 	.word	0x200019b8
    bc7c:	00018d12 	.word	0x00018d12
    bc80:	00015a00 	.word	0x00015a00
    bc84:	00015a68 	.word	0x00015a68
    bc88:	00018a26 	.word	0x00018a26
    bc8c:	000f4240 	.word	0x000f4240
    bc90:	0001894e 	.word	0x0001894e
	switch (smp->method) {
    bc94:	460d      	mov	r5, r1
    bc96:	e64c      	b.n	b932 <smp_pairing_req+0x12>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
    bc98:	2502      	movs	r5, #2
    bc9a:	e64a      	b.n	b932 <smp_pairing_req+0x12>
	if ((IS_ENABLED(CONFIG_BT_SMP_SC_ONLY) ||
    bc9c:	7aba      	ldrb	r2, [r7, #10]
    bc9e:	461d      	mov	r5, r3
    bca0:	2a04      	cmp	r2, #4
    bca2:	d116      	bne.n	bcd2 <smp_pairing_req+0x3b2>
	     conn->required_sec_level == BT_SECURITY_L4) &&
    bca4:	2b00      	cmp	r3, #0
    bca6:	f43f af4f 	beq.w	bb48 <smp_pairing_req+0x228>
	return MIN(req->max_key_size, rsp->max_key_size);
    bcaa:	f894 30c5 	ldrb.w	r3, [r4, #197]	; 0xc5
    bcae:	f894 20cc 	ldrb.w	r2, [r4, #204]	; 0xcc
	     conn->required_sec_level == BT_SECURITY_L4) &&
    bcb2:	4293      	cmp	r3, r2
    bcb4:	bf28      	it	cs
    bcb6:	4613      	movcs	r3, r2
    bcb8:	2b10      	cmp	r3, #16
    bcba:	f47f ae39 	bne.w	b930 <smp_pairing_req+0x10>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
    bcbe:	210c      	movs	r1, #12
    bcc0:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    bcc4:	f007 fdee 	bl	138a4 <atomic_set_bit>
	return send_pairing_rsp(smp);
    bcc8:	4620      	mov	r0, r4
    bcca:	f007 fef1 	bl	13ab0 <send_pairing_rsp>
    bcce:	4605      	mov	r5, r0
    bcd0:	e62f      	b.n	b932 <smp_pairing_req+0x12>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    bcd2:	2b00      	cmp	r3, #0
    bcd4:	d1f3      	bne.n	bcbe <smp_pairing_req+0x39e>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    bcd6:	210f      	movs	r1, #15
    bcd8:	4630      	mov	r0, r6
    bcda:	f007 feaa 	bl	13a32 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    bcde:	2800      	cmp	r0, #0
    bce0:	d1ed      	bne.n	bcbe <smp_pairing_req+0x39e>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    bce2:	4f04      	ldr	r7, [pc, #16]	; (bcf4 <smp_pairing_req+0x3d4>)
    bce4:	683b      	ldr	r3, [r7, #0]
    bce6:	2b00      	cmp	r3, #0
    bce8:	d0e9      	beq.n	bcbe <smp_pairing_req+0x39e>
	    bt_auth && bt_auth->pairing_confirm) {
    bcea:	695b      	ldr	r3, [r3, #20]
    bcec:	2b00      	cmp	r3, #0
    bcee:	d0e6      	beq.n	bcbe <smp_pairing_req+0x39e>
    bcf0:	e6f1      	b.n	bad6 <smp_pairing_req+0x1b6>
    bcf2:	bf00      	nop
    bcf4:	200019b8 	.word	0x200019b8

0000bcf8 <bt_smp_connected>:
{
    bcf8:	b510      	push	{r4, lr}
    bcfa:	4604      	mov	r4, r0
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    bcfc:	2230      	movs	r2, #48	; 0x30
    bcfe:	2100      	movs	r1, #0
    bd00:	f500 70d4 	add.w	r0, r0, #424	; 0x1a8
    bd04:	f006 fb34 	bl	12370 <memset>
    bd08:	4b03      	ldr	r3, [pc, #12]	; (bd18 <bt_smp_connected+0x20>)
	smp_reset(smp);
    bd0a:	4620      	mov	r0, r4
    bd0c:	f8c4 31ac 	str.w	r3, [r4, #428]	; 0x1ac
}
    bd10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	smp_reset(smp);
    bd14:	f007 bf22 	b.w	13b5c <smp_reset>
    bd18:	0000bfa5 	.word	0x0000bfa5

0000bd1c <smp_pairing_complete>:
{
    bd1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bd20:	4604      	mov	r4, r0
	if (!status) {
    bd22:	460d      	mov	r5, r1
    bd24:	4f24      	ldr	r7, [pc, #144]	; (bdb8 <smp_pairing_complete+0x9c>)
    bd26:	f100 08bc 	add.w	r8, r0, #188	; 0xbc
    bd2a:	b9b1      	cbnz	r1, bd5a <smp_pairing_complete+0x3e>
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
    bd2c:	210d      	movs	r1, #13
    bd2e:	4640      	mov	r0, r8
    bd30:	f007 fe7f 	bl	13a32 <atomic_test_bit>
		if (bond_flag) {
    bd34:	4605      	mov	r5, r0
    bd36:	b120      	cbz	r0, bd42 <smp_pairing_complete+0x26>
			bt_keys_store(smp->chan.chan.conn->le.keys);
    bd38:	6823      	ldr	r3, [r4, #0]
    bd3a:	f8d3 00b4 	ldr.w	r0, [r3, #180]	; 0xb4
    bd3e:	f001 f97f 	bl	d040 <bt_keys_store>
		if (bt_auth && bt_auth->pairing_complete) {
    bd42:	683b      	ldr	r3, [r7, #0]
    bd44:	b123      	cbz	r3, bd50 <smp_pairing_complete+0x34>
    bd46:	699b      	ldr	r3, [r3, #24]
    bd48:	b113      	cbz	r3, bd50 <smp_pairing_complete+0x34>
			bt_auth->pairing_complete(smp->chan.chan.conn,
    bd4a:	4629      	mov	r1, r5
			bt_auth->pairing_failed(smp->chan.chan.conn, auth_err);
    bd4c:	6820      	ldr	r0, [r4, #0]
    bd4e:	4798      	blx	r3
	smp_reset(smp);
    bd50:	4620      	mov	r0, r4
}
    bd52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	smp_reset(smp);
    bd56:	f007 bf01 	b.w	13b5c <smp_reset>
	switch (smp_err) {
    bd5a:	1e4b      	subs	r3, r1, #1
    bd5c:	b2db      	uxtb	r3, r3
    bd5e:	2b0d      	cmp	r3, #13
    bd60:	bf96      	itet	ls
    bd62:	4a16      	ldrls	r2, [pc, #88]	; (bdbc <smp_pairing_complete+0xa0>)
	if (!status) {
    bd64:	2608      	movhi	r6, #8
    bd66:	5cd6      	ldrbls	r6, [r2, r3]
		if (smp->chan.chan.conn->le.keys &&
    bd68:	6803      	ldr	r3, [r0, #0]
    bd6a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
    bd6e:	b153      	cbz	r3, bd86 <smp_pairing_complete+0x6a>
    bd70:	7b1b      	ldrb	r3, [r3, #12]
    bd72:	b9d3      	cbnz	r3, bdaa <smp_pairing_complete+0x8e>
			bt_keys_clear(smp->chan.chan.conn->le.keys);
    bd74:	6823      	ldr	r3, [r4, #0]
    bd76:	f8d3 00b4 	ldr.w	r0, [r3, #180]	; 0xb4
    bd7a:	f001 f87b 	bl	ce74 <bt_keys_clear>
			smp->chan.chan.conn->le.keys = NULL;
    bd7e:	2200      	movs	r2, #0
    bd80:	6823      	ldr	r3, [r4, #0]
    bd82:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
    bd86:	2102      	movs	r1, #2
    bd88:	4640      	mov	r0, r8
    bd8a:	f007 fe52 	bl	13a32 <atomic_test_bit>
    bd8e:	b920      	cbnz	r0, bd9a <smp_pairing_complete+0x7e>
			bt_conn_security_changed(smp->chan.chan.conn, status,
    bd90:	4632      	mov	r2, r6
    bd92:	4629      	mov	r1, r5
    bd94:	6820      	ldr	r0, [r4, #0]
    bd96:	f7fb ffb9 	bl	7d0c <bt_conn_security_changed>
		if (bt_auth && bt_auth->pairing_failed) {
    bd9a:	683b      	ldr	r3, [r7, #0]
    bd9c:	2b00      	cmp	r3, #0
    bd9e:	d0d7      	beq.n	bd50 <smp_pairing_complete+0x34>
    bda0:	69db      	ldr	r3, [r3, #28]
    bda2:	2b00      	cmp	r3, #0
    bda4:	d0d4      	beq.n	bd50 <smp_pairing_complete+0x34>
			bt_auth->pairing_failed(smp->chan.chan.conn, auth_err);
    bda6:	4631      	mov	r1, r6
    bda8:	e7d0      	b.n	bd4c <smp_pairing_complete+0x30>
		     atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR))) {
    bdaa:	2102      	movs	r1, #2
    bdac:	4640      	mov	r0, r8
    bdae:	f007 fe40 	bl	13a32 <atomic_test_bit>
		    (!smp->chan.chan.conn->le.keys->enc_size ||
    bdb2:	2800      	cmp	r0, #0
    bdb4:	d1de      	bne.n	bd74 <smp_pairing_complete+0x58>
    bdb6:	e7e6      	b.n	bd86 <smp_pairing_complete+0x6a>
    bdb8:	200019b8 	.word	0x200019b8
    bdbc:	00018ceb 	.word	0x00018ceb

0000bdc0 <bt_smp_recv>:
{
    bdc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
    bdc2:	898b      	ldrh	r3, [r1, #12]
{
    bdc4:	4604      	mov	r4, r0
    bdc6:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    bdc8:	b95b      	cbnz	r3, bde2 <bt_smp_recv+0x22>
    bdca:	493a      	ldr	r1, [pc, #232]	; (beb4 <bt_smp_recv+0xf4>)
    bdcc:	4b3a      	ldr	r3, [pc, #232]	; (beb8 <bt_smp_recv+0xf8>)
		BT_ERR("Too small SMP PDU received");
    bdce:	483b      	ldr	r0, [pc, #236]	; (bebc <bt_smp_recv+0xfc>)
    bdd0:	1ac9      	subs	r1, r1, r3
    bdd2:	08c9      	lsrs	r1, r1, #3
    bdd4:	0189      	lsls	r1, r1, #6
    bdd6:	f041 0101 	orr.w	r1, r1, #1
    bdda:	f004 ff6b 	bl	10cb4 <log_0>
}
    bdde:	2000      	movs	r0, #0
    bde0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
    bde2:	2101      	movs	r1, #1
    bde4:	f105 0008 	add.w	r0, r5, #8
    bde8:	f008 f968 	bl	140bc <net_buf_simple_pull_mem>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    bdec:	2104      	movs	r1, #4
    bdee:	4606      	mov	r6, r0
    bdf0:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
    bdf4:	f007 fe1d 	bl	13a32 <atomic_test_bit>
    bdf8:	7831      	ldrb	r1, [r6, #0]
    bdfa:	b150      	cbz	r0, be12 <bt_smp_recv+0x52>
    bdfc:	4a2d      	ldr	r2, [pc, #180]	; (beb4 <bt_smp_recv+0xf4>)
    bdfe:	4b2e      	ldr	r3, [pc, #184]	; (beb8 <bt_smp_recv+0xf8>)
		BT_WARN("SMP command (code 0x%02x) received after timeout",
    be00:	482f      	ldr	r0, [pc, #188]	; (bec0 <bt_smp_recv+0x100>)
    be02:	1ad2      	subs	r2, r2, r3
    be04:	08d2      	lsrs	r2, r2, #3
    be06:	0192      	lsls	r2, r2, #6
    be08:	f042 0202 	orr.w	r2, r2, #2
		BT_WARN("Received reserved SMP code 0x%02x", hdr->code);
    be0c:	f004 ff5f 	bl	10cce <log_1>
		return 0;
    be10:	e7e5      	b.n	bdde <bt_smp_recv+0x1e>
	if (hdr->code >= ARRAY_SIZE(handlers)) {
    be12:	290e      	cmp	r1, #14
    be14:	d908      	bls.n	be28 <bt_smp_recv+0x68>
    be16:	4a27      	ldr	r2, [pc, #156]	; (beb4 <bt_smp_recv+0xf4>)
    be18:	4b27      	ldr	r3, [pc, #156]	; (beb8 <bt_smp_recv+0xf8>)
		BT_WARN("Received reserved SMP code 0x%02x", hdr->code);
    be1a:	482a      	ldr	r0, [pc, #168]	; (bec4 <bt_smp_recv+0x104>)
    be1c:	1ad2      	subs	r2, r2, r3
    be1e:	08d2      	lsrs	r2, r2, #3
    be20:	0192      	lsls	r2, r2, #6
    be22:	f042 0202 	orr.w	r2, r2, #2
    be26:	e7f1      	b.n	be0c <bt_smp_recv+0x4c>
	if (!handlers[hdr->code].func) {
    be28:	4f27      	ldr	r7, [pc, #156]	; (bec8 <bt_smp_recv+0x108>)
    be2a:	f857 3031 	ldr.w	r3, [r7, r1, lsl #3]
    be2e:	b973      	cbnz	r3, be4e <bt_smp_recv+0x8e>
    be30:	4b21      	ldr	r3, [pc, #132]	; (beb8 <bt_smp_recv+0xf8>)
    be32:	4a20      	ldr	r2, [pc, #128]	; (beb4 <bt_smp_recv+0xf4>)
		BT_WARN("Unhandled SMP code 0x%02x", hdr->code);
    be34:	4825      	ldr	r0, [pc, #148]	; (becc <bt_smp_recv+0x10c>)
    be36:	1ad2      	subs	r2, r2, r3
    be38:	08d2      	lsrs	r2, r2, #3
    be3a:	0192      	lsls	r2, r2, #6
    be3c:	f042 0202 	orr.w	r2, r2, #2
    be40:	f004 ff45 	bl	10cce <log_1>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
    be44:	2107      	movs	r1, #7
		smp_error(smp, err);
    be46:	4620      	mov	r0, r4
    be48:	f007 feab 	bl	13ba2 <smp_error>
    be4c:	e7c7      	b.n	bdde <bt_smp_recv+0x1e>
	if (!atomic_test_and_clear_bit(&smp->allowed_cmds, hdr->code)) {
    be4e:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    be52:	f007 fe6f 	bl	13b34 <atomic_test_and_clear_bit>
    be56:	7831      	ldrb	r1, [r6, #0]
    be58:	b970      	cbnz	r0, be78 <bt_smp_recv+0xb8>
    be5a:	4b17      	ldr	r3, [pc, #92]	; (beb8 <bt_smp_recv+0xf8>)
    be5c:	4a15      	ldr	r2, [pc, #84]	; (beb4 <bt_smp_recv+0xf4>)
		BT_WARN("Unexpected SMP code 0x%02x", hdr->code);
    be5e:	481c      	ldr	r0, [pc, #112]	; (bed0 <bt_smp_recv+0x110>)
    be60:	1ad2      	subs	r2, r2, r3
    be62:	08d2      	lsrs	r2, r2, #3
    be64:	0192      	lsls	r2, r2, #6
    be66:	f042 0202 	orr.w	r2, r2, #2
    be6a:	f004 ff30 	bl	10cce <log_1>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
    be6e:	7833      	ldrb	r3, [r6, #0]
    be70:	2b05      	cmp	r3, #5
    be72:	d0b4      	beq.n	bdde <bt_smp_recv+0x1e>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
    be74:	2108      	movs	r1, #8
    be76:	e7e6      	b.n	be46 <bt_smp_recv+0x86>
	if (buf->len != handlers[hdr->code].expect_len) {
    be78:	eb07 03c1 	add.w	r3, r7, r1, lsl #3
    be7c:	89a8      	ldrh	r0, [r5, #12]
    be7e:	791b      	ldrb	r3, [r3, #4]
    be80:	4283      	cmp	r3, r0
    be82:	d00d      	beq.n	bea0 <bt_smp_recv+0xe0>
    be84:	4a0c      	ldr	r2, [pc, #48]	; (beb8 <bt_smp_recv+0xf8>)
    be86:	4b0b      	ldr	r3, [pc, #44]	; (beb4 <bt_smp_recv+0xf4>)
    be88:	1a9b      	subs	r3, r3, r2
    be8a:	08db      	lsrs	r3, r3, #3
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
    be8c:	019b      	lsls	r3, r3, #6
    be8e:	460a      	mov	r2, r1
    be90:	f043 0301 	orr.w	r3, r3, #1
    be94:	4601      	mov	r1, r0
    be96:	480f      	ldr	r0, [pc, #60]	; (bed4 <bt_smp_recv+0x114>)
    be98:	f004 ff2d 	bl	10cf6 <log_2>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
    be9c:	210a      	movs	r1, #10
    be9e:	e7d2      	b.n	be46 <bt_smp_recv+0x86>
	err = handlers[hdr->code].func(smp, buf);
    bea0:	f857 3031 	ldr.w	r3, [r7, r1, lsl #3]
    bea4:	4620      	mov	r0, r4
    bea6:	4629      	mov	r1, r5
    bea8:	4798      	blx	r3
	if (err) {
    beaa:	4601      	mov	r1, r0
    beac:	2800      	cmp	r0, #0
    beae:	d096      	beq.n	bdde <bt_smp_recv+0x1e>
    beb0:	e7c9      	b.n	be46 <bt_smp_recv+0x86>
    beb2:	bf00      	nop
    beb4:	00015a68 	.word	0x00015a68
    beb8:	00015a00 	.word	0x00015a00
    bebc:	00018a53 	.word	0x00018a53
    bec0:	00018a6e 	.word	0x00018a6e
    bec4:	00018a9f 	.word	0x00018a9f
    bec8:	0001625c 	.word	0x0001625c
    becc:	00018ac1 	.word	0x00018ac1
    bed0:	00018adb 	.word	0x00018adb
    bed4:	000185b0 	.word	0x000185b0

0000bed8 <bt_smp_pkey_ready>:
	sc_public_key = pkey;
    bed8:	4b12      	ldr	r3, [pc, #72]	; (bf24 <bt_smp_pkey_ready+0x4c>)
{
    beda:	b510      	push	{r4, lr}
	sc_public_key = pkey;
    bedc:	6018      	str	r0, [r3, #0]
	if (!pkey) {
    bede:	b958      	cbnz	r0, bef8 <bt_smp_pkey_ready+0x20>
}
    bee0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bee4:	4910      	ldr	r1, [pc, #64]	; (bf28 <bt_smp_pkey_ready+0x50>)
    bee6:	4b11      	ldr	r3, [pc, #68]	; (bf2c <bt_smp_pkey_ready+0x54>)
		BT_WARN("Public key not available");
    bee8:	4811      	ldr	r0, [pc, #68]	; (bf30 <bt_smp_pkey_ready+0x58>)
    beea:	1ac9      	subs	r1, r1, r3
    beec:	08c9      	lsrs	r1, r1, #3
    beee:	0189      	lsls	r1, r1, #6
    bef0:	f041 0102 	orr.w	r1, r1, #2
    bef4:	f004 bede 	b.w	10cb4 <log_0>
	z_impl_k_sem_give(sem);
    bef8:	480e      	ldr	r0, [pc, #56]	; (bf34 <bt_smp_pkey_ready+0x5c>)
    befa:	f003 fc3d 	bl	f778 <z_impl_k_sem_give>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    befe:	4c0e      	ldr	r4, [pc, #56]	; (bf38 <bt_smp_pkey_ready+0x60>)
    bf00:	e8d4 3faf 	lda	r3, [r4]
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
    bf04:	065b      	lsls	r3, r3, #25
    bf06:	d50b      	bpl.n	bf20 <bt_smp_pkey_ready+0x48>
		err = smp_public_key_slave(smp);
    bf08:	f1a4 00bc 	sub.w	r0, r4, #188	; 0xbc
    bf0c:	f7ff fb8e 	bl	b62c <smp_public_key_slave>
		if (err) {
    bf10:	4601      	mov	r1, r0
    bf12:	b128      	cbz	r0, bf20 <bt_smp_pkey_ready+0x48>
			smp_error(smp, err);
    bf14:	f1a4 00bc 	sub.w	r0, r4, #188	; 0xbc
}
    bf18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			smp_error(smp, err);
    bf1c:	f007 be41 	b.w	13ba2 <smp_error>
}
    bf20:	bd10      	pop	{r4, pc}
    bf22:	bf00      	nop
    bf24:	20001a4c 	.word	0x20001a4c
    bf28:	00015a68 	.word	0x00015a68
    bf2c:	00015a00 	.word	0x00015a00
    bf30:	00018af6 	.word	0x00018af6
    bf34:	200006a0 	.word	0x200006a0
    bf38:	20000ea4 	.word	0x20000ea4

0000bf3c <smp_pairing_failed>:
{
    bf3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
    bf3e:	4605      	mov	r5, r0
    bf40:	4b14      	ldr	r3, [pc, #80]	; (bf94 <smp_pairing_failed+0x58>)
    bf42:	4a15      	ldr	r2, [pc, #84]	; (bf98 <smp_pairing_failed+0x5c>)
	struct bt_smp_pairing_fail *req = (void *)buf->data;
    bf44:	688e      	ldr	r6, [r1, #8]
    bf46:	1ad2      	subs	r2, r2, r3
    bf48:	08d2      	lsrs	r2, r2, #3
	struct bt_conn *conn = smp->chan.chan.conn;
    bf4a:	f855 7bbc 	ldr.w	r7, [r5], #188
	BT_ERR("reason 0x%x", req->reason);
    bf4e:	0192      	lsls	r2, r2, #6
    bf50:	7831      	ldrb	r1, [r6, #0]
{
    bf52:	4604      	mov	r4, r0
	BT_ERR("reason 0x%x", req->reason);
    bf54:	f042 0201 	orr.w	r2, r2, #1
    bf58:	4810      	ldr	r0, [pc, #64]	; (bf9c <smp_pairing_failed+0x60>)
    bf5a:	f004 feb8 	bl	10cce <log_1>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
    bf5e:	210a      	movs	r1, #10
    bf60:	4628      	mov	r0, r5
    bf62:	f007 fde7 	bl	13b34 <atomic_test_and_clear_bit>
    bf66:	b140      	cbz	r0, bf7a <smp_pairing_failed+0x3e>
		if (bt_auth && bt_auth->cancel) {
    bf68:	4b0d      	ldr	r3, [pc, #52]	; (bfa0 <smp_pairing_failed+0x64>)
    bf6a:	681b      	ldr	r3, [r3, #0]
    bf6c:	b963      	cbnz	r3, bf88 <smp_pairing_failed+0x4c>
	smp_pairing_complete(smp, req->reason);
    bf6e:	4620      	mov	r0, r4
    bf70:	7831      	ldrb	r1, [r6, #0]
    bf72:	f7ff fed3 	bl	bd1c <smp_pairing_complete>
}
    bf76:	2000      	movs	r0, #0
    bf78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    atomic_test_and_clear_bit(smp->flags, SMP_FLAG_DISPLAY)) {
    bf7a:	210b      	movs	r1, #11
    bf7c:	4628      	mov	r0, r5
    bf7e:	f007 fdd9 	bl	13b34 <atomic_test_and_clear_bit>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
    bf82:	2800      	cmp	r0, #0
    bf84:	d1f0      	bne.n	bf68 <smp_pairing_failed+0x2c>
    bf86:	e7f2      	b.n	bf6e <smp_pairing_failed+0x32>
		if (bt_auth && bt_auth->cancel) {
    bf88:	691b      	ldr	r3, [r3, #16]
    bf8a:	2b00      	cmp	r3, #0
    bf8c:	d0ef      	beq.n	bf6e <smp_pairing_failed+0x32>
			bt_auth->cancel(conn);
    bf8e:	4638      	mov	r0, r7
    bf90:	4798      	blx	r3
    bf92:	e7ec      	b.n	bf6e <smp_pairing_failed+0x32>
    bf94:	00015a00 	.word	0x00015a00
    bf98:	00015a68 	.word	0x00015a68
    bf9c:	00018b0f 	.word	0x00018b0f
    bfa0:	200019b8 	.word	0x200019b8

0000bfa4 <smp_timeout>:
{
    bfa4:	b510      	push	{r4, lr}
    bfa6:	4604      	mov	r4, r0
    bfa8:	4b0a      	ldr	r3, [pc, #40]	; (bfd4 <smp_timeout+0x30>)
    bfaa:	490b      	ldr	r1, [pc, #44]	; (bfd8 <smp_timeout+0x34>)
	BT_ERR("SMP Timeout");
    bfac:	480b      	ldr	r0, [pc, #44]	; (bfdc <smp_timeout+0x38>)
    bfae:	1ac9      	subs	r1, r1, r3
    bfb0:	08c9      	lsrs	r1, r1, #3
    bfb2:	0189      	lsls	r1, r1, #6
    bfb4:	f041 0101 	orr.w	r1, r1, #1
    bfb8:	f004 fe7c 	bl	10cb4 <log_0>
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
    bfbc:	f5a4 70d4 	sub.w	r0, r4, #424	; 0x1a8
    bfc0:	2108      	movs	r1, #8
    bfc2:	f7ff feab 	bl	bd1c <smp_pairing_complete>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
    bfc6:	f1a4 00ec 	sub.w	r0, r4, #236	; 0xec
    bfca:	2104      	movs	r1, #4
}
    bfcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
    bfd0:	f007 bc68 	b.w	138a4 <atomic_set_bit>
    bfd4:	00015a00 	.word	0x00015a00
    bfd8:	00015a68 	.word	0x00015a68
    bfdc:	00018b1b 	.word	0x00018b1b

0000bfe0 <smp_signing_info>:
{
    bfe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bfe2:	4605      	mov	r5, r0
    bfe4:	460b      	mov	r3, r1
	struct bt_conn *conn = smp->chan.chan.conn;
    bfe6:	f850 4bbc 	ldr.w	r4, [r0], #188
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    bfea:	210d      	movs	r1, #13
    bfec:	f007 fd21 	bl	13a32 <atomic_test_bit>
    bff0:	b300      	cbz	r0, c034 <smp_signing_info+0x54>
					&conn->le.dst);
    bff2:	f104 0688 	add.w	r6, r4, #136	; 0x88
		keys = bt_keys_get_type(BT_KEYS_REMOTE_CSRK, conn->id,
    bff6:	4632      	mov	r2, r6
    bff8:	2010      	movs	r0, #16
    bffa:	7a21      	ldrb	r1, [r4, #8]
		struct bt_smp_signing_info *req = (void *)buf->data;
    bffc:	689f      	ldr	r7, [r3, #8]
		keys = bt_keys_get_type(BT_KEYS_REMOTE_CSRK, conn->id,
    bffe:	f007 ffc2 	bl	13f86 <bt_keys_get_type>
		if (!keys) {
    c002:	b990      	cbnz	r0, c02a <smp_signing_info+0x4a>
    c004:	4a13      	ldr	r2, [pc, #76]	; (c054 <smp_signing_info+0x74>)
    c006:	4c14      	ldr	r4, [pc, #80]	; (c058 <smp_signing_info+0x78>)
			BT_ERR("Unable to get keys for %s",
    c008:	4630      	mov	r0, r6
    c00a:	1aa4      	subs	r4, r4, r2
    c00c:	f7f8 fdac 	bl	4b68 <bt_addr_le_str_real>
    c010:	f7f5 fc14 	bl	183c <log_strdup>
    c014:	08e4      	lsrs	r4, r4, #3
    c016:	01a4      	lsls	r4, r4, #6
    c018:	f044 0401 	orr.w	r4, r4, #1
    c01c:	4601      	mov	r1, r0
    c01e:	4622      	mov	r2, r4
    c020:	480e      	ldr	r0, [pc, #56]	; (c05c <smp_signing_info+0x7c>)
    c022:	f004 fe54 	bl	10cce <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
    c026:	2008      	movs	r0, #8
}
    c028:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		memcpy(keys->remote_csrk.val, req->csrk,
    c02a:	2210      	movs	r2, #16
    c02c:	4639      	mov	r1, r7
    c02e:	3054      	adds	r0, #84	; 0x54
    c030:	f006 f973 	bl	1231a <memcpy>
	smp->remote_dist &= ~BT_SMP_DIST_SIGN;
    c034:	f895 31a1 	ldrb.w	r3, [r5, #417]	; 0x1a1
    c038:	f023 0304 	bic.w	r3, r3, #4
    c03c:	f885 31a1 	strb.w	r3, [r5, #417]	; 0x1a1
	if (!smp->local_dist && !smp->remote_dist) {
    c040:	f8b5 41a0 	ldrh.w	r4, [r5, #416]	; 0x1a0
    c044:	b91c      	cbnz	r4, c04e <smp_signing_info+0x6e>
		smp_pairing_complete(smp, 0);
    c046:	4621      	mov	r1, r4
    c048:	4628      	mov	r0, r5
    c04a:	f7ff fe67 	bl	bd1c <smp_pairing_complete>
	return 0;
    c04e:	2000      	movs	r0, #0
    c050:	e7ea      	b.n	c028 <smp_signing_info+0x48>
    c052:	bf00      	nop
    c054:	00015a00 	.word	0x00015a00
    c058:	00015a68 	.word	0x00015a68
    c05c:	00018a0c 	.word	0x00018a0c

0000c060 <smp_master_ident>:
{
    c060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c062:	4604      	mov	r4, r0
    c064:	460b      	mov	r3, r1
	struct bt_conn *conn = smp->chan.chan.conn;
    c066:	f850 5bbc 	ldr.w	r5, [r0], #188
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    c06a:	210d      	movs	r1, #13
    c06c:	f007 fce1 	bl	13a32 <atomic_test_bit>
    c070:	b368      	cbz	r0, c0ce <smp_master_ident+0x6e>
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
    c072:	f105 0788 	add.w	r7, r5, #136	; 0x88
    c076:	7a29      	ldrb	r1, [r5, #8]
    c078:	463a      	mov	r2, r7
    c07a:	2004      	movs	r0, #4
		struct bt_smp_master_ident *req = (void *)buf->data;
    c07c:	689e      	ldr	r6, [r3, #8]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
    c07e:	f007 ff82 	bl	13f86 <bt_keys_get_type>
		if (!keys) {
    c082:	4605      	mov	r5, r0
    c084:	b990      	cbnz	r0, c0ac <smp_master_ident+0x4c>
    c086:	4a1d      	ldr	r2, [pc, #116]	; (c0fc <smp_master_ident+0x9c>)
    c088:	4c1d      	ldr	r4, [pc, #116]	; (c100 <smp_master_ident+0xa0>)
			BT_ERR("Unable to get keys for %s",
    c08a:	4638      	mov	r0, r7
    c08c:	1aa4      	subs	r4, r4, r2
    c08e:	f7f8 fd6b 	bl	4b68 <bt_addr_le_str_real>
    c092:	f7f5 fbd3 	bl	183c <log_strdup>
    c096:	08e4      	lsrs	r4, r4, #3
    c098:	01a4      	lsls	r4, r4, #6
    c09a:	f044 0401 	orr.w	r4, r4, #1
    c09e:	4601      	mov	r1, r0
    c0a0:	4622      	mov	r2, r4
    c0a2:	4818      	ldr	r0, [pc, #96]	; (c104 <smp_master_ident+0xa4>)
    c0a4:	f004 fe13 	bl	10cce <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
    c0a8:	2008      	movs	r0, #8
}
    c0aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		memcpy(keys->ltk.ediv, req->ediv, sizeof(keys->ltk.ediv));
    c0ac:	2202      	movs	r2, #2
    c0ae:	4631      	mov	r1, r6
    c0b0:	3018      	adds	r0, #24
    c0b2:	f006 f932 	bl	1231a <memcpy>
		memcpy(keys->ltk.rand, req->rand, sizeof(req->rand));
    c0b6:	2208      	movs	r2, #8
    c0b8:	1cb1      	adds	r1, r6, #2
    c0ba:	f105 0010 	add.w	r0, r5, #16
    c0be:	f006 f92c 	bl	1231a <memcpy>
		smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
    c0c2:	f894 31a1 	ldrb.w	r3, [r4, #417]	; 0x1a1
    c0c6:	f023 0301 	bic.w	r3, r3, #1
    c0ca:	f884 31a1 	strb.w	r3, [r4, #417]	; 0x1a1
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
    c0ce:	f894 31a1 	ldrb.w	r3, [r4, #417]	; 0x1a1
    c0d2:	079a      	lsls	r2, r3, #30
    c0d4:	d50d      	bpl.n	c0f2 <smp_master_ident+0x92>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
    c0d6:	2108      	movs	r1, #8
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    c0d8:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    c0dc:	f007 fbe2 	bl	138a4 <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
    c0e0:	f8b4 51a0 	ldrh.w	r5, [r4, #416]	; 0x1a0
    c0e4:	b91d      	cbnz	r5, c0ee <smp_master_ident+0x8e>
		smp_pairing_complete(smp, 0);
    c0e6:	4629      	mov	r1, r5
    c0e8:	4620      	mov	r0, r4
    c0ea:	f7ff fe17 	bl	bd1c <smp_pairing_complete>
	return 0;
    c0ee:	2000      	movs	r0, #0
    c0f0:	e7db      	b.n	c0aa <smp_master_ident+0x4a>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    c0f2:	075b      	lsls	r3, r3, #29
    c0f4:	d5f4      	bpl.n	c0e0 <smp_master_ident+0x80>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    c0f6:	210a      	movs	r1, #10
    c0f8:	e7ee      	b.n	c0d8 <smp_master_ident+0x78>
    c0fa:	bf00      	nop
    c0fc:	00015a00 	.word	0x00015a00
    c100:	00015a68 	.word	0x00015a68
    c104:	00018a0c 	.word	0x00018a0c

0000c108 <bt_smp_encrypt_change>:
{
    c108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_conn *conn = chan->conn;
    c10c:	4605      	mov	r5, r0
{
    c10e:	460e      	mov	r6, r1
	struct bt_conn *conn = chan->conn;
    c110:	f855 7bbc 	ldr.w	r7, [r5], #188
{
    c114:	4604      	mov	r4, r0
    c116:	b089      	sub	sp, #36	; 0x24
	atomic_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    c118:	2101      	movs	r1, #1
    c11a:	4628      	mov	r0, r5
    c11c:	f007 fc62 	bl	139e4 <atomic_clear_bit>
	if (hci_status) {
    c120:	b946      	cbnz	r6, c134 <bt_smp_encrypt_change+0x2c>
	if (!conn->encrypt) {
    c122:	7afb      	ldrb	r3, [r7, #11]
    c124:	b133      	cbz	r3, c134 <bt_smp_encrypt_change+0x2c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    c126:	2103      	movs	r1, #3
    c128:	f007 fc83 	bl	13a32 <atomic_test_bit>
    c12c:	b928      	cbnz	r0, c13a <bt_smp_encrypt_change+0x32>
		smp_reset(smp);
    c12e:	4620      	mov	r0, r4
    c130:	f007 fd14 	bl	13b5c <smp_reset>
}
    c134:	b009      	add	sp, #36	; 0x24
    c136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    c13a:	2105      	movs	r1, #5
    c13c:	4628      	mov	r0, r5
    c13e:	f007 fc78 	bl	13a32 <atomic_test_bit>
    c142:	b198      	cbz	r0, c16c <bt_smp_encrypt_change+0x64>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
    c144:	f894 31a0 	ldrb.w	r3, [r4, #416]	; 0x1a0
    c148:	071a      	lsls	r2, r3, #28
    c14a:	d507      	bpl.n	c15c <bt_smp_encrypt_change+0x54>
    c14c:	f894 31a1 	ldrb.w	r3, [r4, #417]	; 0x1a1
    c150:	071b      	lsls	r3, r3, #28
    c152:	d503      	bpl.n	c15c <bt_smp_encrypt_change+0x54>
			atomic_set_bit(smp->flags, SMP_FLAG_DERIVE_LK);
    c154:	2111      	movs	r1, #17
    c156:	4628      	mov	r0, r5
    c158:	f007 fba4 	bl	138a4 <atomic_set_bit>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
    c15c:	f8b4 31a0 	ldrh.w	r3, [r4, #416]	; 0x1a0
    c160:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    c164:	f023 0308 	bic.w	r3, r3, #8
    c168:	f8a4 31a0 	strh.w	r3, [r4, #416]	; 0x1a0
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
    c16c:	f894 31a1 	ldrb.w	r3, [r4, #417]	; 0x1a1
    c170:	07df      	lsls	r7, r3, #31
    c172:	d51f      	bpl.n	c1b4 <bt_smp_encrypt_change+0xac>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
    c174:	2106      	movs	r1, #6
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    c176:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    c17a:	f007 fb93 	bl	138a4 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
    c17e:	2102      	movs	r1, #2
    c180:	4628      	mov	r0, r5
    c182:	f007 fb8f 	bl	138a4 <atomic_set_bit>
	struct bt_conn *conn = smp->chan.chan.conn;
    c186:	6826      	ldr	r6, [r4, #0]
	struct bt_keys *keys = conn->le.keys;
    c188:	f8d6 70b4 	ldr.w	r7, [r6, #180]	; 0xb4
	if (!keys) {
    c18c:	b9d7      	cbnz	r7, c1c4 <bt_smp_encrypt_change+0xbc>
    c18e:	4a93      	ldr	r2, [pc, #588]	; (c3dc <bt_smp_encrypt_change+0x2d4>)
    c190:	4c93      	ldr	r4, [pc, #588]	; (c3e0 <bt_smp_encrypt_change+0x2d8>)
		BT_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
    c192:	f106 0088 	add.w	r0, r6, #136	; 0x88
    c196:	1aa4      	subs	r4, r4, r2
    c198:	f7f8 fce6 	bl	4b68 <bt_addr_le_str_real>
    c19c:	f7f5 fb4e 	bl	183c <log_strdup>
    c1a0:	08e4      	lsrs	r4, r4, #3
    c1a2:	01a4      	lsls	r4, r4, #6
    c1a4:	f044 0401 	orr.w	r4, r4, #1
    c1a8:	4601      	mov	r1, r0
    c1aa:	4622      	mov	r2, r4
    c1ac:	488d      	ldr	r0, [pc, #564]	; (c3e4 <bt_smp_encrypt_change+0x2dc>)
    c1ae:	f004 fd8e 	bl	10cce <log_1>
		return BT_SMP_ERR_UNSPECIFIED;
    c1b2:	e7bf      	b.n	c134 <bt_smp_encrypt_change+0x2c>
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
    c1b4:	079e      	lsls	r6, r3, #30
    c1b6:	d501      	bpl.n	c1bc <bt_smp_encrypt_change+0xb4>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
    c1b8:	2108      	movs	r1, #8
    c1ba:	e7dc      	b.n	c176 <bt_smp_encrypt_change+0x6e>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    c1bc:	0758      	lsls	r0, r3, #29
    c1be:	d5de      	bpl.n	c17e <bt_smp_encrypt_change+0x76>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    c1c0:	210a      	movs	r1, #10
    c1c2:	e7d8      	b.n	c176 <bt_smp_encrypt_change+0x6e>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    c1c4:	2105      	movs	r1, #5
    c1c6:	f007 fc34 	bl	13a32 <atomic_test_bit>
    c1ca:	b9b0      	cbnz	r0, c1fa <bt_smp_encrypt_change+0xf2>
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
    c1cc:	f894 31a0 	ldrb.w	r3, [r4, #416]	; 0x1a0
    c1d0:	07d9      	lsls	r1, r3, #31
    c1d2:	d512      	bpl.n	c1fa <bt_smp_encrypt_change+0xf2>
	struct bt_keys *keys = conn->le.keys;
    c1d4:	6823      	ldr	r3, [r4, #0]
		if (bt_rand((void *)&rand, sizeof(rand))) {
    c1d6:	211a      	movs	r1, #26
    c1d8:	a801      	add	r0, sp, #4
	struct bt_keys *keys = conn->le.keys;
    c1da:	f8d3 80b4 	ldr.w	r8, [r3, #180]	; 0xb4
		if (bt_rand((void *)&rand, sizeof(rand))) {
    c1de:	f7fb fc53 	bl	7a88 <bt_rand>
    c1e2:	4682      	mov	sl, r0
    c1e4:	b300      	cbz	r0, c228 <bt_smp_encrypt_change+0x120>
    c1e6:	497e      	ldr	r1, [pc, #504]	; (c3e0 <bt_smp_encrypt_change+0x2d8>)
    c1e8:	4b7c      	ldr	r3, [pc, #496]	; (c3dc <bt_smp_encrypt_change+0x2d4>)
			BT_ERR("Unable to get random bytes");
    c1ea:	487f      	ldr	r0, [pc, #508]	; (c3e8 <bt_smp_encrypt_change+0x2e0>)
    c1ec:	1ac9      	subs	r1, r1, r3
    c1ee:	08c9      	lsrs	r1, r1, #3
    c1f0:	0189      	lsls	r1, r1, #6
    c1f2:	f041 0101 	orr.w	r1, r1, #1
			BT_ERR("Unable to allocate Encrypt Info buffer");
    c1f6:	f004 fd5d 	bl	10cb4 <log_0>
	if (smp->local_dist & BT_SMP_DIST_ID_KEY) {
    c1fa:	f894 31a0 	ldrb.w	r3, [r4, #416]	; 0x1a0
    c1fe:	079a      	lsls	r2, r3, #30
    c200:	f140 80ad 	bpl.w	c35e <bt_smp_encrypt_change+0x256>
		buf = smp_create_pdu(smp, BT_SMP_CMD_IDENT_INFO,
    c204:	2108      	movs	r1, #8
    c206:	4620      	mov	r0, r4
    c208:	f007 fc19 	bl	13a3e <smp_create_pdu.isra.0>
		if (!buf) {
    c20c:	4680      	mov	r8, r0
    c20e:	2800      	cmp	r0, #0
    c210:	d172      	bne.n	c2f8 <bt_smp_encrypt_change+0x1f0>
    c212:	4973      	ldr	r1, [pc, #460]	; (c3e0 <bt_smp_encrypt_change+0x2d8>)
    c214:	4b71      	ldr	r3, [pc, #452]	; (c3dc <bt_smp_encrypt_change+0x2d4>)
			BT_ERR("Unable to allocate Ident Info buffer");
    c216:	4875      	ldr	r0, [pc, #468]	; (c3ec <bt_smp_encrypt_change+0x2e4>)
    c218:	1ac9      	subs	r1, r1, r3
    c21a:	08c9      	lsrs	r1, r1, #3
    c21c:	0189      	lsls	r1, r1, #6
    c21e:	f041 0101 	orr.w	r1, r1, #1
			BT_ERR("Unable to allocate Ident Addr Info buffer");
    c222:	f004 fd47 	bl	10cb4 <log_0>
			return BT_SMP_ERR_UNSPECIFIED;
    c226:	e785      	b.n	c134 <bt_smp_encrypt_change+0x2c>
		buf = smp_create_pdu(smp, BT_SMP_CMD_ENCRYPT_INFO,
    c228:	2106      	movs	r1, #6
    c22a:	4620      	mov	r0, r4
    c22c:	f007 fc07 	bl	13a3e <smp_create_pdu.isra.0>
		if (!buf) {
    c230:	4681      	mov	r9, r0
    c232:	b940      	cbnz	r0, c246 <bt_smp_encrypt_change+0x13e>
    c234:	496a      	ldr	r1, [pc, #424]	; (c3e0 <bt_smp_encrypt_change+0x2d8>)
    c236:	4b69      	ldr	r3, [pc, #420]	; (c3dc <bt_smp_encrypt_change+0x2d4>)
			BT_ERR("Unable to allocate Encrypt Info buffer");
    c238:	486d      	ldr	r0, [pc, #436]	; (c3f0 <bt_smp_encrypt_change+0x2e8>)
    c23a:	1ac9      	subs	r1, r1, r3
    c23c:	08c9      	lsrs	r1, r1, #3
    c23e:	0189      	lsls	r1, r1, #6
    c240:	f041 0101 	orr.w	r1, r1, #1
    c244:	e7d7      	b.n	c1f6 <bt_smp_encrypt_change+0xee>
	return net_buf_simple_add(&buf->b, len);
    c246:	2110      	movs	r1, #16
    c248:	3008      	adds	r0, #8
    c24a:	f007 ff07 	bl	1405c <net_buf_simple_add>
		memcpy(info->ltk, rand.key, keys->enc_size);
    c24e:	f898 200c 	ldrb.w	r2, [r8, #12]
    c252:	a901      	add	r1, sp, #4
    c254:	4683      	mov	fp, r0
    c256:	f006 f860 	bl	1231a <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
    c25a:	f898 000c 	ldrb.w	r0, [r8, #12]
    c25e:	280f      	cmp	r0, #15
    c260:	d805      	bhi.n	c26e <bt_smp_encrypt_change+0x166>
			(void)memset(info->ltk + keys->enc_size, 0,
    c262:	f1c0 0210 	rsb	r2, r0, #16
    c266:	4651      	mov	r1, sl
    c268:	4458      	add	r0, fp
    c26a:	f006 f881 	bl	12370 <memset>
		smp_send(smp, buf, NULL, NULL);
    c26e:	4649      	mov	r1, r9
    c270:	2200      	movs	r2, #0
    c272:	4620      	mov	r0, r4
    c274:	f7ff f844 	bl	b300 <smp_send.isra.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_MASTER_IDENT,
    c278:	2107      	movs	r1, #7
    c27a:	4620      	mov	r0, r4
    c27c:	f007 fbdf 	bl	13a3e <smp_create_pdu.isra.0>
		if (!buf) {
    c280:	4681      	mov	r9, r0
    c282:	b940      	cbnz	r0, c296 <bt_smp_encrypt_change+0x18e>
    c284:	4956      	ldr	r1, [pc, #344]	; (c3e0 <bt_smp_encrypt_change+0x2d8>)
    c286:	4b55      	ldr	r3, [pc, #340]	; (c3dc <bt_smp_encrypt_change+0x2d4>)
			BT_ERR("Unable to allocate Master Ident buffer");
    c288:	485a      	ldr	r0, [pc, #360]	; (c3f4 <bt_smp_encrypt_change+0x2ec>)
    c28a:	1ac9      	subs	r1, r1, r3
    c28c:	08c9      	lsrs	r1, r1, #3
    c28e:	0189      	lsls	r1, r1, #6
    c290:	f041 0101 	orr.w	r1, r1, #1
    c294:	e7af      	b.n	c1f6 <bt_smp_encrypt_change+0xee>
    c296:	210a      	movs	r1, #10
    c298:	3008      	adds	r0, #8
    c29a:	f007 fedf 	bl	1405c <net_buf_simple_add>
    c29e:	4682      	mov	sl, r0
		memcpy(ident->rand, rand.rand, sizeof(ident->rand));
    c2a0:	2208      	movs	r2, #8
    c2a2:	a905      	add	r1, sp, #20
    c2a4:	3002      	adds	r0, #2
    c2a6:	f006 f838 	bl	1231a <memcpy>
		memcpy(ident->ediv, rand.ediv, sizeof(ident->ediv));
    c2aa:	2202      	movs	r2, #2
    c2ac:	a907      	add	r1, sp, #28
    c2ae:	4650      	mov	r0, sl
    c2b0:	f006 f833 	bl	1231a <memcpy>
		smp_send(smp, buf, smp_ident_sent, NULL);
    c2b4:	4649      	mov	r1, r9
    c2b6:	4620      	mov	r0, r4
    c2b8:	4a4f      	ldr	r2, [pc, #316]	; (c3f8 <bt_smp_encrypt_change+0x2f0>)
    c2ba:	f7ff f821 	bl	b300 <smp_send.isra.0>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    c2be:	210d      	movs	r1, #13
    c2c0:	4628      	mov	r0, r5
    c2c2:	f007 fbb6 	bl	13a32 <atomic_test_bit>
    c2c6:	2800      	cmp	r0, #0
    c2c8:	d097      	beq.n	c1fa <bt_smp_encrypt_change+0xf2>
			bt_keys_add_type(keys, BT_KEYS_SLAVE_LTK);
    c2ca:	4640      	mov	r0, r8
    c2cc:	2101      	movs	r1, #1
    c2ce:	f007 fe6a 	bl	13fa6 <bt_keys_add_type>
			memcpy(keys->slave_ltk.val, rand.key,
    c2d2:	a901      	add	r1, sp, #4
    c2d4:	2210      	movs	r2, #16
    c2d6:	f108 0072 	add.w	r0, r8, #114	; 0x72
    c2da:	f006 f81e 	bl	1231a <memcpy>
			memcpy(keys->slave_ltk.rand, rand.rand,
    c2de:	a905      	add	r1, sp, #20
    c2e0:	2208      	movs	r2, #8
    c2e2:	f108 0068 	add.w	r0, r8, #104	; 0x68
    c2e6:	f006 f818 	bl	1231a <memcpy>
			memcpy(keys->slave_ltk.ediv, rand.ediv,
    c2ea:	2202      	movs	r2, #2
    c2ec:	a907      	add	r1, sp, #28
    c2ee:	f108 0070 	add.w	r0, r8, #112	; 0x70
    c2f2:	f006 f812 	bl	1231a <memcpy>
    c2f6:	e780      	b.n	c1fa <bt_smp_encrypt_change+0xf2>
    c2f8:	2110      	movs	r1, #16
    c2fa:	3008      	adds	r0, #8
    c2fc:	f007 feae 	bl	1405c <net_buf_simple_add>
		memcpy(id_info->irk, bt_dev.irk[conn->id], 16);
    c300:	f44f 739c 	mov.w	r3, #312	; 0x138
    c304:	2210      	movs	r2, #16
    c306:	7a31      	ldrb	r1, [r6, #8]
    c308:	f8df 9100 	ldr.w	r9, [pc, #256]	; c40c <bt_smp_encrypt_change+0x304>
    c30c:	fb12 3101 	smlabb	r1, r2, r1, r3
    c310:	4449      	add	r1, r9
    c312:	f006 f802 	bl	1231a <memcpy>
		smp_send(smp, buf, NULL, NULL);
    c316:	4641      	mov	r1, r8
    c318:	2200      	movs	r2, #0
    c31a:	4620      	mov	r0, r4
    c31c:	f7fe fff0 	bl	b300 <smp_send.isra.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_IDENT_ADDR_INFO,
    c320:	2109      	movs	r1, #9
    c322:	4620      	mov	r0, r4
    c324:	f007 fb8b 	bl	13a3e <smp_create_pdu.isra.0>
		if (!buf) {
    c328:	4680      	mov	r8, r0
    c32a:	b940      	cbnz	r0, c33e <bt_smp_encrypt_change+0x236>
    c32c:	492c      	ldr	r1, [pc, #176]	; (c3e0 <bt_smp_encrypt_change+0x2d8>)
    c32e:	4b2b      	ldr	r3, [pc, #172]	; (c3dc <bt_smp_encrypt_change+0x2d4>)
			BT_ERR("Unable to allocate Ident Addr Info buffer");
    c330:	4832      	ldr	r0, [pc, #200]	; (c3fc <bt_smp_encrypt_change+0x2f4>)
    c332:	1ac9      	subs	r1, r1, r3
    c334:	08c9      	lsrs	r1, r1, #3
    c336:	0189      	lsls	r1, r1, #6
    c338:	f041 0101 	orr.w	r1, r1, #1
    c33c:	e771      	b.n	c222 <bt_smp_encrypt_change+0x11a>
    c33e:	2107      	movs	r1, #7
    c340:	3008      	adds	r0, #8
    c342:	f007 fe8b 	bl	1405c <net_buf_simple_add>
		bt_addr_le_copy(&id_addr_info->addr, &bt_dev.id_addr[conn->id]);
    c346:	7a31      	ldrb	r1, [r6, #8]
	memcpy(dst, src, sizeof(*dst));
    c348:	2207      	movs	r2, #7
    c34a:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    c34e:	4449      	add	r1, r9
    c350:	f005 ffe3 	bl	1231a <memcpy>
		smp_send(smp, buf, smp_id_sent, NULL);
    c354:	4641      	mov	r1, r8
    c356:	4620      	mov	r0, r4
    c358:	4a29      	ldr	r2, [pc, #164]	; (c400 <bt_smp_encrypt_change+0x2f8>)
    c35a:	f7fe ffd1 	bl	b300 <smp_send.isra.0>
	if (smp->local_dist & BT_SMP_DIST_SIGN) {
    c35e:	f894 31a0 	ldrb.w	r3, [r4, #416]	; 0x1a0
    c362:	075b      	lsls	r3, r3, #29
    c364:	d530      	bpl.n	c3c8 <bt_smp_encrypt_change+0x2c0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_SIGNING_INFO,
    c366:	210a      	movs	r1, #10
    c368:	4620      	mov	r0, r4
    c36a:	f007 fb68 	bl	13a3e <smp_create_pdu.isra.0>
		if (!buf) {
    c36e:	4606      	mov	r6, r0
    c370:	b940      	cbnz	r0, c384 <bt_smp_encrypt_change+0x27c>
    c372:	491b      	ldr	r1, [pc, #108]	; (c3e0 <bt_smp_encrypt_change+0x2d8>)
    c374:	4b19      	ldr	r3, [pc, #100]	; (c3dc <bt_smp_encrypt_change+0x2d4>)
			BT_ERR("Unable to allocate Signing Info buffer");
    c376:	4823      	ldr	r0, [pc, #140]	; (c404 <bt_smp_encrypt_change+0x2fc>)
    c378:	1ac9      	subs	r1, r1, r3
    c37a:	08c9      	lsrs	r1, r1, #3
    c37c:	0189      	lsls	r1, r1, #6
    c37e:	f041 0101 	orr.w	r1, r1, #1
    c382:	e74e      	b.n	c222 <bt_smp_encrypt_change+0x11a>
    c384:	2110      	movs	r1, #16
    c386:	3008      	adds	r0, #8
    c388:	f007 fe68 	bl	1405c <net_buf_simple_add>
		if (bt_rand(info->csrk, sizeof(info->csrk))) {
    c38c:	2110      	movs	r1, #16
    c38e:	4681      	mov	r9, r0
    c390:	f7fb fb7a 	bl	7a88 <bt_rand>
    c394:	4680      	mov	r8, r0
    c396:	2800      	cmp	r0, #0
    c398:	f47f aecc 	bne.w	c134 <bt_smp_encrypt_change+0x2c>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    c39c:	210d      	movs	r1, #13
    c39e:	4628      	mov	r0, r5
    c3a0:	f007 fb47 	bl	13a32 <atomic_test_bit>
    c3a4:	b158      	cbz	r0, c3be <bt_smp_encrypt_change+0x2b6>
			bt_keys_add_type(keys, BT_KEYS_LOCAL_CSRK);
    c3a6:	2108      	movs	r1, #8
    c3a8:	4638      	mov	r0, r7
    c3aa:	f007 fdfc 	bl	13fa6 <bt_keys_add_type>
			memcpy(keys->local_csrk.val, info->csrk, 16);
    c3ae:	2210      	movs	r2, #16
    c3b0:	4649      	mov	r1, r9
    c3b2:	f107 0040 	add.w	r0, r7, #64	; 0x40
    c3b6:	f005 ffb0 	bl	1231a <memcpy>
			keys->local_csrk.cnt = 0U;
    c3ba:	f8c7 8050 	str.w	r8, [r7, #80]	; 0x50
		smp_send(smp, buf, smp_sign_info_sent, NULL);
    c3be:	4631      	mov	r1, r6
    c3c0:	4620      	mov	r0, r4
    c3c2:	4a11      	ldr	r2, [pc, #68]	; (c408 <bt_smp_encrypt_change+0x300>)
    c3c4:	f7fe ff9c 	bl	b300 <smp_send.isra.0>
	if (!smp->local_dist && !smp->remote_dist) {
    c3c8:	f8b4 11a0 	ldrh.w	r1, [r4, #416]	; 0x1a0
    c3cc:	2900      	cmp	r1, #0
    c3ce:	f47f aeb1 	bne.w	c134 <bt_smp_encrypt_change+0x2c>
		smp_pairing_complete(smp, 0);
    c3d2:	4620      	mov	r0, r4
    c3d4:	f7ff fca2 	bl	bd1c <smp_pairing_complete>
    c3d8:	e6ac      	b.n	c134 <bt_smp_encrypt_change+0x2c>
    c3da:	bf00      	nop
    c3dc:	00015a00 	.word	0x00015a00
    c3e0:	00015a68 	.word	0x00015a68
    c3e4:	00018b27 	.word	0x00018b27
    c3e8:	00018b3c 	.word	0x00018b3c
    c3ec:	00018ba5 	.word	0x00018ba5
    c3f0:	00018b57 	.word	0x00018b57
    c3f4:	00018b7e 	.word	0x00018b7e
    c3f8:	00013c97 	.word	0x00013c97
    c3fc:	00018bca 	.word	0x00018bca
    c400:	00013ca3 	.word	0x00013ca3
    c404:	00018bf4 	.word	0x00018bf4
    c408:	00013c89 	.word	0x00013c89
    c40c:	20000000 	.word	0x20000000

0000c410 <smp_pairing_confirm>:
{
    c410:	b570      	push	{r4, r5, r6, lr}
    c412:	4604      	mov	r4, r0
	struct bt_smp_pairing_confirm *req = (void *)buf->data;
    c414:	688e      	ldr	r6, [r1, #8]
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
    c416:	f100 05bc 	add.w	r5, r0, #188	; 0xbc
    c41a:	210b      	movs	r1, #11
    c41c:	4628      	mov	r0, r5
    c41e:	f007 fae1 	bl	139e4 <atomic_clear_bit>
	memcpy(smp->pcnf, req->val, sizeof(smp->pcnf));
    c422:	4631      	mov	r1, r6
    c424:	2210      	movs	r2, #16
    c426:	f104 00cf 	add.w	r0, r4, #207	; 0xcf
    c42a:	f005 ff76 	bl	1231a <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    c42e:	2105      	movs	r1, #5
    c430:	4628      	mov	r0, r5
    c432:	f007 fafe 	bl	13a32 <atomic_test_bit>
    c436:	b920      	cbnz	r0, c442 <smp_pairing_confirm+0x32>
		return legacy_pairing_confirm(smp);
    c438:	4620      	mov	r0, r4
}
    c43a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return legacy_pairing_confirm(smp);
    c43e:	f007 bc92 	b.w	13d66 <legacy_pairing_confirm>
	switch (smp->method) {
    c442:	f894 10c0 	ldrb.w	r1, [r4, #192]	; 0xc0
    c446:	2901      	cmp	r1, #1
    c448:	d00b      	beq.n	c462 <smp_pairing_confirm+0x52>
    c44a:	2902      	cmp	r1, #2
    c44c:	d115      	bne.n	c47a <smp_pairing_confirm+0x6a>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    c44e:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    c452:	2104      	movs	r1, #4
    c454:	f007 fa26 	bl	138a4 <atomic_set_bit>
		return smp_send_pairing_confirm(smp);
    c458:	4620      	mov	r0, r4
}
    c45a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return smp_send_pairing_confirm(smp);
    c45e:	f7fe bf75 	b.w	b34c <smp_send_pairing_confirm>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    c462:	210a      	movs	r1, #10
    c464:	4628      	mov	r0, r5
    c466:	f007 fae4 	bl	13a32 <atomic_test_bit>
    c46a:	2800      	cmp	r0, #0
    c46c:	d0ef      	beq.n	c44e <smp_pairing_confirm+0x3e>
			atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
    c46e:	4628      	mov	r0, r5
    c470:	2100      	movs	r1, #0
    c472:	f007 fa17 	bl	138a4 <atomic_set_bit>
			return 0;
    c476:	2000      	movs	r0, #0
}
    c478:	bd70      	pop	{r4, r5, r6, pc}
    c47a:	4b06      	ldr	r3, [pc, #24]	; (c494 <smp_pairing_confirm+0x84>)
    c47c:	4a06      	ldr	r2, [pc, #24]	; (c498 <smp_pairing_confirm+0x88>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
    c47e:	4807      	ldr	r0, [pc, #28]	; (c49c <smp_pairing_confirm+0x8c>)
    c480:	1ad2      	subs	r2, r2, r3
    c482:	08d2      	lsrs	r2, r2, #3
    c484:	0192      	lsls	r2, r2, #6
    c486:	f042 0201 	orr.w	r2, r2, #1
    c48a:	f004 fc20 	bl	10cce <log_1>
		return BT_SMP_ERR_UNSPECIFIED;
    c48e:	2008      	movs	r0, #8
    c490:	e7f2      	b.n	c478 <smp_pairing_confirm+0x68>
    c492:	bf00      	nop
    c494:	00015a00 	.word	0x00015a00
    c498:	00015a68 	.word	0x00015a68
    c49c:	0001894e 	.word	0x0001894e

0000c4a0 <smp_pairing_random>:
{
    c4a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c4a4:	4604      	mov	r4, r0
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    c4a6:	f100 07ef 	add.w	r7, r0, #239	; 0xef
    c4aa:	6889      	ldr	r1, [r1, #8]
{
    c4ac:	b09e      	sub	sp, #120	; 0x78
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    c4ae:	2210      	movs	r2, #16
    c4b0:	4638      	mov	r0, r7
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    c4b2:	f104 06bc 	add.w	r6, r4, #188	; 0xbc
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    c4b6:	f005 ff30 	bl	1231a <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    c4ba:	2105      	movs	r1, #5
    c4bc:	4630      	mov	r0, r6
    c4be:	f007 fab8 	bl	13a32 <atomic_test_bit>
    c4c2:	2800      	cmp	r0, #0
    c4c4:	d146      	bne.n	c554 <smp_pairing_random+0xb4>
	struct bt_conn *conn = smp->chan.chan.conn;
    c4c6:	46a0      	mov	r8, r4
    c4c8:	f858 3bff 	ldr.w	r3, [r8], #255
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    c4cc:	ad0a      	add	r5, sp, #40	; 0x28
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
    c4ce:	f103 0296 	add.w	r2, r3, #150	; 0x96
    c4d2:	338f      	adds	r3, #143	; 0x8f
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    c4d4:	9201      	str	r2, [sp, #4]
    c4d6:	9300      	str	r3, [sp, #0]
    c4d8:	4639      	mov	r1, r7
    c4da:	4640      	mov	r0, r8
    c4dc:	9502      	str	r5, [sp, #8]
    c4de:	f104 03c8 	add.w	r3, r4, #200	; 0xc8
    c4e2:	f104 02c1 	add.w	r2, r4, #193	; 0xc1
    c4e6:	f007 fbe3 	bl	13cb0 <smp_c1>
	if (err) {
    c4ea:	bb18      	cbnz	r0, c534 <smp_pairing_random+0x94>
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
    c4ec:	2210      	movs	r2, #16
    c4ee:	4629      	mov	r1, r5
    c4f0:	f104 00cf 	add.w	r0, r4, #207	; 0xcf
    c4f4:	f005 ff01 	bl	122fa <memcmp>
    c4f8:	2800      	cmp	r0, #0
    c4fa:	f040 8096 	bne.w	c62a <smp_pairing_random+0x18a>
	memcpy(out, r2, 8);
    c4fe:	2208      	movs	r2, #8
    c500:	4639      	mov	r1, r7
    c502:	4628      	mov	r0, r5
    c504:	f005 ff09 	bl	1231a <memcpy>
	memcpy(out + 8, r1, 8);
    c508:	2208      	movs	r2, #8
    c50a:	f104 01df 	add.w	r1, r4, #223	; 0xdf
    c50e:	a80c      	add	r0, sp, #48	; 0x30
    c510:	f005 ff03 	bl	1231a <memcpy>
	return bt_encrypt_le(k, out, out);
    c514:	462a      	mov	r2, r5
    c516:	4629      	mov	r1, r5
    c518:	4640      	mov	r0, r8
    c51a:	f006 f97a 	bl	12812 <bt_encrypt_le>
		if (err) {
    c51e:	b158      	cbz	r0, c538 <smp_pairing_random+0x98>
    c520:	4975      	ldr	r1, [pc, #468]	; (c6f8 <smp_pairing_random+0x258>)
    c522:	4b76      	ldr	r3, [pc, #472]	; (c6fc <smp_pairing_random+0x25c>)
			BT_ERR("Calculate STK failed");
    c524:	4876      	ldr	r0, [pc, #472]	; (c700 <smp_pairing_random+0x260>)
    c526:	1ac9      	subs	r1, r1, r3
    c528:	08c9      	lsrs	r1, r1, #3
    c52a:	0189      	lsls	r1, r1, #6
    c52c:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Calculate confirm failed");
    c530:	f004 fbc0 	bl	10cb4 <log_0>
		return BT_SMP_ERR_UNSPECIFIED;
    c534:	2508      	movs	r5, #8
    c536:	e079      	b.n	c62c <smp_pairing_random+0x18c>
		memcpy(smp->tk, tmp, sizeof(smp->tk));
    c538:	4629      	mov	r1, r5
    c53a:	2210      	movs	r2, #16
    c53c:	4640      	mov	r0, r8
    c53e:	f005 feec 	bl	1231a <memcpy>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    c542:	2101      	movs	r1, #1
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    c544:	4630      	mov	r0, r6
    c546:	f007 f9ad 	bl	138a4 <atomic_set_bit>
	return smp_send_pairing_random(smp);
    c54a:	4620      	mov	r0, r4
    c54c:	f007 fa97 	bl	13a7e <smp_send_pairing_random>
    c550:	4605      	mov	r5, r0
    c552:	e06b      	b.n	c62c <smp_pairing_random+0x18c>
	switch (smp->method) {
    c554:	f894 10c0 	ldrb.w	r1, [r4, #192]	; 0xc0
    c558:	2905      	cmp	r1, #5
    c55a:	f200 80ae 	bhi.w	c6ba <smp_pairing_random+0x21a>
    c55e:	e8df f001 	tbb	[pc, r1]
    c562:	413a      	.short	0x413a
    c564:	8eac0341 	.word	0x8eac0341
		if (smp_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd,
    c568:	4b66      	ldr	r3, [pc, #408]	; (c704 <smp_pairing_random+0x264>)
	sys_memcpy_swap(m, u, 32);
    c56a:	2220      	movs	r2, #32
		if (smp_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd,
    c56c:	681d      	ldr	r5, [r3, #0]
	sys_memcpy_swap(m, u, 32);
    c56e:	f204 110f 	addw	r1, r4, #271	; 0x10f
    c572:	a80a      	add	r0, sp, #40	; 0x28
    c574:	f007 f97d 	bl	13872 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
    c578:	2220      	movs	r2, #32
    c57a:	4629      	mov	r1, r5
    c57c:	a812      	add	r0, sp, #72	; 0x48
    c57e:	f007 f978 	bl	13872 <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
    c582:	2210      	movs	r2, #16
    c584:	f104 01df 	add.w	r1, r4, #223	; 0xdf
    c588:	a81a      	add	r0, sp, #104	; 0x68
    c58a:	f007 f972 	bl	13872 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
    c58e:	2210      	movs	r2, #16
    c590:	4639      	mov	r1, r7
    c592:	a806      	add	r0, sp, #24
    c594:	f007 f96d 	bl	13872 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), xs);
    c598:	ab06      	add	r3, sp, #24
    c59a:	2250      	movs	r2, #80	; 0x50
    c59c:	4618      	mov	r0, r3
    c59e:	a90a      	add	r1, sp, #40	; 0x28
    c5a0:	f007 f991 	bl	138c6 <bt_smp_aes_cmac>
	if (err) {
    c5a4:	2800      	cmp	r0, #0
    c5a6:	d1c5      	bne.n	c534 <smp_pairing_random+0x94>
	memcpy(passkey, xs + 12, 4);
    c5a8:	2204      	movs	r2, #4
    c5aa:	a909      	add	r1, sp, #36	; 0x24
    c5ac:	a805      	add	r0, sp, #20
    c5ae:	f005 feb4 	bl	1231a <memcpy>
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
    c5b2:	9b05      	ldr	r3, [sp, #20]
    c5b4:	4954      	ldr	r1, [pc, #336]	; (c708 <smp_pairing_random+0x268>)
    c5b6:	ba1b      	rev	r3, r3
    c5b8:	fbb3 f2f1 	udiv	r2, r3, r1
    c5bc:	fb01 3312 	mls	r3, r1, r2, r3
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    c5c0:	4630      	mov	r0, r6
    c5c2:	210a      	movs	r1, #10
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
    c5c4:	9305      	str	r3, [sp, #20]
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    c5c6:	f007 f96d 	bl	138a4 <atomic_set_bit>
		bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
    c5ca:	4b50      	ldr	r3, [pc, #320]	; (c70c <smp_pairing_random+0x26c>)
    c5cc:	9905      	ldr	r1, [sp, #20]
    c5ce:	681b      	ldr	r3, [r3, #0]
    c5d0:	6820      	ldr	r0, [r4, #0]
    c5d2:	689b      	ldr	r3, [r3, #8]
    c5d4:	4798      	blx	r3
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
    c5d6:	210d      	movs	r1, #13
    c5d8:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    c5dc:	f007 f962 	bl	138a4 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    c5e0:	2110      	movs	r1, #16
    c5e2:	e7af      	b.n	c544 <smp_pairing_random+0xa4>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    c5e4:	f894 2194 	ldrb.w	r2, [r4, #404]	; 0x194
    c5e8:	f8d4 3190 	ldr.w	r3, [r4, #400]	; 0x190
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
    c5ec:	4945      	ldr	r1, [pc, #276]	; (c704 <smp_pairing_random+0x264>)
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    c5ee:	40d3      	lsrs	r3, r2
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
    c5f0:	ad0a      	add	r5, sp, #40	; 0x28
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    c5f2:	f003 0301 	and.w	r3, r3, #1
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
    c5f6:	9500      	str	r5, [sp, #0]
    c5f8:	463a      	mov	r2, r7
    c5fa:	6809      	ldr	r1, [r1, #0]
    c5fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c600:	f204 100f 	addw	r0, r4, #271	; 0x10f
    c604:	f007 f97b 	bl	138fe <smp_f4>
    c608:	b140      	cbz	r0, c61c <smp_pairing_random+0x17c>
    c60a:	493b      	ldr	r1, [pc, #236]	; (c6f8 <smp_pairing_random+0x258>)
    c60c:	4b3b      	ldr	r3, [pc, #236]	; (c6fc <smp_pairing_random+0x25c>)
		BT_ERR("Calculate confirm failed");
    c60e:	4840      	ldr	r0, [pc, #256]	; (c710 <smp_pairing_random+0x270>)
    c610:	1ac9      	subs	r1, r1, r3
    c612:	08c9      	lsrs	r1, r1, #3
    c614:	0189      	lsls	r1, r1, #6
    c616:	f041 0101 	orr.w	r1, r1, #1
    c61a:	e789      	b.n	c530 <smp_pairing_random+0x90>
	if (memcmp(smp->pcnf, cfm, 16)) {
    c61c:	2210      	movs	r2, #16
    c61e:	4629      	mov	r1, r5
    c620:	f104 00cf 	add.w	r0, r4, #207	; 0xcf
    c624:	f005 fe69 	bl	122fa <memcmp>
    c628:	b120      	cbz	r0, c634 <smp_pairing_random+0x194>
		return BT_SMP_ERR_CONFIRM_FAILED;
    c62a:	2504      	movs	r5, #4
}
    c62c:	4628      	mov	r0, r5
    c62e:	b01e      	add	sp, #120	; 0x78
    c630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		atomic_set_bit(&smp->allowed_cmds,
    c634:	f104 07b8 	add.w	r7, r4, #184	; 0xb8
    c638:	2103      	movs	r1, #3
    c63a:	4638      	mov	r0, r7
    c63c:	f007 f932 	bl	138a4 <atomic_set_bit>
		err = smp_send_pairing_random(smp);
    c640:	4620      	mov	r0, r4
    c642:	f007 fa1c 	bl	13a7e <smp_send_pairing_random>
		if (err) {
    c646:	4605      	mov	r5, r0
    c648:	2800      	cmp	r0, #0
    c64a:	d1ef      	bne.n	c62c <smp_pairing_random+0x18c>
		smp->passkey_round++;
    c64c:	f894 3194 	ldrb.w	r3, [r4, #404]	; 0x194
    c650:	3301      	adds	r3, #1
    c652:	b2db      	uxtb	r3, r3
		if (smp->passkey_round == 20U) {
    c654:	2b14      	cmp	r3, #20
		smp->passkey_round++;
    c656:	f884 3194 	strb.w	r3, [r4, #404]	; 0x194
		if (smp->passkey_round == 20U) {
    c65a:	d108      	bne.n	c66e <smp_pairing_random+0x1ce>
			atomic_set_bit(&smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
    c65c:	4638      	mov	r0, r7
    c65e:	210d      	movs	r1, #13
    c660:	f007 f920 	bl	138a4 <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    c664:	2110      	movs	r1, #16
    c666:	4630      	mov	r0, r6
    c668:	f007 f91c 	bl	138a4 <atomic_set_bit>
			return 0;
    c66c:	e7de      	b.n	c62c <smp_pairing_random+0x18c>
		if (bt_rand(smp->prnd, 16)) {
    c66e:	2110      	movs	r1, #16
    c670:	f104 00df 	add.w	r0, r4, #223	; 0xdf
    c674:	f7fb fa08 	bl	7a88 <bt_rand>
    c678:	2800      	cmp	r0, #0
    c67a:	d0d7      	beq.n	c62c <smp_pairing_random+0x18c>
    c67c:	e75a      	b.n	c534 <smp_pairing_random+0x94>
		if (bt_rand(smp->prnd, 16)) {
    c67e:	2110      	movs	r1, #16
    c680:	f104 00df 	add.w	r0, r4, #223	; 0xdf
    c684:	f7fb fa00 	bl	7a88 <bt_rand>
    c688:	2800      	cmp	r0, #0
    c68a:	f47f af53 	bne.w	c534 <smp_pairing_random+0x94>
		if (bt_auth && bt_auth->oob_data_request) {
    c68e:	4f1f      	ldr	r7, [pc, #124]	; (c70c <smp_pairing_random+0x26c>)
    c690:	683b      	ldr	r3, [r7, #0]
    c692:	b1eb      	cbz	r3, c6d0 <smp_pairing_random+0x230>
    c694:	68db      	ldr	r3, [r3, #12]
    c696:	b1db      	cbz	r3, c6d0 <smp_pairing_random+0x230>
			struct bt_conn_oob_info info = {
    c698:	4b1e      	ldr	r3, [pc, #120]	; (c714 <smp_pairing_random+0x274>)
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
    c69a:	f894 20c3 	ldrb.w	r2, [r4, #195]	; 0xc3
			struct bt_conn_oob_info info = {
    c69e:	881b      	ldrh	r3, [r3, #0]
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
    c6a0:	07d2      	lsls	r2, r2, #31
			struct bt_conn_oob_info info = {
    c6a2:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
    c6a6:	f894 30ca 	ldrb.w	r3, [r4, #202]	; 0xca
    c6aa:	f003 0301 	and.w	r3, r3, #1
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
    c6ae:	d411      	bmi.n	c6d4 <smp_pairing_random+0x234>
				     BT_CONN_OOB_BOTH_PEERS :
    c6b0:	2b00      	cmp	r3, #0
    c6b2:	bf0c      	ite	eq
    c6b4:	2003      	moveq	r0, #3
    c6b6:	2001      	movne	r0, #1
    c6b8:	e00f      	b.n	c6da <smp_pairing_random+0x23a>
    c6ba:	4b10      	ldr	r3, [pc, #64]	; (c6fc <smp_pairing_random+0x25c>)
    c6bc:	4a0e      	ldr	r2, [pc, #56]	; (c6f8 <smp_pairing_random+0x258>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
    c6be:	4816      	ldr	r0, [pc, #88]	; (c718 <smp_pairing_random+0x278>)
    c6c0:	1ad2      	subs	r2, r2, r3
    c6c2:	08d2      	lsrs	r2, r2, #3
    c6c4:	0192      	lsls	r2, r2, #6
    c6c6:	f042 0201 	orr.w	r2, r2, #1
    c6ca:	f004 fb00 	bl	10cce <log_1>
    c6ce:	e731      	b.n	c534 <smp_pairing_random+0x94>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
    c6d0:	2502      	movs	r5, #2
    c6d2:	e7ab      	b.n	c62c <smp_pairing_random+0x18c>
				     BT_CONN_OOB_BOTH_PEERS :
    c6d4:	2b00      	cmp	r3, #0
    c6d6:	bf18      	it	ne
    c6d8:	2002      	movne	r0, #2
			smp->oobd_local = NULL;
    c6da:	2500      	movs	r5, #0
	info->lesc.oob_config = oob_config;
    c6dc:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
    c6e0:	210c      	movs	r1, #12
    c6e2:	4630      	mov	r0, r6
			smp->oobd_remote = NULL;
    c6e4:	e9c4 5566 	strd	r5, r5, [r4, #408]	; 0x198
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
    c6e8:	f007 f8dc 	bl	138a4 <atomic_set_bit>
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
    c6ec:	683b      	ldr	r3, [r7, #0]
    c6ee:	6820      	ldr	r0, [r4, #0]
    c6f0:	68db      	ldr	r3, [r3, #12]
    c6f2:	a90a      	add	r1, sp, #40	; 0x28
    c6f4:	4798      	blx	r3
			return 0;
    c6f6:	e799      	b.n	c62c <smp_pairing_random+0x18c>
    c6f8:	00015a68 	.word	0x00015a68
    c6fc:	00015a00 	.word	0x00015a00
    c700:	00018c1b 	.word	0x00018c1b
    c704:	20001a4c 	.word	0x20001a4c
    c708:	000f4240 	.word	0x000f4240
    c70c:	200019b8 	.word	0x200019b8
    c710:	00018c30 	.word	0x00018c30
    c714:	00015bb5 	.word	0x00015bb5
    c718:	0001894e 	.word	0x0001894e

0000c71c <smp_ident_addr_info>:
{
    c71c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
    c720:	688e      	ldr	r6, [r1, #8]
{
    c722:	4604      	mov	r4, r0
	if (addr->type == BT_ADDR_LE_PUBLIC) {
    c724:	7833      	ldrb	r3, [r6, #0]
	struct bt_conn *conn = smp->chan.chan.conn;
    c726:	6805      	ldr	r5, [r0, #0]
    c728:	b31b      	cbz	r3, c772 <smp_ident_addr_info+0x56>
	if (!bt_addr_le_is_identity(&req->addr)) {
    c72a:	79b3      	ldrb	r3, [r6, #6]
    c72c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    c730:	2bc0      	cmp	r3, #192	; 0xc0
    c732:	d01e      	beq.n	c772 <smp_ident_addr_info+0x56>
    c734:	4b43      	ldr	r3, [pc, #268]	; (c844 <smp_ident_addr_info+0x128>)
    c736:	4c44      	ldr	r4, [pc, #272]	; (c848 <smp_ident_addr_info+0x12c>)
		BT_ERR("Invalid identity %s", bt_addr_le_str(&req->addr));
    c738:	4630      	mov	r0, r6
    c73a:	1ae4      	subs	r4, r4, r3
    c73c:	f7f8 fa14 	bl	4b68 <bt_addr_le_str_real>
    c740:	f7f5 f87c 	bl	183c <log_strdup>
    c744:	08e4      	lsrs	r4, r4, #3
    c746:	01a4      	lsls	r4, r4, #6
    c748:	f044 0401 	orr.w	r4, r4, #1
    c74c:	4601      	mov	r1, r0
    c74e:	4622      	mov	r2, r4
    c750:	483e      	ldr	r0, [pc, #248]	; (c84c <smp_ident_addr_info+0x130>)
    c752:	f004 fabc 	bl	10cce <log_1>
		BT_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
    c756:	f105 0088 	add.w	r0, r5, #136	; 0x88
    c75a:	f7f8 fa05 	bl	4b68 <bt_addr_le_str_real>
    c75e:	f7f5 f86d 	bl	183c <log_strdup>
    c762:	4622      	mov	r2, r4
    c764:	4601      	mov	r1, r0
    c766:	483a      	ldr	r0, [pc, #232]	; (c850 <smp_ident_addr_info+0x134>)
    c768:	f004 fab1 	bl	10cce <log_1>
		return BT_SMP_ERR_INVALID_PARAMS;
    c76c:	200a      	movs	r0, #10
}
    c76e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    c772:	210d      	movs	r1, #13
    c774:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
    c778:	f007 f95b 	bl	13a32 <atomic_test_bit>
    c77c:	2800      	cmp	r0, #0
    c77e:	d048      	beq.n	c812 <smp_ident_addr_info+0xf6>
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
    c780:	f105 0788 	add.w	r7, r5, #136	; 0x88
    c784:	463a      	mov	r2, r7
    c786:	2002      	movs	r0, #2
    c788:	7a29      	ldrb	r1, [r5, #8]
    c78a:	f007 fbfc 	bl	13f86 <bt_keys_get_type>
		if (!keys) {
    c78e:	4680      	mov	r8, r0
    c790:	b990      	cbnz	r0, c7b8 <smp_ident_addr_info+0x9c>
    c792:	4a2c      	ldr	r2, [pc, #176]	; (c844 <smp_ident_addr_info+0x128>)
    c794:	4c2c      	ldr	r4, [pc, #176]	; (c848 <smp_ident_addr_info+0x12c>)
			BT_ERR("Unable to get keys for %s",
    c796:	4638      	mov	r0, r7
    c798:	1aa4      	subs	r4, r4, r2
    c79a:	f7f8 f9e5 	bl	4b68 <bt_addr_le_str_real>
    c79e:	f7f5 f84d 	bl	183c <log_strdup>
    c7a2:	08e4      	lsrs	r4, r4, #3
    c7a4:	01a4      	lsls	r4, r4, #6
    c7a6:	f044 0401 	orr.w	r4, r4, #1
    c7aa:	4601      	mov	r1, r0
    c7ac:	4622      	mov	r2, r4
    c7ae:	4829      	ldr	r0, [pc, #164]	; (c854 <smp_ident_addr_info+0x138>)
    c7b0:	f004 fa8d 	bl	10cce <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
    c7b4:	2008      	movs	r0, #8
    c7b6:	e7da      	b.n	c76e <smp_ident_addr_info+0x52>
		if (conn->role == BT_HCI_ROLE_MASTER) {
    c7b8:	78eb      	ldrb	r3, [r5, #3]
    c7ba:	2b00      	cmp	r3, #0
    c7bc:	d13f      	bne.n	c83e <smp_ident_addr_info+0x122>
			dst = &conn->le.resp_addr;
    c7be:	f105 0196 	add.w	r1, r5, #150	; 0x96
	if (addr->type != BT_ADDR_LE_RANDOM) {
    c7c2:	780b      	ldrb	r3, [r1, #0]
    c7c4:	2b01      	cmp	r3, #1
    c7c6:	d121      	bne.n	c80c <smp_ident_addr_info+0xf0>
		if (bt_addr_le_is_rpa(dst)) {
    c7c8:	798b      	ldrb	r3, [r1, #6]
    c7ca:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    c7ce:	2b40      	cmp	r3, #64	; 0x40
    c7d0:	d11c      	bne.n	c80c <smp_ident_addr_info+0xf0>
	memcpy(dst, src, sizeof(*dst));
    c7d2:	2206      	movs	r2, #6
    c7d4:	3101      	adds	r1, #1
    c7d6:	f108 003a 	add.w	r0, r8, #58	; 0x3a
    c7da:	f005 fd9e 	bl	1231a <memcpy>
	if (addr->type == BT_ADDR_LE_PUBLIC) {
    c7de:	f895 3088 	ldrb.w	r3, [r5, #136]	; 0x88
    c7e2:	b19b      	cbz	r3, c80c <smp_ident_addr_info+0xf0>
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
    c7e4:	f895 308e 	ldrb.w	r3, [r5, #142]	; 0x8e
    c7e8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    c7ec:	2bc0      	cmp	r3, #192	; 0xc0
    c7ee:	d00d      	beq.n	c80c <smp_ident_addr_info+0xf0>
	memcpy(dst, src, sizeof(*dst));
    c7f0:	2207      	movs	r2, #7
    c7f2:	4631      	mov	r1, r6
    c7f4:	f108 0001 	add.w	r0, r8, #1
    c7f8:	f005 fd8f 	bl	1231a <memcpy>
    c7fc:	2207      	movs	r2, #7
    c7fe:	4631      	mov	r1, r6
    c800:	4638      	mov	r0, r7
    c802:	f005 fd8a 	bl	1231a <memcpy>
				bt_conn_identity_resolved(conn);
    c806:	4628      	mov	r0, r5
    c808:	f7fb fa66 	bl	7cd8 <bt_conn_identity_resolved>
		bt_id_add(keys);
    c80c:	4640      	mov	r0, r8
    c80e:	f7f9 fd15 	bl	623c <bt_id_add>
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
    c812:	f894 31a1 	ldrb.w	r3, [r4, #417]	; 0x1a1
    c816:	f023 0202 	bic.w	r2, r3, #2
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    c81a:	075b      	lsls	r3, r3, #29
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
    c81c:	f884 21a1 	strb.w	r2, [r4, #417]	; 0x1a1
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    c820:	d504      	bpl.n	c82c <smp_ident_addr_info+0x110>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    c822:	210a      	movs	r1, #10
    c824:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    c828:	f007 f83c 	bl	138a4 <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
    c82c:	f8b4 51a0 	ldrh.w	r5, [r4, #416]	; 0x1a0
    c830:	b91d      	cbnz	r5, c83a <smp_ident_addr_info+0x11e>
		smp_pairing_complete(smp, 0);
    c832:	4629      	mov	r1, r5
    c834:	4620      	mov	r0, r4
    c836:	f7ff fa71 	bl	bd1c <smp_pairing_complete>
	return 0;
    c83a:	2000      	movs	r0, #0
    c83c:	e797      	b.n	c76e <smp_ident_addr_info+0x52>
			dst = &conn->le.init_addr;
    c83e:	f105 018f 	add.w	r1, r5, #143	; 0x8f
    c842:	e7be      	b.n	c7c2 <smp_ident_addr_info+0xa6>
    c844:	00015a00 	.word	0x00015a00
    c848:	00015a68 	.word	0x00015a68
    c84c:	00018c49 	.word	0x00018c49
    c850:	00018c77 	.word	0x00018c77
    c854:	00018a0c 	.word	0x00018a0c

0000c858 <bt_smp_sign_verify>:
{
    c858:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    c85a:	4606      	mov	r6, r0
	return buf->data + buf->len;
    c85c:	898b      	ldrh	r3, [r1, #12]
    c85e:	460c      	mov	r4, r1
	memcpy(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig));
    c860:	6889      	ldr	r1, [r1, #8]
    c862:	3b0c      	subs	r3, #12
    c864:	4419      	add	r1, r3
    c866:	220c      	movs	r2, #12
	keys = bt_keys_find(BT_KEYS_REMOTE_CSRK, conn->id, &conn->le.dst);
    c868:	f106 0588 	add.w	r5, r6, #136	; 0x88
	memcpy(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig));
    c86c:	a801      	add	r0, sp, #4
    c86e:	f005 fd54 	bl	1231a <memcpy>
	keys = bt_keys_find(BT_KEYS_REMOTE_CSRK, conn->id, &conn->le.dst);
    c872:	7a31      	ldrb	r1, [r6, #8]
    c874:	462a      	mov	r2, r5
    c876:	2010      	movs	r0, #16
    c878:	f000 fa9c 	bl	cdb4 <bt_keys_find>
	if (!keys) {
    c87c:	4606      	mov	r6, r0
    c87e:	b9a0      	cbnz	r0, c8aa <bt_smp_sign_verify+0x52>
    c880:	4a2e      	ldr	r2, [pc, #184]	; (c93c <bt_smp_sign_verify+0xe4>)
    c882:	4c2f      	ldr	r4, [pc, #188]	; (c940 <bt_smp_sign_verify+0xe8>)
		BT_ERR("Unable to find Remote CSRK for %s",
    c884:	4628      	mov	r0, r5
    c886:	1aa4      	subs	r4, r4, r2
    c888:	f7f8 f96e 	bl	4b68 <bt_addr_le_str_real>
    c88c:	f7f4 ffd6 	bl	183c <log_strdup>
    c890:	08e4      	lsrs	r4, r4, #3
    c892:	01a4      	lsls	r4, r4, #6
    c894:	f044 0401 	orr.w	r4, r4, #1
    c898:	4601      	mov	r1, r0
    c89a:	4622      	mov	r2, r4
    c89c:	4829      	ldr	r0, [pc, #164]	; (c944 <bt_smp_sign_verify+0xec>)
    c89e:	f004 fa16 	bl	10cce <log_1>
		return -ENOENT;
    c8a2:	f06f 0001 	mvn.w	r0, #1
}
    c8a6:	b004      	add	sp, #16
    c8a8:	bd70      	pop	{r4, r5, r6, pc}
	cnt = sys_cpu_to_le32(keys->remote_csrk.cnt);
    c8aa:	6e43      	ldr	r3, [r0, #100]	; 0x64
	memcpy(net_buf_tail(buf) - sizeof(sig), &cnt, sizeof(cnt));
    c8ac:	68a0      	ldr	r0, [r4, #8]
	cnt = sys_cpu_to_le32(keys->remote_csrk.cnt);
    c8ae:	9300      	str	r3, [sp, #0]
    c8b0:	89a3      	ldrh	r3, [r4, #12]
	memcpy(net_buf_tail(buf) - sizeof(sig), &cnt, sizeof(cnt));
    c8b2:	2204      	movs	r2, #4
    c8b4:	3b0c      	subs	r3, #12
    c8b6:	4669      	mov	r1, sp
    c8b8:	4418      	add	r0, r3
    c8ba:	f005 fd2e 	bl	1231a <memcpy>
	err = smp_sign_buf(keys->remote_csrk.val, buf->data,
    c8be:	89a2      	ldrh	r2, [r4, #12]
    c8c0:	68a1      	ldr	r1, [r4, #8]
    c8c2:	3a0c      	subs	r2, #12
    c8c4:	b292      	uxth	r2, r2
    c8c6:	f106 0054 	add.w	r0, r6, #84	; 0x54
    c8ca:	f7fe fc3d 	bl	b148 <smp_sign_buf>
	if (err) {
    c8ce:	b198      	cbz	r0, c8f8 <bt_smp_sign_verify+0xa0>
    c8d0:	4a1a      	ldr	r2, [pc, #104]	; (c93c <bt_smp_sign_verify+0xe4>)
    c8d2:	4c1b      	ldr	r4, [pc, #108]	; (c940 <bt_smp_sign_verify+0xe8>)
		BT_ERR("Unable to create signature for %s",
    c8d4:	4628      	mov	r0, r5
    c8d6:	1aa4      	subs	r4, r4, r2
    c8d8:	f7f8 f946 	bl	4b68 <bt_addr_le_str_real>
    c8dc:	f7f4 ffae 	bl	183c <log_strdup>
    c8e0:	08e4      	lsrs	r4, r4, #3
    c8e2:	01a4      	lsls	r4, r4, #6
    c8e4:	f044 0401 	orr.w	r4, r4, #1
    c8e8:	4601      	mov	r1, r0
    c8ea:	4622      	mov	r2, r4
    c8ec:	4816      	ldr	r0, [pc, #88]	; (c948 <bt_smp_sign_verify+0xf0>)
    c8ee:	f004 f9ee 	bl	10cce <log_1>
		return -EIO;
    c8f2:	f06f 0004 	mvn.w	r0, #4
    c8f6:	e7d6      	b.n	c8a6 <bt_smp_sign_verify+0x4e>
    c8f8:	89a3      	ldrh	r3, [r4, #12]
	if (memcmp(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig))) {
    c8fa:	68a1      	ldr	r1, [r4, #8]
    c8fc:	3b0c      	subs	r3, #12
    c8fe:	220c      	movs	r2, #12
    c900:	4419      	add	r1, r3
    c902:	a801      	add	r0, sp, #4
    c904:	f005 fcf9 	bl	122fa <memcmp>
    c908:	b198      	cbz	r0, c932 <bt_smp_sign_verify+0xda>
    c90a:	4a0c      	ldr	r2, [pc, #48]	; (c93c <bt_smp_sign_verify+0xe4>)
    c90c:	4c0c      	ldr	r4, [pc, #48]	; (c940 <bt_smp_sign_verify+0xe8>)
		BT_ERR("Unable to verify signature for %s",
    c90e:	4628      	mov	r0, r5
    c910:	1aa4      	subs	r4, r4, r2
    c912:	f7f8 f929 	bl	4b68 <bt_addr_le_str_real>
    c916:	f7f4 ff91 	bl	183c <log_strdup>
    c91a:	08e4      	lsrs	r4, r4, #3
    c91c:	01a4      	lsls	r4, r4, #6
    c91e:	f044 0401 	orr.w	r4, r4, #1
    c922:	4601      	mov	r1, r0
    c924:	4622      	mov	r2, r4
    c926:	4809      	ldr	r0, [pc, #36]	; (c94c <bt_smp_sign_verify+0xf4>)
    c928:	f004 f9d1 	bl	10cce <log_1>
		return -EBADMSG;
    c92c:	f06f 004c 	mvn.w	r0, #76	; 0x4c
    c930:	e7b9      	b.n	c8a6 <bt_smp_sign_verify+0x4e>
	keys->remote_csrk.cnt++;
    c932:	6e73      	ldr	r3, [r6, #100]	; 0x64
    c934:	3301      	adds	r3, #1
    c936:	6673      	str	r3, [r6, #100]	; 0x64
	return 0;
    c938:	e7b5      	b.n	c8a6 <bt_smp_sign_verify+0x4e>
    c93a:	bf00      	nop
    c93c:	00015a00 	.word	0x00015a00
    c940:	00015a68 	.word	0x00015a68
    c944:	00018c5d 	.word	0x00018c5d
    c948:	00018c7f 	.word	0x00018c7f
    c94c:	00018ca1 	.word	0x00018ca1

0000c950 <bt_smp_sign>:
{
    c950:	b573      	push	{r0, r1, r4, r5, r6, lr}
	keys = bt_keys_find(BT_KEYS_LOCAL_CSRK, conn->id, &conn->le.dst);
    c952:	f100 0588 	add.w	r5, r0, #136	; 0x88
{
    c956:	460e      	mov	r6, r1
	keys = bt_keys_find(BT_KEYS_LOCAL_CSRK, conn->id, &conn->le.dst);
    c958:	462a      	mov	r2, r5
    c95a:	7a01      	ldrb	r1, [r0, #8]
    c95c:	2008      	movs	r0, #8
    c95e:	f000 fa29 	bl	cdb4 <bt_keys_find>
	if (!keys) {
    c962:	4604      	mov	r4, r0
    c964:	b9a0      	cbnz	r0, c990 <bt_smp_sign+0x40>
    c966:	4a23      	ldr	r2, [pc, #140]	; (c9f4 <bt_smp_sign+0xa4>)
    c968:	4c23      	ldr	r4, [pc, #140]	; (c9f8 <bt_smp_sign+0xa8>)
		BT_ERR("Unable to find local CSRK for %s",
    c96a:	4628      	mov	r0, r5
    c96c:	1aa4      	subs	r4, r4, r2
    c96e:	f7f8 f8fb 	bl	4b68 <bt_addr_le_str_real>
    c972:	f7f4 ff63 	bl	183c <log_strdup>
    c976:	08e4      	lsrs	r4, r4, #3
    c978:	01a4      	lsls	r4, r4, #6
    c97a:	f044 0401 	orr.w	r4, r4, #1
    c97e:	4601      	mov	r1, r0
    c980:	4622      	mov	r2, r4
    c982:	481e      	ldr	r0, [pc, #120]	; (c9fc <bt_smp_sign+0xac>)
    c984:	f004 f9a3 	bl	10cce <log_1>
		return -ENOENT;
    c988:	f06f 0001 	mvn.w	r0, #1
}
    c98c:	b002      	add	sp, #8
    c98e:	bd70      	pop	{r4, r5, r6, pc}
	return net_buf_simple_add(&buf->b, len);
    c990:	210c      	movs	r1, #12
    c992:	f106 0008 	add.w	r0, r6, #8
    c996:	f007 fb61 	bl	1405c <net_buf_simple_add>
	memcpy(net_buf_tail(buf) - 12, &cnt, sizeof(cnt));
    c99a:	2204      	movs	r2, #4
	cnt = sys_cpu_to_le32(keys->local_csrk.cnt);
    c99c:	6d23      	ldr	r3, [r4, #80]	; 0x50
	memcpy(net_buf_tail(buf) - 12, &cnt, sizeof(cnt));
    c99e:	68b0      	ldr	r0, [r6, #8]
	cnt = sys_cpu_to_le32(keys->local_csrk.cnt);
    c9a0:	9301      	str	r3, [sp, #4]
	return buf->data + buf->len;
    c9a2:	89b3      	ldrh	r3, [r6, #12]
	memcpy(net_buf_tail(buf) - 12, &cnt, sizeof(cnt));
    c9a4:	eb0d 0102 	add.w	r1, sp, r2
    c9a8:	3b0c      	subs	r3, #12
    c9aa:	4418      	add	r0, r3
    c9ac:	f005 fcb5 	bl	1231a <memcpy>
	err = smp_sign_buf(keys->local_csrk.val, buf->data, buf->len - 12);
    c9b0:	89b2      	ldrh	r2, [r6, #12]
    c9b2:	68b1      	ldr	r1, [r6, #8]
    c9b4:	3a0c      	subs	r2, #12
    c9b6:	b292      	uxth	r2, r2
    c9b8:	f104 0040 	add.w	r0, r4, #64	; 0x40
    c9bc:	f7fe fbc4 	bl	b148 <smp_sign_buf>
	if (err) {
    c9c0:	b198      	cbz	r0, c9ea <bt_smp_sign+0x9a>
    c9c2:	4a0c      	ldr	r2, [pc, #48]	; (c9f4 <bt_smp_sign+0xa4>)
    c9c4:	4c0c      	ldr	r4, [pc, #48]	; (c9f8 <bt_smp_sign+0xa8>)
		BT_ERR("Unable to create signature for %s",
    c9c6:	4628      	mov	r0, r5
    c9c8:	1aa4      	subs	r4, r4, r2
    c9ca:	f7f8 f8cd 	bl	4b68 <bt_addr_le_str_real>
    c9ce:	f7f4 ff35 	bl	183c <log_strdup>
    c9d2:	08e4      	lsrs	r4, r4, #3
    c9d4:	01a4      	lsls	r4, r4, #6
    c9d6:	f044 0401 	orr.w	r4, r4, #1
    c9da:	4601      	mov	r1, r0
    c9dc:	4622      	mov	r2, r4
    c9de:	4808      	ldr	r0, [pc, #32]	; (ca00 <bt_smp_sign+0xb0>)
    c9e0:	f004 f975 	bl	10cce <log_1>
		return -EIO;
    c9e4:	f06f 0004 	mvn.w	r0, #4
    c9e8:	e7d0      	b.n	c98c <bt_smp_sign+0x3c>
	keys->local_csrk.cnt++;
    c9ea:	6d23      	ldr	r3, [r4, #80]	; 0x50
    c9ec:	3301      	adds	r3, #1
    c9ee:	6523      	str	r3, [r4, #80]	; 0x50
	return 0;
    c9f0:	e7cc      	b.n	c98c <bt_smp_sign+0x3c>
    c9f2:	bf00      	nop
    c9f4:	00015a00 	.word	0x00015a00
    c9f8:	00015a68 	.word	0x00015a68
    c9fc:	00018cc3 	.word	0x00018cc3
    ca00:	00018c7f 	.word	0x00018c7f

0000ca04 <bt_smp_start_security>:
{
    ca04:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	switch (conn->role) {
    ca08:	78c4      	ldrb	r4, [r0, #3]
{
    ca0a:	4605      	mov	r5, r0
	switch (conn->role) {
    ca0c:	2c01      	cmp	r4, #1
    ca0e:	d005      	beq.n	ca1c <bt_smp_start_security+0x18>
		return -EINVAL;
    ca10:	f06f 0415 	mvn.w	r4, #21
}
    ca14:	4620      	mov	r0, r4
    ca16:	b003      	add	sp, #12
    ca18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	smp = smp_chan_get(conn);
    ca1c:	f7fe fc18 	bl	b250 <smp_chan_get>
	if (!smp) {
    ca20:	4606      	mov	r6, r0
    ca22:	2800      	cmp	r0, #0
    ca24:	f000 80a1 	beq.w	cb6a <bt_smp_start_security+0x166>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    ca28:	f100 07bc 	add.w	r7, r0, #188	; 0xbc
    ca2c:	2104      	movs	r1, #4
    ca2e:	4638      	mov	r0, r7
    ca30:	f006 ffff 	bl	13a32 <atomic_test_bit>
    ca34:	2800      	cmp	r0, #0
    ca36:	f040 809b 	bne.w	cb70 <bt_smp_start_security+0x16c>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    ca3a:	2103      	movs	r1, #3
    ca3c:	4638      	mov	r0, r7
    ca3e:	f006 fff8 	bl	13a32 <atomic_test_bit>
    ca42:	b110      	cbz	r0, ca4a <bt_smp_start_security+0x46>
		return -EBUSY;
    ca44:	f06f 040f 	mvn.w	r4, #15
    ca48:	e7e4      	b.n	ca14 <bt_smp_start_security+0x10>
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
    ca4a:	4621      	mov	r1, r4
    ca4c:	4638      	mov	r0, r7
    ca4e:	f006 fff0 	bl	13a32 <atomic_test_bit>
    ca52:	2800      	cmp	r0, #0
    ca54:	d1f6      	bne.n	ca44 <bt_smp_start_security+0x40>
	if (!(sec_level_reachable(conn) || smp_keys_check(conn))) {
    ca56:	7aab      	ldrb	r3, [r5, #10]
	switch (conn->required_sec_level) {
    ca58:	2b03      	cmp	r3, #3
    ca5a:	d03d      	beq.n	cad8 <bt_smp_start_security+0xd4>
    ca5c:	d82c      	bhi.n	cab8 <bt_smp_start_security+0xb4>
    ca5e:	3b01      	subs	r3, #1
    ca60:	2b01      	cmp	r3, #1
    ca62:	d947      	bls.n	caf4 <bt_smp_start_security+0xf0>
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
    ca64:	210b      	movs	r1, #11
    ca66:	1d28      	adds	r0, r5, #4
    ca68:	f006 ffe3 	bl	13a32 <atomic_test_bit>
    ca6c:	2800      	cmp	r0, #0
    ca6e:	d1cf      	bne.n	ca10 <bt_smp_start_security+0xc>
	if (!conn->le.keys) {
    ca70:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
    ca74:	b983      	cbnz	r3, ca98 <bt_smp_start_security+0x94>
						     conn->id, &conn->le.dst);
    ca76:	f105 0488 	add.w	r4, r5, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
    ca7a:	4622      	mov	r2, r4
    ca7c:	2020      	movs	r0, #32
    ca7e:	7a29      	ldrb	r1, [r5, #8]
    ca80:	f000 f998 	bl	cdb4 <bt_keys_find>
    ca84:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
		if (!conn->le.keys) {
    ca88:	b930      	cbnz	r0, ca98 <bt_smp_start_security+0x94>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
    ca8a:	4622      	mov	r2, r4
    ca8c:	2004      	movs	r0, #4
    ca8e:	7a29      	ldrb	r1, [r5, #8]
    ca90:	f000 f990 	bl	cdb4 <bt_keys_find>
    ca94:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
	if (!conn->le.keys ||
    ca98:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
    ca9c:	2b00      	cmp	r3, #0
    ca9e:	d0b7      	beq.n	ca10 <bt_smp_start_security+0xc>
    caa0:	89da      	ldrh	r2, [r3, #14]
    caa2:	f002 0224 	and.w	r2, r2, #36	; 0x24
    caa6:	2a00      	cmp	r2, #0
    caa8:	d0b2      	beq.n	ca10 <bt_smp_start_security+0xc>
	if (conn->required_sec_level > BT_SECURITY_L2 &&
    caaa:	7aaa      	ldrb	r2, [r5, #10]
    caac:	2a02      	cmp	r2, #2
    caae:	d921      	bls.n	caf4 <bt_smp_start_security+0xf0>
    cab0:	7b5b      	ldrb	r3, [r3, #13]
    cab2:	07db      	lsls	r3, r3, #31
    cab4:	d5ac      	bpl.n	ca10 <bt_smp_start_security+0xc>
    cab6:	e01d      	b.n	caf4 <bt_smp_start_security+0xf0>
	switch (conn->required_sec_level) {
    cab8:	2b04      	cmp	r3, #4
    caba:	d1d3      	bne.n	ca64 <bt_smp_start_security+0x60>
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    cabc:	f7fe fb1e 	bl	b0fc <get_io_capa>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
    cac0:	2803      	cmp	r0, #3
    cac2:	d104      	bne.n	cace <bt_smp_start_security+0xca>
    cac4:	4b2c      	ldr	r3, [pc, #176]	; (cb78 <bt_smp_start_security+0x174>)
    cac6:	681b      	ldr	r3, [r3, #0]
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    cac8:	b1fb      	cbz	r3, cb0a <bt_smp_start_security+0x106>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
    caca:	68dc      	ldr	r4, [r3, #12]
    cacc:	b10c      	cbz	r4, cad2 <bt_smp_start_security+0xce>
    cace:	4b2b      	ldr	r3, [pc, #172]	; (cb7c <bt_smp_start_security+0x178>)
    cad0:	781c      	ldrb	r4, [r3, #0]
    cad2:	f004 0401 	and.w	r4, r4, #1
    cad6:	e00b      	b.n	caf0 <bt_smp_start_security+0xec>
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    cad8:	f7fe fb10 	bl	b0fc <get_io_capa>
    cadc:	2803      	cmp	r0, #3
    cade:	d107      	bne.n	caf0 <bt_smp_start_security+0xec>
		       (bt_auth && bt_auth->oob_data_request);
    cae0:	4b25      	ldr	r3, [pc, #148]	; (cb78 <bt_smp_start_security+0x174>)
    cae2:	681c      	ldr	r4, [r3, #0]
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    cae4:	2c00      	cmp	r4, #0
    cae6:	d0bd      	beq.n	ca64 <bt_smp_start_security+0x60>
		       (bt_auth && bt_auth->oob_data_request);
    cae8:	68e4      	ldr	r4, [r4, #12]
    caea:	3c00      	subs	r4, #0
    caec:	bf18      	it	ne
    caee:	2401      	movne	r4, #1
	if (!(sec_level_reachable(conn) || smp_keys_check(conn))) {
    caf0:	2c00      	cmp	r4, #0
    caf2:	d0b7      	beq.n	ca64 <bt_smp_start_security+0x60>
	if (!conn->le.keys) {
    caf4:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
    caf8:	b14b      	cbz	r3, cb0e <bt_smp_start_security+0x10a>
	if (smp_init(smp) != 0) {
    cafa:	4630      	mov	r0, r6
    cafc:	f7fe fbe2 	bl	b2c4 <smp_init>
    cb00:	4604      	mov	r4, r0
    cb02:	b180      	cbz	r0, cb26 <bt_smp_start_security+0x122>
		return -ENOBUFS;
    cb04:	f06f 0436 	mvn.w	r4, #54	; 0x36
    cb08:	e784      	b.n	ca14 <bt_smp_start_security+0x10>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
    cb0a:	2400      	movs	r4, #0
    cb0c:	e7e1      	b.n	cad2 <bt_smp_start_security+0xce>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    cb0e:	7a28      	ldrb	r0, [r5, #8]
    cb10:	f105 0188 	add.w	r1, r5, #136	; 0x88
    cb14:	f000 f8da 	bl	cccc <bt_keys_get_addr>
    cb18:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
		if (!conn->le.keys) {
    cb1c:	2800      	cmp	r0, #0
    cb1e:	d1ec      	bne.n	cafa <bt_smp_start_security+0xf6>
			return -ENOMEM;
    cb20:	f06f 040b 	mvn.w	r4, #11
    cb24:	e776      	b.n	ca14 <bt_smp_start_security+0x10>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_SECURITY_REQUEST,
    cb26:	210b      	movs	r1, #11
    cb28:	4630      	mov	r0, r6
    cb2a:	f006 ff88 	bl	13a3e <smp_create_pdu.isra.0>
	if (!req_buf) {
    cb2e:	4680      	mov	r8, r0
    cb30:	2800      	cmp	r0, #0
    cb32:	d0e7      	beq.n	cb04 <bt_smp_start_security+0x100>
	return net_buf_simple_add(&buf->b, len);
    cb34:	2101      	movs	r1, #1
    cb36:	3008      	adds	r0, #8
    cb38:	f007 fa90 	bl	1405c <net_buf_simple_add>
    cb3c:	4681      	mov	r9, r0
	req->auth_req = get_auth(conn, BT_SMP_AUTH_DEFAULT);
    cb3e:	2009      	movs	r0, #9
    cb40:	f7fe fb68 	bl	b214 <get_auth.isra.0>
    cb44:	4623      	mov	r3, r4
    cb46:	f889 0000 	strb.w	r0, [r9]
    cb4a:	4642      	mov	r2, r8
    cb4c:	2106      	movs	r1, #6
    cb4e:	4628      	mov	r0, r5
    cb50:	9400      	str	r4, [sp, #0]
    cb52:	f006 f80c 	bl	12b6e <bt_l2cap_send_cb>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
    cb56:	4638      	mov	r0, r7
    cb58:	210f      	movs	r1, #15
    cb5a:	f006 fea3 	bl	138a4 <atomic_set_bit>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
    cb5e:	2101      	movs	r1, #1
    cb60:	f106 00b8 	add.w	r0, r6, #184	; 0xb8
    cb64:	f006 fe9e 	bl	138a4 <atomic_set_bit>
	return 0;
    cb68:	e754      	b.n	ca14 <bt_smp_start_security+0x10>
		return -ENOTCONN;
    cb6a:	f06f 0438 	mvn.w	r4, #56	; 0x38
    cb6e:	e751      	b.n	ca14 <bt_smp_start_security+0x10>
		return -EIO;
    cb70:	f06f 0404 	mvn.w	r4, #4
    cb74:	e74e      	b.n	ca14 <bt_smp_start_security+0x10>
    cb76:	bf00      	nop
    cb78:	200019b8 	.word	0x200019b8
    cb7c:	20002e19 	.word	0x20002e19

0000cb80 <bt_smp_update_keys>:
{
    cb80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cb82:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
    cb84:	f7fe fb64 	bl	b250 <smp_chan_get>
	if (!smp) {
    cb88:	4605      	mov	r5, r0
    cb8a:	2800      	cmp	r0, #0
    cb8c:	f000 8081 	beq.w	cc92 <bt_smp_update_keys+0x112>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    cb90:	f100 06bc 	add.w	r6, r0, #188	; 0xbc
    cb94:	2103      	movs	r1, #3
    cb96:	4630      	mov	r0, r6
    cb98:	f006 ff4b 	bl	13a32 <atomic_test_bit>
    cb9c:	2800      	cmp	r0, #0
    cb9e:	d078      	beq.n	cc92 <bt_smp_update_keys+0x112>
	if (conn->le.keys) {
    cba0:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    cba4:	b108      	cbz	r0, cbaa <bt_smp_update_keys+0x2a>
		bt_keys_clear(conn->le.keys);
    cba6:	f000 f965 	bl	ce74 <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    cbaa:	f104 0788 	add.w	r7, r4, #136	; 0x88
    cbae:	4639      	mov	r1, r7
    cbb0:	7a20      	ldrb	r0, [r4, #8]
    cbb2:	f000 f88b 	bl	cccc <bt_keys_get_addr>
    cbb6:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (!conn->le.keys) {
    cbba:	b9b0      	cbnz	r0, cbea <bt_smp_update_keys+0x6a>
    cbbc:	4a35      	ldr	r2, [pc, #212]	; (cc94 <bt_smp_update_keys+0x114>)
    cbbe:	4c36      	ldr	r4, [pc, #216]	; (cc98 <bt_smp_update_keys+0x118>)
		BT_ERR("Unable to get keys for %s",
    cbc0:	4638      	mov	r0, r7
    cbc2:	1aa4      	subs	r4, r4, r2
    cbc4:	f7f7 ffd0 	bl	4b68 <bt_addr_le_str_real>
    cbc8:	f7f4 fe38 	bl	183c <log_strdup>
    cbcc:	08e4      	lsrs	r4, r4, #3
    cbce:	01a4      	lsls	r4, r4, #6
    cbd0:	f044 0401 	orr.w	r4, r4, #1
    cbd4:	4601      	mov	r1, r0
    cbd6:	4622      	mov	r2, r4
    cbd8:	4830      	ldr	r0, [pc, #192]	; (cc9c <bt_smp_update_keys+0x11c>)
    cbda:	f004 f878 	bl	10cce <log_1>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
    cbde:	4628      	mov	r0, r5
}
    cbe0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
    cbe4:	2108      	movs	r1, #8
    cbe6:	f006 bfdc 	b.w	13ba2 <smp_error>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
    cbea:	210e      	movs	r1, #14
    cbec:	4630      	mov	r0, r6
    cbee:	f006 ff20 	bl	13a32 <atomic_test_bit>
    cbf2:	b128      	cbz	r0, cc00 <bt_smp_update_keys+0x80>
		conn->le.keys->flags |= BT_KEYS_DEBUG;
    cbf4:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
    cbf8:	7b53      	ldrb	r3, [r2, #13]
    cbfa:	f043 0302 	orr.w	r3, r3, #2
    cbfe:	7353      	strb	r3, [r2, #13]
	switch (smp->method) {
    cc00:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
    cc04:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
    cc08:	2a03      	cmp	r2, #3
    cc0a:	7b4b      	ldrb	r3, [r1, #13]
    cc0c:	d838      	bhi.n	cc80 <bt_smp_update_keys+0x100>
    cc0e:	b3d2      	cbz	r2, cc86 <bt_smp_update_keys+0x106>
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
    cc10:	f043 0301 	orr.w	r3, r3, #1
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
    cc14:	734b      	strb	r3, [r1, #13]
	return MIN(req->max_key_size, rsp->max_key_size);
    cc16:	f895 30cc 	ldrb.w	r3, [r5, #204]	; 0xcc
    cc1a:	f895 20c5 	ldrb.w	r2, [r5, #197]	; 0xc5
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    cc1e:	4630      	mov	r0, r6
	return MIN(req->max_key_size, rsp->max_key_size);
    cc20:	4293      	cmp	r3, r2
    cc22:	bf28      	it	cs
    cc24:	4613      	movcs	r3, r2
	conn->le.keys->enc_size = get_encryption_key_size(smp);
    cc26:	730b      	strb	r3, [r1, #12]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    cc28:	2105      	movs	r1, #5
    cc2a:	f006 ff02 	bl	13a32 <atomic_test_bit>
    cc2e:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
		conn->le.keys->flags |= BT_KEYS_SC;
    cc32:	7b5a      	ldrb	r2, [r3, #13]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    cc34:	b350      	cbz	r0, cc8c <bt_smp_update_keys+0x10c>
		conn->le.keys->flags |= BT_KEYS_SC;
    cc36:	f042 0210 	orr.w	r2, r2, #16
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    cc3a:	210d      	movs	r1, #13
    cc3c:	4630      	mov	r0, r6
		conn->le.keys->flags |= BT_KEYS_SC;
    cc3e:	735a      	strb	r2, [r3, #13]
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    cc40:	f006 fef7 	bl	13a32 <atomic_test_bit>
    cc44:	b328      	cbz	r0, cc92 <bt_smp_update_keys+0x112>
			bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
    cc46:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    cc4a:	2120      	movs	r1, #32
    cc4c:	f007 f9ab 	bl	13fa6 <bt_keys_add_type>
			memcpy(conn->le.keys->ltk.val, smp->tk,
    cc50:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    cc54:	f105 01ff 	add.w	r1, r5, #255	; 0xff
    cc58:	2210      	movs	r2, #16
    cc5a:	301a      	adds	r0, #26
    cc5c:	f005 fb5d 	bl	1231a <memcpy>
			(void)memset(conn->le.keys->ltk.rand, 0,
    cc60:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    cc64:	2208      	movs	r2, #8
    cc66:	2100      	movs	r1, #0
    cc68:	3010      	adds	r0, #16
    cc6a:	f005 fb81 	bl	12370 <memset>
			(void)memset(conn->le.keys->ltk.ediv, 0,
    cc6e:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    cc72:	2202      	movs	r2, #2
}
    cc74:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			(void)memset(conn->le.keys->ltk.ediv, 0,
    cc78:	2100      	movs	r1, #0
    cc7a:	3018      	adds	r0, #24
    cc7c:	f005 bb78 	b.w	12370 <memset>
	switch (smp->method) {
    cc80:	3a05      	subs	r2, #5
    cc82:	2a01      	cmp	r2, #1
    cc84:	d9c4      	bls.n	cc10 <bt_smp_update_keys+0x90>
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
    cc86:	f023 0301 	bic.w	r3, r3, #1
    cc8a:	e7c3      	b.n	cc14 <bt_smp_update_keys+0x94>
		conn->le.keys->flags &= ~BT_KEYS_SC;
    cc8c:	f022 0210 	bic.w	r2, r2, #16
    cc90:	735a      	strb	r2, [r3, #13]
}
    cc92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cc94:	00015a00 	.word	0x00015a00
    cc98:	00015a68 	.word	0x00015a68
    cc9c:	00018a0c 	.word	0x00018a0c

0000cca0 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_br_fixed_chan, BT_L2CAP_CID_BR_SMP,
			bt_smp_br_accept, NULL);
#endif /* CONFIG_BT_BREDR */

int bt_smp_init(void)
{
    cca0:	b508      	push	{r3, lr}
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
    cca2:	4b07      	ldr	r3, [pc, #28]	; (ccc0 <bt_smp_init+0x20>)
	}

	BT_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	if (!IS_ENABLED(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY)) {
		bt_pub_key_gen(&pub_key_cb);
    cca4:	4807      	ldr	r0, [pc, #28]	; (ccc4 <bt_smp_init+0x24>)
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
    cca6:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
    ccaa:	f003 0306 	and.w	r3, r3, #6
    ccae:	1f9a      	subs	r2, r3, #6
    ccb0:	4253      	negs	r3, r2
    ccb2:	4153      	adcs	r3, r2
    ccb4:	4a04      	ldr	r2, [pc, #16]	; (ccc8 <bt_smp_init+0x28>)
    ccb6:	7013      	strb	r3, [r2, #0]
		bt_pub_key_gen(&pub_key_cb);
    ccb8:	f7fa fdc6 	bl	7848 <bt_pub_key_gen>
	}

	return smp_self_test();
}
    ccbc:	2000      	movs	r0, #0
    ccbe:	bd08      	pop	{r3, pc}
    ccc0:	20000000 	.word	0x20000000
    ccc4:	2000039c 	.word	0x2000039c
    ccc8:	20002e19 	.word	0x20002e19

0000cccc <bt_keys_get_addr>:
static uint32_t aging_counter_val;
static struct bt_keys *last_keys_updated;
#endif /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */

struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
{
    cccc:	b5f0      	push	{r4, r5, r6, r7, lr}
	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		keys = &key_pool[i];

		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
    ccce:	4c1e      	ldr	r4, [pc, #120]	; (cd48 <bt_keys_get_addr+0x7c>)
{
    ccd0:	4605      	mov	r5, r0
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
    ccd2:	7823      	ldrb	r3, [r4, #0]
{
    ccd4:	460f      	mov	r7, r1
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
    ccd6:	4283      	cmp	r3, r0
    ccd8:	4626      	mov	r6, r4
{
    ccda:	b085      	sub	sp, #20
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
    ccdc:	d02c      	beq.n	cd38 <bt_keys_get_addr+0x6c>
			return keys;
		}

		if (first_free_slot == ARRAY_SIZE(key_pool) &&
		    !bt_addr_le_cmp(&keys->addr, BT_ADDR_LE_ANY)) {
    ccde:	2400      	movs	r4, #0
	return memcmp(a, b, sizeof(*a));
    cce0:	2207      	movs	r2, #7
    cce2:	481a      	ldr	r0, [pc, #104]	; (cd4c <bt_keys_get_addr+0x80>)
    cce4:	a902      	add	r1, sp, #8
    cce6:	9402      	str	r4, [sp, #8]
    cce8:	f8cd 400b 	str.w	r4, [sp, #11]
    ccec:	f005 fb05 	bl	122fa <memcmp>
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
    ccf0:	b188      	cbz	r0, cd16 <bt_keys_get_addr+0x4a>
	memcpy(dst, src, sizeof(*dst));
    ccf2:	2207      	movs	r2, #7
    ccf4:	4915      	ldr	r1, [pc, #84]	; (cd4c <bt_keys_get_addr+0x80>)
    ccf6:	4668      	mov	r0, sp
    ccf8:	f005 fb0f 	bl	1231a <memcpy>
			}
		}

		/* Use a copy as bt_unpair will clear the oldest key. */
		bt_addr_le_copy(&oldest_addr, &oldest->addr);
		bt_unpair(oldest->id, &oldest_addr);
    ccfc:	4669      	mov	r1, sp
    ccfe:	7830      	ldrb	r0, [r6, #0]
    cd00:	f7f9 fa76 	bl	61f0 <bt_unpair>
	return memcmp(a, b, sizeof(*a));
    cd04:	2207      	movs	r2, #7
    cd06:	4811      	ldr	r0, [pc, #68]	; (cd4c <bt_keys_get_addr+0x80>)
    cd08:	a902      	add	r1, sp, #8
		if (!bt_addr_le_cmp(&oldest->addr, BT_ADDR_LE_ANY)) {
    cd0a:	9402      	str	r4, [sp, #8]
    cd0c:	f8cd 400b 	str.w	r4, [sp, #11]
    cd10:	f005 faf3 	bl	122fa <memcmp>
    cd14:	b9b0      	cbnz	r0, cd44 <bt_keys_get_addr+0x78>
	memcpy(dst, src, sizeof(*dst));
    cd16:	2207      	movs	r2, #7
    cd18:	4639      	mov	r1, r7
    cd1a:	480c      	ldr	r0, [pc, #48]	; (cd4c <bt_keys_get_addr+0x80>)
	}

#endif  /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */
	if (first_free_slot < ARRAY_SIZE(key_pool)) {
		keys = &key_pool[first_free_slot];
		keys->id = id;
    cd1c:	7035      	strb	r5, [r6, #0]
    cd1e:	f005 fafc 	bl	1231a <memcpy>
		bt_addr_le_copy(&keys->addr, addr);
#if IS_ENABLED(CONFIG_BT_KEYS_OVERWRITE_OLDEST)
		keys->aging_counter = ++aging_counter_val;
    cd22:	4a0b      	ldr	r2, [pc, #44]	; (cd50 <bt_keys_get_addr+0x84>)
		last_keys_updated = keys;
#endif  /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */
		BT_DBG("created %p for %s", keys, bt_addr_le_str(addr));
		return keys;
    cd24:	4808      	ldr	r0, [pc, #32]	; (cd48 <bt_keys_get_addr+0x7c>)
		keys->aging_counter = ++aging_counter_val;
    cd26:	6813      	ldr	r3, [r2, #0]
    cd28:	3301      	adds	r3, #1
    cd2a:	6013      	str	r3, [r2, #0]
    cd2c:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
		last_keys_updated = keys;
    cd30:	4b08      	ldr	r3, [pc, #32]	; (cd54 <bt_keys_get_addr+0x88>)
    cd32:	601e      	str	r6, [r3, #0]
	}

	BT_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
}
    cd34:	b005      	add	sp, #20
    cd36:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return memcmp(a, b, sizeof(*a));
    cd38:	2207      	movs	r2, #7
    cd3a:	1c60      	adds	r0, r4, #1
    cd3c:	f005 fadd 	bl	122fa <memcmp>
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
    cd40:	2800      	cmp	r0, #0
    cd42:	d1cc      	bne.n	ccde <bt_keys_get_addr+0x12>
		keys = &key_pool[i];
    cd44:	4620      	mov	r0, r4
    cd46:	e7f5      	b.n	cd34 <bt_keys_get_addr+0x68>
    cd48:	20001a54 	.word	0x20001a54
    cd4c:	20001a55 	.word	0x20001a55
    cd50:	20001a50 	.word	0x20001a50
    cd54:	20001adc 	.word	0x20001adc

0000cd58 <bt_foreach_bond>:

void bt_foreach_bond(uint8_t id, void (*func)(const struct bt_bond_info *info,
					   void *user_data),
		     void *user_data)
{
    cd58:	b537      	push	{r0, r1, r2, r4, r5, lr}
    cd5a:	460c      	mov	r4, r1
	int i;

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		struct bt_keys *keys = &key_pool[i];

		if (keys->keys && keys->id == id) {
    cd5c:	4908      	ldr	r1, [pc, #32]	; (cd80 <bt_foreach_bond+0x28>)
{
    cd5e:	4615      	mov	r5, r2
		if (keys->keys && keys->id == id) {
    cd60:	89cb      	ldrh	r3, [r1, #14]
    cd62:	b153      	cbz	r3, cd7a <bt_foreach_bond+0x22>
    cd64:	780b      	ldrb	r3, [r1, #0]
    cd66:	4283      	cmp	r3, r0
    cd68:	d107      	bne.n	cd7a <bt_foreach_bond+0x22>
	memcpy(dst, src, sizeof(*dst));
    cd6a:	3101      	adds	r1, #1
    cd6c:	2207      	movs	r2, #7
    cd6e:	4668      	mov	r0, sp
    cd70:	f005 fad3 	bl	1231a <memcpy>
			struct bt_bond_info info;

			bt_addr_le_copy(&info.addr, &keys->addr);
			func(&info, user_data);
    cd74:	4629      	mov	r1, r5
    cd76:	4668      	mov	r0, sp
    cd78:	47a0      	blx	r4
		}
	}
}
    cd7a:	b003      	add	sp, #12
    cd7c:	bd30      	pop	{r4, r5, pc}
    cd7e:	bf00      	nop
    cd80:	20001a54 	.word	0x20001a54

0000cd84 <bt_keys_foreach>:

void bt_keys_foreach(int type, void (*func)(struct bt_keys *keys, void *data),
		     void *data)
{
    cd84:	460b      	mov	r3, r1
    cd86:	4611      	mov	r1, r2
	int i;

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type)) {
    cd88:	4a04      	ldr	r2, [pc, #16]	; (cd9c <bt_keys_foreach+0x18>)
{
    cd8a:	b410      	push	{r4}
		if ((key_pool[i].keys & type)) {
    cd8c:	89d4      	ldrh	r4, [r2, #14]
    cd8e:	4204      	tst	r4, r0
    cd90:	d002      	beq.n	cd98 <bt_keys_foreach+0x14>
			func(&key_pool[i], data);
    cd92:	4610      	mov	r0, r2
		}
	}
}
    cd94:	bc10      	pop	{r4}
			func(&key_pool[i], data);
    cd96:	4718      	bx	r3
}
    cd98:	bc10      	pop	{r4}
    cd9a:	4770      	bx	lr
    cd9c:	20001a54 	.word	0x20001a54

0000cda0 <keys_commit>:
{
	bt_id_add(keys);
}

static int keys_commit(void)
{
    cda0:	b508      	push	{r3, lr}
	 * the keys were already removed.
	 */
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && IS_ENABLED(CONFIG_BT_PRIVACY)) {
		bt_keys_foreach(BT_KEYS_ALL, id_add, NULL);
	} else {
		bt_keys_foreach(BT_KEYS_IRK, id_add, NULL);
    cda2:	2200      	movs	r2, #0
    cda4:	2002      	movs	r0, #2
    cda6:	4902      	ldr	r1, [pc, #8]	; (cdb0 <keys_commit+0x10>)
    cda8:	f7ff ffec 	bl	cd84 <bt_keys_foreach>
	}

	return 0;
}
    cdac:	2000      	movs	r0, #0
    cdae:	bd08      	pop	{r3, pc}
    cdb0:	00013f83 	.word	0x00013f83

0000cdb4 <bt_keys_find>:
{
    cdb4:	b510      	push	{r4, lr}
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
    cdb6:	4c09      	ldr	r4, [pc, #36]	; (cddc <bt_keys_find+0x28>)
{
    cdb8:	460b      	mov	r3, r1
    cdba:	4611      	mov	r1, r2
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
    cdbc:	89e2      	ldrh	r2, [r4, #14]
    cdbe:	4202      	tst	r2, r0
    cdc0:	d007      	beq.n	cdd2 <bt_keys_find+0x1e>
    cdc2:	7822      	ldrb	r2, [r4, #0]
    cdc4:	429a      	cmp	r2, r3
    cdc6:	d104      	bne.n	cdd2 <bt_keys_find+0x1e>
	return memcmp(a, b, sizeof(*a));
    cdc8:	2207      	movs	r2, #7
    cdca:	1c60      	adds	r0, r4, #1
    cdcc:	f005 fa95 	bl	122fa <memcmp>
    cdd0:	b108      	cbz	r0, cdd6 <bt_keys_find+0x22>
	return NULL;
    cdd2:	2000      	movs	r0, #0
}
    cdd4:	bd10      	pop	{r4, pc}
			return &key_pool[i];
    cdd6:	4620      	mov	r0, r4
    cdd8:	e7fc      	b.n	cdd4 <bt_keys_find+0x20>
    cdda:	bf00      	nop
    cddc:	20001a54 	.word	0x20001a54

0000cde0 <bt_keys_find_irk>:
{
    cde0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (addr->type != BT_ADDR_LE_RANDOM) {
    cde2:	780b      	ldrb	r3, [r1, #0]
    cde4:	4607      	mov	r7, r0
    cde6:	2b01      	cmp	r3, #1
    cde8:	460c      	mov	r4, r1
    cdea:	d001      	beq.n	cdf0 <bt_keys_find_irk+0x10>
		return NULL;
    cdec:	2000      	movs	r0, #0
}
    cdee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!bt_addr_le_is_rpa(addr)) {
    cdf0:	798b      	ldrb	r3, [r1, #6]
    cdf2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    cdf6:	2b40      	cmp	r3, #64	; 0x40
    cdf8:	d1f8      	bne.n	cdec <bt_keys_find_irk+0xc>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
    cdfa:	4d13      	ldr	r5, [pc, #76]	; (ce48 <bt_keys_find_irk+0x68>)
    cdfc:	89eb      	ldrh	r3, [r5, #14]
    cdfe:	462e      	mov	r6, r5
    ce00:	f013 0f02 	tst.w	r3, #2
    ce04:	d0f2      	beq.n	cdec <bt_keys_find_irk+0xc>
		if (key_pool[i].id == id &&
    ce06:	7833      	ldrb	r3, [r6, #0]
    ce08:	42bb      	cmp	r3, r7
    ce0a:	d10b      	bne.n	ce24 <bt_keys_find_irk+0x44>
	return memcmp(a, b, sizeof(*a));
    ce0c:	2206      	movs	r2, #6
    ce0e:	f106 013a 	add.w	r1, r6, #58	; 0x3a
    ce12:	1c60      	adds	r0, r4, #1
    ce14:	f005 fa71 	bl	122fa <memcmp>
    ce18:	b908      	cbnz	r0, ce1e <bt_keys_find_irk+0x3e>
			return &key_pool[i];
    ce1a:	4628      	mov	r0, r5
    ce1c:	e7e7      	b.n	cdee <bt_keys_find_irk+0xe>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
    ce1e:	89f3      	ldrh	r3, [r6, #14]
    ce20:	079b      	lsls	r3, r3, #30
    ce22:	d5e3      	bpl.n	cdec <bt_keys_find_irk+0xc>
		if (key_pool[i].id != id) {
    ce24:	7833      	ldrb	r3, [r6, #0]
    ce26:	42bb      	cmp	r3, r7
    ce28:	d1e0      	bne.n	cdec <bt_keys_find_irk+0xc>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
    ce2a:	3401      	adds	r4, #1
    ce2c:	4621      	mov	r1, r4
    ce2e:	4807      	ldr	r0, [pc, #28]	; (ce4c <bt_keys_find_irk+0x6c>)
    ce30:	f005 fae1 	bl	123f6 <bt_rpa_irk_matches>
    ce34:	2800      	cmp	r0, #0
    ce36:	d0d9      	beq.n	cdec <bt_keys_find_irk+0xc>
	memcpy(dst, src, sizeof(*dst));
    ce38:	2206      	movs	r2, #6
    ce3a:	4621      	mov	r1, r4
    ce3c:	4804      	ldr	r0, [pc, #16]	; (ce50 <bt_keys_find_irk+0x70>)
    ce3e:	f005 fa6c 	bl	1231a <memcpy>
			return &key_pool[i];
    ce42:	4801      	ldr	r0, [pc, #4]	; (ce48 <bt_keys_find_irk+0x68>)
}
    ce44:	e7d3      	b.n	cdee <bt_keys_find_irk+0xe>
    ce46:	bf00      	nop
    ce48:	20001a54 	.word	0x20001a54
    ce4c:	20001a7e 	.word	0x20001a7e
    ce50:	20001a8e 	.word	0x20001a8e

0000ce54 <bt_keys_find_addr>:
{
    ce54:	b510      	push	{r4, lr}
		if (key_pool[i].id == id &&
    ce56:	4c06      	ldr	r4, [pc, #24]	; (ce70 <bt_keys_find_addr+0x1c>)
    ce58:	7823      	ldrb	r3, [r4, #0]
    ce5a:	4283      	cmp	r3, r0
    ce5c:	d104      	bne.n	ce68 <bt_keys_find_addr+0x14>
	return memcmp(a, b, sizeof(*a));
    ce5e:	2207      	movs	r2, #7
    ce60:	1c60      	adds	r0, r4, #1
    ce62:	f005 fa4a 	bl	122fa <memcmp>
    ce66:	b108      	cbz	r0, ce6c <bt_keys_find_addr+0x18>
	return NULL;
    ce68:	2000      	movs	r0, #0
}
    ce6a:	bd10      	pop	{r4, pc}
			return &key_pool[i];
    ce6c:	4620      	mov	r0, r4
    ce6e:	e7fc      	b.n	ce6a <bt_keys_find_addr+0x16>
    ce70:	20001a54 	.word	0x20001a54

0000ce74 <bt_keys_clear>:
{
    ce74:	b570      	push	{r4, r5, r6, lr}
	if (keys->state & BT_KEYS_ID_ADDED) {
    ce76:	7a03      	ldrb	r3, [r0, #8]
{
    ce78:	4604      	mov	r4, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
    ce7a:	075b      	lsls	r3, r3, #29
{
    ce7c:	b08c      	sub	sp, #48	; 0x30
	if (keys->state & BT_KEYS_ID_ADDED) {
    ce7e:	d501      	bpl.n	ce84 <bt_keys_clear+0x10>
		bt_id_del(keys);
    ce80:	f7f9 faaa 	bl	63d8 <bt_id_del>
		if (keys->id) {
    ce84:	4625      	mov	r5, r4
    ce86:	f815 2b01 	ldrb.w	r2, [r5], #1
    ce8a:	b1aa      	cbz	r2, ceb8 <bt_keys_clear+0x44>
			u8_to_dec(id, sizeof(id), keys->id);
    ce8c:	ae02      	add	r6, sp, #8
    ce8e:	2104      	movs	r1, #4
    ce90:	4630      	mov	r0, r6
    ce92:	f003 fa33 	bl	102fc <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "keys",
    ce96:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "keys",
    ce98:	462b      	mov	r3, r5
    ce9a:	2124      	movs	r1, #36	; 0x24
    ce9c:	4a07      	ldr	r2, [pc, #28]	; (cebc <bt_keys_clear+0x48>)
    ce9e:	a803      	add	r0, sp, #12
    cea0:	f7f7 ff82 	bl	4da8 <bt_settings_encode_key>
		settings_delete(key);
    cea4:	a803      	add	r0, sp, #12
    cea6:	f004 fb98 	bl	115da <settings_delete>
	(void)memset(keys, 0, sizeof(*keys));
    ceaa:	2288      	movs	r2, #136	; 0x88
    ceac:	2100      	movs	r1, #0
    ceae:	4620      	mov	r0, r4
    ceb0:	f005 fa5e 	bl	12370 <memset>
}
    ceb4:	b00c      	add	sp, #48	; 0x30
    ceb6:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "keys",
    ceb8:	9200      	str	r2, [sp, #0]
    ceba:	e7ed      	b.n	ce98 <bt_keys_clear+0x24>
    cebc:	00018e3c 	.word	0x00018e3c

0000cec0 <keys_set>:
{
    cec0:	b5f0      	push	{r4, r5, r6, r7, lr}
    cec2:	4614      	mov	r4, r2
	if (!name) {
    cec4:	4606      	mov	r6, r0
{
    cec6:	b0a3      	sub	sp, #140	; 0x8c
	if (!name) {
    cec8:	b970      	cbnz	r0, cee8 <keys_set+0x28>
    ceca:	4953      	ldr	r1, [pc, #332]	; (d018 <keys_set+0x158>)
    cecc:	4b53      	ldr	r3, [pc, #332]	; (d01c <keys_set+0x15c>)
		BT_ERR("Insufficient number of arguments");
    cece:	4854      	ldr	r0, [pc, #336]	; (d020 <keys_set+0x160>)
    ced0:	1ac9      	subs	r1, r1, r3
    ced2:	08c9      	lsrs	r1, r1, #3
    ced4:	0189      	lsls	r1, r1, #6
    ced6:	f041 0101 	orr.w	r1, r1, #1
    ceda:	f003 feeb 	bl	10cb4 <log_0>
		return -EINVAL;
    cede:	f06f 0415 	mvn.w	r4, #21
}
    cee2:	4620      	mov	r0, r4
    cee4:	b023      	add	sp, #140	; 0x8c
    cee6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	len = read_cb(cb_arg, val, sizeof(val));
    cee8:	227c      	movs	r2, #124	; 0x7c
    ceea:	4618      	mov	r0, r3
    ceec:	a903      	add	r1, sp, #12
    ceee:	47a0      	blx	r4
	if (len < 0) {
    cef0:	1e05      	subs	r5, r0, #0
    cef2:	da0b      	bge.n	cf0c <keys_set+0x4c>
		BT_ERR("Failed to read value (err %zd)", len);
    cef4:	4629      	mov	r1, r5
    cef6:	4a48      	ldr	r2, [pc, #288]	; (d018 <keys_set+0x158>)
    cef8:	4b48      	ldr	r3, [pc, #288]	; (d01c <keys_set+0x15c>)
    cefa:	484a      	ldr	r0, [pc, #296]	; (d024 <keys_set+0x164>)
    cefc:	1ad2      	subs	r2, r2, r3
    cefe:	08d2      	lsrs	r2, r2, #3
    cf00:	0192      	lsls	r2, r2, #6
    cf02:	f042 0201 	orr.w	r2, r2, #1
    cf06:	f003 fee2 	bl	10cce <log_1>
    cf0a:	e7e8      	b.n	cede <keys_set+0x1e>
	err = bt_settings_decode_key(name, &addr);
    cf0c:	4630      	mov	r0, r6
    cf0e:	a901      	add	r1, sp, #4
    cf10:	f005 fa9b 	bl	1244a <bt_settings_decode_key>
	if (err) {
    cf14:	4604      	mov	r4, r0
    cf16:	b148      	cbz	r0, cf2c <keys_set+0x6c>
    cf18:	4a3f      	ldr	r2, [pc, #252]	; (d018 <keys_set+0x158>)
    cf1a:	4b40      	ldr	r3, [pc, #256]	; (d01c <keys_set+0x15c>)
		BT_ERR("Unable to decode address %s", name);
    cf1c:	4631      	mov	r1, r6
    cf1e:	1ad2      	subs	r2, r2, r3
    cf20:	08d2      	lsrs	r2, r2, #3
    cf22:	0192      	lsls	r2, r2, #6
    cf24:	4840      	ldr	r0, [pc, #256]	; (d028 <keys_set+0x168>)
    cf26:	f042 0201 	orr.w	r2, r2, #1
    cf2a:	e7ec      	b.n	cf06 <keys_set+0x46>
	settings_name_next(name, &next);
    cf2c:	4669      	mov	r1, sp
    cf2e:	4630      	mov	r0, r6
    cf30:	f004 fb7a 	bl	11628 <settings_name_next>
	if (!next) {
    cf34:	9800      	ldr	r0, [sp, #0]
    cf36:	b188      	cbz	r0, cf5c <keys_set+0x9c>
		id = strtol(next, NULL, 10);
    cf38:	220a      	movs	r2, #10
    cf3a:	4621      	mov	r1, r4
    cf3c:	f005 f91f 	bl	1217e <strtol>
    cf40:	b2c0      	uxtb	r0, r0
	if (!len) {
    cf42:	b9fd      	cbnz	r5, cf84 <keys_set+0xc4>
		keys = bt_keys_find(BT_KEYS_ALL, id, &addr);
    cf44:	4601      	mov	r1, r0
    cf46:	aa01      	add	r2, sp, #4
    cf48:	203f      	movs	r0, #63	; 0x3f
    cf4a:	f7ff ff33 	bl	cdb4 <bt_keys_find>
		if (keys) {
    cf4e:	b138      	cbz	r0, cf60 <keys_set+0xa0>
			(void)memset(keys, 0, sizeof(*keys));
    cf50:	2288      	movs	r2, #136	; 0x88
    cf52:	4629      	mov	r1, r5
    cf54:	f005 fa0c 	bl	12370 <memset>
		return 0;
    cf58:	462c      	mov	r4, r5
    cf5a:	e7c2      	b.n	cee2 <keys_set+0x22>
		id = BT_ID_DEFAULT;
    cf5c:	4620      	mov	r0, r4
    cf5e:	e7f0      	b.n	cf42 <keys_set+0x82>
    cf60:	4a2e      	ldr	r2, [pc, #184]	; (d01c <keys_set+0x15c>)
    cf62:	4c2d      	ldr	r4, [pc, #180]	; (d018 <keys_set+0x158>)
			BT_WARN("Unable to find deleted keys for %s",
    cf64:	a801      	add	r0, sp, #4
    cf66:	1aa4      	subs	r4, r4, r2
    cf68:	f7f7 fdfe 	bl	4b68 <bt_addr_le_str_real>
    cf6c:	f7f4 fc66 	bl	183c <log_strdup>
    cf70:	08e4      	lsrs	r4, r4, #3
    cf72:	01a4      	lsls	r4, r4, #6
    cf74:	f044 0402 	orr.w	r4, r4, #2
    cf78:	4601      	mov	r1, r0
    cf7a:	4622      	mov	r2, r4
    cf7c:	482b      	ldr	r0, [pc, #172]	; (d02c <keys_set+0x16c>)
    cf7e:	f003 fea6 	bl	10cce <log_1>
    cf82:	e7e9      	b.n	cf58 <keys_set+0x98>
	keys = bt_keys_get_addr(id, &addr);
    cf84:	a901      	add	r1, sp, #4
    cf86:	f7ff fea1 	bl	cccc <bt_keys_get_addr>
	if (!keys) {
    cf8a:	4607      	mov	r7, r0
    cf8c:	b998      	cbnz	r0, cfb6 <keys_set+0xf6>
    cf8e:	4a23      	ldr	r2, [pc, #140]	; (d01c <keys_set+0x15c>)
    cf90:	4c21      	ldr	r4, [pc, #132]	; (d018 <keys_set+0x158>)
		BT_ERR("Failed to allocate keys for %s", bt_addr_le_str(&addr));
    cf92:	a801      	add	r0, sp, #4
    cf94:	1aa4      	subs	r4, r4, r2
    cf96:	f7f7 fde7 	bl	4b68 <bt_addr_le_str_real>
    cf9a:	f7f4 fc4f 	bl	183c <log_strdup>
    cf9e:	08e4      	lsrs	r4, r4, #3
    cfa0:	01a4      	lsls	r4, r4, #6
    cfa2:	f044 0401 	orr.w	r4, r4, #1
    cfa6:	4601      	mov	r1, r0
    cfa8:	4622      	mov	r2, r4
    cfaa:	4821      	ldr	r0, [pc, #132]	; (d030 <keys_set+0x170>)
    cfac:	f003 fe8f 	bl	10cce <log_1>
		return -ENOMEM;
    cfb0:	f06f 040b 	mvn.w	r4, #11
    cfb4:	e795      	b.n	cee2 <keys_set+0x22>
	if (len != BT_KEYS_STORAGE_LEN) {
    cfb6:	2d7c      	cmp	r5, #124	; 0x7c
    cfb8:	d015      	beq.n	cfe6 <keys_set+0x126>
			if (IS_ENABLED(CONFIG_BT_KEYS_OVERWRITE_OLDEST) &&
    cfba:	4b17      	ldr	r3, [pc, #92]	; (d018 <keys_set+0x158>)
    cfbc:	4a17      	ldr	r2, [pc, #92]	; (d01c <keys_set+0x15c>)
    cfbe:	2d78      	cmp	r5, #120	; 0x78
    cfc0:	eba3 0302 	sub.w	r3, r3, r2
    cfc4:	ea4f 03d3 	mov.w	r3, r3, lsr #3
    cfc8:	ea4f 1383 	mov.w	r3, r3, lsl #6
    cfcc:	d119      	bne.n	d002 <keys_set+0x142>
				BT_WARN("Keys for %s have no aging counter",
    cfce:	a801      	add	r0, sp, #4
    cfd0:	f043 0602 	orr.w	r6, r3, #2
    cfd4:	f7f7 fdc8 	bl	4b68 <bt_addr_le_str_real>
    cfd8:	f7f4 fc30 	bl	183c <log_strdup>
    cfdc:	4632      	mov	r2, r6
    cfde:	4601      	mov	r1, r0
    cfe0:	4814      	ldr	r0, [pc, #80]	; (d034 <keys_set+0x174>)
    cfe2:	f003 fe74 	bl	10cce <log_1>
		memcpy(keys->storage_start, val, len);
    cfe6:	462a      	mov	r2, r5
    cfe8:	a903      	add	r1, sp, #12
    cfea:	f107 000c 	add.w	r0, r7, #12
    cfee:	f005 f994 	bl	1231a <memcpy>
	if (aging_counter_val < keys->aging_counter) {
    cff2:	4b11      	ldr	r3, [pc, #68]	; (d038 <keys_set+0x178>)
    cff4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
    cff8:	6819      	ldr	r1, [r3, #0]
    cffa:	428a      	cmp	r2, r1
		aging_counter_val = keys->aging_counter;
    cffc:	bf88      	it	hi
    cffe:	601a      	strhi	r2, [r3, #0]
    d000:	e76f      	b.n	cee2 <keys_set+0x22>
			BT_ERR("Invalid key length %zd != %zu", len,
    d002:	227c      	movs	r2, #124	; 0x7c
    d004:	4629      	mov	r1, r5
    d006:	480d      	ldr	r0, [pc, #52]	; (d03c <keys_set+0x17c>)
    d008:	f043 0301 	orr.w	r3, r3, #1
    d00c:	f003 fe73 	bl	10cf6 <log_2>
			bt_keys_clear(keys);
    d010:	4638      	mov	r0, r7
    d012:	f7ff ff2f 	bl	ce74 <bt_keys_clear>
			return -EINVAL;
    d016:	e762      	b.n	cede <keys_set+0x1e>
    d018:	00015a48 	.word	0x00015a48
    d01c:	00015a00 	.word	0x00015a00
    d020:	0001744a 	.word	0x0001744a
    d024:	00018d7b 	.word	0x00018d7b
    d028:	00018728 	.word	0x00018728
    d02c:	00018d9a 	.word	0x00018d9a
    d030:	00018dbd 	.word	0x00018dbd
    d034:	00018ddc 	.word	0x00018ddc
    d038:	20001a50 	.word	0x20001a50
    d03c:	00018dfe 	.word	0x00018dfe

0000d040 <bt_keys_store>:
{
    d040:	b570      	push	{r4, r5, r6, lr}
	if (keys->id) {
    d042:	4605      	mov	r5, r0
    d044:	f815 2b01 	ldrb.w	r2, [r5], #1
{
    d048:	4604      	mov	r4, r0
    d04a:	b08c      	sub	sp, #48	; 0x30
	if (keys->id) {
    d04c:	b30a      	cbz	r2, d092 <bt_keys_store+0x52>
		u8_to_dec(id, sizeof(id), keys->id);
    d04e:	ae02      	add	r6, sp, #8
    d050:	2104      	movs	r1, #4
    d052:	4630      	mov	r0, r6
    d054:	f003 f952 	bl	102fc <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
    d058:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
    d05a:	462b      	mov	r3, r5
    d05c:	2124      	movs	r1, #36	; 0x24
    d05e:	4a0e      	ldr	r2, [pc, #56]	; (d098 <bt_keys_store+0x58>)
    d060:	a803      	add	r0, sp, #12
    d062:	f7f7 fea1 	bl	4da8 <bt_settings_encode_key>
	err = settings_save_one(key, keys->storage_start, BT_KEYS_STORAGE_LEN);
    d066:	f104 010c 	add.w	r1, r4, #12
    d06a:	227c      	movs	r2, #124	; 0x7c
    d06c:	a803      	add	r0, sp, #12
    d06e:	f7f5 fe63 	bl	2d38 <settings_save_one>
	if (err) {
    d072:	4604      	mov	r4, r0
    d074:	b150      	cbz	r0, d08c <bt_keys_store+0x4c>
    d076:	4a09      	ldr	r2, [pc, #36]	; (d09c <bt_keys_store+0x5c>)
    d078:	4b09      	ldr	r3, [pc, #36]	; (d0a0 <bt_keys_store+0x60>)
		BT_ERR("Failed to save keys (err %d)", err);
    d07a:	4601      	mov	r1, r0
    d07c:	1ad2      	subs	r2, r2, r3
    d07e:	08d2      	lsrs	r2, r2, #3
    d080:	0192      	lsls	r2, r2, #6
    d082:	4808      	ldr	r0, [pc, #32]	; (d0a4 <bt_keys_store+0x64>)
    d084:	f042 0201 	orr.w	r2, r2, #1
    d088:	f003 fe21 	bl	10cce <log_1>
}
    d08c:	4620      	mov	r0, r4
    d08e:	b00c      	add	sp, #48	; 0x30
    d090:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
    d092:	9200      	str	r2, [sp, #0]
    d094:	e7e1      	b.n	d05a <bt_keys_store+0x1a>
    d096:	bf00      	nop
    d098:	00018e3c 	.word	0x00018e3c
    d09c:	00015a48 	.word	0x00015a48
    d0a0:	00015a00 	.word	0x00015a00
    d0a4:	00018e1c 	.word	0x00018e1c

0000d0a8 <bt_keys_update_usage>:

#endif /* CONFIG_BT_SETTINGS */

#if IS_ENABLED(CONFIG_BT_KEYS_OVERWRITE_OLDEST)
void bt_keys_update_usage(uint8_t id, const bt_addr_le_t *addr)
{
    d0a8:	b508      	push	{r3, lr}
	struct bt_keys *keys = bt_keys_find_addr(id, addr);
    d0aa:	f7ff fed3 	bl	ce54 <bt_keys_find_addr>

	if (!keys) {
    d0ae:	b150      	cbz	r0, d0c6 <bt_keys_update_usage+0x1e>
		return;
	}

	if (last_keys_updated == keys) {
    d0b0:	4a05      	ldr	r2, [pc, #20]	; (d0c8 <bt_keys_update_usage+0x20>)
    d0b2:	6813      	ldr	r3, [r2, #0]
    d0b4:	4283      	cmp	r3, r0
    d0b6:	d006      	beq.n	d0c6 <bt_keys_update_usage+0x1e>
		return;
	}

	keys->aging_counter = ++aging_counter_val;
    d0b8:	4904      	ldr	r1, [pc, #16]	; (d0cc <bt_keys_update_usage+0x24>)
	last_keys_updated = keys;
    d0ba:	6010      	str	r0, [r2, #0]
	keys->aging_counter = ++aging_counter_val;
    d0bc:	680b      	ldr	r3, [r1, #0]
    d0be:	3301      	adds	r3, #1
    d0c0:	600b      	str	r3, [r1, #0]
    d0c2:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
	       keys->aging_counter);

	if (IS_ENABLED(CONFIG_BT_KEYS_SAVE_AGING_COUNTER_ON_PAIRING)) {
		bt_keys_store(keys);
	}
}
    d0c6:	bd08      	pop	{r3, pc}
    d0c8:	20001adc 	.word	0x20001adc
    d0cc:	20001a50 	.word	0x20001a50

0000d0d0 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
    d0d0:	2228      	movs	r2, #40	; 0x28
    d0d2:	4b02      	ldr	r3, [pc, #8]	; (d0dc <net_buf_pool_get+0xc>)
    d0d4:	fb02 3000 	mla	r0, r2, r0, r3
    d0d8:	4770      	bx	lr
    d0da:	bf00      	nop
    d0dc:	200006d0 	.word	0x200006d0

0000d0e0 <net_buf_id>:

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	return buf - pool->__bufs;
    d0e0:	2128      	movs	r1, #40	; 0x28
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    d0e2:	7983      	ldrb	r3, [r0, #6]
	return buf - pool->__bufs;
    d0e4:	4a04      	ldr	r2, [pc, #16]	; (d0f8 <net_buf_id+0x18>)
    d0e6:	fb01 2303 	mla	r3, r1, r3, r2
    d0ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    d0ec:	1ac0      	subs	r0, r0, r3
}
    d0ee:	4b03      	ldr	r3, [pc, #12]	; (d0fc <net_buf_id+0x1c>)
	return buf - pool->__bufs;
    d0f0:	10c0      	asrs	r0, r0, #3
}
    d0f2:	4358      	muls	r0, r3
    d0f4:	4770      	bx	lr
    d0f6:	bf00      	nop
    d0f8:	200006d0 	.word	0x200006d0
    d0fc:	aaaaaaab 	.word	0xaaaaaaab

0000d100 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
    d100:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    d102:	2428      	movs	r4, #40	; 0x28
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    d104:	7983      	ldrb	r3, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    d106:	4a09      	ldr	r2, [pc, #36]	; (d12c <fixed_data_alloc+0x2c>)
    d108:	fb04 2303 	mla	r3, r4, r3, r2
    d10c:	6a1b      	ldr	r3, [r3, #32]

	*size = MIN(fixed->data_size, *size);
    d10e:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    d110:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
    d112:	6823      	ldr	r3, [r4, #0]
    d114:	429a      	cmp	r2, r3
    d116:	bf94      	ite	ls
    d118:	600a      	strls	r2, [r1, #0]
    d11a:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
    d11c:	f7ff ffe0 	bl	d0e0 <net_buf_id>
    d120:	e9d4 2300 	ldrd	r2, r3, [r4]
}
    d124:	fb02 3000 	mla	r0, r2, r0, r3
    d128:	bd10      	pop	{r4, pc}
    d12a:	bf00      	nop
    d12c:	200006d0 	.word	0x200006d0

0000d130 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
    d130:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    d134:	4605      	mov	r5, r0
    d136:	9101      	str	r1, [sp, #4]
	uint64_t end = z_timeout_end_calc(timeout);
    d138:	4610      	mov	r0, r2
    d13a:	4619      	mov	r1, r3
{
    d13c:	4616      	mov	r6, r2
    d13e:	461f      	mov	r7, r3
	uint64_t end = z_timeout_end_calc(timeout);
    d140:	f008 f8c6 	bl	152d0 <z_timeout_end_calc>
    d144:	4680      	mov	r8, r0
    d146:	4689      	mov	r9, r1
	__asm__ volatile(
    d148:	f04f 0320 	mov.w	r3, #32
    d14c:	f3ef 8a11 	mrs	sl, BASEPRI
    d150:	f383 8811 	msr	BASEPRI, r3
    d154:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
    d158:	8b6b      	ldrh	r3, [r5, #26]
    d15a:	2b00      	cmp	r3, #0
    d15c:	d054      	beq.n	d208 <net_buf_alloc_len+0xd8>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
    d15e:	8b2a      	ldrh	r2, [r5, #24]
    d160:	429a      	cmp	r2, r3
    d162:	d93d      	bls.n	d1e0 <net_buf_alloc_len+0xb0>
	return z_impl_k_queue_get(queue, timeout);
    d164:	2200      	movs	r2, #0
    d166:	2300      	movs	r3, #0
    d168:	4628      	mov	r0, r5
    d16a:	f001 ff33 	bl	efd4 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
    d16e:	4604      	mov	r4, r0
    d170:	2800      	cmp	r0, #0
    d172:	d035      	beq.n	d1e0 <net_buf_alloc_len+0xb0>
	__asm__ volatile(
    d174:	f38a 8811 	msr	BASEPRI, sl
    d178:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
    d17c:	9b01      	ldr	r3, [sp, #4]
    d17e:	2b00      	cmp	r3, #0
    d180:	d052      	beq.n	d228 <net_buf_alloc_len+0xf8>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
    d182:	ea56 0307 	orrs.w	r3, r6, r7
    d186:	d010      	beq.n	d1aa <net_buf_alloc_len+0x7a>
    d188:	1c7b      	adds	r3, r7, #1
    d18a:	bf08      	it	eq
    d18c:	f1b6 3fff 	cmpeq.w	r6, #4294967295
    d190:	d00b      	beq.n	d1aa <net_buf_alloc_len+0x7a>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - z_tick_get();
    d192:	f002 fdfb 	bl	fd8c <z_tick_get>
    d196:	ebb8 0600 	subs.w	r6, r8, r0
    d19a:	eb69 0701 	sbc.w	r7, r9, r1
    d19e:	2e00      	cmp	r6, #0
    d1a0:	f177 0300 	sbcs.w	r3, r7, #0
    d1a4:	bfbc      	itt	lt
    d1a6:	2600      	movlt	r6, #0
    d1a8:	2700      	movlt	r7, #0
	return pool->alloc->cb->alloc(buf, size, timeout);
    d1aa:	2228      	movs	r2, #40	; 0x28
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    d1ac:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
    d1ae:	f8df 8090 	ldr.w	r8, [pc, #144]	; d240 <net_buf_alloc_len+0x110>
    d1b2:	4620      	mov	r0, r4
    d1b4:	fb02 8303 	mla	r3, r2, r3, r8
    d1b8:	6a1b      	ldr	r3, [r3, #32]
    d1ba:	4632      	mov	r2, r6
    d1bc:	681b      	ldr	r3, [r3, #0]
    d1be:	a901      	add	r1, sp, #4
    d1c0:	681d      	ldr	r5, [r3, #0]
    d1c2:	463b      	mov	r3, r7
    d1c4:	47a8      	blx	r5
    d1c6:	4605      	mov	r5, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
    d1c8:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
    d1ca:	bb70      	cbnz	r0, d22a <net_buf_alloc_len+0xfa>
	k_lifo_put(&pool->free, buf);
    d1cc:	79a0      	ldrb	r0, [r4, #6]
    d1ce:	4621      	mov	r1, r4
    d1d0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    d1d4:	eb08 00c0 	add.w	r0, r8, r0, lsl #3
    d1d8:	f007 fe66 	bl	14ea8 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
    d1dc:	462c      	mov	r4, r5
}
    d1de:	e01f      	b.n	d220 <net_buf_alloc_len+0xf0>
		uninit_count = pool->uninit_count--;
    d1e0:	8b68      	ldrh	r0, [r5, #26]
    d1e2:	1e43      	subs	r3, r0, #1
    d1e4:	836b      	strh	r3, [r5, #26]
    d1e6:	f38a 8811 	msr	BASEPRI, sl
    d1ea:	f3bf 8f6f 	isb	sy
	buf = &pool->__bufs[pool->buf_count - uninit_count];
    d1ee:	2318      	movs	r3, #24
    d1f0:	8b2c      	ldrh	r4, [r5, #24]
    d1f2:	1a24      	subs	r4, r4, r0
    d1f4:	6a68      	ldr	r0, [r5, #36]	; 0x24
    d1f6:	fb03 0404 	mla	r4, r3, r4, r0
	return pool - _net_buf_pool_list;
    d1fa:	4811      	ldr	r0, [pc, #68]	; (d240 <net_buf_alloc_len+0x110>)
    d1fc:	4b11      	ldr	r3, [pc, #68]	; (d244 <net_buf_alloc_len+0x114>)
    d1fe:	1a2d      	subs	r5, r5, r0
    d200:	10ed      	asrs	r5, r5, #3
    d202:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
    d204:	71a5      	strb	r5, [r4, #6]
		goto success;
    d206:	e7b9      	b.n	d17c <net_buf_alloc_len+0x4c>
    d208:	f38a 8811 	msr	BASEPRI, sl
    d20c:	f3bf 8f6f 	isb	sy
    d210:	4632      	mov	r2, r6
    d212:	463b      	mov	r3, r7
    d214:	4628      	mov	r0, r5
    d216:	f001 fedd 	bl	efd4 <z_impl_k_queue_get>
	if (!buf) {
    d21a:	4604      	mov	r4, r0
    d21c:	2800      	cmp	r0, #0
    d21e:	d1ad      	bne.n	d17c <net_buf_alloc_len+0x4c>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
    d220:	4620      	mov	r0, r4
    d222:	b002      	add	sp, #8
    d224:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		buf->__buf = NULL;
    d228:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
    d22a:	2300      	movs	r3, #0
	buf->ref   = 1U;
    d22c:	2201      	movs	r2, #1
	buf->frags = NULL;
    d22e:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
    d230:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
    d232:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
    d234:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
    d236:	6923      	ldr	r3, [r4, #16]
    d238:	81e2      	strh	r2, [r4, #14]
    d23a:	60a3      	str	r3, [r4, #8]
	return buf;
    d23c:	e7f0      	b.n	d220 <net_buf_alloc_len+0xf0>
    d23e:	bf00      	nop
    d240:	200006d0 	.word	0x200006d0
    d244:	cccccccd 	.word	0xcccccccd

0000d248 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
    d248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d24c:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
    d24e:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
    d250:	2728      	movs	r7, #40	; 0x28
    d252:	4d16      	ldr	r5, [pc, #88]	; (d2ac <net_buf_unref+0x64>)
	while (buf) {
    d254:	b90c      	cbnz	r4, d25a <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
    d256:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
    d25a:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
    d25c:	f8d4 8000 	ldr.w	r8, [r4]
		if (--buf->ref > 0) {
    d260:	3b01      	subs	r3, #1
    d262:	b2db      	uxtb	r3, r3
    d264:	7123      	strb	r3, [r4, #4]
    d266:	2b00      	cmp	r3, #0
    d268:	d1f5      	bne.n	d256 <net_buf_unref+0xe>
		if (buf->__buf) {
    d26a:	6921      	ldr	r1, [r4, #16]
    d26c:	b159      	cbz	r1, d286 <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
    d26e:	7963      	ldrb	r3, [r4, #5]
    d270:	079b      	lsls	r3, r3, #30
    d272:	d407      	bmi.n	d284 <net_buf_unref+0x3c>
	pool->alloc->cb->unref(buf, data);
    d274:	79a3      	ldrb	r3, [r4, #6]
    d276:	4620      	mov	r0, r4
    d278:	fb07 5303 	mla	r3, r7, r3, r5
    d27c:	6a1b      	ldr	r3, [r3, #32]
    d27e:	681b      	ldr	r3, [r3, #0]
    d280:	689b      	ldr	r3, [r3, #8]
    d282:	4798      	blx	r3
			buf->__buf = NULL;
    d284:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
    d286:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
    d288:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
    d28a:	fb07 5300 	mla	r3, r7, r0, r5
    d28e:	69db      	ldr	r3, [r3, #28]
		buf->frags = NULL;
    d290:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
    d292:	b11b      	cbz	r3, d29c <net_buf_unref+0x54>
			pool->destroy(buf);
    d294:	4620      	mov	r0, r4
    d296:	4798      	blx	r3
{
    d298:	4644      	mov	r4, r8
    d29a:	e7db      	b.n	d254 <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
    d29c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    d2a0:	4621      	mov	r1, r4
    d2a2:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    d2a6:	f007 fdff 	bl	14ea8 <k_queue_prepend>
}
    d2aa:	e7f5      	b.n	d298 <net_buf_unref+0x50>
    d2ac:	200006d0 	.word	0x200006d0

0000d2b0 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    d2b0:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
    d2b2:	4b09      	ldr	r3, [pc, #36]	; (d2d8 <gpio_nrfx_init+0x28>)
    d2b4:	781a      	ldrb	r2, [r3, #0]
    d2b6:	b96a      	cbnz	r2, d2d4 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
    d2b8:	2101      	movs	r1, #1
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    d2ba:	200d      	movs	r0, #13
		gpio_initialized = true;
    d2bc:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    d2be:	2105      	movs	r1, #5
    d2c0:	f7f6 ff02 	bl	40c8 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
    d2c4:	200d      	movs	r0, #13
    d2c6:	f7f6 fee1 	bl	408c <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
    d2ca:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    d2ce:	4b03      	ldr	r3, [pc, #12]	; (d2dc <gpio_nrfx_init+0x2c>)
    d2d0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
    d2d4:	2000      	movs	r0, #0
    d2d6:	bd08      	pop	{r3, pc}
    d2d8:	20002e1a 	.word	0x20002e1a
    d2dc:	5000d000 	.word	0x5000d000

0000d2e0 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    d2e0:	4b2a      	ldr	r3, [pc, #168]	; (d38c <gpio_nrfx_config+0xac>)
{
    d2e2:	b5f0      	push	{r4, r5, r6, r7, lr}
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    d2e4:	6844      	ldr	r4, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    d2e6:	482a      	ldr	r0, [pc, #168]	; (d390 <gpio_nrfx_config+0xb0>)
    d2e8:	4013      	ands	r3, r2
    d2ea:	4283      	cmp	r3, r0
    d2ec:	d03f      	beq.n	d36e <gpio_nrfx_config+0x8e>
    d2ee:	d80d      	bhi.n	d30c <gpio_nrfx_config+0x2c>
    d2f0:	2b06      	cmp	r3, #6
    d2f2:	d015      	beq.n	d320 <gpio_nrfx_config+0x40>
    d2f4:	d805      	bhi.n	d302 <gpio_nrfx_config+0x22>
    d2f6:	b19b      	cbz	r3, d320 <gpio_nrfx_config+0x40>
    d2f8:	2b02      	cmp	r3, #2
    d2fa:	d03a      	beq.n	d372 <gpio_nrfx_config+0x92>
    d2fc:	f06f 0015 	mvn.w	r0, #21
    d300:	e034      	b.n	d36c <gpio_nrfx_config+0x8c>
    d302:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    d306:	d1f9      	bne.n	d2fc <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0S1;
    d308:	2301      	movs	r3, #1
    d30a:	e009      	b.n	d320 <gpio_nrfx_config+0x40>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    d30c:	4821      	ldr	r0, [pc, #132]	; (d394 <gpio_nrfx_config+0xb4>)
    d30e:	4283      	cmp	r3, r0
    d310:	d031      	beq.n	d376 <gpio_nrfx_config+0x96>
    d312:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    d316:	d030      	beq.n	d37a <gpio_nrfx_config+0x9a>
    d318:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    d31c:	d1ee      	bne.n	d2fc <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_S0H1;
    d31e:	2302      	movs	r3, #2
	if ((flags & GPIO_PULL_UP) != 0) {
    d320:	06d0      	lsls	r0, r2, #27
		pull = NRF_GPIO_PIN_PULLUP;
    d322:	bf4c      	ite	mi
    d324:	2603      	movmi	r6, #3
		pull = NRF_GPIO_PIN_NOPULL;
    d326:	f3c2 1640 	ubfxpl	r6, r2, #5, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    d32a:	f482 7580 	eor.w	r5, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
    d32e:	0597      	lsls	r7, r2, #22
	dir = ((flags & GPIO_OUTPUT) != 0)
    d330:	f3c2 2040 	ubfx	r0, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    d334:	f3c5 2500 	ubfx	r5, r5, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
    d338:	d506      	bpl.n	d348 <gpio_nrfx_config+0x68>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    d33a:	f412 6f00 	tst.w	r2, #2048	; 0x800
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    d33e:	6867      	ldr	r7, [r4, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    d340:	d01d      	beq.n	d37e <gpio_nrfx_config+0x9e>
			nrf_gpio_port_out_set(reg, BIT(pin));
    d342:	2201      	movs	r2, #1
    d344:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
    d346:	60ba      	str	r2, [r7, #8]
    return pin_number >> 5;
    d348:	7a27      	ldrb	r7, [r4, #8]
        case 1: return NRF_P1;
    d34a:	4a13      	ldr	r2, [pc, #76]	; (d398 <gpio_nrfx_config+0xb8>)
    d34c:	4c13      	ldr	r4, [pc, #76]	; (d39c <gpio_nrfx_config+0xbc>)
    *p_pin = pin_number & 0x1F;
    d34e:	f001 011f 	and.w	r1, r1, #31
        case 1: return NRF_P1;
    d352:	2f01      	cmp	r7, #1
    d354:	bf08      	it	eq
    d356:	4614      	moveq	r4, r2
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    d358:	ea40 0245 	orr.w	r2, r0, r5, lsl #1
	return 0;
    d35c:	2000      	movs	r0, #0
    d35e:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    d362:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    d366:	3180      	adds	r1, #128	; 0x80
    d368:	f844 3021 	str.w	r3, [r4, r1, lsl #2]
}
    d36c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		drive = NRF_GPIO_PIN_H0D1;
    d36e:	2307      	movs	r3, #7
    d370:	e7d6      	b.n	d320 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0S1;
    d372:	2304      	movs	r3, #4
    d374:	e7d4      	b.n	d320 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0H1;
    d376:	2305      	movs	r3, #5
    d378:	e7d2      	b.n	d320 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_H0H1;
    d37a:	2303      	movs	r3, #3
    d37c:	e7d0      	b.n	d320 <gpio_nrfx_config+0x40>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
    d37e:	0552      	lsls	r2, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
    d380:	bf42      	ittt	mi
    d382:	2201      	movmi	r2, #1
    d384:	408a      	lslmi	r2, r1
    p_reg->OUTCLR = clr_mask;
    d386:	60fa      	strmi	r2, [r7, #12]
}
    d388:	e7de      	b.n	d348 <gpio_nrfx_config+0x68>
    d38a:	bf00      	nop
    d38c:	00f00006 	.word	0x00f00006
    d390:	00100006 	.word	0x00100006
    d394:	00400002 	.word	0x00400002
    d398:	50842800 	.word	0x50842800
    d39c:	50842500 	.word	0x50842500

0000d3a0 <nrf_gpio_cfg_sense_set>:
{
    d3a0:	b510      	push	{r4, lr}
        case 1: return NRF_P1;
    d3a2:	4b09      	ldr	r3, [pc, #36]	; (d3c8 <nrf_gpio_cfg_sense_set+0x28>)
    d3a4:	4c09      	ldr	r4, [pc, #36]	; (d3cc <nrf_gpio_cfg_sense_set+0x2c>)
    *p_pin = pin_number & 0x1F;
    d3a6:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
    d3aa:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
    d3ac:	2801      	cmp	r0, #1
    d3ae:	bf08      	it	eq
    d3b0:	4623      	moveq	r3, r4
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    d3b2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    d3b6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    d3ba:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    d3be:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    d3c2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
    d3c6:	bd10      	pop	{r4, pc}
    d3c8:	50842500 	.word	0x50842500
    d3cc:	50842800 	.word	0x50842800

0000d3d0 <gpio_nrfx_pin_interrupt_configure>:
{
    d3d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    d3d2:	460e      	mov	r6, r1
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    d3d4:	6841      	ldr	r1, [r0, #4]
    d3d6:	f006 051f 	and.w	r5, r6, #31
    d3da:	7a09      	ldrb	r1, [r1, #8]
	if ((mode == GPIO_INT_MODE_EDGE) &&
    d3dc:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
	struct gpio_nrfx_data *data = get_port_data(port);
    d3e0:	68c7      	ldr	r7, [r0, #12]
	if ((mode == GPIO_INT_MODE_EDGE) &&
    d3e2:	ea45 1541 	orr.w	r5, r5, r1, lsl #5
    d3e6:	d111      	bne.n	d40c <gpio_nrfx_pin_interrupt_configure+0x3c>
        case 1: return NRF_P1;
    d3e8:	4c5f      	ldr	r4, [pc, #380]	; (d568 <gpio_nrfx_pin_interrupt_configure+0x198>)
    d3ea:	f8df c188 	ldr.w	ip, [pc, #392]	; d574 <gpio_nrfx_pin_interrupt_configure+0x1a4>
    return pin_number >> 5;
    d3ee:	0968      	lsrs	r0, r5, #5
        case 1: return NRF_P1;
    d3f0:	2801      	cmp	r0, #1
    d3f2:	bf14      	ite	ne
    d3f4:	4620      	movne	r0, r4
    d3f6:	4660      	moveq	r0, ip
    *p_pin = pin_number & 0x1F;
    d3f8:	f005 011f 	and.w	r1, r5, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    d3fc:	3180      	adds	r1, #128	; 0x80
    d3fe:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    d402:	07c8      	lsls	r0, r1, #31
    d404:	d507      	bpl.n	d416 <gpio_nrfx_pin_interrupt_configure+0x46>
		return -ENOTSUP;
    d406:	f06f 0022 	mvn.w	r0, #34	; 0x22
    d40a:	e093      	b.n	d534 <gpio_nrfx_pin_interrupt_configure+0x164>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    d40c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    d410:	68f9      	ldr	r1, [r7, #12]
    d412:	f000 8091 	beq.w	d538 <gpio_nrfx_pin_interrupt_configure+0x168>
    d416:	2101      	movs	r1, #1
    d418:	68f8      	ldr	r0, [r7, #12]
    d41a:	40b1      	lsls	r1, r6
    d41c:	4301      	orrs	r1, r0
    d41e:	60f9      	str	r1, [r7, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    d420:	2101      	movs	r1, #1
    d422:	6978      	ldr	r0, [r7, #20]
    d424:	40b1      	lsls	r1, r6
    d426:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    d42a:	bf0c      	ite	eq
    d42c:	4308      	orreq	r0, r1
    d42e:	4388      	bicne	r0, r1
    d430:	6178      	str	r0, [r7, #20]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    d432:	2000      	movs	r0, #0
    d434:	69ba      	ldr	r2, [r7, #24]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
    d436:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    d43a:	bf0c      	ite	eq
    d43c:	430a      	orreq	r2, r1
    d43e:	438a      	bicne	r2, r1
    d440:	61ba      	str	r2, [r7, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    d442:	693a      	ldr	r2, [r7, #16]
    d444:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
    d448:	bf0c      	ite	eq
    d44a:	4311      	orreq	r1, r2
    d44c:	ea22 0101 	bicne.w	r1, r2, r1
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
    d450:	4a46      	ldr	r2, [pc, #280]	; (d56c <gpio_nrfx_pin_interrupt_configure+0x19c>)
    d452:	6139      	str	r1, [r7, #16]
    d454:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
    d458:	b2db      	uxtb	r3, r3
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    d45a:	f500 71a2 	add.w	r1, r0, #324	; 0x144
    d45e:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    d462:	f3c1 2105 	ubfx	r1, r1, #8, #6
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
    d466:	428d      	cmp	r5, r1
    d468:	d16b      	bne.n	d542 <gpio_nrfx_pin_interrupt_configure+0x172>
		    && (intenset & BIT(i))) {
    d46a:	fa23 f100 	lsr.w	r1, r3, r0
    d46e:	07c9      	lsls	r1, r1, #31
    d470:	d567      	bpl.n	d542 <gpio_nrfx_pin_interrupt_configure+0x172>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
    d472:	0083      	lsls	r3, r0, #2
    d474:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    d478:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    d47c:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
    d480:	f021 0101 	bic.w	r1, r1, #1
    d484:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
    d488:	2301      	movs	r3, #1
    d48a:	4083      	lsls	r3, r0
    p_reg->INTENCLR = mask;
    d48c:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
    d490:	b2c0      	uxtb	r0, r0
    d492:	f000 fe3b 	bl	e10c <nrfx_gpiote_channel_free>
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    d496:	4628      	mov	r0, r5
    d498:	2100      	movs	r1, #0
    d49a:	f7ff ff81 	bl	d3a0 <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
    d49e:	68f8      	ldr	r0, [r7, #12]
    d4a0:	40f0      	lsrs	r0, r6
    d4a2:	f010 0001 	ands.w	r0, r0, #1
    d4a6:	d045      	beq.n	d534 <gpio_nrfx_pin_interrupt_configure+0x164>
		if (data->trig_edge & BIT(pin)) {
    d4a8:	6978      	ldr	r0, [r7, #20]
    d4aa:	40f0      	lsrs	r0, r6
    d4ac:	f010 0401 	ands.w	r4, r0, #1
    d4b0:	d04e      	beq.n	d550 <gpio_nrfx_pin_interrupt_configure+0x180>
			if (data->double_edge & BIT(pin)) {
    d4b2:	69bb      	ldr	r3, [r7, #24]
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
    d4b4:	f10d 0007 	add.w	r0, sp, #7
			if (data->double_edge & BIT(pin)) {
    d4b8:	40f3      	lsrs	r3, r6
    d4ba:	07db      	lsls	r3, r3, #31
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
    d4bc:	bf57      	itett	pl
    d4be:	6939      	ldrpl	r1, [r7, #16]
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
    d4c0:	2603      	movmi	r6, #3
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
    d4c2:	fa21 f606 	lsrpl.w	r6, r1, r6
    d4c6:	f006 0601 	andpl.w	r6, r6, #1
    d4ca:	bf5c      	itt	pl
    d4cc:	f1c6 0602 	rsbpl	r6, r6, #2
    d4d0:	b2f6      	uxtbpl	r6, r6
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
    d4d2:	f000 fe3d 	bl	e150 <nrfx_gpiote_channel_alloc>
    d4d6:	4b26      	ldr	r3, [pc, #152]	; (d570 <gpio_nrfx_pin_interrupt_configure+0x1a0>)
    d4d8:	4298      	cmp	r0, r3
    d4da:	d136      	bne.n	d54a <gpio_nrfx_pin_interrupt_configure+0x17a>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    d4dc:	2000      	movs	r0, #0
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
    d4de:	f89d 1007 	ldrb.w	r1, [sp, #7]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    d4e2:	022d      	lsls	r5, r5, #8
    d4e4:	008b      	lsls	r3, r1, #2
    d4e6:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    d4ea:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    d4ee:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    d4f2:	f405 557c 	and.w	r5, r5, #16128	; 0x3f00
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    d4f6:	f422 324f 	bic.w	r2, r2, #211968	; 0x33c00
    d4fa:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    d4fe:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    d502:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    d506:	4315      	orrs	r5, r2
    return ((uint32_t)p_reg + event);
    d508:	008a      	lsls	r2, r1, #2
    d50a:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
    d50e:	f502 4251 	add.w	r2, r2, #53504	; 0xd100
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    d512:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
    d516:	f8c3 6510 	str.w	r6, [r3, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    d51a:	6010      	str	r0, [r2, #0]
    d51c:	6812      	ldr	r2, [r2, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    d51e:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    d522:	f042 0201 	orr.w	r2, r2, #1
    d526:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
    d52a:	2301      	movs	r3, #1
    p_reg->INTENSET = mask;
    d52c:	4a0f      	ldr	r2, [pc, #60]	; (d56c <gpio_nrfx_pin_interrupt_configure+0x19c>)
    d52e:	408b      	lsls	r3, r1
    d530:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    d534:	b003      	add	sp, #12
    d536:	bdf0      	pop	{r4, r5, r6, r7, pc}
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    d538:	2001      	movs	r0, #1
    d53a:	40b0      	lsls	r0, r6
    d53c:	ea21 0100 	bic.w	r1, r1, r0
    d540:	e76d      	b.n	d41e <gpio_nrfx_pin_interrupt_configure+0x4e>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    d542:	3001      	adds	r0, #1
    d544:	2808      	cmp	r0, #8
    d546:	d188      	bne.n	d45a <gpio_nrfx_pin_interrupt_configure+0x8a>
    d548:	e7a5      	b.n	d496 <gpio_nrfx_pin_interrupt_configure+0xc6>
		return -ENODEV;
    d54a:	f06f 0012 	mvn.w	r0, #18
    d54e:	e7f1      	b.n	d534 <gpio_nrfx_pin_interrupt_configure+0x164>
	if ((BIT(pin) & data->int_active_level) != 0U) {
    d550:	6939      	ldr	r1, [r7, #16]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    d552:	4628      	mov	r0, r5
	if ((BIT(pin) & data->int_active_level) != 0U) {
    d554:	40f1      	lsrs	r1, r6
    d556:	f001 0101 	and.w	r1, r1, #1
    d55a:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    d55e:	b2c9      	uxtb	r1, r1
    d560:	f7ff ff1e 	bl	d3a0 <nrf_gpio_cfg_sense_set>
	int res = 0;
    d564:	4620      	mov	r0, r4
    d566:	e7e5      	b.n	d534 <gpio_nrfx_pin_interrupt_configure+0x164>
    d568:	50842500 	.word	0x50842500
    d56c:	5000d000 	.word	0x5000d000
    d570:	0bad0000 	.word	0x0bad0000
    d574:	50842800 	.word	0x50842800

0000d578 <gpiote_event_handler>:
{
    d578:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint32_t fired_triggers[GPIO_COUNT] = {0};
    d57a:	2600      	movs	r6, #0
    d57c:	e9cd 6600 	strd	r6, r6, [sp]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    d580:	4d26      	ldr	r5, [pc, #152]	; (d61c <gpiote_event_handler+0xa4>)
    d582:	682c      	ldr	r4, [r5, #0]
	if (port_event) {
    d584:	b14c      	cbz	r4, d59a <gpiote_event_handler+0x22>
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(0)));
    d586:	4826      	ldr	r0, [pc, #152]	; (d620 <gpiote_event_handler+0xa8>)
    d588:	f006 fe17 	bl	141ba <check_level_trigger_pins>
		fired_triggers[0] =
    d58c:	9000      	str	r0, [sp, #0]
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(1)));
    d58e:	4825      	ldr	r0, [pc, #148]	; (d624 <gpiote_event_handler+0xac>)
    d590:	f006 fe13 	bl	141ba <check_level_trigger_pins>
		fired_triggers[1] =
    d594:	9001      	str	r0, [sp, #4]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    d596:	602e      	str	r6, [r5, #0]
    d598:	682b      	ldr	r3, [r5, #0]
{
    d59a:	2200      	movs	r2, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
    d59c:	2601      	movs	r6, #1
    d59e:	4694      	mov	ip, r2
    return p_reg->INTENSET & mask;
    d5a0:	4d21      	ldr	r5, [pc, #132]	; (d628 <gpiote_event_handler+0xb0>)
    d5a2:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
    d5a6:	fa06 f102 	lsl.w	r1, r6, r2
    d5aa:	4219      	tst	r1, r3
    d5ac:	d01b      	beq.n	d5e6 <gpiote_event_handler+0x6e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    d5ae:	0091      	lsls	r1, r2, #2
    d5b0:	f101 41a0 	add.w	r1, r1, #1342177280	; 0x50000000
    d5b4:	f501 4151 	add.w	r1, r1, #53504	; 0xd100
    d5b8:	680b      	ldr	r3, [r1, #0]
    d5ba:	b1a3      	cbz	r3, d5e6 <gpiote_event_handler+0x6e>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    d5bc:	f502 73a2 	add.w	r3, r2, #324	; 0x144
    d5c0:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
    d5c4:	af02      	add	r7, sp, #8
    d5c6:	f3c3 3040 	ubfx	r0, r3, #13, #1
    d5ca:	eb07 0080 	add.w	r0, r7, r0, lsl #2
    d5ce:	f850 7c08 	ldr.w	r7, [r0, #-8]
    d5d2:	f3c3 2304 	ubfx	r3, r3, #8, #5
    d5d6:	fa06 f303 	lsl.w	r3, r6, r3
    d5da:	433b      	orrs	r3, r7
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    d5dc:	f8c1 c000 	str.w	ip, [r1]
    d5e0:	f840 3c08 	str.w	r3, [r0, #-8]
    d5e4:	680b      	ldr	r3, [r1, #0]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    d5e6:	3201      	adds	r2, #1
    d5e8:	2a08      	cmp	r2, #8
    d5ea:	d1da      	bne.n	d5a2 <gpiote_event_handler+0x2a>
	if (fired_triggers[0]) {
    d5ec:	9a00      	ldr	r2, [sp, #0]
    d5ee:	b11a      	cbz	r2, d5f8 <gpiote_event_handler+0x80>
	gpio_fire_callbacks(list, port, pins);
    d5f0:	490b      	ldr	r1, [pc, #44]	; (d620 <gpiote_event_handler+0xa8>)
    d5f2:	480e      	ldr	r0, [pc, #56]	; (d62c <gpiote_event_handler+0xb4>)
    d5f4:	f006 fd7e 	bl	140f4 <gpio_fire_callbacks>
	if (fired_triggers[1]) {
    d5f8:	9a01      	ldr	r2, [sp, #4]
    d5fa:	b11a      	cbz	r2, d604 <gpiote_event_handler+0x8c>
	gpio_fire_callbacks(list, port, pins);
    d5fc:	4909      	ldr	r1, [pc, #36]	; (d624 <gpiote_event_handler+0xac>)
    d5fe:	480c      	ldr	r0, [pc, #48]	; (d630 <gpiote_event_handler+0xb8>)
    d600:	f006 fd78 	bl	140f4 <gpio_fire_callbacks>
	if (port_event) {
    d604:	b144      	cbz	r4, d618 <gpiote_event_handler+0xa0>
		cfg_level_pins(DEVICE_DT_GET(GPIO(0)));
    d606:	4806      	ldr	r0, [pc, #24]	; (d620 <gpiote_event_handler+0xa8>)
    d608:	f006 fdff 	bl	1420a <cfg_level_pins>
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
    d60c:	4805      	ldr	r0, [pc, #20]	; (d624 <gpiote_event_handler+0xac>)
}
    d60e:	b003      	add	sp, #12
    d610:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
    d614:	f006 bdf9 	b.w	1420a <cfg_level_pins>
}
    d618:	b003      	add	sp, #12
    d61a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d61c:	5000d17c 	.word	0x5000d17c
    d620:	20000578 	.word	0x20000578
    d624:	20000588 	.word	0x20000588
    d628:	5000d000 	.word	0x5000d000
    d62c:	20001ae4 	.word	0x20001ae4
    d630:	20001b00 	.word	0x20001b00

0000d634 <vipm_nrf_1_register_callback>:
		    &vipm_nrf_##_idx##_driver_api)

#define VIPM_DEVICE(_idx, _)						\
	IF_ENABLED(CONFIG_IPM_MSG_CH_##_idx##_ENABLE, (VIPM_DEVICE_1(_idx);))

UTIL_LISTIFY(NRFX_IPC_ID_MAX_VALUE, VIPM_DEVICE, _);
    d634:	4b02      	ldr	r3, [pc, #8]	; (d640 <vipm_nrf_1_register_callback+0xc>)
    d636:	6059      	str	r1, [r3, #4]
    d638:	645a      	str	r2, [r3, #68]	; 0x44
    d63a:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
    d63e:	4770      	bx	lr
    d640:	20001b20 	.word	0x20001b20

0000d644 <vipm_nrf_0_set_enabled>:
    d644:	b508      	push	{r3, lr}
    d646:	4906      	ldr	r1, [pc, #24]	; (d660 <vipm_nrf_0_set_enabled+0x1c>)
    d648:	4b06      	ldr	r3, [pc, #24]	; (d664 <vipm_nrf_0_set_enabled+0x20>)
    d64a:	4807      	ldr	r0, [pc, #28]	; (d668 <vipm_nrf_0_set_enabled+0x24>)
    d64c:	1ac9      	subs	r1, r1, r3
    d64e:	08c9      	lsrs	r1, r1, #3
    d650:	0189      	lsls	r1, r1, #6
    d652:	f041 0101 	orr.w	r1, r1, #1
    d656:	f003 fb2d 	bl	10cb4 <log_0>
    d65a:	f06f 0015 	mvn.w	r0, #21
    d65e:	bd08      	pop	{r3, pc}
    d660:	00015a90 	.word	0x00015a90
    d664:	00015a00 	.word	0x00015a00
    d668:	00018e58 	.word	0x00018e58

0000d66c <vipm_nrf_0_register_callback>:
    d66c:	4904      	ldr	r1, [pc, #16]	; (d680 <vipm_nrf_0_register_callback+0x14>)
    d66e:	4b05      	ldr	r3, [pc, #20]	; (d684 <vipm_nrf_0_register_callback+0x18>)
    d670:	4805      	ldr	r0, [pc, #20]	; (d688 <vipm_nrf_0_register_callback+0x1c>)
    d672:	1ac9      	subs	r1, r1, r3
    d674:	08c9      	lsrs	r1, r1, #3
    d676:	0189      	lsls	r1, r1, #6
    d678:	f041 0102 	orr.w	r1, r1, #2
    d67c:	f003 bb1a 	b.w	10cb4 <log_0>
    d680:	00015a90 	.word	0x00015a90
    d684:	00015a00 	.word	0x00015a00
    d688:	00018e74 	.word	0x00018e74

0000d68c <vipm_nrf_1_send>:
    d68c:	b508      	push	{r3, lr}
    d68e:	4906      	ldr	r1, [pc, #24]	; (d6a8 <vipm_nrf_1_send+0x1c>)
    d690:	4b06      	ldr	r3, [pc, #24]	; (d6ac <vipm_nrf_1_send+0x20>)
    d692:	4807      	ldr	r0, [pc, #28]	; (d6b0 <vipm_nrf_1_send+0x24>)
    d694:	1ac9      	subs	r1, r1, r3
    d696:	08c9      	lsrs	r1, r1, #3
    d698:	0189      	lsls	r1, r1, #6
    d69a:	f041 0101 	orr.w	r1, r1, #1
    d69e:	f003 fb09 	bl	10cb4 <log_0>
    d6a2:	f06f 0015 	mvn.w	r0, #21
    d6a6:	bd08      	pop	{r3, pc}
    d6a8:	00015a90 	.word	0x00015a90
    d6ac:	00015a00 	.word	0x00015a00
    d6b0:	00018ea6 	.word	0x00018ea6

0000d6b4 <vipm_nrf_init>:
{
    d6b4:	b538      	push	{r3, r4, r5, lr}
	if (!nrfx_vipm_data.ipm_init) {
    d6b6:	4d0b      	ldr	r5, [pc, #44]	; (d6e4 <vipm_nrf_init+0x30>)
    d6b8:	f895 40c0 	ldrb.w	r4, [r5, #192]	; 0xc0
    d6bc:	b97c      	cbnz	r4, d6de <vipm_nrf_init+0x2a>
{
	/* Init IPC */
#if IS_ENABLED(CONFIG_IPM_NRF_SINGLE_INSTANCE)
	nrfx_ipc_init(0, nrfx_ipc_handler, (void *)&nrfx_ipm_data);
#else
	nrfx_ipc_init(0, vipm_dispatcher, (void *)&nrfx_ipm_data);
    d6be:	4a0a      	ldr	r2, [pc, #40]	; (d6e8 <vipm_nrf_init+0x34>)
    d6c0:	490a      	ldr	r1, [pc, #40]	; (d6ec <vipm_nrf_init+0x38>)
    d6c2:	4620      	mov	r0, r4
    d6c4:	f000 fd7c 	bl	e1c0 <nrfx_ipc_init>
#endif
	IRQ_CONNECT(DT_INST_IRQN(0),
    d6c8:	4622      	mov	r2, r4
    d6ca:	2101      	movs	r1, #1
    d6cc:	202a      	movs	r0, #42	; 0x2a
    d6ce:	f7f6 fcfb 	bl	40c8 <z_arm_irq_priority_set>
		    DT_INST_IRQ(0, priority),
		    nrfx_isr, nrfx_ipc_irq_handler, 0);

	/* Set up signals and channels */
	nrfx_ipc_config_load(&ipc_cfg);
    d6d2:	4807      	ldr	r0, [pc, #28]	; (d6f0 <vipm_nrf_init+0x3c>)
    d6d4:	f000 fd8c 	bl	e1f0 <nrfx_ipc_config_load>
		nrfx_vipm_data.ipm_init = true;
    d6d8:	2301      	movs	r3, #1
    d6da:	f885 30c0 	strb.w	r3, [r5, #192]	; 0xc0
}
    d6de:	2000      	movs	r0, #0
    d6e0:	bd38      	pop	{r3, r4, r5, pc}
    d6e2:	bf00      	nop
    d6e4:	20001b20 	.word	0x20001b20
    d6e8:	20001b18 	.word	0x20001b18
    d6ec:	0000d6f5 	.word	0x0000d6f5
    d6f0:	0001633c 	.word	0x0001633c

0000d6f4 <vipm_dispatcher>:
{
    d6f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d6f8:	4605      	mov	r5, r0
		event_mask &= ~BIT(event_idx);
    d6fa:	f04f 0801 	mov.w	r8, #1
		if (nrfx_vipm_data.callback[event_idx] != NULL) {
    d6fe:	4e0e      	ldr	r6, [pc, #56]	; (d738 <vipm_dispatcher+0x44>)
	while (event_mask) {
    d700:	b90d      	cbnz	r5, d706 <vipm_dispatcher+0x12>
}
    d702:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
    d706:	fa95 f3a5 	rbit	r3, r5
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
    d70a:	fab3 f383 	clz	r3, r3
		if (nrfx_vipm_data.callback[event_idx] != NULL) {
    d70e:	f856 7023 	ldr.w	r7, [r6, r3, lsl #2]
		event_mask &= ~BIT(event_idx);
    d712:	fa08 f203 	lsl.w	r2, r8, r3
    d716:	ea25 0502 	bic.w	r5, r5, r2
		if (nrfx_vipm_data.callback[event_idx] != NULL) {
    d71a:	2f00      	cmp	r7, #0
    d71c:	d0f0      	beq.n	d700 <vipm_dispatcher+0xc>
			nrfx_vipm_data.callback[event_idx]
    d71e:	f103 0420 	add.w	r4, r3, #32
    d722:	f103 0110 	add.w	r1, r3, #16
    d726:	2300      	movs	r3, #0
    d728:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
    d72c:	461a      	mov	r2, r3
    d72e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
    d732:	47b8      	blx	r7
    d734:	e7e4      	b.n	d700 <vipm_dispatcher+0xc>
    d736:	bf00      	nop
    d738:	20001b20 	.word	0x20001b20

0000d73c <vipm_nrf_0_send>:
UTIL_LISTIFY(NRFX_IPC_ID_MAX_VALUE, VIPM_DEVICE, _);
    d73c:	2a10      	cmp	r2, #16
    d73e:	b508      	push	{r3, lr}
    d740:	d81c      	bhi.n	d77c <vipm_nrf_0_send+0x40>
    d742:	b14a      	cbz	r2, d758 <vipm_nrf_0_send+0x1c>
    d744:	490f      	ldr	r1, [pc, #60]	; (d784 <vipm_nrf_0_send+0x48>)
    d746:	4b10      	ldr	r3, [pc, #64]	; (d788 <vipm_nrf_0_send+0x4c>)
    d748:	4810      	ldr	r0, [pc, #64]	; (d78c <vipm_nrf_0_send+0x50>)
    d74a:	1ac9      	subs	r1, r1, r3
    d74c:	08c9      	lsrs	r1, r1, #3
    d74e:	0189      	lsls	r1, r1, #6
    d750:	f041 0102 	orr.w	r1, r1, #2
    d754:	f003 faae 	bl	10cb4 <log_0>
    d758:	9b02      	ldr	r3, [sp, #8]
    d75a:	2b00      	cmp	r3, #0
    d75c:	dd09      	ble.n	d772 <vipm_nrf_0_send+0x36>
    d75e:	4909      	ldr	r1, [pc, #36]	; (d784 <vipm_nrf_0_send+0x48>)
    d760:	4b09      	ldr	r3, [pc, #36]	; (d788 <vipm_nrf_0_send+0x4c>)
    d762:	480b      	ldr	r0, [pc, #44]	; (d790 <vipm_nrf_0_send+0x54>)
    d764:	1ac9      	subs	r1, r1, r3
    d766:	08c9      	lsrs	r1, r1, #3
    d768:	0189      	lsls	r1, r1, #6
    d76a:	f041 0102 	orr.w	r1, r1, #2
    d76e:	f003 faa1 	bl	10cb4 <log_0>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ipc_task_trigger(NRF_IPC_Type * p_reg, nrf_ipc_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    d772:	2201      	movs	r2, #1
    d774:	2000      	movs	r0, #0
    d776:	4b07      	ldr	r3, [pc, #28]	; (d794 <vipm_nrf_0_send+0x58>)
    d778:	601a      	str	r2, [r3, #0]
    d77a:	bd08      	pop	{r3, pc}
    d77c:	f06f 0015 	mvn.w	r0, #21
    d780:	e7fb      	b.n	d77a <vipm_nrf_0_send+0x3e>
    d782:	bf00      	nop
    d784:	00015a90 	.word	0x00015a90
    d788:	00015a00 	.word	0x00015a00
    d78c:	00018ec2 	.word	0x00018ec2
    d790:	00018ef6 	.word	0x00018ef6
    d794:	5002a000 	.word	0x5002a000

0000d798 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
    d798:	4b02      	ldr	r3, [pc, #8]	; (d7a4 <flash_nrf_pages_layout+0xc>)
    d79a:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
    d79c:	2301      	movs	r3, #1
    d79e:	6013      	str	r3, [r2, #0]
}
    d7a0:	4770      	bx	lr
    d7a2:	bf00      	nop
    d7a4:	20001be4 	.word	0x20001be4

0000d7a8 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
    d7a8:	4800      	ldr	r0, [pc, #0]	; (d7ac <flash_nrf_get_parameters+0x4>)
    d7aa:	4770      	bx	lr
    d7ac:	00016400 	.word	0x00016400

0000d7b0 <flash_nrf_read>:
{
    d7b0:	b570      	push	{r4, r5, r6, lr}
    d7b2:	460d      	mov	r5, r1
	if (is_regular_addr_valid(addr, len)) {
    d7b4:	4619      	mov	r1, r3
    d7b6:	4628      	mov	r0, r5
{
    d7b8:	4616      	mov	r6, r2
    d7ba:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
    d7bc:	f006 fd60 	bl	14280 <is_regular_addr_valid>
    d7c0:	b970      	cbnz	r0, d7e0 <flash_nrf_read+0x30>
    d7c2:	4a0c      	ldr	r2, [pc, #48]	; (d7f4 <flash_nrf_read+0x44>)
    d7c4:	4b0c      	ldr	r3, [pc, #48]	; (d7f8 <flash_nrf_read+0x48>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
    d7c6:	480d      	ldr	r0, [pc, #52]	; (d7fc <flash_nrf_read+0x4c>)
    d7c8:	1a9b      	subs	r3, r3, r2
    d7ca:	08db      	lsrs	r3, r3, #3
    d7cc:	019b      	lsls	r3, r3, #6
    d7ce:	4622      	mov	r2, r4
    d7d0:	4629      	mov	r1, r5
    d7d2:	f043 0301 	orr.w	r3, r3, #1
    d7d6:	f003 fa8e 	bl	10cf6 <log_2>
		return -EINVAL;
    d7da:	f06f 0015 	mvn.w	r0, #21
}
    d7de:	bd70      	pop	{r4, r5, r6, pc}
	if (!len) {
    d7e0:	b134      	cbz	r4, d7f0 <flash_nrf_read+0x40>
	memcpy(data, (void *)addr, len);
    d7e2:	4622      	mov	r2, r4
    d7e4:	4629      	mov	r1, r5
    d7e6:	4630      	mov	r0, r6
    d7e8:	f004 fd97 	bl	1231a <memcpy>
	return 0;
    d7ec:	2000      	movs	r0, #0
    d7ee:	e7f6      	b.n	d7de <flash_nrf_read+0x2e>
		return 0;
    d7f0:	4620      	mov	r0, r4
    d7f2:	e7f4      	b.n	d7de <flash_nrf_read+0x2e>
    d7f4:	00015a00 	.word	0x00015a00
    d7f8:	00015a80 	.word	0x00015a80
    d7fc:	00018f34 	.word	0x00018f34

0000d800 <flash_nrf_erase>:
{
    d800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d802:	460d      	mov	r5, r1
    d804:	4614      	mov	r4, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    d806:	f006 fe2e 	bl	14466 <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
    d80a:	4621      	mov	r1, r4
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    d80c:	4606      	mov	r6, r0
	if (is_regular_addr_valid(addr, size)) {
    d80e:	4628      	mov	r0, r5
    d810:	f006 fd36 	bl	14280 <is_regular_addr_valid>
    d814:	462f      	mov	r7, r5
    d816:	b378      	cbz	r0, d878 <flash_nrf_erase+0x78>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
    d818:	fbb5 f3f6 	udiv	r3, r5, r6
    d81c:	fb06 5313 	mls	r3, r6, r3, r5
    d820:	b923      	cbnz	r3, d82c <flash_nrf_erase+0x2c>
    d822:	fbb4 f0f6 	udiv	r0, r4, r6
    d826:	fb06 4010 	mls	r0, r6, r0, r4
    d82a:	b170      	cbz	r0, d84a <flash_nrf_erase+0x4a>
    d82c:	4a18      	ldr	r2, [pc, #96]	; (d890 <flash_nrf_erase+0x90>)
    d82e:	4b19      	ldr	r3, [pc, #100]	; (d894 <flash_nrf_erase+0x94>)
			LOG_ERR("unaligned address: 0x%08lx:%zu",
    d830:	4629      	mov	r1, r5
    d832:	1a9b      	subs	r3, r3, r2
    d834:	4622      	mov	r2, r4
    d836:	08db      	lsrs	r3, r3, #3
    d838:	019b      	lsls	r3, r3, #6
    d83a:	4817      	ldr	r0, [pc, #92]	; (d898 <flash_nrf_erase+0x98>)
    d83c:	f043 0301 	orr.w	r3, r3, #1
		LOG_ERR("invalid address: 0x%08lx:%zu",
    d840:	f003 fa59 	bl	10cf6 <log_2>
		return -EINVAL;
    d844:	f06f 0015 	mvn.w	r0, #21
    d848:	e015      	b.n	d876 <flash_nrf_erase+0x76>
		if (!n_pages) {
    d84a:	42a6      	cmp	r6, r4
    d84c:	d813      	bhi.n	d876 <flash_nrf_erase+0x76>
	return z_impl_k_sem_take(sem, timeout);
    d84e:	f04f 32ff 	mov.w	r2, #4294967295
    d852:	f04f 33ff 	mov.w	r3, #4294967295
    d856:	4811      	ldr	r0, [pc, #68]	; (d89c <flash_nrf_erase+0x9c>)
    d858:	f001 ffb4 	bl	f7c4 <z_impl_k_sem_take>

#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

static int erase_op(void *context)
{
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    d85c:	f006 fe03 	bl	14466 <nrfx_nvmc_flash_page_size_get>
    d860:	4605      	mov	r5, r0
		if (nrfx_nvmc_page_partial_erase_continue()) {
			e_ctx->len -= pg_size;
			e_ctx->flash_addr += pg_size;
		}
#else
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
    d862:	4638      	mov	r0, r7
    d864:	f000 fd1e 	bl	e2a4 <nrfx_nvmc_page_erase>
			}

		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

	} while (e_ctx->len > 0);
    d868:	1b64      	subs	r4, r4, r5
    d86a:	442f      	add	r7, r5
    d86c:	d1f9      	bne.n	d862 <flash_nrf_erase+0x62>
	z_impl_k_sem_give(sem);
    d86e:	480b      	ldr	r0, [pc, #44]	; (d89c <flash_nrf_erase+0x9c>)
    d870:	f001 ff82 	bl	f778 <z_impl_k_sem_give>
	return ret;
    d874:	4620      	mov	r0, r4
}
    d876:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d878:	4a05      	ldr	r2, [pc, #20]	; (d890 <flash_nrf_erase+0x90>)
    d87a:	4b06      	ldr	r3, [pc, #24]	; (d894 <flash_nrf_erase+0x94>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
    d87c:	4629      	mov	r1, r5
    d87e:	1a9b      	subs	r3, r3, r2
    d880:	08db      	lsrs	r3, r3, #3
    d882:	019b      	lsls	r3, r3, #6
    d884:	4622      	mov	r2, r4
    d886:	4806      	ldr	r0, [pc, #24]	; (d8a0 <flash_nrf_erase+0xa0>)
    d888:	f043 0301 	orr.w	r3, r3, #1
    d88c:	e7d8      	b.n	d840 <flash_nrf_erase+0x40>
    d88e:	bf00      	nop
    d890:	00015a00 	.word	0x00015a00
    d894:	00015a80 	.word	0x00015a80
    d898:	00018f51 	.word	0x00018f51
    d89c:	20001bec 	.word	0x20001bec
    d8a0:	00018f34 	.word	0x00018f34

0000d8a4 <nrf_flash_init>:
{
    d8a4:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
    d8a6:	2201      	movs	r2, #1
    d8a8:	4806      	ldr	r0, [pc, #24]	; (d8c4 <nrf_flash_init+0x20>)
    d8aa:	4611      	mov	r1, r2
    d8ac:	f007 fc3d 	bl	1512a <z_impl_k_sem_init>
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
    d8b0:	f006 fddc 	bl	1446c <nrfx_nvmc_flash_page_count_get>
    d8b4:	4c04      	ldr	r4, [pc, #16]	; (d8c8 <nrf_flash_init+0x24>)
    d8b6:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
    d8b8:	f006 fdd5 	bl	14466 <nrfx_nvmc_flash_page_size_get>
    d8bc:	6060      	str	r0, [r4, #4]
}
    d8be:	2000      	movs	r0, #0
    d8c0:	bd10      	pop	{r4, pc}
    d8c2:	bf00      	nop
    d8c4:	20001bec 	.word	0x20001bec
    d8c8:	20001be4 	.word	0x20001be4

0000d8cc <flash_nrf_write>:
{
    d8cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d8ce:	460e      	mov	r6, r1
	if (is_regular_addr_valid(addr, len)) {
    d8d0:	4619      	mov	r1, r3
    d8d2:	4630      	mov	r0, r6
{
    d8d4:	4617      	mov	r7, r2
    d8d6:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
    d8d8:	f006 fcd2 	bl	14280 <is_regular_addr_valid>
    d8dc:	b970      	cbnz	r0, d8fc <flash_nrf_write+0x30>
    d8de:	4a1f      	ldr	r2, [pc, #124]	; (d95c <flash_nrf_write+0x90>)
    d8e0:	4b1f      	ldr	r3, [pc, #124]	; (d960 <flash_nrf_write+0x94>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
    d8e2:	4631      	mov	r1, r6
    d8e4:	1a9b      	subs	r3, r3, r2
    d8e6:	4622      	mov	r2, r4
    d8e8:	08db      	lsrs	r3, r3, #3
    d8ea:	019b      	lsls	r3, r3, #6
    d8ec:	481d      	ldr	r0, [pc, #116]	; (d964 <flash_nrf_write+0x98>)
    d8ee:	f043 0301 	orr.w	r3, r3, #1
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
    d8f2:	f003 fa00 	bl	10cf6 <log_2>
		return -EINVAL;
    d8f6:	f06f 0015 	mvn.w	r0, #21
}
    d8fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (data & 0x3) ? false : true;
    d8fc:	ea46 0504 	orr.w	r5, r6, r4
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
    d900:	f015 0503 	ands.w	r5, r5, #3
    d904:	d00a      	beq.n	d91c <flash_nrf_write+0x50>
    d906:	4a15      	ldr	r2, [pc, #84]	; (d95c <flash_nrf_write+0x90>)
    d908:	4b15      	ldr	r3, [pc, #84]	; (d960 <flash_nrf_write+0x94>)
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
    d90a:	4631      	mov	r1, r6
    d90c:	1a9b      	subs	r3, r3, r2
    d90e:	08db      	lsrs	r3, r3, #3
    d910:	019b      	lsls	r3, r3, #6
    d912:	4622      	mov	r2, r4
    d914:	4814      	ldr	r0, [pc, #80]	; (d968 <flash_nrf_write+0x9c>)
    d916:	f043 0301 	orr.w	r3, r3, #1
    d91a:	e7ea      	b.n	d8f2 <flash_nrf_write+0x26>
	if (!len) {
    d91c:	b1dc      	cbz	r4, d956 <flash_nrf_write+0x8a>
	return z_impl_k_sem_take(sem, timeout);
    d91e:	f04f 32ff 	mov.w	r2, #4294967295
    d922:	f04f 33ff 	mov.w	r3, #4294967295
    d926:	4811      	ldr	r0, [pc, #68]	; (d96c <flash_nrf_write+0xa0>)
    d928:	f001 ff4c 	bl	f7c4 <z_impl_k_sem_take>
	w_ctx->flash_addr += shift;
	w_ctx->data_addr += shift;
	w_ctx->len -= shift;
}

static int write_op(void *context)
    d92c:	f024 0403 	bic.w	r4, r4, #3
		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */
	}
#endif /* CONFIG_SOC_FLASH_NRF_EMULATE_ONE_BYTE_WRITE_ACCESS */
	/* Write all the 4-byte aligned data */
	while (w_ctx->len >= sizeof(uint32_t)) {
    d930:	42a5      	cmp	r5, r4
    d932:	eb05 0006 	add.w	r0, r5, r6
    d936:	d109      	bne.n	d94c <flash_nrf_write+0x80>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    d938:	4a0d      	ldr	r2, [pc, #52]	; (d970 <flash_nrf_write+0xa4>)
    d93a:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
    d93e:	07db      	lsls	r3, r3, #31
    d940:	d5fb      	bpl.n	d93a <flash_nrf_write+0x6e>
	z_impl_k_sem_give(sem);
    d942:	480a      	ldr	r0, [pc, #40]	; (d96c <flash_nrf_write+0xa0>)
    d944:	f001 ff18 	bl	f778 <z_impl_k_sem_give>
	return ret;
    d948:	2000      	movs	r0, #0
}
    d94a:	e7d6      	b.n	d8fa <flash_nrf_write+0x2e>
		if (SUSPEND_POFWARN()) {
			return -ECANCELED;
		}

		nrfx_nvmc_word_write(w_ctx->flash_addr,
    d94c:	5979      	ldr	r1, [r7, r5]
    d94e:	f000 fcc7 	bl	e2e0 <nrfx_nvmc_word_write>
	w_ctx->len -= shift;
    d952:	3504      	adds	r5, #4
}
    d954:	e7ec      	b.n	d930 <flash_nrf_write+0x64>
		return 0;
    d956:	4620      	mov	r0, r4
    d958:	e7cf      	b.n	d8fa <flash_nrf_write+0x2e>
    d95a:	bf00      	nop
    d95c:	00015a00 	.word	0x00015a00
    d960:	00015a80 	.word	0x00015a80
    d964:	00018f34 	.word	0x00018f34
    d968:	00018f70 	.word	0x00018f70
    d96c:	20001bec 	.word	0x20001bec
    d970:	50039000 	.word	0x50039000

0000d974 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    d974:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    d976:	794b      	ldrb	r3, [r1, #5]
    d978:	2b01      	cmp	r3, #1
    d97a:	d02b      	beq.n	d9d4 <uarte_nrfx_configure+0x60>
    d97c:	2b03      	cmp	r3, #3
    d97e:	d126      	bne.n	d9ce <uarte_nrfx_configure+0x5a>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    d980:	2710      	movs	r7, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    d982:	798b      	ldrb	r3, [r1, #6]
    d984:	2b03      	cmp	r3, #3
    d986:	d122      	bne.n	d9ce <uarte_nrfx_configure+0x5a>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    d988:	79cd      	ldrb	r5, [r1, #7]
    d98a:	b125      	cbz	r5, d996 <uarte_nrfx_configure+0x22>
    d98c:	2d01      	cmp	r5, #1
    d98e:	d11e      	bne.n	d9ce <uarte_nrfx_configure+0x5a>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
    d990:	6843      	ldr	r3, [r0, #4]
    d992:	791b      	ldrb	r3, [r3, #4]
    d994:	b1db      	cbz	r3, d9ce <uarte_nrfx_configure+0x5a>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    d996:	790a      	ldrb	r2, [r1, #4]
    d998:	2a01      	cmp	r2, #1
    d99a:	d01d      	beq.n	d9d8 <uarte_nrfx_configure+0x64>
    d99c:	2a02      	cmp	r2, #2
    d99e:	d01f      	beq.n	d9e0 <uarte_nrfx_configure+0x6c>
    d9a0:	b9aa      	cbnz	r2, d9ce <uarte_nrfx_configure+0x5a>
    d9a2:	4614      	mov	r4, r2
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    d9a4:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    d9a6:	6846      	ldr	r6, [r0, #4]
	switch (baudrate) {
    d9a8:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    d9ac:	6836      	ldr	r6, [r6, #0]
	switch (baudrate) {
    d9ae:	d06e      	beq.n	da8e <uarte_nrfx_configure+0x11a>
    d9b0:	d833      	bhi.n	da1a <uarte_nrfx_configure+0xa6>
    d9b2:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    d9b6:	d06d      	beq.n	da94 <uarte_nrfx_configure+0x120>
    d9b8:	d81c      	bhi.n	d9f4 <uarte_nrfx_configure+0x80>
    d9ba:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    d9be:	d06b      	beq.n	da98 <uarte_nrfx_configure+0x124>
    d9c0:	d810      	bhi.n	d9e4 <uarte_nrfx_configure+0x70>
    d9c2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    d9c6:	d06a      	beq.n	da9e <uarte_nrfx_configure+0x12a>
    d9c8:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    d9cc:	d06a      	beq.n	daa4 <uarte_nrfx_configure+0x130>
    d9ce:	f06f 0022 	mvn.w	r0, #34	; 0x22
    d9d2:	e05b      	b.n	da8c <uarte_nrfx_configure+0x118>
	switch (cfg->stop_bits) {
    d9d4:	2700      	movs	r7, #0
    d9d6:	e7d4      	b.n	d982 <uarte_nrfx_configure+0xe>
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
    d9d8:	f44f 7480 	mov.w	r4, #256	; 0x100
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    d9dc:	220e      	movs	r2, #14
    d9de:	e7e1      	b.n	d9a4 <uarte_nrfx_configure+0x30>
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
    d9e0:	2400      	movs	r4, #0
    d9e2:	e7fb      	b.n	d9dc <uarte_nrfx_configure+0x68>
	switch (baudrate) {
    d9e4:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    d9e8:	d05f      	beq.n	daaa <uarte_nrfx_configure+0x136>
    d9ea:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    d9ee:	d1ee      	bne.n	d9ce <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    d9f0:	4b38      	ldr	r3, [pc, #224]	; (dad4 <uarte_nrfx_configure+0x160>)
    d9f2:	e03e      	b.n	da72 <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
    d9f4:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    d9f8:	d05a      	beq.n	dab0 <uarte_nrfx_configure+0x13c>
    d9fa:	d807      	bhi.n	da0c <uarte_nrfx_configure+0x98>
    d9fc:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    da00:	d058      	beq.n	dab4 <uarte_nrfx_configure+0x140>
    da02:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    da06:	d1e2      	bne.n	d9ce <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    da08:	4b33      	ldr	r3, [pc, #204]	; (dad8 <uarte_nrfx_configure+0x164>)
    da0a:	e032      	b.n	da72 <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
    da0c:	f647 2c12 	movw	ip, #31250	; 0x7a12
    da10:	4563      	cmp	r3, ip
    da12:	d1dc      	bne.n	d9ce <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    da14:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    da18:	e02b      	b.n	da72 <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
    da1a:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    da1e:	d04b      	beq.n	dab8 <uarte_nrfx_configure+0x144>
    da20:	d813      	bhi.n	da4a <uarte_nrfx_configure+0xd6>
    da22:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    da26:	d04a      	beq.n	dabe <uarte_nrfx_configure+0x14a>
    da28:	d809      	bhi.n	da3e <uarte_nrfx_configure+0xca>
    da2a:	f64d 2cc0 	movw	ip, #56000	; 0xdac0
    da2e:	4563      	cmp	r3, ip
    da30:	d047      	beq.n	dac2 <uarte_nrfx_configure+0x14e>
    da32:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    da36:	d1ca      	bne.n	d9ce <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    da38:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    da3c:	e019      	b.n	da72 <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
    da3e:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    da42:	d1c4      	bne.n	d9ce <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    da44:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    da48:	e013      	b.n	da72 <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
    da4a:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    da4e:	d03b      	beq.n	dac8 <uarte_nrfx_configure+0x154>
    da50:	d809      	bhi.n	da66 <uarte_nrfx_configure+0xf2>
    da52:	f8df c098 	ldr.w	ip, [pc, #152]	; daec <uarte_nrfx_configure+0x178>
    da56:	4563      	cmp	r3, ip
    da58:	d039      	beq.n	dace <uarte_nrfx_configure+0x15a>
    da5a:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    da5e:	d1b6      	bne.n	d9ce <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    da60:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    da64:	e005      	b.n	da72 <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
    da66:	f8df c088 	ldr.w	ip, [pc, #136]	; daf0 <uarte_nrfx_configure+0x17c>
    da6a:	4563      	cmp	r3, ip
    da6c:	d1af      	bne.n	d9ce <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    da6e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    da72:	f8c6 3524 	str.w	r3, [r6, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    da76:	68c3      	ldr	r3, [r0, #12]
                    | (uint32_t)p_cfg->hwfc;
    da78:	432c      	orrs	r4, r5
                    | (uint32_t)p_cfg->stop
    da7a:	433a      	orrs	r2, r7
                    | (uint32_t)p_cfg->hwfc;
    da7c:	4322      	orrs	r2, r4
    da7e:	3304      	adds	r3, #4
    da80:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    da82:	f8c6 256c 	str.w	r2, [r6, #1388]	; 0x56c
    da86:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    da8a:	2000      	movs	r0, #0
}
    da8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    da8e:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    da92:	e7ee      	b.n	da72 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    da94:	4b11      	ldr	r3, [pc, #68]	; (dadc <uarte_nrfx_configure+0x168>)
    da96:	e7ec      	b.n	da72 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    da98:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    da9c:	e7e9      	b.n	da72 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = 0x00014000;
    da9e:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    daa2:	e7e6      	b.n	da72 <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
    daa4:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    daa8:	e7e3      	b.n	da72 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    daaa:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    daae:	e7e0      	b.n	da72 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    dab0:	4b0b      	ldr	r3, [pc, #44]	; (dae0 <uarte_nrfx_configure+0x16c>)
    dab2:	e7de      	b.n	da72 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    dab4:	4b0b      	ldr	r3, [pc, #44]	; (dae4 <uarte_nrfx_configure+0x170>)
    dab6:	e7dc      	b.n	da72 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    dab8:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    dabc:	e7d9      	b.n	da72 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    dabe:	4b0a      	ldr	r3, [pc, #40]	; (dae8 <uarte_nrfx_configure+0x174>)
    dac0:	e7d7      	b.n	da72 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    dac2:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    dac6:	e7d4      	b.n	da72 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    dac8:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    dacc:	e7d1      	b.n	da72 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    dace:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    dad2:	e7ce      	b.n	da72 <uarte_nrfx_configure+0xfe>
    dad4:	0013b000 	.word	0x0013b000
    dad8:	004ea000 	.word	0x004ea000
    dadc:	00275000 	.word	0x00275000
    dae0:	0075c000 	.word	0x0075c000
    dae4:	003af000 	.word	0x003af000
    dae8:	013a9000 	.word	0x013a9000
    daec:	0003d090 	.word	0x0003d090
    daf0:	000f4240 	.word	0x000f4240

0000daf4 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    daf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    daf8:	4606      	mov	r6, r0
    dafa:	4688      	mov	r8, r1
	struct uarte_nrfx_data *data = get_dev_data(dev);
    dafc:	68c7      	ldr	r7, [r0, #12]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    dafe:	f007 fb24 	bl	1514a <k_is_in_isr>
    db02:	b9b8      	cbnz	r0, db34 <uarte_nrfx_poll_out+0x40>
	return !z_sys_post_kernel;
    db04:	4b28      	ldr	r3, [pc, #160]	; (dba8 <uarte_nrfx_poll_out+0xb4>)
    db06:	781b      	ldrb	r3, [r3, #0]
    db08:	f083 0301 	eor.w	r3, r3, #1
	return config->uarte_regs;
    db0c:	6872      	ldr	r2, [r6, #4]
    db0e:	6815      	ldr	r5, [r2, #0]
#ifdef CONFIG_PM_DEVICE
	if (data->pm_state != DEVICE_PM_ACTIVE_STATE) {
		return;
	}
#endif
	if (isr_mode) {
    db10:	b193      	cbz	r3, db38 <uarte_nrfx_poll_out+0x44>
	__asm__ volatile(
    db12:	f04f 0320 	mov.w	r3, #32
    db16:	f3ef 8411 	mrs	r4, BASEPRI
    db1a:	f383 8811 	msr	BASEPRI, r3
    db1e:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
    db22:	4630      	mov	r0, r6
    db24:	f006 fc5e 	bl	143e4 <is_tx_ready>
    db28:	bb38      	cbnz	r0, db7a <uarte_nrfx_poll_out+0x86>
	__asm__ volatile(
    db2a:	f384 8811 	msr	BASEPRI, r4
    db2e:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    db32:	e7ee      	b.n	db12 <uarte_nrfx_poll_out+0x1e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    db34:	2301      	movs	r3, #1
    db36:	e7e9      	b.n	db0c <uarte_nrfx_poll_out+0x18>
    db38:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    db3a:	4630      	mov	r0, r6
    db3c:	f006 fc52 	bl	143e4 <is_tx_ready>
    db40:	b970      	cbnz	r0, db60 <uarte_nrfx_poll_out+0x6c>
    db42:	2001      	movs	r0, #1
    db44:	f006 fc7a 	bl	1443c <nrfx_busy_wait>
    db48:	3c01      	subs	r4, #1
    db4a:	d1f6      	bne.n	db3a <uarte_nrfx_poll_out+0x46>
	return z_impl_k_sleep(timeout);
    db4c:	2100      	movs	r1, #0
    db4e:	2021      	movs	r0, #33	; 0x21
    db50:	f001 fdea 	bl	f728 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    db54:	e7f0      	b.n	db38 <uarte_nrfx_poll_out+0x44>
	__asm__ volatile(
    db56:	f384 8811 	msr	BASEPRI, r4
    db5a:	f3bf 8f6f 	isb	sy
}
    db5e:	e7f5      	b.n	db4c <uarte_nrfx_poll_out+0x58>
	__asm__ volatile(
    db60:	f04f 0320 	mov.w	r3, #32
    db64:	f3ef 8411 	mrs	r4, BASEPRI
    db68:	f383 8811 	msr	BASEPRI, r3
    db6c:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    db70:	4630      	mov	r0, r6
    db72:	f006 fc37 	bl	143e4 <is_tx_ready>
    db76:	2800      	cmp	r0, #0
    db78:	d0ed      	beq.n	db56 <uarte_nrfx_poll_out+0x62>
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
    db7a:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    db7c:	2200      	movs	r2, #0
	}

	/* At this point we should have irq locked and any previous transfer
	 * completed. Transfer can be started, no need to wait for completion.
	 */
	data->char_out = c;
    db7e:	f807 8f10 	strb.w	r8, [r7, #16]!
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    db82:	f8c5 7544 	str.w	r7, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    db86:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    db8a:	f8c5 2120 	str.w	r2, [r5, #288]	; 0x120
    db8e:	f8d5 1120 	ldr.w	r1, [r5, #288]	; 0x120
    db92:	f8c5 2158 	str.w	r2, [r5, #344]	; 0x158
    db96:	f8d5 2158 	ldr.w	r2, [r5, #344]	; 0x158
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    db9a:	60ab      	str	r3, [r5, #8]
	__asm__ volatile(
    db9c:	f384 8811 	msr	BASEPRI, r4
    dba0:	f3bf 8f6f 	isb	sy
	tx_start(uarte, &data->char_out, 1);

	irq_unlock(key);
}
    dba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dba8:	20002e1b 	.word	0x20002e1b

0000dbac <nrf_gpio_cfg_output>:
        case 1: return NRF_P1;
    dbac:	4b07      	ldr	r3, [pc, #28]	; (dbcc <nrf_gpio_cfg_output+0x20>)
    dbae:	4908      	ldr	r1, [pc, #32]	; (dbd0 <nrf_gpio_cfg_output+0x24>)
    *p_pin = pin_number & 0x1F;
    dbb0:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
    dbb4:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
    dbb6:	2801      	cmp	r0, #1
    dbb8:	bf14      	ite	ne
    dbba:	4618      	movne	r0, r3
    dbbc:	4608      	moveq	r0, r1
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    dbbe:	f102 0380 	add.w	r3, r2, #128	; 0x80
    dbc2:	2203      	movs	r2, #3
    dbc4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
    dbc8:	4770      	bx	lr
    dbca:	bf00      	nop
    dbcc:	50842500 	.word	0x50842500
    dbd0:	50842800 	.word	0x50842800

0000dbd4 <nrf_gpio_pin_set>:
        case 1: return NRF_P1;
    dbd4:	4b06      	ldr	r3, [pc, #24]	; (dbf0 <nrf_gpio_pin_set+0x1c>)
    dbd6:	4907      	ldr	r1, [pc, #28]	; (dbf4 <nrf_gpio_pin_set+0x20>)
    *p_pin = pin_number & 0x1F;
    dbd8:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
    dbdc:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
    dbde:	2801      	cmp	r0, #1
    dbe0:	bf14      	ite	ne
    dbe2:	4618      	movne	r0, r3
    dbe4:	4608      	moveq	r0, r1
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    dbe6:	2301      	movs	r3, #1
    dbe8:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    dbea:	6083      	str	r3, [r0, #8]
}
    dbec:	4770      	bx	lr
    dbee:	bf00      	nop
    dbf0:	50842500 	.word	0x50842500
    dbf4:	50842800 	.word	0x50842800

0000dbf8 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    dbf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dbfa:	4605      	mov	r5, r0
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    dbfc:	2700      	movs	r7, #0
    dbfe:	2101      	movs	r1, #1
    dc00:	2200      	movs	r2, #0
    dc02:	2008      	movs	r0, #8
    dc04:	f7f6 fa60 	bl	40c8 <z_arm_irq_priority_set>
    dc08:	2008      	movs	r0, #8
    dc0a:	f7f6 fa3f 	bl	408c <arch_irq_enable>
	return config->uarte_regs;
    dc0e:	686b      	ldr	r3, [r5, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
    dc10:	68ee      	ldr	r6, [r5, #12]
	return config->uarte_regs;
    dc12:	681c      	ldr	r4, [r3, #0]
        nrf_gpio_pin_set(pin_number);
    dc14:	2014      	movs	r0, #20
    dc16:	f8c4 7500 	str.w	r7, [r4, #1280]	; 0x500
	data->dev = dev;
    dc1a:	6035      	str	r5, [r6, #0]
    dc1c:	f7ff ffda 	bl	dbd4 <nrf_gpio_pin_set>
	nrf_gpio_cfg_output(config->pseltxd);
    dc20:	2014      	movs	r0, #20
    dc22:	f7ff ffc3 	bl	dbac <nrf_gpio_cfg_output>
    p_reg->PSEL.TXD = pseltxd;
    dc26:	2214      	movs	r2, #20
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    dc28:	4b31      	ldr	r3, [pc, #196]	; (dcf0 <uarte_0_init+0xf8>)
        nrf_gpio_pin_set(pin_number);
    dc2a:	2013      	movs	r0, #19
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    dc2c:	f8c3 7258 	str.w	r7, [r3, #600]	; 0x258
    dc30:	f8c4 250c 	str.w	r2, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    dc34:	2216      	movs	r2, #22
    dc36:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    dc3a:	f8c3 7254 	str.w	r7, [r3, #596]	; 0x254
        nrf_gpio_pin_set(pin_number);
    dc3e:	f7ff ffc9 	bl	dbd4 <nrf_gpio_pin_set>
		nrf_gpio_cfg_output(config->pselrts);
    dc42:	2013      	movs	r0, #19
    dc44:	f7ff ffb2 	bl	dbac <nrf_gpio_cfg_output>
    p_reg->PSEL.RTS = pselrts;
    dc48:	2313      	movs	r3, #19
    dc4a:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
    dc4e:	2315      	movs	r3, #21
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    dc50:	68e9      	ldr	r1, [r5, #12]
    dc52:	4628      	mov	r0, r5
    dc54:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
    dc58:	3104      	adds	r1, #4
    dc5a:	f7ff fe8b 	bl	d974 <uarte_nrfx_configure>
	if (err) {
    dc5e:	4607      	mov	r7, r0
    dc60:	b9a8      	cbnz	r0, dc8e <uarte_0_init+0x96>
	if (get_dev_config(dev)->ppi_endtx) {
    dc62:	686b      	ldr	r3, [r5, #4]
    dc64:	799b      	ldrb	r3, [r3, #6]
    dc66:	b30b      	cbz	r3, dcac <uarte_0_init+0xb4>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    dc68:	f106 0012 	add.w	r0, r6, #18
    dc6c:	f000 fa32 	bl	e0d4 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    dc70:	4b20      	ldr	r3, [pc, #128]	; (dcf4 <uarte_0_init+0xfc>)
    dc72:	4298      	cmp	r0, r3
    dc74:	d00d      	beq.n	dc92 <uarte_0_init+0x9a>
    dc76:	4b20      	ldr	r3, [pc, #128]	; (dcf8 <uarte_0_init+0x100>)
    dc78:	4920      	ldr	r1, [pc, #128]	; (dcfc <uarte_0_init+0x104>)
		LOG_ERR("Failed to allocate PPI Channel");
    dc7a:	4821      	ldr	r0, [pc, #132]	; (dd00 <uarte_0_init+0x108>)
    dc7c:	1ac9      	subs	r1, r1, r3
    dc7e:	08c9      	lsrs	r1, r1, #3
    dc80:	0189      	lsls	r1, r1, #6
    dc82:	f041 0101 	orr.w	r1, r1, #1
    dc86:	f003 f815 	bl	10cb4 <log_0>
		return -EIO;
    dc8a:	f06f 0704 	mvn.w	r7, #4
UART_NRF_UARTE_DEVICE(0);
    dc8e:	4638      	mov	r0, r7
    dc90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    dc92:	7cb3      	ldrb	r3, [r6, #18]
    dc94:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    dc98:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    dc9c:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    dca0:	2301      	movs	r3, #1
    dca2:	7cb2      	ldrb	r2, [r6, #18]
    dca4:	4093      	lsls	r3, r2
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
    dca6:	4a17      	ldr	r2, [pc, #92]	; (dd04 <uarte_0_init+0x10c>)
    dca8:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    dcac:	2308      	movs	r3, #8
    dcae:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    dcb2:	2300      	movs	r3, #0
    dcb4:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    dcb8:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    dcbc:	f106 0311 	add.w	r3, r6, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    dcc0:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    dcc4:	2301      	movs	r3, #1
    dcc6:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    dcca:	6023      	str	r3, [r4, #0]
	if (!get_dev_config(dev)->ppi_endtx) {
    dccc:	686b      	ldr	r3, [r5, #4]
    dcce:	799b      	ldrb	r3, [r3, #6]
    dcd0:	b91b      	cbnz	r3, dcda <uarte_0_init+0xe2>
    p_reg->INTENSET = mask;
    dcd2:	f44f 7380 	mov.w	r3, #256	; 0x100
    dcd6:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.MAXCNT = length;
    dcda:	2300      	movs	r3, #0
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    dcdc:	3610      	adds	r6, #16
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    dcde:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    dce2:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    dce6:	2301      	movs	r3, #1
    dce8:	60a3      	str	r3, [r4, #8]
    dcea:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
    dcec:	e7cf      	b.n	dc8e <uarte_0_init+0x96>
    dcee:	bf00      	nop
    dcf0:	50842500 	.word	0x50842500
    dcf4:	0bad0000 	.word	0x0bad0000
    dcf8:	00015a00 	.word	0x00015a00
    dcfc:	00015ae8 	.word	0x00015ae8
    dd00:	00018f98 	.word	0x00018f98
    dd04:	50017000 	.word	0x50017000

0000dd08 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    dd08:	b508      	push	{r3, lr}
	z_impl_log_panic();
    dd0a:	f7f3 ff0d 	bl	1b28 <z_impl_log_panic>
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    dd0e:	4b06      	ldr	r3, [pc, #24]	; (dd28 <k_sys_fatal_error_handler+0x20>)
    dd10:	4906      	ldr	r1, [pc, #24]	; (dd2c <k_sys_fatal_error_handler+0x24>)
	ARG_UNUSED(esf);
	ARG_UNUSED(reason);

	LOG_PANIC();

	LOG_ERR("Resetting system");
    dd12:	4807      	ldr	r0, [pc, #28]	; (dd30 <k_sys_fatal_error_handler+0x28>)
    dd14:	1ac9      	subs	r1, r1, r3
    dd16:	08c9      	lsrs	r1, r1, #3
    dd18:	0189      	lsls	r1, r1, #6
    dd1a:	f041 0101 	orr.w	r1, r1, #1
    dd1e:	f002 ffc9 	bl	10cb4 <log_0>
	sys_arch_reboot(0);
    dd22:	2000      	movs	r0, #0
    dd24:	f7f6 fcfe 	bl	4724 <sys_arch_reboot>

	CODE_UNREACHABLE;
    dd28:	00015a00 	.word	0x00015a00
    dd2c:	00015a78 	.word	0x00015a78
    dd30:	00018fc7 	.word	0x00018fc7

0000dd34 <nrf53_errata_42>:
    #ifndef NRF53_SERIES
        return false;
    #else
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined(NRF_APPLICATION)
                uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    dd34:	4b06      	ldr	r3, [pc, #24]	; (dd50 <nrf53_errata_42+0x1c>)
                uint32_t var2 = *(uint32_t *)0x00FF0134ul;
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    dd36:	681b      	ldr	r3, [r3, #0]
    dd38:	2b07      	cmp	r3, #7
    dd3a:	d107      	bne.n	dd4c <nrf53_errata_42+0x18>
                uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    dd3c:	4b05      	ldr	r3, [pc, #20]	; (dd54 <nrf53_errata_42+0x20>)
    dd3e:	681b      	ldr	r3, [r3, #0]
    dd40:	3b02      	subs	r3, #2
    dd42:	2b03      	cmp	r3, #3
    dd44:	d802      	bhi.n	dd4c <nrf53_errata_42+0x18>
    dd46:	4a04      	ldr	r2, [pc, #16]	; (dd58 <nrf53_errata_42+0x24>)
    dd48:	5cd0      	ldrb	r0, [r2, r3]
    dd4a:	4770      	bx	lr
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    dd4c:	2000      	movs	r0, #0
    #endif
}
    dd4e:	4770      	bx	lr
    dd50:	00ff0130 	.word	0x00ff0130
    dd54:	00ff0134 	.word	0x00ff0134
    dd58:	00018fef 	.word	0x00018fef

0000dd5c <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
#if defined(NRF_TRUSTZONE_NONSECURE)
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_NS->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
#else
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_S->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
    dd5c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    dd60:	f8d3 2558 	ldr.w	r2, [r3, #1368]	; 0x558
    dd64:	4b03      	ldr	r3, [pc, #12]	; (dd74 <SystemCoreClockUpdate+0x18>)
    dd66:	f002 0203 	and.w	r2, r2, #3
    dd6a:	40d3      	lsrs	r3, r2
    dd6c:	4a02      	ldr	r2, [pc, #8]	; (dd78 <SystemCoreClockUpdate+0x1c>)
    dd6e:	6013      	str	r3, [r2, #0]
#endif
}
    dd70:	4770      	bx	lr
    dd72:	bf00      	nop
    dd74:	07a12000 	.word	0x07a12000
    dd78:	200003b8 	.word	0x200003b8

0000dd7c <SystemInit>:

void SystemInit(void)
{
    dd7c:	b508      	push	{r3, lr}
          SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
        #endif

        /* Workaround for Errata 97 "ERASEPROTECT, APPROTECT, or startup problems" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_97())
    dd7e:	f7ff ffd9 	bl	dd34 <nrf53_errata_42>
    dd82:	b148      	cbz	r0, dd98 <SystemInit+0x1c>
        {
            if (*((volatile uint32_t *)0x50004A20ul) == 0)
    dd84:	4b35      	ldr	r3, [pc, #212]	; (de5c <SystemInit+0xe0>)
    dd86:	681a      	ldr	r2, [r3, #0]
    dd88:	b932      	cbnz	r2, dd98 <SystemInit+0x1c>
            {
                *((volatile uint32_t *)0x50004A20ul) = 0xDul;
    dd8a:	210d      	movs	r1, #13
    dd8c:	6019      	str	r1, [r3, #0]
                *((volatile uint32_t *)0x5000491Cul) = 0x1ul;
    dd8e:	2101      	movs	r1, #1
    dd90:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
    dd94:	6019      	str	r1, [r3, #0]
                *((volatile uint32_t *)0x5000491Cul) = 0x0ul;
    dd96:	601a      	str	r2, [r3, #0]
{
    dd98:	2200      	movs	r2, #0
    dd9a:	00d3      	lsls	r3, r2, #3
    dd9c:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
        }

        /* Trimming of the device. Copy all the trimming values from FICR into the target addresses. Trim
         until one ADDR is not initialized. */
        uint32_t index = 0;
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    dda0:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
    dda4:	3101      	adds	r1, #1
    dda6:	d007      	beq.n	ddb8 <SystemInit+0x3c>
            #if defined ( __ICCARM__ )
                /* IAR will complain about the order of volatile pointer accesses. */
                #pragma diag_suppress=Pa082
            #endif
            *NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    dda8:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    ddac:	3201      	adds	r2, #1
            *NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    ddae:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    ddb2:	2a20      	cmp	r2, #32
            *NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    ddb4:	600b      	str	r3, [r1, #0]
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    ddb6:	d1f0      	bne.n	dd9a <SystemInit+0x1e>
        }

        /* errata 64 must be before errata 42, as errata 42 is dependant on the changes in errata 64*/
        /* Workaround for Errata 64 "VREGMAIN has invalid configuration when CPU is running at 128 MHz" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_64())
    ddb8:	f7ff ffbc 	bl	dd34 <nrf53_errata_42>
    ddbc:	2800      	cmp	r0, #0
    ddbe:	d146      	bne.n	de4e <SystemInit+0xd2>
            *((volatile uint32_t *)0x5000473Cul) = 0x3ul;
        }

        /* Workaround for Errata 42 "Reset value of HFCLKCTRL is invalid" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_42())
    ddc0:	f7ff ffb8 	bl	dd34 <nrf53_errata_42>
    ddc4:	b138      	cbz	r0, ddd6 <SystemInit+0x5a>
        {
            *((volatile uint32_t *)0x50039530ul) = 0xBEEF0044ul;
    ddc6:	4b26      	ldr	r3, [pc, #152]	; (de60 <SystemInit+0xe4>)
    ddc8:	4a26      	ldr	r2, [pc, #152]	; (de64 <SystemInit+0xe8>)
    ddca:	601a      	str	r2, [r3, #0]
            NRF_CLOCK_S->HFCLKCTRL = CLOCK_HFCLKCTRL_HCLK_Div2 << CLOCK_HFCLKCTRL_HCLK_Pos;
    ddcc:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    ddd0:	2201      	movs	r2, #1
    ddd2:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
    #ifndef NRF53_SERIES
        return false;
    #else
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined(NRF_APPLICATION)
                uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    ddd6:	4b24      	ldr	r3, [pc, #144]	; (de68 <SystemInit+0xec>)
                uint32_t var2 = *(uint32_t *)0x00FF0134ul;
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    ddd8:	681b      	ldr	r3, [r3, #0]
    ddda:	2b07      	cmp	r3, #7

        /* Workaround for Errata 46 "Higher power consumption of LFRC" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_46())
        {
            *((volatile uint32_t *)0x5003254Cul) = 0;
    dddc:	bf02      	ittt	eq
    ddde:	2200      	moveq	r2, #0
    dde0:	4b22      	ldreq	r3, [pc, #136]	; (de6c <SystemInit+0xf0>)
    dde2:	601a      	streq	r2, [r3, #0]
        }

        /* Workaround for Errata 49 "SLEEPENTER and SLEEPEXIT events asserted after pin reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_49())
    dde4:	f7ff ffa6 	bl	dd34 <nrf53_errata_42>
    dde8:	b150      	cbz	r0, de00 <SystemInit+0x84>
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk)
    ddea:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    ddee:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    ddf2:	07d1      	lsls	r1, r2, #31
            {
                NRF_POWER_S->EVENTS_SLEEPENTER = 0;
    ddf4:	bf42      	ittt	mi
    ddf6:	2200      	movmi	r2, #0
    ddf8:	f8c3 2114 	strmi.w	r2, [r3, #276]	; 0x114
                NRF_POWER_S->EVENTS_SLEEPEXIT = 0;
    ddfc:	f8c3 2118 	strmi.w	r2, [r3, #280]	; 0x118
                uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    de00:	4b19      	ldr	r3, [pc, #100]	; (de68 <SystemInit+0xec>)
                if (var1 == 0x07)
    de02:	681b      	ldr	r3, [r3, #0]
    de04:	2b07      	cmp	r3, #7
    de06:	d109      	bne.n	de1c <SystemInit+0xa0>

        /* Workaround for Errata 55 "Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_55())
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk){
    de08:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    de0c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    de10:	07d2      	lsls	r2, r2, #31
                NRF_RESET_S->RESETREAS = ~RESET_RESETREAS_RESETPIN_Msk;
    de12:	bf44      	itt	mi
    de14:	f06f 0201 	mvnmi.w	r2, #1
    de18:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
            }
        }

        /* Workaround for Errata 69 "VREGMAIN configuration is not retained in System OFF" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_69())
    de1c:	f7ff ff8a 	bl	dd34 <nrf53_errata_42>
    de20:	b110      	cbz	r0, de28 <SystemInit+0xac>
        {
            *((volatile uint32_t *)0x5000470Cul) =0x65ul;
    de22:	2265      	movs	r2, #101	; 0x65
    de24:	4b12      	ldr	r3, [pc, #72]	; (de70 <SystemInit+0xf4>)
    de26:	601a      	str	r2, [r3, #0]

        #endif

        /* Allow Non-Secure code to run FPU instructions.
         * If only the secure code should control FPU power state these registers should be configured accordingly in the secure application code. */
        SCB->NSACR |= (3UL << 10);
    de28:	4a12      	ldr	r2, [pc, #72]	; (de74 <SystemInit+0xf8>)
    de2a:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    de2e:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
    de32:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                /* Do nothing, allow user code to handle APPROTECT. Use this if you want to enable authenticated debug. */

        #else
            /* Load APPROTECT soft branch from UICR.
               If UICR->APPROTECT is disabled, CTRLAP->APPROTECT will be disabled. */
            NRF_CTRLAP_S->APPROTECT.DISABLE = NRF_UICR_S->APPROTECT;
    de36:	4a10      	ldr	r2, [pc, #64]	; (de78 <SystemInit+0xfc>)
    de38:	4b10      	ldr	r3, [pc, #64]	; (de7c <SystemInit+0x100>)
    de3a:	6811      	ldr	r1, [r2, #0]
    de3c:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
                /* Do nothing, allow user code to handle SECURE APPROTECT. Use this if you want to enable authenticated debug. */

        #else
            /* Load SECURE APPROTECT soft branch from UICR.
               If UICR->SECUREAPPROTECT is disabled, CTRLAP->SECUREAPPROTECT will be disabled. */
            NRF_CTRLAP_S->SECUREAPPROTECT.DISABLE = NRF_UICR_S->SECUREAPPROTECT;
    de40:	69d2      	ldr	r2, [r2, #28]
    de42:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
        __DSB();
        __ISB();
    #endif

    SystemCoreClockUpdate();
}
    de46:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    SystemCoreClockUpdate();
    de4a:	f7ff bf87 	b.w	dd5c <SystemCoreClockUpdate>
            *((volatile uint32_t *)0x5000470Cul) = 0x29ul;
    de4e:	2229      	movs	r2, #41	; 0x29
    de50:	4b07      	ldr	r3, [pc, #28]	; (de70 <SystemInit+0xf4>)
    de52:	601a      	str	r2, [r3, #0]
            *((volatile uint32_t *)0x5000473Cul) = 0x3ul;
    de54:	2203      	movs	r2, #3
    de56:	631a      	str	r2, [r3, #48]	; 0x30
    de58:	e7b2      	b.n	ddc0 <SystemInit+0x44>
    de5a:	bf00      	nop
    de5c:	50004a20 	.word	0x50004a20
    de60:	50039530 	.word	0x50039530
    de64:	beef0044 	.word	0xbeef0044
    de68:	00ff0130 	.word	0x00ff0130
    de6c:	5003254c 	.word	0x5003254c
    de70:	5000470c 	.word	0x5000470c
    de74:	e000ed00 	.word	0xe000ed00
    de78:	00ff8000 	.word	0x00ff8000
    de7c:	50006000 	.word	0x50006000

0000de80 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    de80:	4b04      	ldr	r3, [pc, #16]	; (de94 <nrfx_clock_init+0x14>)
    de82:	791a      	ldrb	r2, [r3, #4]
    de84:	b922      	cbnz	r2, de90 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    de86:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    de88:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    de8a:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    de8c:	4802      	ldr	r0, [pc, #8]	; (de98 <nrfx_clock_init+0x18>)
    de8e:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    de90:	4802      	ldr	r0, [pc, #8]	; (de9c <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    de92:	4770      	bx	lr
    de94:	20001c04 	.word	0x20001c04
    de98:	0bad0000 	.word	0x0bad0000
    de9c:	0bad000c 	.word	0x0bad000c

0000dea0 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    dea0:	2803      	cmp	r0, #3
    dea2:	d847      	bhi.n	df34 <nrfx_clock_start+0x94>
    dea4:	e8df f000 	tbb	[pc, r0]
    dea8:	3a2d2202 	.word	0x3a2d2202
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    deac:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    deb0:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    deb4:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    deb8:	03c9      	lsls	r1, r1, #15
    deba:	d511      	bpl.n	dee0 <nrfx_clock_start+0x40>
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    debc:	f003 0303 	and.w	r3, r3, #3
    dec0:	2b02      	cmp	r3, #2
    dec2:	d10d      	bne.n	dee0 <nrfx_clock_start+0x40>
    p_reg->LFCLKSRC = (uint32_t)(source);
    dec4:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    dec8:	2200      	movs	r2, #0
    deca:	4b1b      	ldr	r3, [pc, #108]	; (df38 <nrfx_clock_start+0x98>)
    decc:	601a      	str	r2, [r3, #0]
    dece:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    ded0:	2202      	movs	r2, #2
    ded2:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    ded6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    deda:	2201      	movs	r2, #1
    dedc:	609a      	str	r2, [r3, #8]
}
    dede:	4770      	bx	lr
    p_reg->LFCLKSRC = (uint32_t)(source);
    dee0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    dee4:	2201      	movs	r2, #1
    dee6:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
    deea:	e7ed      	b.n	dec8 <nrfx_clock_start+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    deec:	2200      	movs	r2, #0
    deee:	4b13      	ldr	r3, [pc, #76]	; (df3c <nrfx_clock_start+0x9c>)
    def0:	601a      	str	r2, [r3, #0]
    def2:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    def4:	2201      	movs	r2, #1
    def6:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    defa:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    defe:	601a      	str	r2, [r3, #0]
}
    df00:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    df02:	2200      	movs	r2, #0
    df04:	4b0e      	ldr	r3, [pc, #56]	; (df40 <nrfx_clock_start+0xa0>)
    df06:	601a      	str	r2, [r3, #0]
    df08:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    df0a:	f44f 7200 	mov.w	r2, #512	; 0x200
    df0e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    df12:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    df16:	2201      	movs	r2, #1
    df18:	621a      	str	r2, [r3, #32]
}
    df1a:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    df1c:	2200      	movs	r2, #0
    df1e:	4b09      	ldr	r3, [pc, #36]	; (df44 <nrfx_clock_start+0xa4>)
    df20:	601a      	str	r2, [r3, #0]
    df22:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    df24:	f44f 7280 	mov.w	r2, #256	; 0x100
    df28:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    df2c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    df30:	2201      	movs	r2, #1
    df32:	619a      	str	r2, [r3, #24]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
    df34:	4770      	bx	lr
    df36:	bf00      	nop
    df38:	50005104 	.word	0x50005104
    df3c:	50005100 	.word	0x50005100
    df40:	50005124 	.word	0x50005124
    df44:	50005120 	.word	0x50005120

0000df48 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    df48:	b570      	push	{r4, r5, r6, lr}
    df4a:	4604      	mov	r4, r0
    df4c:	2803      	cmp	r0, #3
    df4e:	d83e      	bhi.n	dfce <nrfx_clock_stop+0x86>
    df50:	e8df f000 	tbb	[pc, r0]
    df54:	4b3e2202 	.word	0x4b3e2202
    p_reg->INTENCLR = mask;
    df58:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    df5c:	2202      	movs	r2, #2
    df5e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    df62:	2200      	movs	r2, #0
    df64:	f503 7382 	add.w	r3, r3, #260	; 0x104
    df68:	601a      	str	r2, [r3, #0]
    df6a:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    df6c:	4b28      	ldr	r3, [pc, #160]	; (e010 <nrfx_clock_stop+0xc8>)
    df6e:	2201      	movs	r2, #1
    df70:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
    df74:	f04f 2650 	mov.w	r6, #1342197760	; 0x50005000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    df78:	601a      	str	r2, [r3, #0]
    switch (domain)
    df7a:	2c02      	cmp	r4, #2
    df7c:	d042      	beq.n	e004 <nrfx_clock_stop+0xbc>
    df7e:	2c03      	cmp	r4, #3
    df80:	d043      	beq.n	e00a <nrfx_clock_stop+0xc2>
    df82:	bb24      	cbnz	r4, dfce <nrfx_clock_stop+0x86>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    df84:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
                       (clk_src != NRF_CLOCK_HFCLK_HIGH_ACCURACY)), 10000, 1, stopped);
    }
    else
    {
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    df88:	03db      	lsls	r3, r3, #15
    df8a:	d520      	bpl.n	dfce <nrfx_clock_stop+0x86>
    df8c:	2001      	movs	r0, #1
    df8e:	f006 fa55 	bl	1443c <nrfx_busy_wait>
    df92:	3d01      	subs	r5, #1
    df94:	d1f1      	bne.n	df7a <nrfx_clock_stop+0x32>
    df96:	e01a      	b.n	dfce <nrfx_clock_stop+0x86>
    p_reg->INTENCLR = mask;
    df98:	2301      	movs	r3, #1
    df9a:	f04f 2450 	mov.w	r4, #1342197760	; 0x50005000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    df9e:	2100      	movs	r1, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    dfa0:	f242 7510 	movw	r5, #10000	; 0x2710
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    dfa4:	4a1b      	ldr	r2, [pc, #108]	; (e014 <nrfx_clock_stop+0xcc>)
    p_reg->INTENCLR = mask;
    dfa6:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    dfaa:	6011      	str	r1, [r2, #0]
    dfac:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    dfae:	4a1a      	ldr	r2, [pc, #104]	; (e018 <nrfx_clock_stop+0xd0>)
    dfb0:	6013      	str	r3, [r2, #0]
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    dfb2:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    dfb6:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    dfba:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    dfbe:	03d2      	lsls	r2, r2, #15
    dfc0:	d505      	bpl.n	dfce <nrfx_clock_stop+0x86>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    dfc2:	b123      	cbz	r3, dfce <nrfx_clock_stop+0x86>
    dfc4:	2001      	movs	r0, #1
    dfc6:	f006 fa39 	bl	1443c <nrfx_busy_wait>
    dfca:	3d01      	subs	r5, #1
    dfcc:	d1f1      	bne.n	dfb2 <nrfx_clock_stop+0x6a>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    dfce:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENCLR = mask;
    dfd0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    dfd4:	f44f 7200 	mov.w	r2, #512	; 0x200
    dfd8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    dfdc:	2200      	movs	r2, #0
    dfde:	f503 7392 	add.w	r3, r3, #292	; 0x124
    dfe2:	601a      	str	r2, [r3, #0]
    dfe4:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    dfe6:	4b0d      	ldr	r3, [pc, #52]	; (e01c <nrfx_clock_stop+0xd4>)
    dfe8:	e7c1      	b.n	df6e <nrfx_clock_stop+0x26>
    p_reg->INTENCLR = mask;
    dfea:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    dfee:	f44f 7280 	mov.w	r2, #256	; 0x100
    dff2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    dff6:	2200      	movs	r2, #0
    dff8:	f503 7390 	add.w	r3, r3, #288	; 0x120
    dffc:	601a      	str	r2, [r3, #0]
    dffe:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    e000:	4b07      	ldr	r3, [pc, #28]	; (e020 <nrfx_clock_stop+0xd8>)
    e002:	e7b4      	b.n	df6e <nrfx_clock_stop+0x26>
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
    e004:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
    e008:	e7be      	b.n	df88 <nrfx_clock_stop+0x40>
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
    e00a:	f8d6 3454 	ldr.w	r3, [r6, #1108]	; 0x454
    e00e:	e7bb      	b.n	df88 <nrfx_clock_stop+0x40>
    e010:	5000500c 	.word	0x5000500c
    e014:	50005100 	.word	0x50005100
    e018:	50005004 	.word	0x50005004
    e01c:	50005024 	.word	0x50005024
    e020:	5000501c 	.word	0x5000501c

0000e024 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    e024:	4b26      	ldr	r3, [pc, #152]	; (e0c0 <nrfx_power_clock_irq_handler+0x9c>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    e026:	b510      	push	{r4, lr}
    e028:	681a      	ldr	r2, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    e02a:	b152      	cbz	r2, e042 <nrfx_power_clock_irq_handler+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e02c:	2000      	movs	r0, #0
    e02e:	6018      	str	r0, [r3, #0]
    e030:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    e032:	2201      	movs	r2, #1
    e034:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    e038:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    e03c:	4b21      	ldr	r3, [pc, #132]	; (e0c4 <nrfx_power_clock_irq_handler+0xa0>)
    e03e:	681b      	ldr	r3, [r3, #0]
    e040:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    e042:	4b21      	ldr	r3, [pc, #132]	; (e0c8 <nrfx_power_clock_irq_handler+0xa4>)
    e044:	681a      	ldr	r2, [r3, #0]
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    e046:	b18a      	cbz	r2, e06c <nrfx_power_clock_irq_handler+0x48>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e048:	2200      	movs	r2, #0
    e04a:	601a      	str	r2, [r3, #0]
    e04c:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    e04e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    e052:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    e056:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    e05a:	f002 0203 	and.w	r2, r2, #3
    e05e:	2a01      	cmp	r2, #1
    e060:	f04f 0102 	mov.w	r1, #2
    e064:	d124      	bne.n	e0b0 <nrfx_power_clock_irq_handler+0x8c>
    p_reg->LFCLKSRC = (uint32_t)(source);
    e066:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    e06a:	609a      	str	r2, [r3, #8]
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    e06c:	4b17      	ldr	r3, [pc, #92]	; (e0cc <nrfx_power_clock_irq_handler+0xa8>)
    e06e:	681a      	ldr	r2, [r3, #0]
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    }
#endif // NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)

#if NRF_CLOCK_HAS_HFCLKAUDIO
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED))
    e070:	b162      	cbz	r2, e08c <nrfx_power_clock_irq_handler+0x68>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e072:	2200      	movs	r2, #0
    e074:	601a      	str	r2, [r3, #0]
    e076:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    e078:	f44f 7280 	mov.w	r2, #256	; 0x100
    e07c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    e080:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLKAUDIO_STARTED);
    e084:	4b0f      	ldr	r3, [pc, #60]	; (e0c4 <nrfx_power_clock_irq_handler+0xa0>)
    e086:	2004      	movs	r0, #4
    e088:	681b      	ldr	r3, [r3, #0]
    e08a:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    e08c:	4b10      	ldr	r3, [pc, #64]	; (e0d0 <nrfx_power_clock_irq_handler+0xac>)
    e08e:	681a      	ldr	r2, [r3, #0]
    }
#endif

#if NRF_CLOCK_HAS_HFCLK192M
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED))
    e090:	b1aa      	cbz	r2, e0be <nrfx_power_clock_irq_handler+0x9a>
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    e092:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e096:	2200      	movs	r2, #0
    e098:	601a      	str	r2, [r3, #0]
    e09a:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    e09c:	f44f 7200 	mov.w	r2, #512	; 0x200
    e0a0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    e0a4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    e0a8:	4b06      	ldr	r3, [pc, #24]	; (e0c4 <nrfx_power_clock_irq_handler+0xa0>)
    e0aa:	2005      	movs	r0, #5
    e0ac:	681b      	ldr	r3, [r3, #0]
    e0ae:	4718      	bx	r3
    e0b0:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    e0b4:	4b03      	ldr	r3, [pc, #12]	; (e0c4 <nrfx_power_clock_irq_handler+0xa0>)
    e0b6:	2001      	movs	r0, #1
    e0b8:	681b      	ldr	r3, [r3, #0]
    e0ba:	4798      	blx	r3
    e0bc:	e7d6      	b.n	e06c <nrfx_power_clock_irq_handler+0x48>
}
    e0be:	bd10      	pop	{r4, pc}
    e0c0:	50005100 	.word	0x50005100
    e0c4:	20001c04 	.word	0x20001c04
    e0c8:	50005104 	.word	0x50005104
    e0cc:	50005120 	.word	0x50005120
    e0d0:	50005124 	.word	0x50005124

0000e0d4 <nrfx_dppi_channel_alloc>:
nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
    nrfx_err_t err_code;

    // Get mask of available DPPI channels
    uint32_t remaining_channels = DPPI_AVAILABLE_CHANNELS_MASK & ~(m_allocated_channels);
    e0d4:	4a0a      	ldr	r2, [pc, #40]	; (e100 <nrfx_dppi_channel_alloc+0x2c>)
{
    e0d6:	b570      	push	{r4, r5, r6, lr}
    uint32_t remaining_channels = DPPI_AVAILABLE_CHANNELS_MASK & ~(m_allocated_channels);
    e0d8:	6814      	ldr	r4, [r2, #0]
    uint8_t channel = 0;

    if (!remaining_channels)
    e0da:	43e6      	mvns	r6, r4
    e0dc:	d00e      	beq.n	e0fc <nrfx_dppi_channel_alloc+0x28>
    e0de:	2300      	movs	r3, #0
    e0e0:	b2d9      	uxtb	r1, r3
        NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }

    // Find first free channel
    while (!(remaining_channels & DPPI_BIT_SET(channel)))
    e0e2:	fa26 f501 	lsr.w	r5, r6, r1
    e0e6:	07ed      	lsls	r5, r5, #31
    e0e8:	f103 0301 	add.w	r3, r3, #1
    e0ec:	d5f8      	bpl.n	e0e0 <nrfx_dppi_channel_alloc+0xc>
    {
        channel++;
    }

    m_allocated_channels |= DPPI_BIT_SET(channel);
    e0ee:	2301      	movs	r3, #1
    e0f0:	408b      	lsls	r3, r1
    e0f2:	4323      	orrs	r3, r4
    *p_channel = channel;
    e0f4:	7001      	strb	r1, [r0, #0]

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Allocated channel: %d.", channel);
    return err_code;
    e0f6:	4803      	ldr	r0, [pc, #12]	; (e104 <nrfx_dppi_channel_alloc+0x30>)
    m_allocated_channels |= DPPI_BIT_SET(channel);
    e0f8:	6013      	str	r3, [r2, #0]
}
    e0fa:	bd70      	pop	{r4, r5, r6, pc}
        return err_code;
    e0fc:	4802      	ldr	r0, [pc, #8]	; (e108 <nrfx_dppi_channel_alloc+0x34>)
    e0fe:	e7fc      	b.n	e0fa <nrfx_dppi_channel_alloc+0x26>
    e100:	20001c0c 	.word	0x20001c0c
    e104:	0bad0000 	.word	0x0bad0000
    e108:	0bad0002 	.word	0x0bad0002

0000e10c <nrfx_gpiote_channel_free>:
    return m_cb.allocated_channels_mask & (1UL << index);
}

static bool is_app_channel(uint8_t index)
{
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
    e10c:	2301      	movs	r3, #1
    e10e:	fa03 f000 	lsl.w	r0, r3, r0

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
    e112:	f010 0fff 	tst.w	r0, #255	; 0xff
    e116:	d012      	beq.n	e13e <nrfx_gpiote_channel_free+0x32>
	__asm__ volatile(
    e118:	f04f 0320 	mov.w	r3, #32
    e11c:	f3ef 8111 	mrs	r1, BASEPRI
    e120:	f383 8811 	msr	BASEPRI, r3
    e124:	f3bf 8f6f 	isb	sy
    m_cb.allocated_channels_mask &= ~(1UL << index);
    e128:	4a06      	ldr	r2, [pc, #24]	; (e144 <nrfx_gpiote_channel_free+0x38>)
    e12a:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
    e12c:	ea23 0000 	bic.w	r0, r3, r0
    e130:	65d0      	str	r0, [r2, #92]	; 0x5c
	__asm__ volatile(
    e132:	f381 8811 	msr	BASEPRI, r1
    e136:	f3bf 8f6f 	isb	sy
    e13a:	4803      	ldr	r0, [pc, #12]	; (e148 <nrfx_gpiote_channel_free+0x3c>)
    e13c:	4770      	bx	lr
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
    e13e:	4803      	ldr	r0, [pc, #12]	; (e14c <nrfx_gpiote_channel_free+0x40>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    e140:	4770      	bx	lr
    e142:	bf00      	nop
    e144:	20001c10 	.word	0x20001c10
    e148:	0bad0000 	.word	0x0bad0000
    e14c:	0bad0004 	.word	0x0bad0004

0000e150 <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
    e150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
    e154:	22ff      	movs	r2, #255	; 0xff
{
    e156:	2400      	movs	r4, #0
    return m_cb.allocated_channels_mask & (1UL << index);
    e158:	2601      	movs	r6, #1
{
    e15a:	4605      	mov	r5, r0
    return m_cb.allocated_channels_mask & (1UL << index);
    e15c:	f8df e058 	ldr.w	lr, [pc, #88]	; e1b8 <nrfx_gpiote_channel_alloc+0x68>
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    e160:	4814      	ldr	r0, [pc, #80]	; (e1b4 <nrfx_gpiote_channel_alloc+0x64>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
            *p_channel = ch_idx;
            err_code = NRFX_SUCCESS;
    e162:	f8df 8058 	ldr.w	r8, [pc, #88]	; e1bc <nrfx_gpiote_channel_alloc+0x6c>
    e166:	b2e3      	uxtb	r3, r4
	__asm__ volatile(
    e168:	f04f 0120 	mov.w	r1, #32
    e16c:	f3ef 8c11 	mrs	ip, BASEPRI
    e170:	f381 8811 	msr	BASEPRI, r1
    e174:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
    e178:	fa22 f103 	lsr.w	r1, r2, r3
    e17c:	07c9      	lsls	r1, r1, #31
    e17e:	d50a      	bpl.n	e196 <nrfx_gpiote_channel_alloc+0x46>
    return m_cb.allocated_channels_mask & (1UL << index);
    e180:	f8de 105c 	ldr.w	r1, [lr, #92]	; 0x5c
    e184:	fa06 f703 	lsl.w	r7, r6, r3
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
    e188:	4239      	tst	r1, r7
            err_code = NRFX_SUCCESS;
    e18a:	bf01      	itttt	eq
    e18c:	4640      	moveq	r0, r8
    m_cb.allocated_channels_mask |= (1UL << index);
    e18e:	4339      	orreq	r1, r7
    e190:	f8ce 105c 	streq.w	r1, [lr, #92]	; 0x5c
            *p_channel = ch_idx;
    e194:	702b      	strbeq	r3, [r5, #0]
	__asm__ volatile(
    e196:	f38c 8811 	msr	BASEPRI, ip
    e19a:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
    e19e:	4540      	cmp	r0, r8
    e1a0:	d005      	beq.n	e1ae <nrfx_gpiote_channel_alloc+0x5e>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
    e1a2:	fa06 f303 	lsl.w	r3, r6, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
    e1a6:	439a      	bics	r2, r3
    e1a8:	f104 0401 	add.w	r4, r4, #1
    e1ac:	d1db      	bne.n	e166 <nrfx_gpiote_channel_alloc+0x16>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    e1ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e1b2:	bf00      	nop
    e1b4:	0bad0002 	.word	0x0bad0002
    e1b8:	20001c10 	.word	0x20001c10
    e1bc:	0bad0000 	.word	0x0bad0000

0000e1c0 <nrfx_ipc_init>:
} ipc_control_block_t;

static ipc_control_block_t m_ipc_cb;

nrfx_err_t nrfx_ipc_init(uint8_t irq_priority, nrfx_ipc_handler_t handler, void * p_context)
{
    e1c0:	b570      	push	{r4, r5, r6, lr}
    NRFX_ASSERT(handler);
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    e1c2:	4c08      	ldr	r4, [pc, #32]	; (e1e4 <nrfx_ipc_init+0x24>)
{
    e1c4:	460e      	mov	r6, r1
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    e1c6:	7923      	ldrb	r3, [r4, #4]
{
    e1c8:	4615      	mov	r5, r2
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    e1ca:	b943      	cbnz	r3, e1de <nrfx_ipc_init+0x1e>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

    NRFX_IRQ_PRIORITY_SET(IPC_IRQn, irq_priority);
    NRFX_IRQ_ENABLE(IPC_IRQn);
    e1cc:	202a      	movs	r0, #42	; 0x2a
    e1ce:	f7f5 ff5d 	bl	408c <arch_irq_enable>

    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
    e1d2:	2301      	movs	r3, #1
    m_ipc_cb.handler = handler;
    m_ipc_cb.p_context = p_context;

    return NRFX_SUCCESS;
    e1d4:	4804      	ldr	r0, [pc, #16]	; (e1e8 <nrfx_ipc_init+0x28>)
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
    e1d6:	7123      	strb	r3, [r4, #4]
    m_ipc_cb.handler = handler;
    e1d8:	6026      	str	r6, [r4, #0]
    m_ipc_cb.p_context = p_context;
    e1da:	60a5      	str	r5, [r4, #8]
}
    e1dc:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
    e1de:	4803      	ldr	r0, [pc, #12]	; (e1ec <nrfx_ipc_init+0x2c>)
    e1e0:	e7fc      	b.n	e1dc <nrfx_ipc_init+0x1c>
    e1e2:	bf00      	nop
    e1e4:	20001c70 	.word	0x20001c70
    e1e8:	0bad0000 	.word	0x0bad0000
    e1ec:	0bad000c 	.word	0x0bad000c

0000e1f0 <nrfx_ipc_config_load>:
{
    NRFX_ASSERT(p_config);
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
    e1f0:	2300      	movs	r3, #0
{
    e1f2:	b530      	push	{r4, r5, lr}

NRF_STATIC_INLINE void nrf_ipc_send_config_set(NRF_IPC_Type * p_reg,
                                               uint8_t        index,
                                               uint32_t       channels_mask)
{
    p_reg->SEND_CNF[index] = channels_mask;
    e1f4:	4a0d      	ldr	r2, [pc, #52]	; (e22c <nrfx_ipc_config_load+0x3c>)
    {
        nrf_ipc_send_config_set(NRF_IPC, i, p_config->send_task_config[i]);
    e1f6:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
    e1fa:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    for (i = 0; i < IPC_CONF_NUM; ++i)
    e1fe:	3301      	adds	r3, #1
    e200:	2b10      	cmp	r3, #16
    e202:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
    e206:	d1f6      	bne.n	e1f6 <nrfx_ipc_config_load+0x6>
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
    e208:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_ipc_receive_config_set(NRF_IPC_Type * p_reg,
                                                  uint8_t        index,
                                                  uint32_t       channels_mask)
{
    p_reg->RECEIVE_CNF[index] = channels_mask;
    e20a:	4a08      	ldr	r2, [pc, #32]	; (e22c <nrfx_ipc_config_load+0x3c>)
    e20c:	f100 0140 	add.w	r1, r0, #64	; 0x40
    e210:	f503 74b2 	add.w	r4, r3, #356	; 0x164
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, p_config->receive_event_config[i]);
    e214:	f851 5b04 	ldr.w	r5, [r1], #4
    for (i = 0; i < IPC_CONF_NUM; ++i)
    e218:	3301      	adds	r3, #1
    e21a:	2b10      	cmp	r3, #16
    e21c:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
    e220:	d1f6      	bne.n	e210 <nrfx_ipc_config_load+0x20>
    }

    nrf_ipc_int_enable(NRF_IPC, p_config->receive_events_enabled);
    e222:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
    p_reg->INTENSET = mask;
    e226:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    e22a:	bd30      	pop	{r4, r5, pc}
    e22c:	5002a000 	.word	0x5002a000

0000e230 <nrfx_ipc_receive_event_enable>:
}

void nrfx_ipc_receive_event_enable(uint8_t event_index)
{
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
    nrf_ipc_int_enable(NRF_IPC, (1UL << event_index));
    e230:	2301      	movs	r3, #1
    e232:	4a02      	ldr	r2, [pc, #8]	; (e23c <nrfx_ipc_receive_event_enable+0xc>)
    e234:	4083      	lsls	r3, r0
    e236:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    e23a:	4770      	bx	lr
    e23c:	5002a000 	.word	0x5002a000

0000e240 <nrfx_ipc_receive_event_disable>:

void nrfx_ipc_receive_event_disable(uint8_t event_index)
{
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
    nrf_ipc_int_disable(NRF_IPC, (1UL << event_index));
    e240:	2301      	movs	r3, #1
    p_reg->INTENCLR = mask;
    e242:	4a02      	ldr	r2, [pc, #8]	; (e24c <nrfx_ipc_receive_event_disable+0xc>)
    e244:	4083      	lsls	r3, r0
    e246:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
    e24a:	4770      	bx	lr
    e24c:	5002a000 	.word	0x5002a000

0000e250 <nrfx_ipc_irq_handler>:
    return p_reg->INTPEND;
    e250:	4b0c      	ldr	r3, [pc, #48]	; (e284 <nrfx_ipc_irq_handler+0x34>)
    channel_bitmask |= nrf_ipc_send_config_get(NRF_IPC, send_index);
    nrf_ipc_send_config_set(NRF_IPC, send_index, channel_bitmask);
}

void nrfx_ipc_irq_handler(void)
{
    e252:	b430      	push	{r4, r5}
    e254:	f8d3 030c 	ldr.w	r0, [r3, #780]	; 0x30c
    // Clear these events
    uint32_t bitmask = events_map;
    while (bitmask)
    {
        uint8_t event_idx = __CLZ(__RBIT(bitmask));
        bitmask &= ~(1UL << event_idx);
    e258:	2401      	movs	r4, #1
    uint32_t bitmask = events_map;
    e25a:	4602      	mov	r2, r0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e25c:	2500      	movs	r5, #0
    while (bitmask)
    e25e:	b922      	cbnz	r2, e26a <nrfx_ipc_irq_handler+0x1a>
        nrf_ipc_event_clear(NRF_IPC, nrf_ipc_receive_event_get(event_idx));
    }

    // Execute interrupt handler to provide information about events to app
    m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
}
    e260:	bc30      	pop	{r4, r5}
    m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
    e262:	4b09      	ldr	r3, [pc, #36]	; (e288 <nrfx_ipc_irq_handler+0x38>)
    e264:	681a      	ldr	r2, [r3, #0]
    e266:	6899      	ldr	r1, [r3, #8]
    e268:	4710      	bx	r2
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
    e26a:	fa92 f3a2 	rbit	r3, r2
  return __builtin_clz(value);
    e26e:	fab3 f383 	clz	r3, r3
        bitmask &= ~(1UL << event_idx);
    e272:	fa04 f103 	lsl.w	r1, r4, r3
    e276:	ea22 0201 	bic.w	r2, r2, r1
    e27a:	4904      	ldr	r1, [pc, #16]	; (e28c <nrfx_ipc_irq_handler+0x3c>)
}

NRF_STATIC_INLINE nrf_ipc_event_t nrf_ipc_receive_event_get(uint8_t index)
{
    NRFX_ASSERT(index < IPC_CH_NUM);
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
    e27c:	009b      	lsls	r3, r3, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e27e:	50cd      	str	r5, [r1, r3]
}
    e280:	e7ed      	b.n	e25e <nrfx_ipc_irq_handler+0xe>
    e282:	bf00      	nop
    e284:	5002a000 	.word	0x5002a000
    e288:	20001c70 	.word	0x20001c70
    e28c:	5002a100 	.word	0x5002a100

0000e290 <nvmc_readonly_mode_set>:

#if defined(NVMC_CONFIGNS_WEN_Msk)
NRF_STATIC_INLINE void nrf_nvmc_nonsecure_mode_set(NRF_NVMC_Type *    p_reg,
                                                   nrf_nvmc_ns_mode_t mode)
{
    p_reg->CONFIGNS = (uint32_t)mode;
    e290:	2200      	movs	r2, #0
    e292:	4b03      	ldr	r3, [pc, #12]	; (e2a0 <nvmc_readonly_mode_set+0x10>)
    e294:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    p_reg->CONFIG = (uint32_t)mode;
    e298:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    nrf_nvmc_nonsecure_mode_set(NRF_NVMC, NRF_NVMC_NS_MODE_READONLY);
#endif
#if !defined(NRF_TRUSTZONE_NONSECURE)
    nrf_nvmc_mode_set(NRF_NVMC, NRF_NVMC_MODE_READONLY);
#endif
}
    e29c:	4770      	bx	lr
    e29e:	bf00      	nop
    e2a0:	50039000 	.word	0x50039000

0000e2a4 <nrfx_nvmc_page_erase>:
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
    }
}

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
    e2a4:	b508      	push	{r3, lr}
    return !(addr % flash_page_size_get());
    e2a6:	f3c0 030b 	ubfx	r3, r0, #0, #12
    NRFX_ASSERT(is_valid_address(addr, false));

    if (!is_page_aligned_check(addr))
    e2aa:	b983      	cbnz	r3, e2ce <nrfx_nvmc_page_erase+0x2a>
    p_reg->CONFIGNS = (uint32_t)mode;
    e2ac:	2202      	movs	r2, #2
    e2ae:	4b09      	ldr	r3, [pc, #36]	; (e2d4 <nrfx_nvmc_page_erase+0x30>)
    e2b0:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    p_reg->CONFIG = (uint32_t)mode;
    e2b4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
#elif defined(NRF9160_XXAA) || defined(NRF5340_XXAA_APPLICATION) || defined(NRF5340_XXAA_NETWORK)
    *(volatile uint32_t *)page_addr = 0xFFFFFFFF;
    e2b8:	f04f 32ff 	mov.w	r2, #4294967295
    e2bc:	6002      	str	r2, [r0, #0]
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    e2be:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    e2c2:	07d2      	lsls	r2, r2, #31
    e2c4:	d5fb      	bpl.n	e2be <nrfx_nvmc_page_erase+0x1a>
    {}
    nvmc_readonly_mode_set();
    e2c6:	f7ff ffe3 	bl	e290 <nvmc_readonly_mode_set>

    return NRFX_SUCCESS;
    e2ca:	4803      	ldr	r0, [pc, #12]	; (e2d8 <nrfx_nvmc_page_erase+0x34>)
}
    e2cc:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_ADDR;
    e2ce:	4803      	ldr	r0, [pc, #12]	; (e2dc <nrfx_nvmc_page_erase+0x38>)
    e2d0:	e7fc      	b.n	e2cc <nrfx_nvmc_page_erase+0x28>
    e2d2:	bf00      	nop
    e2d4:	50039000 	.word	0x50039000
    e2d8:	0bad0000 	.word	0x0bad0000
    e2dc:	0bad000a 	.word	0x0bad000a

0000e2e0 <nrfx_nvmc_word_write>:
    p_reg->CONFIGNS = (uint32_t)mode;
    e2e0:	2201      	movs	r2, #1
    e2e2:	4b07      	ldr	r3, [pc, #28]	; (e300 <nrfx_nvmc_word_write+0x20>)
    e2e4:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    p_reg->CONFIG = (uint32_t)mode;
    e2e8:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    e2ec:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    e2f0:	07d2      	lsls	r2, r2, #31
    e2f2:	d5fb      	bpl.n	e2ec <nrfx_nvmc_word_write+0xc>
    *(volatile uint32_t *)addr = value;
    e2f4:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    e2f6:	f3bf 8f5f 	dmb	sy

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);

    nvmc_readonly_mode_set();
    e2fa:	f7ff bfc9 	b.w	e290 <nvmc_readonly_mode_set>
    e2fe:	bf00      	nop
    e300:	50039000 	.word	0x50039000

0000e304 <metal_generic_dev_open>:
	return 0;
}

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
    e304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e308:	460e      	mov	r6, r1
    e30a:	4617      	mov	r7, r2
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
    e30c:	4d0c      	ldr	r5, [pc, #48]	; (e340 <metal_generic_dev_open+0x3c>)
    e30e:	f855 4f18 	ldr.w	r4, [r5, #24]!
    e312:	42ac      	cmp	r4, r5
    e314:	d103      	bne.n	e31e <metal_generic_dev_open+0x1a>
			return metal_generic_dev_sys_open(dev);
		}
	}

	return -ENODEV;
}
    e316:	f06f 0012 	mvn.w	r0, #18
    e31a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (strcmp(dev->name, dev_name) == 0) {
    e31e:	4631      	mov	r1, r6
    e320:	f854 0c44 	ldr.w	r0, [r4, #-68]
		dev = metal_container_of(node, struct metal_device, node);
    e324:	f1a4 0844 	sub.w	r8, r4, #68	; 0x44
		if (strcmp(dev->name, dev_name) == 0) {
    e328:	f003 ffcc 	bl	122c4 <strcmp>
    e32c:	b930      	cbnz	r0, e33c <metal_generic_dev_open+0x38>
			return metal_generic_dev_sys_open(dev);
    e32e:	4640      	mov	r0, r8
			*device = dev;
    e330:	f8c7 8000 	str.w	r8, [r7]
}
    e334:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			return metal_generic_dev_sys_open(dev);
    e338:	f006 b972 	b.w	14620 <metal_generic_dev_sys_open>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
    e33c:	6824      	ldr	r4, [r4, #0]
    e33e:	e7e8      	b.n	e312 <metal_generic_dev_open+0xe>
    e340:	20001c7c 	.word	0x20001c7c

0000e344 <metal_bus_find>:
{
    e344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e348:	4607      	mov	r7, r0
    e34a:	460d      	mov	r5, r1
	metal_list_for_each(&_metal.common.bus_list, node) {
    e34c:	4e0b      	ldr	r6, [pc, #44]	; (e37c <metal_bus_find+0x38>)
    e34e:	f856 4f08 	ldr.w	r4, [r6, #8]!
    e352:	42b4      	cmp	r4, r6
    e354:	d102      	bne.n	e35c <metal_bus_find+0x18>
	return -ENOENT;
    e356:	f06f 0001 	mvn.w	r0, #1
    e35a:	e00a      	b.n	e372 <metal_bus_find+0x2e>
		if (strcmp(bus->name, name) == 0 && result) {
    e35c:	4639      	mov	r1, r7
    e35e:	f854 0c24 	ldr.w	r0, [r4, #-36]
		bus = metal_container_of(node, struct metal_bus, node);
    e362:	f1a4 0824 	sub.w	r8, r4, #36	; 0x24
		if (strcmp(bus->name, name) == 0 && result) {
    e366:	f003 ffad 	bl	122c4 <strcmp>
    e36a:	b920      	cbnz	r0, e376 <metal_bus_find+0x32>
    e36c:	b11d      	cbz	r5, e376 <metal_bus_find+0x32>
			*result = bus;
    e36e:	f8c5 8000 	str.w	r8, [r5]
}
    e372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	metal_list_for_each(&_metal.common.bus_list, node) {
    e376:	6824      	ldr	r4, [r4, #0]
    e378:	e7eb      	b.n	e352 <metal_bus_find+0xe>
    e37a:	bf00      	nop
    e37c:	20001c7c 	.word	0x20001c7c

0000e380 <metal_bus_register>:
{
    e380:	b510      	push	{r4, lr}
	if (!bus || !bus->name || !strlen(bus->name))
    e382:	4604      	mov	r4, r0
    e384:	b910      	cbnz	r0, e38c <metal_bus_register+0xc>
		return -EINVAL;
    e386:	f06f 0015 	mvn.w	r0, #21
}
    e38a:	bd10      	pop	{r4, pc}
	if (!bus || !bus->name || !strlen(bus->name))
    e38c:	6800      	ldr	r0, [r0, #0]
    e38e:	2800      	cmp	r0, #0
    e390:	d0f9      	beq.n	e386 <metal_bus_register+0x6>
    e392:	f003 ff87 	bl	122a4 <strlen>
    e396:	2800      	cmp	r0, #0
    e398:	d0f5      	beq.n	e386 <metal_bus_register+0x6>
	if (metal_bus_find(bus->name, NULL) == 0)
    e39a:	2100      	movs	r1, #0
    e39c:	6820      	ldr	r0, [r4, #0]
    e39e:	f7ff ffd1 	bl	e344 <metal_bus_find>
    e3a2:	b1c0      	cbz	r0, e3d6 <metal_bus_register+0x56>
	metal_list_init(&bus->devices);
    e3a4:	f104 031c 	add.w	r3, r4, #28
	struct metal_list name = METAL_INIT_LIST(name)

static inline void metal_list_init(struct metal_list *list)
{
	list->prev = list;
	list->next = list;
    e3a8:	e9c4 3307 	strd	r3, r3, [r4, #28]
}

static inline void metal_list_add_before(struct metal_list *node,
					 struct metal_list *new_node)
{
	new_node->prev = node->prev;
    e3ac:	4b0c      	ldr	r3, [pc, #48]	; (e3e0 <metal_bus_register+0x60>)
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
    e3ae:	f104 0224 	add.w	r2, r4, #36	; 0x24
    e3b2:	68d9      	ldr	r1, [r3, #12]
	new_node->next = node;
    e3b4:	f103 0008 	add.w	r0, r3, #8
	new_node->next->prev = new_node;
    e3b8:	60da      	str	r2, [r3, #12]
	new_node->prev = node->prev;
    e3ba:	62a1      	str	r1, [r4, #40]	; 0x28
	new_node->next = node;
    e3bc:	6260      	str	r0, [r4, #36]	; 0x24
	new_node->prev->next = new_node;
    e3be:	600a      	str	r2, [r1, #0]
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
    e3c0:	781a      	ldrb	r2, [r3, #0]
    e3c2:	2a06      	cmp	r2, #6
    e3c4:	d905      	bls.n	e3d2 <metal_bus_register+0x52>
    e3c6:	685b      	ldr	r3, [r3, #4]
    e3c8:	b143      	cbz	r3, e3dc <metal_bus_register+0x5c>
    e3ca:	2007      	movs	r0, #7
    e3cc:	6822      	ldr	r2, [r4, #0]
    e3ce:	4905      	ldr	r1, [pc, #20]	; (e3e4 <metal_bus_register+0x64>)
    e3d0:	4798      	blx	r3
	return 0;
    e3d2:	2000      	movs	r0, #0
    e3d4:	e7d9      	b.n	e38a <metal_bus_register+0xa>
		return -EEXIST;
    e3d6:	f06f 0010 	mvn.w	r0, #16
    e3da:	e7d6      	b.n	e38a <metal_bus_register+0xa>
	return 0;
    e3dc:	4618      	mov	r0, r3
    e3de:	e7d4      	b.n	e38a <metal_bus_register+0xa>
    e3e0:	20001c7c 	.word	0x20001c7c
    e3e4:	00018ff3 	.word	0x00018ff3

0000e3e8 <metal_register_generic_device>:
{
    e3e8:	b510      	push	{r4, lr}
    e3ea:	4604      	mov	r4, r0
	if (!device->name || !strlen(device->name) ||
    e3ec:	6800      	ldr	r0, [r0, #0]
    e3ee:	b910      	cbnz	r0, e3f6 <metal_register_generic_device+0xe>
		return -EINVAL;
    e3f0:	f06f 0015 	mvn.w	r0, #21
}
    e3f4:	bd10      	pop	{r4, pc}
	if (!device->name || !strlen(device->name) ||
    e3f6:	f003 ff55 	bl	122a4 <strlen>
    e3fa:	2800      	cmp	r0, #0
    e3fc:	d0f8      	beq.n	e3f0 <metal_register_generic_device+0x8>
    e3fe:	68a3      	ldr	r3, [r4, #8]
    e400:	2b01      	cmp	r3, #1
    e402:	d8f5      	bhi.n	e3f0 <metal_register_generic_device+0x8>
	device->bus = &metal_generic_bus;
    e404:	4b06      	ldr	r3, [pc, #24]	; (e420 <metal_register_generic_device+0x38>)
	metal_list_add_tail(&_metal.common.generic_device_list,
    e406:	f104 0144 	add.w	r1, r4, #68	; 0x44
	device->bus = &metal_generic_bus;
    e40a:	6063      	str	r3, [r4, #4]
	new_node->prev = node->prev;
    e40c:	4b05      	ldr	r3, [pc, #20]	; (e424 <metal_register_generic_device+0x3c>)
    e40e:	69da      	ldr	r2, [r3, #28]
	new_node->next = node;
    e410:	f103 0018 	add.w	r0, r3, #24
    e414:	6460      	str	r0, [r4, #68]	; 0x44
	new_node->prev = node->prev;
    e416:	64a2      	str	r2, [r4, #72]	; 0x48
	new_node->next->prev = new_node;
    e418:	61d9      	str	r1, [r3, #28]
	return 0;
    e41a:	2000      	movs	r0, #0
	new_node->prev->next = new_node;
    e41c:	6011      	str	r1, [r2, #0]
}
    e41e:	e7e9      	b.n	e3f4 <metal_register_generic_device+0xc>
    e420:	200003bc 	.word	0x200003bc
    e424:	20001c7c 	.word	0x20001c7c

0000e428 <metal_init>:

#include <string.h>
#include <metal/sys.h>

int metal_init(const struct metal_init_params *params)
{
    e428:	b538      	push	{r3, r4, r5, lr}
    e42a:	4605      	mov	r5, r0
	int error = 0;

	memset(&_metal, 0, sizeof(_metal));
    e42c:	4c0d      	ldr	r4, [pc, #52]	; (e464 <metal_init+0x3c>)
    e42e:	2220      	movs	r2, #32
    e430:	4620      	mov	r0, r4
    e432:	2100      	movs	r1, #0
    e434:	f003 ff9c 	bl	12370 <memset>

	_metal.common.log_handler   = params->log_handler;
    e438:	682b      	ldr	r3, [r5, #0]

	metal_list_init(&_metal.common.bus_list);
	metal_list_init(&_metal.common.generic_shmem_list);
	metal_list_init(&_metal.common.generic_device_list);

	error = metal_sys_init(params);
    e43a:	4628      	mov	r0, r5
	_metal.common.log_handler   = params->log_handler;
    e43c:	6063      	str	r3, [r4, #4]
	_metal.common.log_level     = params->log_level;
    e43e:	4623      	mov	r3, r4
    e440:	792a      	ldrb	r2, [r5, #4]
    e442:	f803 2b08 	strb.w	r2, [r3], #8
	list->next = list;
    e446:	e9c4 3302 	strd	r3, r3, [r4, #8]
	list->prev = list;
    e44a:	f104 0310 	add.w	r3, r4, #16
	list->next = list;
    e44e:	e9c4 3304 	strd	r3, r3, [r4, #16]
	list->prev = list;
    e452:	f104 0318 	add.w	r3, r4, #24
	list->next = list;
    e456:	e9c4 3306 	strd	r3, r3, [r4, #24]
	if (error)
		return error;

	return error;
}
    e45a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	error = metal_sys_init(params);
    e45e:	f000 b803 	b.w	e468 <metal_sys_init>
    e462:	bf00      	nop
    e464:	20001c7c 	.word	0x20001c7c

0000e468 <metal_sys_init>:
#include <metal/utilities.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
    e468:	b508      	push	{r3, lr}
	metal_bus_register(&metal_generic_bus);
    e46a:	4802      	ldr	r0, [pc, #8]	; (e474 <metal_sys_init+0xc>)
    e46c:	f7ff ff88 	bl	e380 <metal_bus_register>
	return 0;
}
    e470:	2000      	movs	r0, #0
    e472:	bd08      	pop	{r3, pc}
    e474:	200003bc 	.word	0x200003bc

0000e478 <metal_zephyr_log_handler>:
	"metal: debug:     ",
};

void metal_zephyr_log_handler(enum metal_log_level level,
			      const char *format, ...)
{
    e478:	b40e      	push	{r1, r2, r3}
	va_list args;

	if (level <= METAL_LOG_EMERGENCY || level > METAL_LOG_DEBUG)
    e47a:	1e43      	subs	r3, r0, #1
		level = METAL_LOG_EMERGENCY;
    e47c:	2b06      	cmp	r3, #6
{
    e47e:	b533      	push	{r0, r1, r4, r5, lr}
		level = METAL_LOG_EMERGENCY;
    e480:	bf88      	it	hi
    e482:	2000      	movhi	r0, #0
	printk("%s", level_strs[level]);
    e484:	4b09      	ldr	r3, [pc, #36]	; (e4ac <metal_zephyr_log_handler+0x34>)
{
    e486:	ac05      	add	r4, sp, #20
    e488:	f854 5b04 	ldr.w	r5, [r4], #4
	printk("%s", level_strs[level]);
    e48c:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
    e490:	4807      	ldr	r0, [pc, #28]	; (e4b0 <metal_zephyr_log_handler+0x38>)
    e492:	f001 ffe8 	bl	10466 <printk>

	va_start(args, format);
	vprintk(format, args);
    e496:	4621      	mov	r1, r4
    e498:	4628      	mov	r0, r5
	va_start(args, format);
    e49a:	9401      	str	r4, [sp, #4]
	vprintk(format, args);
    e49c:	f7f2 fbae 	bl	bfc <vprintk>
	va_end(args);
}
    e4a0:	b002      	add	sp, #8
    e4a2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    e4a6:	b003      	add	sp, #12
    e4a8:	4770      	bx	lr
    e4aa:	bf00      	nop
    e4ac:	00016424 	.word	0x00016424
    e4b0:	00017cb5 	.word	0x00017cb5

0000e4b4 <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback callbacks[])
{
    e4b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e4b8:	b087      	sub	sp, #28
    e4ba:	9305      	str	r3, [sp, #20]
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
	if (nvqs > num_vrings)
    e4bc:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
    e4be:	4606      	mov	r6, r0
	if (nvqs > num_vrings)
    e4c0:	4293      	cmp	r3, r2
{
    e4c2:	4617      	mov	r7, r2
	if (nvqs > num_vrings)
    e4c4:	d342      	bcc.n	e54c <virtio_create_virtqueues+0x98>
		return ERROR_VQUEUE_INVLD_PARAM;
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
    e4c6:	2500      	movs	r5, #0
		vring_info = &vdev->vrings_info[i];
    e4c8:	f04f 0b18 	mov.w	fp, #24
	for (i = 0; i < nvqs; i++) {
    e4cc:	42bd      	cmp	r5, r7
    e4ce:	d103      	bne.n	e4d8 <virtio_create_virtqueues+0x24>
				       callbacks[i], vdev->func->notify,
				       vring_info->vq);
		if (ret)
			return ret;
	}
	return 0;
    e4d0:	2000      	movs	r0, #0
}
    e4d2:	b007      	add	sp, #28
    e4d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		vring_info = &vdev->vrings_info[i];
    e4d8:	fb0b f805 	mul.w	r8, fp, r5
    e4dc:	f8d6 902c 	ldr.w	r9, [r6, #44]	; 0x2c
		if (vdev->role == VIRTIO_DEV_MASTER) {
    e4e0:	69b2      	ldr	r2, [r6, #24]
		vring_info = &vdev->vrings_info[i];
    e4e2:	eb09 0408 	add.w	r4, r9, r8
		vring_alloc = &vring_info->info;
    e4e6:	f104 0a04 	add.w	sl, r4, #4
		if (vdev->role == VIRTIO_DEV_MASTER) {
    e4ea:	b9ca      	cbnz	r2, e520 <virtio_create_virtqueues+0x6c>
			struct metal_io_region *io = vring_info->io;
    e4ec:	6960      	ldr	r0, [r4, #20]
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
    e4ee:	6863      	ldr	r3, [r4, #4]
    e4f0:	6801      	ldr	r1, [r0, #0]
			metal_io_block_set(io, offset, 0,
    e4f2:	f8b4 c00c 	ldrh.w	ip, [r4, #12]
    e4f6:	1a59      	subs	r1, r3, r1
						      vring_alloc->align));
    e4f8:	68a3      	ldr	r3, [r4, #8]
static inline int vring_size(unsigned int num, unsigned long align)
{
	int size;

	size = num * sizeof(struct vring_desc);
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
    e4fa:	f10c 0e03 	add.w	lr, ip, #3
	    sizeof(uint16_t);
	size = (size + align - 1) & ~(align - 1);
    e4fe:	1e5c      	subs	r4, r3, #1
    e500:	eb04 140c 	add.w	r4, r4, ip, lsl #4
    e504:	eb04 044e 	add.w	r4, r4, lr, lsl #1
    e508:	425b      	negs	r3, r3
    e50a:	4023      	ands	r3, r4
			metal_io_block_set(io, offset, 0,
    e50c:	6884      	ldr	r4, [r0, #8]
	size += sizeof(struct vring_used) +
    e50e:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
    e512:	42a1      	cmp	r1, r4
    e514:	bf28      	it	cs
    e516:	f04f 31ff 	movcs.w	r1, #4294967295
    e51a:	3306      	adds	r3, #6
    e51c:	f006 f847 	bl	145ae <metal_io_block_set>
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
    e520:	f859 3008 	ldr.w	r3, [r9, r8]
    e524:	9a05      	ldr	r2, [sp, #20]
    e526:	9302      	str	r3, [sp, #8]
    e528:	6a33      	ldr	r3, [r6, #32]
    e52a:	4630      	mov	r0, r6
    e52c:	6a1b      	ldr	r3, [r3, #32]
    e52e:	b2a9      	uxth	r1, r5
    e530:	9301      	str	r3, [sp, #4]
    e532:	9b10      	ldr	r3, [sp, #64]	; 0x40
    e534:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    e538:	9300      	str	r3, [sp, #0]
    e53a:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
    e53e:	4653      	mov	r3, sl
    e540:	f006 f88b 	bl	1465a <virtqueue_create>
		if (ret)
    e544:	2800      	cmp	r0, #0
    e546:	d1c4      	bne.n	e4d2 <virtio_create_virtqueues+0x1e>
	for (i = 0; i < nvqs; i++) {
    e548:	3501      	adds	r5, #1
    e54a:	e7bf      	b.n	e4cc <virtio_create_virtqueues+0x18>
		return ERROR_VQUEUE_INVLD_PARAM;
    e54c:	4800      	ldr	r0, [pc, #0]	; (e550 <virtio_create_virtqueues+0x9c>)
    e54e:	e7c0      	b.n	e4d2 <virtio_create_virtqueues+0x1e>
    e550:	fffff440 	.word	0xfffff440

0000e554 <virtqueue_add_consumed_buffer>:
 *
 * @return                       - Function status
 */
int virtqueue_add_consumed_buffer(struct virtqueue *vq, uint16_t head_idx,
				  uint32_t len)
{
    e554:	b530      	push	{r4, r5, lr}
	struct vring_used_elem *used_desc = NULL;
	uint16_t used_idx;

	if (head_idx > vq->vq_nentries) {
    e556:	8944      	ldrh	r4, [r0, #10]
    e558:	428c      	cmp	r4, r1
    e55a:	d312      	bcc.n	e582 <virtqueue_add_consumed_buffer+0x2e>
		return ERROR_VRING_NO_BUFF;
	}

	VQUEUE_BUSY(vq);

	used_idx = vq->vq_ring.used->idx & (vq->vq_nentries - 1);
    e55c:	6a03      	ldr	r3, [r0, #32]
    e55e:	3c01      	subs	r4, #1
    e560:	885d      	ldrh	r5, [r3, #2]
    e562:	402c      	ands	r4, r5
    e564:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
	used_desc = &vq->vq_ring.used->ring[used_idx];
	used_desc->id = head_idx;
	used_desc->len = len;
    e568:	609a      	str	r2, [r3, #8]
	used_desc->id = head_idx;
    e56a:	6059      	str	r1, [r3, #4]

	atomic_thread_fence(memory_order_seq_cst);
    e56c:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.used->idx++;
    e570:	6a02      	ldr	r2, [r0, #32]
    e572:	8853      	ldrh	r3, [r2, #2]
    e574:	3301      	adds	r3, #1
    e576:	8053      	strh	r3, [r2, #2]

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
    e578:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
    e57a:	3301      	adds	r3, #1
    e57c:	84c3      	strh	r3, [r0, #38]	; 0x26

	VQUEUE_IDLE(vq);

	return VQUEUE_SUCCESS;
    e57e:	2000      	movs	r0, #0
}
    e580:	bd30      	pop	{r4, r5, pc}
		return ERROR_VRING_NO_BUFF;
    e582:	4801      	ldr	r0, [pc, #4]	; (e588 <virtqueue_add_consumed_buffer+0x34>)
    e584:	e7fc      	b.n	e580 <virtqueue_add_consumed_buffer+0x2c>
    e586:	bf00      	nop
    e588:	fffff441 	.word	0xfffff441

0000e58c <rpmsg_send_offchannel_raw>:
 *
 */
int rpmsg_send_offchannel_raw(struct rpmsg_endpoint *ept, uint32_t src,
			      uint32_t dst, const void *data, int size,
			      int wait)
{
    e58c:	b430      	push	{r4, r5}
    e58e:	4614      	mov	r4, r2
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY)
    e590:	b148      	cbz	r0, e5a6 <rpmsg_send_offchannel_raw+0x1a>
    e592:	6a00      	ldr	r0, [r0, #32]
    e594:	b138      	cbz	r0, e5a6 <rpmsg_send_offchannel_raw+0x1a>
    e596:	b133      	cbz	r3, e5a6 <rpmsg_send_offchannel_raw+0x1a>
    e598:	3401      	adds	r4, #1
    e59a:	d004      	beq.n	e5a6 <rpmsg_send_offchannel_raw+0x1a>
		return RPMSG_ERR_PARAM;

	rdev = ept->rdev;

	if (rdev->ops.send_offchannel_raw)
    e59c:	6f44      	ldr	r4, [r0, #116]	; 0x74
    e59e:	b114      	cbz	r4, e5a6 <rpmsg_send_offchannel_raw+0x1a>
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
    e5a0:	46a4      	mov	ip, r4
						      size, wait);

	return RPMSG_ERR_PARAM;
}
    e5a2:	bc30      	pop	{r4, r5}
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
    e5a4:	4760      	bx	ip
		return RPMSG_ERR_PARAM;
    e5a6:	4801      	ldr	r0, [pc, #4]	; (e5ac <rpmsg_send_offchannel_raw+0x20>)
}
    e5a8:	bc30      	pop	{r4, r5}
    e5aa:	4770      	bx	lr
    e5ac:	fffff82d 	.word	0xfffff82d

0000e5b0 <rpmsg_create_ept>:
}

int rpmsg_create_ept(struct rpmsg_endpoint *ept, struct rpmsg_device *rdev,
		     const char *name, uint32_t src, uint32_t dest,
		     rpmsg_ept_cb cb, rpmsg_ns_unbind_cb unbind_cb)
{
    e5b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e5b4:	460e      	mov	r6, r1
    e5b6:	4690      	mov	r8, r2
    e5b8:	461c      	mov	r4, r3
	int status = RPMSG_SUCCESS;
	uint32_t addr = src;

	if (!ept)
    e5ba:	4605      	mov	r5, r0
    e5bc:	2800      	cmp	r0, #0
    e5be:	d06a      	beq.n	e696 <rpmsg_create_ept+0xe6>
		return RPMSG_ERR_PARAM;

	metal_mutex_acquire(&rdev->lock);
    e5c0:	f101 0758 	add.w	r7, r1, #88	; 0x58
 * @brief	Acquire a mutex
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
	__metal_mutex_acquire(mutex);
    e5c4:	4638      	mov	r0, r7
    e5c6:	f006 f9e1 	bl	1498c <__metal_mutex_acquire>
	if (src == RPMSG_ADDR_ANY) {
    e5ca:	1c63      	adds	r3, r4, #1
    e5cc:	d11a      	bne.n	e604 <rpmsg_create_ept+0x54>
metal_bitmap_next_clear_bit(unsigned long *bitmap, unsigned int start,
			    unsigned int max)
{
	unsigned int bit;

	for (bit = start;
    e5ce:	2300      	movs	r3, #0
		addr = rpmsg_get_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE);
    e5d0:	f106 0048 	add.w	r0, r6, #72	; 0x48
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
    e5d4:	095a      	lsrs	r2, r3, #5
    e5d6:	eb00 0c82 	add.w	ip, r0, r2, lsl #2
    e5da:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
    e5de:	f003 011f 	and.w	r1, r3, #31
    e5e2:	fa22 f401 	lsr.w	r4, r2, r1
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
    e5e6:	07e4      	lsls	r4, r4, #31
    e5e8:	d407      	bmi.n	e5fa <rpmsg_create_ept+0x4a>
		addr = RPMSG_RESERVED_ADDRESSES + nextbit;
    e5ea:	f503 6480 	add.w	r4, r3, #1024	; 0x400
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
    e5ee:	2301      	movs	r3, #1
    e5f0:	408b      	lsls	r3, r1
	bitmap[bit / METAL_BITS_PER_ULONG] |=
    e5f2:	4313      	orrs	r3, r2
    e5f4:	f8cc 3000 	str.w	r3, [ip]
		if (addr == RPMSG_ADDR_ANY) {
    e5f8:	e01d      	b.n	e636 <rpmsg_create_ept+0x86>
	     bit++)
    e5fa:	3301      	adds	r3, #1
	for (bit = start;
    e5fc:	2b80      	cmp	r3, #128	; 0x80
    e5fe:	d1e9      	bne.n	e5d4 <rpmsg_create_ept+0x24>
			status = RPMSG_ERR_ADDR;
    e600:	4c27      	ldr	r4, [pc, #156]	; (e6a0 <rpmsg_create_ept+0xf0>)
    e602:	e044      	b.n	e68e <rpmsg_create_ept+0xde>
			goto ret_status;
		}
	} else if (src >= RPMSG_RESERVED_ADDRESSES) {
    e604:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
    e608:	d315      	bcc.n	e636 <rpmsg_create_ept+0x86>
	addr -= RPMSG_RESERVED_ADDRESSES;
    e60a:	f5a4 6380 	sub.w	r3, r4, #1024	; 0x400
	if (addr >= 0 && addr < size)
    e60e:	2b7f      	cmp	r3, #127	; 0x7f
		status = rpmsg_is_address_set(rdev->bitmap,
    e610:	f106 0148 	add.w	r1, r6, #72	; 0x48
	if (addr >= 0 && addr < size)
    e614:	d83a      	bhi.n	e68c <rpmsg_create_ept+0xdc>
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
    e616:	0958      	lsrs	r0, r3, #5
    e618:	f851 c020 	ldr.w	ip, [r1, r0, lsl #2]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
    e61c:	f003 031f 	and.w	r3, r3, #31
    e620:	fa2c f203 	lsr.w	r2, ip, r3
					      RPMSG_ADDR_BMP_SIZE, src);
		if (!status) {
    e624:	07d2      	lsls	r2, r2, #31
    e626:	d4eb      	bmi.n	e600 <rpmsg_create_ept+0x50>
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
    e628:	2201      	movs	r2, #1
    e62a:	fa02 f303 	lsl.w	r3, r2, r3
	bitmap[bit / METAL_BITS_PER_ULONG] |=
    e62e:	ea43 030c 	orr.w	r3, r3, ip
    e632:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
					const char *name,
					uint32_t src, uint32_t dest,
					rpmsg_ept_cb cb,
					rpmsg_ns_unbind_cb ns_unbind_cb)
{
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
    e636:	491b      	ldr	r1, [pc, #108]	; (e6a4 <rpmsg_create_ept+0xf4>)
    e638:	2220      	movs	r2, #32
    e63a:	f1b8 0f00 	cmp.w	r8, #0
    e63e:	bf18      	it	ne
    e640:	4641      	movne	r1, r8
    e642:	4628      	mov	r0, r5
    e644:	f003 fe1b 	bl	1227e <strncpy>
	ept->addr = src;
	ept->dest_addr = dest;
    e648:	9b06      	ldr	r3, [sp, #24]
		 * 2.Simplify the tracking implementation
		 */
	}

	rpmsg_initialize_ept(ept, name, addr, dest, cb, unbind_cb);
	rpmsg_register_endpoint(rdev, ept);
    e64a:	4629      	mov	r1, r5
    e64c:	62ab      	str	r3, [r5, #40]	; 0x28
	ept->cb = cb;
    e64e:	9b07      	ldr	r3, [sp, #28]
    e650:	4630      	mov	r0, r6
    e652:	62eb      	str	r3, [r5, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
    e654:	9b08      	ldr	r3, [sp, #32]
	ept->addr = src;
    e656:	626c      	str	r4, [r5, #36]	; 0x24
	ept->ns_unbind_cb = ns_unbind_cb;
    e658:	632b      	str	r3, [r5, #48]	; 0x30
    e65a:	f006 fa11 	bl	14a80 <rpmsg_register_endpoint>
	z_impl_k_sem_give(sem);
    e65e:	4638      	mov	r0, r7
    e660:	f001 f88a 	bl	f778 <z_impl_k_sem_give>
	metal_mutex_release(&rdev->lock);

	/* Send NS announcement to remote processor */
	if (ept->name[0] && rdev->support_ns &&
    e664:	782c      	ldrb	r4, [r5, #0]
    e666:	b174      	cbz	r4, e686 <rpmsg_create_ept+0xd6>
    e668:	f896 4078 	ldrb.w	r4, [r6, #120]	; 0x78
    e66c:	b15c      	cbz	r4, e686 <rpmsg_create_ept+0xd6>
    e66e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    e670:	3301      	adds	r3, #1
    e672:	d112      	bne.n	e69a <rpmsg_create_ept+0xea>
	    ept->dest_addr == RPMSG_ADDR_ANY)
		status = rpmsg_send_ns_message(ept, RPMSG_NS_CREATE);
    e674:	2100      	movs	r1, #0
    e676:	4628      	mov	r0, r5
    e678:	f006 f9b9 	bl	149ee <rpmsg_send_ns_message>

	if (status)
    e67c:	4604      	mov	r4, r0
    e67e:	b110      	cbz	r0, e686 <rpmsg_create_ept+0xd6>
		rpmsg_unregister_endpoint(ept);
    e680:	4628      	mov	r0, r5
    e682:	f006 f989 	bl	14998 <rpmsg_unregister_endpoint>
	return status;

ret_status:
	metal_mutex_release(&rdev->lock);
	return status;
}
    e686:	4620      	mov	r0, r4
    e688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e68c:	4c06      	ldr	r4, [pc, #24]	; (e6a8 <rpmsg_create_ept+0xf8>)
    e68e:	4638      	mov	r0, r7
    e690:	f001 f872 	bl	f778 <z_impl_k_sem_give>
}
    e694:	e7f7      	b.n	e686 <rpmsg_create_ept+0xd6>
		return RPMSG_ERR_PARAM;
    e696:	4c04      	ldr	r4, [pc, #16]	; (e6a8 <rpmsg_create_ept+0xf8>)
    e698:	e7f5      	b.n	e686 <rpmsg_create_ept+0xd6>
    e69a:	2400      	movs	r4, #0
    e69c:	e7f3      	b.n	e686 <rpmsg_create_ept+0xd6>
    e69e:	bf00      	nop
    e6a0:	fffff829 	.word	0xfffff829
    e6a4:	00016746 	.word	0x00016746
    e6a8:	fffff82d 	.word	0xfffff82d

0000e6ac <rpmsg_virtio_send_offchannel_raw>:
 */
static int rpmsg_virtio_send_offchannel_raw(struct rpmsg_device *rdev,
					    uint32_t src, uint32_t dst,
					    const void *data,
					    int size, int wait)
{
    e6ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e6b0:	4604      	mov	r4, r0
	struct metal_io_region *io;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);

	status = rpmsg_virtio_get_status(rvdev);
    e6b2:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
{
    e6b4:	469b      	mov	fp, r3
	rvdev->vdev->func->set_status(rvdev->vdev, status);
}

static inline uint8_t rpmsg_virtio_get_status(struct rpmsg_virtio_device *rvdev)
{
	return rvdev->vdev->func->get_status(rvdev->vdev);
    e6b6:	6a03      	ldr	r3, [r0, #32]
    e6b8:	b08d      	sub	sp, #52	; 0x34
    e6ba:	681b      	ldr	r3, [r3, #0]
    e6bc:	4692      	mov	sl, r2
    e6be:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
    e6c2:	9103      	str	r1, [sp, #12]
    e6c4:	4798      	blx	r3
	/* Validate device state */
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK)) {
    e6c6:	0743      	lsls	r3, r0, #29
    e6c8:	f140 8089 	bpl.w	e7de <rpmsg_virtio_send_offchannel_raw+0x132>
		return RPMSG_ERR_DEV_STATE;
	}

	if (wait)
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
    e6cc:	f643 2398 	movw	r3, #15000	; 0x3a98
    e6d0:	2f00      	cmp	r7, #0
    e6d2:	bf18      	it	ne
    e6d4:	461f      	movne	r7, r3

	while (1) {
		int avail_size;

		/* Lock the device to enable exclusive access to virtqueues */
		metal_mutex_acquire(&rdev->lock);
    e6d6:	f104 0858 	add.w	r8, r4, #88	; 0x58
    e6da:	4640      	mov	r0, r8
    e6dc:	f006 fa0a 	bl	14af4 <__metal_mutex_acquire>
	return rvdev->vdev->role;
    e6e0:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    e6e2:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_MASTER) {
    e6e4:	b373      	cbz	r3, e744 <rpmsg_virtio_send_offchannel_raw+0x98>
	if (role == RPMSG_REMOTE) {
    e6e6:	2b01      	cmp	r3, #1
    e6e8:	d108      	bne.n	e6fc <rpmsg_virtio_send_offchannel_raw+0x50>
		    (int)virtqueue_get_desc_size(rvdev->svq) -
    e6ea:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    e6ee:	f006 f935 	bl	1495c <virtqueue_get_desc_size>
    e6f2:	3810      	subs	r0, #16
		avail_size = _rpmsg_virtio_get_buffer_size(rvdev);
		if (avail_size && size > avail_size) {
    e6f4:	2800      	cmp	r0, #0
    e6f6:	ea20 79e0 	bic.w	r9, r0, r0, asr #31
    e6fa:	dc25      	bgt.n	e748 <rpmsg_virtio_send_offchannel_raw+0x9c>
		length = RPMSG_BUFFER_SIZE - sizeof(struct rpmsg_hdr);
    e6fc:	f04f 0900 	mov.w	r9, #0
    e700:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    e702:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_MASTER) {
    e704:	bb3b      	cbnz	r3, e756 <rpmsg_virtio_send_offchannel_raw+0xaa>
		data = virtqueue_get_buffer(rvdev->svq, len, idx);
    e706:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    e70a:	f10d 0212 	add.w	r2, sp, #18
    e70e:	a905      	add	r1, sp, #20
    e710:	f006 f833 	bl	1477a <virtqueue_get_buffer>
		if (!data) {
    e714:	4605      	mov	r5, r0
    e716:	b948      	cbnz	r0, e72c <rpmsg_virtio_send_offchannel_raw+0x80>
			data = rpmsg_virtio_shm_pool_get_buffer(rvdev->shpool,
    e718:	f44f 7100 	mov.w	r1, #512	; 0x200
    e71c:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    e720:	f006 fa97 	bl	14c52 <rpmsg_virtio_shm_pool_get_buffer>
			*len = RPMSG_BUFFER_SIZE;
    e724:	f44f 7300 	mov.w	r3, #512	; 0x200
			data = rpmsg_virtio_shm_pool_get_buffer(rvdev->shpool,
    e728:	4605      	mov	r5, r0
			*len = RPMSG_BUFFER_SIZE;
    e72a:	9305      	str	r3, [sp, #20]
	k_sem_take(m, K_FOREVER);
}

static inline void __metal_mutex_release(metal_mutex_t *m)
{
	k_sem_give(m);
    e72c:	4640      	mov	r0, r8
    e72e:	f006 f9c9 	bl	14ac4 <k_sem_give>
			return RPMSG_ERR_BUFF_SIZE;
		}

		buffer = rpmsg_virtio_get_tx_buffer(rvdev, &buff_len, &idx);
		metal_mutex_release(&rdev->lock);
		if (buffer || !tick_count)
    e732:	2d00      	cmp	r5, #0
    e734:	d157      	bne.n	e7e6 <rpmsg_virtio_send_offchannel_raw+0x13a>
    e736:	2f00      	cmp	r7, #0
    e738:	d053      	beq.n	e7e2 <rpmsg_virtio_send_offchannel_raw+0x136>
			break;
		if (avail_size != 0)
    e73a:	f1b9 0f00 	cmp.w	r9, #0
    e73e:	d108      	bne.n	e752 <rpmsg_virtio_send_offchannel_raw+0xa6>
			return RPMSG_ERR_BUFF_SIZE;
		metal_sleep_usec(RPMSG_TICKS_PER_INTERVAL);
		tick_count--;
    e740:	3f01      	subs	r7, #1
	while (1) {
    e742:	e7ca      	b.n	e6da <rpmsg_virtio_send_offchannel_raw+0x2e>
		length = RPMSG_BUFFER_SIZE - sizeof(struct rpmsg_hdr);
    e744:	f44f 79f8 	mov.w	r9, #496	; 0x1f0
		if (avail_size && size > avail_size) {
    e748:	454e      	cmp	r6, r9
    e74a:	ddd9      	ble.n	e700 <rpmsg_virtio_send_offchannel_raw+0x54>
    e74c:	4640      	mov	r0, r8
    e74e:	f006 f9b9 	bl	14ac4 <k_sem_give>
			return RPMSG_ERR_BUFF_SIZE;
    e752:	4e31      	ldr	r6, [pc, #196]	; (e818 <rpmsg_virtio_send_offchannel_raw+0x16c>)
    e754:	e03f      	b.n	e7d6 <rpmsg_virtio_send_offchannel_raw+0x12a>
	if (role == RPMSG_REMOTE) {
    e756:	2b01      	cmp	r3, #1
    e758:	d108      	bne.n	e76c <rpmsg_virtio_send_offchannel_raw+0xc0>
		data = virtqueue_get_available_buffer(rvdev->svq, idx, len);
    e75a:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    e75e:	aa05      	add	r2, sp, #20
    e760:	f10d 0112 	add.w	r1, sp, #18
    e764:	f006 f843 	bl	147ee <virtqueue_get_available_buffer>
    e768:	4605      	mov	r5, r0
    e76a:	e7df      	b.n	e72c <rpmsg_virtio_send_offchannel_raw+0x80>
	void *data = NULL;
    e76c:	2500      	movs	r5, #0
    e76e:	e7dd      	b.n	e72c <rpmsg_virtio_send_offchannel_raw+0x80>
    e770:	683b      	ldr	r3, [r7, #0]

	return (offset < io->size ? offset : METAL_BAD_OFFSET);
    e772:	68b8      	ldr	r0, [r7, #8]
	io = rvdev->shbuf_io;
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
				      &rp_hdr, sizeof(rp_hdr));
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\r\n");

	status = metal_io_block_write(io,
    e774:	f105 0110 	add.w	r1, r5, #16
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
    e778:	1ac9      	subs	r1, r1, r3
    e77a:	4281      	cmp	r1, r0
    e77c:	bf28      	it	cs
    e77e:	f04f 31ff 	movcs.w	r1, #4294967295
    e782:	4633      	mov	r3, r6
    e784:	465a      	mov	r2, fp
    e786:	4638      	mov	r0, r7
    e788:	f005 fed6 	bl	14538 <metal_io_block_write>
				      metal_io_virt_to_offset(io,
						RPMSG_LOCATE_DATA(buffer)),
				      data, size);
	RPMSG_ASSERT(status == size, "failed to write buffer\r\n");
    e78c:	4286      	cmp	r6, r0
    e78e:	d000      	beq.n	e792 <rpmsg_virtio_send_offchannel_raw+0xe6>
    e790:	e7fe      	b.n	e790 <rpmsg_virtio_send_offchannel_raw+0xe4>
    e792:	4640      	mov	r0, r8
    e794:	f006 f9ae 	bl	14af4 <__metal_mutex_acquire>
    e798:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
	metal_mutex_acquire(&rdev->lock);

	/* Enqueue buffer on virtqueue. */
	status = rpmsg_virtio_enqueue_buffer(rvdev, buffer, buff_len, idx);
    e79a:	9a05      	ldr	r2, [sp, #20]
    e79c:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_MASTER) {
    e79e:	b953      	cbnz	r3, e7b6 <rpmsg_virtio_send_offchannel_raw+0x10a>
		vqbuf.len = len;
    e7a0:	e9cd 5206 	strd	r5, r2, [sp, #24]
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 1, 0, buffer);
    e7a4:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    e7a8:	2201      	movs	r2, #1
    e7aa:	9500      	str	r5, [sp, #0]
    e7ac:	a906      	add	r1, sp, #24
    e7ae:	f005 ff84 	bl	146ba <virtqueue_add_buffer>
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\r\n");
    e7b2:	b148      	cbz	r0, e7c8 <rpmsg_virtio_send_offchannel_raw+0x11c>
    e7b4:	e7fe      	b.n	e7b4 <rpmsg_virtio_send_offchannel_raw+0x108>
	if (role == RPMSG_REMOTE) {
    e7b6:	2b01      	cmp	r3, #1
    e7b8:	d106      	bne.n	e7c8 <rpmsg_virtio_send_offchannel_raw+0x11c>
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
    e7ba:	f8bd 1012 	ldrh.w	r1, [sp, #18]
    e7be:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    e7c2:	f7ff fec7 	bl	e554 <virtqueue_add_consumed_buffer>
    e7c6:	e7f4      	b.n	e7b2 <rpmsg_virtio_send_offchannel_raw+0x106>
	/* Let the other side know that there is a job to process. */
	virtqueue_kick(rvdev->svq);
    e7c8:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    e7cc:	f006 f88e 	bl	148ec <virtqueue_kick>
    e7d0:	4640      	mov	r0, r8
    e7d2:	f006 f977 	bl	14ac4 <k_sem_give>

	metal_mutex_release(&rdev->lock);

	return size;
}
    e7d6:	4630      	mov	r0, r6
    e7d8:	b00d      	add	sp, #52	; 0x34
    e7da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return RPMSG_ERR_DEV_STATE;
    e7de:	4e0f      	ldr	r6, [pc, #60]	; (e81c <rpmsg_virtio_send_offchannel_raw+0x170>)
    e7e0:	e7f9      	b.n	e7d6 <rpmsg_virtio_send_offchannel_raw+0x12a>
		return RPMSG_ERR_NO_BUFF;
    e7e2:	4e0f      	ldr	r6, [pc, #60]	; (e820 <rpmsg_virtio_send_offchannel_raw+0x174>)
    e7e4:	e7f7      	b.n	e7d6 <rpmsg_virtio_send_offchannel_raw+0x12a>
	rp_hdr.src = src;
    e7e6:	9b03      	ldr	r3, [sp, #12]
	io = rvdev->shbuf_io;
    e7e8:	f8d4 7088 	ldr.w	r7, [r4, #136]	; 0x88
	rp_hdr.src = src;
    e7ec:	9308      	str	r3, [sp, #32]
	rp_hdr.reserved = 0;
    e7ee:	2300      	movs	r3, #0
    e7f0:	6839      	ldr	r1, [r7, #0]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
    e7f2:	68b8      	ldr	r0, [r7, #8]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
    e7f4:	1a69      	subs	r1, r5, r1
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
    e7f6:	4281      	cmp	r1, r0
    e7f8:	bf28      	it	cs
    e7fa:	f04f 31ff 	movcs.w	r1, #4294967295
	rp_hdr.reserved = 0;
    e7fe:	930a      	str	r3, [sp, #40]	; 0x28
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
    e800:	4638      	mov	r0, r7
    e802:	2310      	movs	r3, #16
    e804:	aa08      	add	r2, sp, #32
	rp_hdr.dst = dst;
    e806:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
	rp_hdr.len = size;
    e80a:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
    e80e:	f005 fe93 	bl	14538 <metal_io_block_write>
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\r\n");
    e812:	2810      	cmp	r0, #16
    e814:	d0ac      	beq.n	e770 <rpmsg_virtio_send_offchannel_raw+0xc4>
    e816:	e7fe      	b.n	e816 <rpmsg_virtio_send_offchannel_raw+0x16a>
    e818:	fffff82b 	.word	0xfffff82b
    e81c:	fffff82c 	.word	0xfffff82c
    e820:	fffff82e 	.word	0xfffff82e

0000e824 <rpmsg_init_vdev>:
int rpmsg_init_vdev(struct rpmsg_virtio_device *rvdev,
		    struct virtio_device *vdev,
		    rpmsg_ns_bind_cb ns_bind_cb,
		    struct metal_io_region *shm_io,
		    struct rpmsg_virtio_shm_pool *shpool)
{
    e824:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e828:	460d      	mov	r5, r1
    e82a:	b088      	sub	sp, #32
    e82c:	4617      	mov	r7, r2
	vq_callback callback[RPMSG_NUM_VRINGS];
	int status;
	unsigned int i, role;

	rdev = &rvdev->rdev;
	memset(rdev, 0, sizeof(*rdev));
    e82e:	2100      	movs	r1, #0
    e830:	227c      	movs	r2, #124	; 0x7c
{
    e832:	4604      	mov	r4, r0
    e834:	461e      	mov	r6, r3
    e836:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
	memset(rdev, 0, sizeof(*rdev));
    e83a:	f003 fd99 	bl	12370 <memset>
	return z_impl_k_sem_init(sem, initial_count, limit);
    e83e:	2201      	movs	r2, #1
    e840:	f104 0058 	add.w	r0, r4, #88	; 0x58
    e844:	4611      	mov	r1, r2
    e846:	f006 fc70 	bl	1512a <z_impl_k_sem_init>
	metal_mutex_init(&rdev->lock);
	rvdev->vdev = vdev;
	rdev->ns_bind_cb = ns_bind_cb;
	vdev->priv = rvdev;
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
    e84a:	4b5e      	ldr	r3, [pc, #376]	; (e9c4 <rpmsg_init_vdev+0x1a0>)
	rvdev->vdev = vdev;
    e84c:	67e5      	str	r5, [r4, #124]	; 0x7c
	rdev->ns_bind_cb = ns_bind_cb;
    e84e:	6727      	str	r7, [r4, #112]	; 0x70
	vdev->priv = rvdev;
    e850:	626c      	str	r4, [r5, #36]	; 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
    e852:	6763      	str	r3, [r4, #116]	; 0x74
    e854:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    e856:	f8d3 8018 	ldr.w	r8, [r3, #24]
	role = rpmsg_virtio_get_role(rvdev);

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
    e85a:	f1b8 0f01 	cmp.w	r8, #1
    e85e:	d020      	beq.n	e8a2 <rpmsg_init_vdev+0x7e>
		/* wait synchro with the master */
		rpmsg_virtio_wait_remote_ready(rvdev);
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	vdev->features = rpmsg_virtio_get_features(rvdev);
    e860:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
}

static inline uint32_t
rpmsg_virtio_get_features(struct rpmsg_virtio_device *rvdev)
{
	return rvdev->vdev->func->get_features(rvdev->vdev);
    e862:	6a03      	ldr	r3, [r0, #32]
    e864:	689b      	ldr	r3, [r3, #8]
    e866:	4798      	blx	r3
    e868:	2300      	movs	r3, #0
    e86a:	6128      	str	r0, [r5, #16]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
    e86c:	f000 0001 	and.w	r0, r0, #1
	vdev->features = rpmsg_virtio_get_features(rvdev);
    e870:	616b      	str	r3, [r5, #20]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
    e872:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
    e876:	f1b8 0f00 	cmp.w	r8, #0
    e87a:	d01e      	beq.n	e8ba <rpmsg_init_vdev+0x96>
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	(void)shpool;
	if (role == RPMSG_REMOTE) {
    e87c:	f1b8 0f01 	cmp.w	r8, #1
    e880:	d133      	bne.n	e8ea <rpmsg_init_vdev+0xc6>
		vq_names[0] = "tx_vq";
    e882:	4b51      	ldr	r3, [pc, #324]	; (e9c8 <rpmsg_init_vdev+0x1a4>)
    e884:	9302      	str	r3, [sp, #8]
		vq_names[1] = "rx_vq";
    e886:	4b51      	ldr	r3, [pc, #324]	; (e9cc <rpmsg_init_vdev+0x1a8>)
    e888:	9303      	str	r3, [sp, #12]
		callback[0] = rpmsg_virtio_tx_callback;
    e88a:	4b51      	ldr	r3, [pc, #324]	; (e9d0 <rpmsg_init_vdev+0x1ac>)
    e88c:	9304      	str	r3, [sp, #16]
		callback[1] = rpmsg_virtio_rx_callback;
    e88e:	4b51      	ldr	r3, [pc, #324]	; (e9d4 <rpmsg_init_vdev+0x1b0>)
    e890:	9305      	str	r3, [sp, #20]
		rvdev->rvq  = vdev->vrings_info[1].vq;
    e892:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    e894:	699a      	ldr	r2, [r3, #24]
		rvdev->svq  = vdev->vrings_info[0].vq;
    e896:	681b      	ldr	r3, [r3, #0]
		rvdev->rvq  = vdev->vrings_info[1].vq;
    e898:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
		rvdev->svq  = vdev->vrings_info[0].vq;
    e89c:	e023      	b.n	e8e6 <rpmsg_init_vdev+0xc2>
		} else if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK) {
    e89e:	0743      	lsls	r3, r0, #29
    e8a0:	d4de      	bmi.n	e860 <rpmsg_init_vdev+0x3c>
		status = rpmsg_virtio_get_status(rvdev);
    e8a2:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
	return rvdev->vdev->func->get_status(rvdev->vdev);
    e8a4:	6a03      	ldr	r3, [r0, #32]
    e8a6:	681b      	ldr	r3, [r3, #0]
    e8a8:	4798      	blx	r3
		if (status & VIRTIO_CONFIG_STATUS_NEEDS_RESET) {
    e8aa:	0642      	lsls	r2, r0, #25
    e8ac:	d5f7      	bpl.n	e89e <rpmsg_init_vdev+0x7a>
			rpmsg_virtio_set_status(rvdev, 0);
    e8ae:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
	rvdev->vdev->func->set_status(rvdev->vdev, status);
    e8b0:	2100      	movs	r1, #0
    e8b2:	6a03      	ldr	r3, [r0, #32]
    e8b4:	685b      	ldr	r3, [r3, #4]
    e8b6:	4798      	blx	r3
}
    e8b8:	e7f3      	b.n	e8a2 <rpmsg_init_vdev+0x7e>
		if (!shpool)
    e8ba:	f1b9 0f00 	cmp.w	r9, #0
    e8be:	d07d      	beq.n	e9bc <rpmsg_init_vdev+0x198>
		if (!shpool->size)
    e8c0:	f8d9 3008 	ldr.w	r3, [r9, #8]
    e8c4:	2b00      	cmp	r3, #0
    e8c6:	d07b      	beq.n	e9c0 <rpmsg_init_vdev+0x19c>
		vq_names[0] = "rx_vq";
    e8c8:	4b40      	ldr	r3, [pc, #256]	; (e9cc <rpmsg_init_vdev+0x1a8>)
		rvdev->shpool = shpool;
    e8ca:	f8c4 908c 	str.w	r9, [r4, #140]	; 0x8c
		vq_names[0] = "rx_vq";
    e8ce:	9302      	str	r3, [sp, #8]
		vq_names[1] = "tx_vq";
    e8d0:	4b3d      	ldr	r3, [pc, #244]	; (e9c8 <rpmsg_init_vdev+0x1a4>)
    e8d2:	9303      	str	r3, [sp, #12]
		callback[0] = rpmsg_virtio_rx_callback;
    e8d4:	4b3f      	ldr	r3, [pc, #252]	; (e9d4 <rpmsg_init_vdev+0x1b0>)
    e8d6:	9304      	str	r3, [sp, #16]
		callback[1] = rpmsg_virtio_tx_callback;
    e8d8:	4b3d      	ldr	r3, [pc, #244]	; (e9d0 <rpmsg_init_vdev+0x1ac>)
    e8da:	9305      	str	r3, [sp, #20]
		rvdev->rvq  = vdev->vrings_info[0].vq;
    e8dc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    e8de:	681a      	ldr	r2, [r3, #0]
		rvdev->svq  = vdev->vrings_info[1].vq;
    e8e0:	699b      	ldr	r3, [r3, #24]
		rvdev->rvq  = vdev->vrings_info[0].vq;
    e8e2:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
		rvdev->svq  = vdev->vrings_info[0].vq;
    e8e6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
rpmsg_virtio_create_virtqueues(struct rpmsg_virtio_device *rvdev,
			       int flags, unsigned int nvqs,
			       const char *names[],
			       vq_callback *callbacks)
{
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
    e8ea:	ab04      	add	r3, sp, #16
    e8ec:	9300      	str	r3, [sp, #0]
    e8ee:	2202      	movs	r2, #2
    e8f0:	2100      	movs	r1, #0
    e8f2:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	rvdev->shbuf_io = shm_io;
    e8f4:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
    e8f8:	ab02      	add	r3, sp, #8
    e8fa:	f7ff fddb 	bl	e4b4 <virtio_create_virtqueues>

	/* Create virtqueues for remote device */
	status = rpmsg_virtio_create_virtqueues(rvdev, 0, RPMSG_NUM_VRINGS,
						vq_names, callback);
	if (status != RPMSG_SUCCESS)
    e8fe:	4607      	mov	r7, r0
    e900:	2800      	cmp	r0, #0
    e902:	d157      	bne.n	e9b4 <rpmsg_init_vdev+0x190>

	/*
	 * Suppress "tx-complete" interrupts
	 * since send method use busy loop when buffer pool exhaust
	 */
	virtqueue_disable_cb(rvdev->svq);
    e904:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    e908:	f005 ffc6 	bl	14898 <virtqueue_disable_cb>

	/* TODO: can have a virtio function to set the shared memory I/O */
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
		struct virtqueue *vq;

		vq = vdev->vrings_info[i].vq;
    e90c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
		vq->shm_io = shm_io;
    e90e:	681a      	ldr	r2, [r3, #0]
    e910:	699b      	ldr	r3, [r3, #24]
    e912:	6296      	str	r6, [r2, #40]	; 0x28
    e914:	629e      	str	r6, [r3, #40]	; 0x28
	}

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
    e916:	f1b8 0f00 	cmp.w	r8, #0
    e91a:	d108      	bne.n	e92e <rpmsg_init_vdev+0x10a>
		struct virtqueue_buf vqbuf;
		unsigned int idx;
		void *buffer;

		vqbuf.len = RPMSG_BUFFER_SIZE;
    e91c:	f44f 7300 	mov.w	r3, #512	; 0x200
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
    e920:	46c2      	mov	sl, r8
		vqbuf.len = RPMSG_BUFFER_SIZE;
    e922:	9307      	str	r3, [sp, #28]
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
    e924:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    e928:	895b      	ldrh	r3, [r3, #10]
    e92a:	4553      	cmp	r3, sl
    e92c:	d81f      	bhi.n	e96e <rpmsg_init_vdev+0x14a>

	/*
	 * Create name service announcement endpoint if device supports name
	 * service announcement feature.
	 */
	if (rdev->support_ns) {
    e92e:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    e932:	e9c4 4400 	strd	r4, r4, [r4]
    e936:	b18b      	cbz	r3, e95c <rpmsg_init_vdev+0x138>
		rpmsg_initialize_ept(&rdev->ns_ept, "NS",
    e938:	f104 0508 	add.w	r5, r4, #8
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
    e93c:	4926      	ldr	r1, [pc, #152]	; (e9d8 <rpmsg_init_vdev+0x1b4>)
    e93e:	2220      	movs	r2, #32
    e940:	4628      	mov	r0, r5
    e942:	f003 fc9c 	bl	1227e <strncpy>
	ept->addr = src;
    e946:	2335      	movs	r3, #53	; 0x35
	ept->dest_addr = dest;
    e948:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
	ept->cb = cb;
    e94c:	4b23      	ldr	r3, [pc, #140]	; (e9dc <rpmsg_init_vdev+0x1b8>)
				     RPMSG_NS_EPT_ADDR, RPMSG_NS_EPT_ADDR,
				     rpmsg_virtio_ns_callback, NULL);
		rpmsg_register_endpoint(rdev, &rdev->ns_ept);
    e94e:	4629      	mov	r1, r5
    e950:	6363      	str	r3, [r4, #52]	; 0x34
	ept->ns_unbind_cb = ns_unbind_cb;
    e952:	2300      	movs	r3, #0
    e954:	4620      	mov	r0, r4
    e956:	63a3      	str	r3, [r4, #56]	; 0x38
    e958:	f006 f892 	bl	14a80 <rpmsg_register_endpoint>
	}

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER)
    e95c:	f1b8 0f00 	cmp.w	r8, #0
    e960:	d128      	bne.n	e9b4 <rpmsg_init_vdev+0x190>
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
    e962:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
	rvdev->vdev->func->set_status(rvdev->vdev, status);
    e964:	2104      	movs	r1, #4
    e966:	6a03      	ldr	r3, [r0, #32]
    e968:	685b      	ldr	r3, [r3, #4]
    e96a:	4798      	blx	r3
}
    e96c:	e022      	b.n	e9b4 <rpmsg_init_vdev+0x190>
			buffer = rpmsg_virtio_shm_pool_get_buffer(shpool,
    e96e:	f44f 7100 	mov.w	r1, #512	; 0x200
    e972:	4648      	mov	r0, r9
    e974:	f006 f96d 	bl	14c52 <rpmsg_virtio_shm_pool_get_buffer>
			if (!buffer) {
    e978:	4605      	mov	r5, r0
    e97a:	b1c8      	cbz	r0, e9b0 <rpmsg_init_vdev+0x18c>
    e97c:	6831      	ldr	r1, [r6, #0]
			vqbuf.buf = buffer;
    e97e:	9006      	str	r0, [sp, #24]
    e980:	1a41      	subs	r1, r0, r1
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
    e982:	68b0      	ldr	r0, [r6, #8]
			metal_io_block_set(shm_io,
    e984:	f44f 7300 	mov.w	r3, #512	; 0x200
    e988:	4281      	cmp	r1, r0
    e98a:	bf28      	it	cs
    e98c:	f04f 31ff 	movcs.w	r1, #4294967295
    e990:	2200      	movs	r2, #0
    e992:	4630      	mov	r0, r6
    e994:	f005 fe0b 	bl	145ae <metal_io_block_set>
				virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1,
    e998:	2301      	movs	r3, #1
    e99a:	2200      	movs	r2, #0
    e99c:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    e9a0:	9500      	str	r5, [sp, #0]
    e9a2:	a906      	add	r1, sp, #24
    e9a4:	f005 fe89 	bl	146ba <virtqueue_add_buffer>
			if (status != RPMSG_SUCCESS) {
    e9a8:	b918      	cbnz	r0, e9b2 <rpmsg_init_vdev+0x18e>
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
    e9aa:	f10a 0a01 	add.w	sl, sl, #1
    e9ae:	e7b9      	b.n	e924 <rpmsg_init_vdev+0x100>
				return RPMSG_ERR_NO_BUFF;
    e9b0:	480b      	ldr	r0, [pc, #44]	; (e9e0 <rpmsg_init_vdev+0x1bc>)
    e9b2:	4607      	mov	r7, r0
#endif /*!VIRTIO_SLAVE_ONLY*/

	return status;
}
    e9b4:	4638      	mov	r0, r7
    e9b6:	b008      	add	sp, #32
    e9b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			return RPMSG_ERR_PARAM;
    e9bc:	4f09      	ldr	r7, [pc, #36]	; (e9e4 <rpmsg_init_vdev+0x1c0>)
    e9be:	e7f9      	b.n	e9b4 <rpmsg_init_vdev+0x190>
			return RPMSG_ERR_NO_BUFF;
    e9c0:	4f07      	ldr	r7, [pc, #28]	; (e9e0 <rpmsg_init_vdev+0x1bc>)
    e9c2:	e7f7      	b.n	e9b4 <rpmsg_init_vdev+0x190>
    e9c4:	0000e6ad 	.word	0x0000e6ad
    e9c8:	000190a4 	.word	0x000190a4
    e9cc:	0001909e 	.word	0x0001909e
    e9d0:	00014ac3 	.word	0x00014ac3
    e9d4:	00014b93 	.word	0x00014b93
    e9d8:	000190aa 	.word	0x000190aa
    e9dc:	00014b01 	.word	0x00014b01
    e9e0:	fffff82e 	.word	0xfffff82e
    e9e4:	fffff82d 	.word	0xfffff82d

0000e9e8 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
    e9e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    e9ea:	4b10      	ldr	r3, [pc, #64]	; (ea2c <z_sys_init_run_level+0x44>)
			/* Initialization failed.
			 * Set the init status bit so device is not declared ready.
			 */
			sys_bitfield_set_bit(
				(mem_addr_t) __device_init_status_start,
				(dev - __device_start));
    e9ec:	4f10      	ldr	r7, [pc, #64]	; (ea30 <z_sys_init_run_level+0x48>)
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    e9ee:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
    e9f2:	3001      	adds	r0, #1
    e9f4:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    e9f8:	42ae      	cmp	r6, r5
    e9fa:	d800      	bhi.n	e9fe <z_sys_init_run_level+0x16>
		}
	}
}
    e9fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((entry->init(dev) != 0) && (dev != NULL)) {
    e9fe:	e9d5 3400 	ldrd	r3, r4, [r5]
    ea02:	4620      	mov	r0, r4
    ea04:	4798      	blx	r3
    ea06:	b170      	cbz	r0, ea26 <z_sys_init_run_level+0x3e>
    ea08:	b16c      	cbz	r4, ea26 <z_sys_init_run_level+0x3e>

static ALWAYS_INLINE void sys_set_bit(mem_addr_t addr, unsigned int bit)
{
	uint32_t temp = *(volatile uint32_t *)addr;

	*(volatile uint32_t *)addr = temp | (1 << bit);
    ea0a:	2301      	movs	r3, #1
				(dev - __device_start));
    ea0c:	1be4      	subs	r4, r4, r7
	void sys_bitfield_set_bit(mem_addr_t addr, unsigned int bit)
{
	/* Doing memory offsets in terms of 32-bit values to prevent
	 * alignment issues
	 */
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
    ea0e:	4a09      	ldr	r2, [pc, #36]	; (ea34 <z_sys_init_run_level+0x4c>)
    ea10:	1124      	asrs	r4, r4, #4
    ea12:	0961      	lsrs	r1, r4, #5
	uint32_t temp = *(volatile uint32_t *)addr;
    ea14:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
    ea18:	f004 041f 	and.w	r4, r4, #31
	*(volatile uint32_t *)addr = temp | (1 << bit);
    ea1c:	fa03 f404 	lsl.w	r4, r3, r4
    ea20:	4304      	orrs	r4, r0
    ea22:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    ea26:	3508      	adds	r5, #8
    ea28:	e7e6      	b.n	e9f8 <z_sys_init_run_level+0x10>
    ea2a:	bf00      	nop
    ea2c:	00016444 	.word	0x00016444
    ea30:	20000528 	.word	0x20000528
    ea34:	200005b8 	.word	0x200005b8

0000ea38 <z_device_ready>:

bool z_device_ready(const struct device *dev)
{
	/* Set bit indicates device failed initialization */
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
					(dev - __device_start)));
    ea38:	4b08      	ldr	r3, [pc, #32]	; (ea5c <z_device_ready+0x24>)
    ea3a:	1ac0      	subs	r0, r0, r3
    ea3c:	1100      	asrs	r0, r0, #4
}

static ALWAYS_INLINE
	int sys_bitfield_test_bit(mem_addr_t addr, unsigned int bit)
{
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
    ea3e:	4b08      	ldr	r3, [pc, #32]	; (ea60 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1>)
    ea40:	0942      	lsrs	r2, r0, #5
	uint32_t temp = *(volatile uint32_t *)addr;
    ea42:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	return temp & (1 << bit);
    ea46:	2301      	movs	r3, #1
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
    ea48:	f000 001f 	and.w	r0, r0, #31
	return temp & (1 << bit);
    ea4c:	fa03 f000 	lsl.w	r0, r3, r0
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
    ea50:	4210      	tst	r0, r2
}
    ea52:	bf0c      	ite	eq
    ea54:	4618      	moveq	r0, r3
    ea56:	2000      	movne	r0, #0
    ea58:	4770      	bx	lr
    ea5a:	bf00      	nop
    ea5c:	20000528 	.word	0x20000528
    ea60:	200005b8 	.word	0x200005b8

0000ea64 <z_impl_device_get_binding>:
	for (dev = __device_start; dev != __device_end; dev++) {
    ea64:	4911      	ldr	r1, [pc, #68]	; (eaac <z_impl_device_get_binding+0x48>)
{
    ea66:	b570      	push	{r4, r5, r6, lr}
    ea68:	4605      	mov	r5, r0
    ea6a:	460e      	mov	r6, r1
	for (dev = __device_start; dev != __device_end; dev++) {
    ea6c:	4c10      	ldr	r4, [pc, #64]	; (eab0 <z_impl_device_get_binding+0x4c>)
    ea6e:	428c      	cmp	r4, r1
    ea70:	d104      	bne.n	ea7c <z_impl_device_get_binding+0x18>
	for (dev = __device_start; dev != __device_end; dev++) {
    ea72:	4c0f      	ldr	r4, [pc, #60]	; (eab0 <z_impl_device_get_binding+0x4c>)
    ea74:	42b4      	cmp	r4, r6
    ea76:	d10a      	bne.n	ea8e <z_impl_device_get_binding+0x2a>
	return NULL;
    ea78:	2400      	movs	r4, #0
    ea7a:	e014      	b.n	eaa6 <z_impl_device_get_binding+0x42>
		if (z_device_ready(dev) && (dev->name == name)) {
    ea7c:	4620      	mov	r0, r4
    ea7e:	f7ff ffdb 	bl	ea38 <z_device_ready>
    ea82:	b110      	cbz	r0, ea8a <z_impl_device_get_binding+0x26>
    ea84:	6823      	ldr	r3, [r4, #0]
    ea86:	42ab      	cmp	r3, r5
    ea88:	d00d      	beq.n	eaa6 <z_impl_device_get_binding+0x42>
	for (dev = __device_start; dev != __device_end; dev++) {
    ea8a:	3410      	adds	r4, #16
    ea8c:	e7ef      	b.n	ea6e <z_impl_device_get_binding+0xa>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    ea8e:	4620      	mov	r0, r4
    ea90:	f7ff ffd2 	bl	ea38 <z_device_ready>
    ea94:	b908      	cbnz	r0, ea9a <z_impl_device_get_binding+0x36>
	for (dev = __device_start; dev != __device_end; dev++) {
    ea96:	3410      	adds	r4, #16
    ea98:	e7ec      	b.n	ea74 <z_impl_device_get_binding+0x10>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    ea9a:	4628      	mov	r0, r5
    ea9c:	6821      	ldr	r1, [r4, #0]
    ea9e:	f003 fc11 	bl	122c4 <strcmp>
    eaa2:	2800      	cmp	r0, #0
    eaa4:	d1f7      	bne.n	ea96 <z_impl_device_get_binding+0x32>
}
    eaa6:	4620      	mov	r0, r4
    eaa8:	bd70      	pop	{r4, r5, r6, pc}
    eaaa:	bf00      	nop
    eaac:	200005b8 	.word	0x200005b8
    eab0:	20000528 	.word	0x20000528

0000eab4 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
    eab4:	4b01      	ldr	r3, [pc, #4]	; (eabc <z_impl_z_errno+0x8>)
    eab6:	6898      	ldr	r0, [r3, #8]
}
    eab8:	3068      	adds	r0, #104	; 0x68
    eaba:	4770      	bx	lr
    eabc:	20001c9c 	.word	0x20001c9c

0000eac0 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    eac0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    eac4:	4606      	mov	r6, r0
    eac6:	460f      	mov	r7, r1
	__asm__ volatile(
    eac8:	f04f 0320 	mov.w	r3, #32
    eacc:	f3ef 8811 	mrs	r8, BASEPRI
    ead0:	f383 8811 	msr	BASEPRI, r3
    ead4:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
    ead8:	f000 fe48 	bl	f76c <z_impl_k_current_get>
    eadc:	4c21      	ldr	r4, [pc, #132]	; (eb64 <z_fatal_error+0xa4>)
    eade:	4b22      	ldr	r3, [pc, #136]	; (eb68 <z_fatal_error+0xa8>)
    eae0:	2e04      	cmp	r6, #4
    eae2:	eba4 0403 	sub.w	r4, r4, r3
    eae6:	ea4f 04d4 	mov.w	r4, r4, lsr #3
    eaea:	bf98      	it	ls
    eaec:	4a1f      	ldrls	r2, [pc, #124]	; (eb6c <z_fatal_error+0xac>)
	struct k_thread *thread = k_current_get();

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    eaee:	ea4f 1484 	mov.w	r4, r4, lsl #6
    eaf2:	f044 0301 	orr.w	r3, r4, #1
    eaf6:	4605      	mov	r5, r0
	switch (reason) {
    eaf8:	bf94      	ite	ls
    eafa:	f852 2026 	ldrls.w	r2, [r2, r6, lsl #2]
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    eafe:	4a1c      	ldrhi	r2, [pc, #112]	; (eb70 <z_fatal_error+0xb0>)
    eb00:	f8ad 3000 	strh.w	r3, [sp]
    eb04:	4631      	mov	r1, r6
    eb06:	2300      	movs	r3, #0
    eb08:	481a      	ldr	r0, [pc, #104]	; (eb74 <z_fatal_error+0xb4>)
    eb0a:	f002 f90d 	bl	10d28 <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    eb0e:	b147      	cbz	r7, eb22 <z_fatal_error+0x62>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    eb10:	69fb      	ldr	r3, [r7, #28]
    eb12:	f3c3 0308 	ubfx	r3, r3, #0, #9
    eb16:	b123      	cbz	r3, eb22 <z_fatal_error+0x62>
		LOG_ERR("Fault during interrupt handling\n");
    eb18:	4817      	ldr	r0, [pc, #92]	; (eb78 <z_fatal_error+0xb8>)
    eb1a:	f044 0101 	orr.w	r1, r4, #1
    eb1e:	f002 f8c9 	bl	10cb4 <log_0>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    eb22:	f044 0401 	orr.w	r4, r4, #1
	const char *thread_name = thread ? k_thread_name_get(thread) : NULL;
    eb26:	b12d      	cbz	r5, eb34 <z_fatal_error+0x74>
    eb28:	4628      	mov	r0, r5
    eb2a:	f006 fb1b 	bl	15164 <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
    eb2e:	b108      	cbz	r0, eb34 <z_fatal_error+0x74>
    eb30:	7803      	ldrb	r3, [r0, #0]
    eb32:	b903      	cbnz	r3, eb36 <z_fatal_error+0x76>
		thread_name = "unknown";
    eb34:	4811      	ldr	r0, [pc, #68]	; (eb7c <z_fatal_error+0xbc>)
	LOG_ERR("Current thread: %p (%s)", thread,
    eb36:	f7f2 fe81 	bl	183c <log_strdup>
    eb3a:	4623      	mov	r3, r4
    eb3c:	4602      	mov	r2, r0
    eb3e:	4629      	mov	r1, r5
    eb40:	480f      	ldr	r0, [pc, #60]	; (eb80 <z_fatal_error+0xc0>)
    eb42:	f002 f8d8 	bl	10cf6 <log_2>
		log_strdup(thread_name_get(thread)));

	z_coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    eb46:	4639      	mov	r1, r7
    eb48:	4630      	mov	r0, r6
    eb4a:	f7ff f8dd 	bl	dd08 <k_sys_fatal_error_handler>
	__asm__ volatile(
    eb4e:	f388 8811 	msr	BASEPRI, r8
    eb52:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    eb56:	4628      	mov	r0, r5
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
    eb58:	b002      	add	sp, #8
    eb5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    eb5e:	f7f5 bdff 	b.w	4760 <z_impl_k_thread_abort>
    eb62:	bf00      	nop
    eb64:	00015ab8 	.word	0x00015ab8
    eb68:	00015a00 	.word	0x00015a00
    eb6c:	0001645c 	.word	0x0001645c
    eb70:	000190ad 	.word	0x000190ad
    eb74:	000190bb 	.word	0x000190bb
    eb78:	000190e3 	.word	0x000190e3
    eb7c:	000176aa 	.word	0x000176aa
    eb80:	00019104 	.word	0x00019104

0000eb84 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *p1, void *unused2, void *unused3)
{
    eb84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    eb86:	4605      	mov	r5, r0
		 */
		int key = arch_irq_lock();
		struct k_thread *to_abort = cpu->pending_abort;

		if (to_abort) {
			cpu->pending_abort = NULL;
    eb88:	2700      	movs	r7, #0
		 * saves no power and does not improve latency.  But it's an
		 * API we need to honor...
		 */
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
#ifdef CONFIG_PM
		_kernel.idle = ticks;
    eb8a:	4e15      	ldr	r6, [pc, #84]	; (ebe0 <idle+0x5c>)
	__asm__ volatile(
    eb8c:	f04f 0220 	mov.w	r2, #32
    eb90:	f3ef 8311 	mrs	r3, BASEPRI
    eb94:	f382 8811 	msr	BASEPRI, r2
    eb98:	f3bf 8f6f 	isb	sy
		struct k_thread *to_abort = cpu->pending_abort;
    eb9c:	6928      	ldr	r0, [r5, #16]
		if (to_abort) {
    eb9e:	b188      	cbz	r0, ebc4 <idle+0x40>
			cpu->pending_abort = NULL;
    eba0:	612f      	str	r7, [r5, #16]
	__asm__ volatile(
    eba2:	f383 8811 	msr	BASEPRI, r3
    eba6:	f3bf 8f6f 	isb	sy
			z_thread_single_abort(to_abort);
    ebaa:	f000 fc0f 	bl	f3cc <z_thread_single_abort>
	__asm__ volatile(
    ebae:	f04f 0320 	mov.w	r3, #32
    ebb2:	f3ef 8011 	mrs	r0, BASEPRI
    ebb6:	f383 8811 	msr	BASEPRI, r3
    ebba:	f3bf 8f6f 	isb	sy
    ebbe:	f006 f9e2 	bl	14f86 <z_reschedule_irqlock>
			continue;
    ebc2:	e7e3      	b.n	eb8c <idle+0x8>
		int32_t ticks = z_get_next_timeout_expiry();
    ebc4:	f006 fb54 	bl	15270 <z_get_next_timeout_expiry>
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    ebc8:	2101      	movs	r1, #1
		int32_t ticks = z_get_next_timeout_expiry();
    ebca:	4604      	mov	r4, r0
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    ebcc:	2802      	cmp	r0, #2
    ebce:	bfd8      	it	le
    ebd0:	4608      	movle	r0, r1
    ebd2:	f006 fb5d 	bl	15290 <z_set_timeout_expiry>
		_kernel.idle = ticks;
    ebd6:	6274      	str	r4, [r6, #36]	; 0x24
	arch_cpu_idle();
    ebd8:	f7f5 fac8 	bl	416c <arch_cpu_idle>
}
    ebdc:	e7d6      	b.n	eb8c <idle+0x8>
    ebde:	bf00      	nop
    ebe0:	20001c9c 	.word	0x20001c9c

0000ebe4 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    ebe4:	4802      	ldr	r0, [pc, #8]	; (ebf0 <z_bss_zero+0xc>)
    ebe6:	4a03      	ldr	r2, [pc, #12]	; (ebf4 <z_bss_zero+0x10>)
    ebe8:	2100      	movs	r1, #0
    ebea:	1a12      	subs	r2, r2, r0
    ebec:	f003 bbc0 	b.w	12370 <memset>
    ebf0:	20000810 	.word	0x20000810
    ebf4:	20002e1c 	.word	0x20002e1c

0000ebf8 <bg_thread_main>:
{
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	z_sys_post_kernel = true;
    ebf8:	2201      	movs	r2, #1
{
    ebfa:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    ebfc:	4b09      	ldr	r3, [pc, #36]	; (ec24 <bg_thread_main+0x2c>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    ebfe:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    ec00:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    ec02:	f7ff fef1 	bl	e9e8 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    ec06:	f000 ff53 	bl	fab0 <boot_banner>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    ec0a:	2003      	movs	r0, #3
    ec0c:	f7ff feec 	bl	e9e8 <z_sys_init_run_level>

	z_init_static_threads();
    ec10:	f000 fe76 	bl	f900 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
    ec14:	f7f1 ff8a 	bl	b2c <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    ec18:	4a03      	ldr	r2, [pc, #12]	; (ec28 <bg_thread_main+0x30>)
    ec1a:	7b13      	ldrb	r3, [r2, #12]
    ec1c:	f023 0301 	bic.w	r3, r3, #1
    ec20:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    ec22:	bd08      	pop	{r3, pc}
    ec24:	20002e1b 	.word	0x20002e1b
    ec28:	20001048 	.word	0x20001048

0000ec2c <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
    ec2c:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
    ec30:	b0a9      	sub	sp, #164	; 0xa4
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
    ec32:	f7f2 fd67 	bl	1704 <log_core_init>
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
    ec36:	4b34      	ldr	r3, [pc, #208]	; (ed08 <z_cstart+0xdc>)
	uint32_t msp =
    ec38:	f503 6900 	add.w	r9, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    ec3c:	f389 8808 	msr	MSP, r9
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
    ec40:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    ec44:	2400      	movs	r4, #0
    ec46:	23e0      	movs	r3, #224	; 0xe0
    ec48:	4d30      	ldr	r5, [pc, #192]	; (ed0c <z_cstart+0xe0>)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    ec4a:	f04f 0b01 	mov.w	fp, #1
    ec4e:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    ec52:	77ec      	strb	r4, [r5, #31]
    ec54:	762c      	strb	r4, [r5, #24]
    ec56:	766c      	strb	r4, [r5, #25]
    ec58:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    ec5a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	_kernel.ready_q.cache = &z_main_thread;
    ec5c:	4e2c      	ldr	r6, [pc, #176]	; (ed10 <z_cstart+0xe4>)
    ec5e:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    ec62:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    ec64:	f7f5 fd44 	bl	46f0 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    ec68:	f7f5 fa7a 	bl	4160 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    ec6c:	f04f 33ff 	mov.w	r3, #4294967295
    ec70:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    ec72:	62eb      	str	r3, [r5, #44]	; 0x2c
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
    ec74:	f240 1301 	movw	r3, #257	; 0x101
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    ec78:	4d26      	ldr	r5, [pc, #152]	; (ed14 <z_cstart+0xe8>)
	dummy_thread->base.user_options = K_ESSENTIAL;
    ec7a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    ec7e:	ab06      	add	r3, sp, #24
    ec80:	60ab      	str	r3, [r5, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    ec82:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
    ec84:	e9cd 4421 	strd	r4, r4, [sp, #132]	; 0x84
    ec88:	f7ff feae 	bl	e9e8 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    ec8c:	2001      	movs	r0, #1
    ec8e:	f7ff feab 	bl	e9e8 <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    ec92:	f8df a098 	ldr.w	sl, [pc, #152]	; ed2c <z_cstart+0x100>
	z_sched_init();
    ec96:	f000 fced 	bl	f674 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    ec9a:	4b1f      	ldr	r3, [pc, #124]	; (ed18 <z_cstart+0xec>)
	_kernel.ready_q.cache = &z_main_thread;
    ec9c:	62ae      	str	r6, [r5, #40]	; 0x28
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    ec9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    eca2:	491e      	ldr	r1, [pc, #120]	; (ed1c <z_cstart+0xf0>)
    eca4:	9305      	str	r3, [sp, #20]
    eca6:	4630      	mov	r0, r6
    eca8:	4653      	mov	r3, sl
    ecaa:	e9cd 4b03 	strd	r4, fp, [sp, #12]
    ecae:	e9cd 4401 	strd	r4, r4, [sp, #4]
    ecb2:	9400      	str	r4, [sp, #0]
    ecb4:	f000 fdc8 	bl	f848 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    ecb8:	7b73      	ldrb	r3, [r6, #13]
    ecba:	4680      	mov	r8, r0
    ecbc:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
    ecc0:	4630      	mov	r0, r6
    ecc2:	7373      	strb	r3, [r6, #13]
    ecc4:	f006 f9a1 	bl	1500a <z_ready_thread>
	z_setup_new_thread(thread, stack,
    ecc8:	230f      	movs	r3, #15
    ecca:	4f15      	ldr	r7, [pc, #84]	; (ed20 <z_cstart+0xf4>)
    eccc:	f44f 72a0 	mov.w	r2, #320	; 0x140
    ecd0:	e9cd 4302 	strd	r4, r3, [sp, #8]
    ecd4:	4913      	ldr	r1, [pc, #76]	; (ed24 <z_cstart+0xf8>)
    ecd6:	4b14      	ldr	r3, [pc, #80]	; (ed28 <z_cstart+0xfc>)
    ecd8:	4638      	mov	r0, r7
    ecda:	e9cd b404 	strd	fp, r4, [sp, #16]
    ecde:	e9cd 5400 	strd	r5, r4, [sp]
    ece2:	f000 fdb1 	bl	f848 <z_setup_new_thread>
    ece6:	7b7b      	ldrb	r3, [r7, #13]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    ece8:	4652      	mov	r2, sl
    ecea:	f023 0304 	bic.w	r3, r3, #4
    ecee:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    ecf0:	f105 031c 	add.w	r3, r5, #28
    ecf4:	4641      	mov	r1, r8
    ecf6:	4630      	mov	r0, r6
	list->tail = (sys_dnode_t *)list;
    ecf8:	e9c5 3307 	strd	r3, r3, [r5, #28]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    ecfc:	60ef      	str	r7, [r5, #12]
		_kernel.cpus[i].id = i;
    ecfe:	762c      	strb	r4, [r5, #24]
		_kernel.cpus[i].irq_stack =
    ed00:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    ed04:	f7f5 fa12 	bl	412c <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    ed08:	20004c28 	.word	0x20004c28
    ed0c:	e000ed00 	.word	0xe000ed00
    ed10:	20001048 	.word	0x20001048
    ed14:	20001c9c 	.word	0x20001c9c
    ed18:	00019166 	.word	0x00019166
    ed1c:	200046e8 	.word	0x200046e8
    ed20:	20000fc0 	.word	0x20000fc0
    ed24:	20004ae8 	.word	0x20004ae8
    ed28:	0000eb85 	.word	0x0000eb85
    ed2c:	0000ebf9 	.word	0x0000ebf9

0000ed30 <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(const struct device *unused)
{
    ed30:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
    ed32:	4c06      	ldr	r4, [pc, #24]	; (ed4c <statics_init+0x1c>)
    ed34:	4d06      	ldr	r5, [pc, #24]	; (ed50 <statics_init+0x20>)
    ed36:	42ac      	cmp	r4, r5
    ed38:	d301      	bcc.n	ed3e <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
    ed3a:	2000      	movs	r0, #0
    ed3c:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    ed3e:	4620      	mov	r0, r4
    ed40:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    ed44:	f005 ff9a 	bl	14c7c <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
    ed48:	3414      	adds	r4, #20
    ed4a:	e7f4      	b.n	ed36 <statics_init+0x6>
    ed4c:	20000610 	.word	0x20000610
    ed50:	20000624 	.word	0x20000624

0000ed54 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
    ed54:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    ed56:	4b0e      	ldr	r3, [pc, #56]	; (ed90 <init_mem_slab_module+0x3c>)
    ed58:	4c0e      	ldr	r4, [pc, #56]	; (ed94 <init_mem_slab_module+0x40>)
    ed5a:	42a3      	cmp	r3, r4
    ed5c:	d301      	bcc.n	ed62 <init_mem_slab_module+0xe>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
    ed5e:	2000      	movs	r0, #0
	return rc;
}
    ed60:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    ed62:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
    ed66:	ea41 0200 	orr.w	r2, r1, r0
    ed6a:	f012 0203 	ands.w	r2, r2, #3
    ed6e:	d10b      	bne.n	ed88 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
    ed70:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
    ed72:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    ed74:	42aa      	cmp	r2, r5
    ed76:	d101      	bne.n	ed7c <init_mem_slab_module+0x28>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    ed78:	331c      	adds	r3, #28
    ed7a:	e7ee      	b.n	ed5a <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
    ed7c:	695e      	ldr	r6, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    ed7e:	3201      	adds	r2, #1
		*(char **)p = slab->free_list;
    ed80:	600e      	str	r6, [r1, #0]
		slab->free_list = p;
    ed82:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
    ed84:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
    ed86:	e7f5      	b.n	ed74 <init_mem_slab_module+0x20>
		return -EINVAL;
    ed88:	f06f 0015 	mvn.w	r0, #21
	return rc;
    ed8c:	e7e8      	b.n	ed60 <init_mem_slab_module+0xc>
    ed8e:	bf00      	nop
    ed90:	200005bc 	.word	0x200005bc
    ed94:	20000610 	.word	0x20000610

0000ed98 <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    ed98:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
    ed9a:	460c      	mov	r4, r1
    ed9c:	4616      	mov	r6, r2
    ed9e:	461f      	mov	r7, r3
    eda0:	f04f 0320 	mov.w	r3, #32
    eda4:	f3ef 8111 	mrs	r1, BASEPRI
    eda8:	f383 8811 	msr	BASEPRI, r3
    edac:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
    edb0:	6943      	ldr	r3, [r0, #20]
    edb2:	b15b      	cbz	r3, edcc <k_mem_slab_alloc+0x34>
		/* take a free block */
		*mem = slab->free_list;
    edb4:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    edb6:	681b      	ldr	r3, [r3, #0]
    edb8:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    edba:	6983      	ldr	r3, [r0, #24]
    edbc:	3301      	adds	r3, #1
    edbe:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    edc0:	2000      	movs	r0, #0
	__asm__ volatile(
    edc2:	f381 8811 	msr	BASEPRI, r1
    edc6:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
    edca:	e011      	b.n	edf0 <k_mem_slab_alloc+0x58>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    edcc:	ea56 0207 	orrs.w	r2, r6, r7
    edd0:	d103      	bne.n	edda <k_mem_slab_alloc+0x42>
		result = -ENOMEM;
    edd2:	f06f 000b 	mvn.w	r0, #11
		*mem = NULL;
    edd6:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
    edd8:	e7f3      	b.n	edc2 <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
    edda:	4602      	mov	r2, r0
    eddc:	e9cd 6700 	strd	r6, r7, [sp]
    ede0:	4804      	ldr	r0, [pc, #16]	; (edf4 <k_mem_slab_alloc+0x5c>)
    ede2:	f000 fbb5 	bl	f550 <z_pend_curr>
		if (result == 0) {
    ede6:	b918      	cbnz	r0, edf0 <k_mem_slab_alloc+0x58>
			*mem = _current->base.swap_data;
    ede8:	4b03      	ldr	r3, [pc, #12]	; (edf8 <k_mem_slab_alloc+0x60>)
    edea:	689b      	ldr	r3, [r3, #8]
    edec:	695b      	ldr	r3, [r3, #20]
    edee:	6023      	str	r3, [r4, #0]
}
    edf0:	b002      	add	sp, #8
    edf2:	bdd0      	pop	{r4, r6, r7, pc}
    edf4:	20002e1c 	.word	0x20002e1c
    edf8:	20001c9c 	.word	0x20001c9c

0000edfc <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    edfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    edfe:	4604      	mov	r4, r0
    ee00:	460d      	mov	r5, r1
	__asm__ volatile(
    ee02:	f04f 0320 	mov.w	r3, #32
    ee06:	f3ef 8611 	mrs	r6, BASEPRI
    ee0a:	f383 8811 	msr	BASEPRI, r3
    ee0e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (slab->free_list == NULL) {
    ee12:	6947      	ldr	r7, [r0, #20]
    ee14:	b977      	cbnz	r7, ee34 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    ee16:	f006 f953 	bl	150c0 <z_unpend_first_thread>

		if (pending_thread != NULL) {
    ee1a:	b158      	cbz	r0, ee34 <k_mem_slab_free+0x38>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    ee1c:	682a      	ldr	r2, [r5, #0]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    ee1e:	f8c0 7080 	str.w	r7, [r0, #128]	; 0x80
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    ee22:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
    ee24:	f006 f8f1 	bl	1500a <z_ready_thread>
			z_reschedule(&lock, key);
    ee28:	4631      	mov	r1, r6
	}
	**(char ***) mem = slab->free_list;
	slab->free_list = *(char **) mem;
	slab->num_used--;
	k_spin_unlock(&lock, key);
}
    ee2a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&lock, key);
    ee2e:	4808      	ldr	r0, [pc, #32]	; (ee50 <k_mem_slab_free+0x54>)
    ee30:	f000 b946 	b.w	f0c0 <z_reschedule>
	**(char ***) mem = slab->free_list;
    ee34:	682b      	ldr	r3, [r5, #0]
    ee36:	6962      	ldr	r2, [r4, #20]
    ee38:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    ee3a:	682b      	ldr	r3, [r5, #0]
    ee3c:	6163      	str	r3, [r4, #20]
	slab->num_used--;
    ee3e:	69a3      	ldr	r3, [r4, #24]
    ee40:	3b01      	subs	r3, #1
    ee42:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    ee44:	f386 8811 	msr	BASEPRI, r6
    ee48:	f3bf 8f6f 	isb	sy
}
    ee4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ee4e:	bf00      	nop
    ee50:	20002e1c 	.word	0x20002e1c

0000ee54 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    ee54:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    ee58:	4604      	mov	r4, r0
    ee5a:	4616      	mov	r6, r2
    ee5c:	461f      	mov	r7, r3
	__asm__ volatile(
    ee5e:	f04f 0320 	mov.w	r3, #32
    ee62:	f3ef 8811 	mrs	r8, BASEPRI
    ee66:	f383 8811 	msr	BASEPRI, r3
    ee6a:	f3bf 8f6f 	isb	sy
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	sys_trace_mutex_lock(mutex);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    ee6e:	68c3      	ldr	r3, [r0, #12]
    ee70:	4a32      	ldr	r2, [pc, #200]	; (ef3c <z_impl_k_mutex_lock+0xe8>)
    ee72:	b16b      	cbz	r3, ee90 <z_impl_k_mutex_lock+0x3c>
    ee74:	6880      	ldr	r0, [r0, #8]
    ee76:	6891      	ldr	r1, [r2, #8]
    ee78:	4288      	cmp	r0, r1
    ee7a:	d019      	beq.n	eeb0 <z_impl_k_mutex_lock+0x5c>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    ee7c:	ea56 0307 	orrs.w	r3, r6, r7
    ee80:	d118      	bne.n	eeb4 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    ee82:	f388 8811 	msr	BASEPRI, r8
    ee86:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
    ee8a:	f06f 000f 	mvn.w	r0, #15
    ee8e:	e00c      	b.n	eeaa <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
    ee90:	6891      	ldr	r1, [r2, #8]
    ee92:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
    ee96:	3301      	adds	r3, #1
    ee98:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    ee9a:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    ee9c:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
    ee9e:	60a3      	str	r3, [r4, #8]
    eea0:	f388 8811 	msr	BASEPRI, r8
    eea4:	f3bf 8f6f 	isb	sy
		return 0;
    eea8:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
    eeaa:	b002      	add	sp, #8
    eeac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    eeb0:	6921      	ldr	r1, [r4, #16]
    eeb2:	e7f0      	b.n	ee96 <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    eeb4:	f990 300e 	ldrsb.w	r3, [r0, #14]
    eeb8:	f991 100e 	ldrsb.w	r1, [r1, #14]
    eebc:	4299      	cmp	r1, r3
    eebe:	bfa8      	it	ge
    eec0:	4619      	movge	r1, r3
    eec2:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    eec6:	428b      	cmp	r3, r1
    eec8:	dd2c      	ble.n	ef24 <z_impl_k_mutex_lock+0xd0>
		return z_set_prio(mutex->owner, new_prio);
    eeca:	f000 fb8f 	bl	f5ec <z_set_prio>
    eece:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    eed0:	4622      	mov	r2, r4
    eed2:	4641      	mov	r1, r8
    eed4:	e9cd 6700 	strd	r6, r7, [sp]
    eed8:	4819      	ldr	r0, [pc, #100]	; (ef40 <z_impl_k_mutex_lock+0xec>)
    eeda:	f000 fb39 	bl	f550 <z_pend_curr>
	if (got_mutex == 0) {
    eede:	2800      	cmp	r0, #0
    eee0:	d0e3      	beq.n	eeaa <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
    eee2:	f04f 0320 	mov.w	r3, #32
    eee6:	f3ef 8611 	mrs	r6, BASEPRI
    eeea:	f383 8811 	msr	BASEPRI, r3
    eeee:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    eef2:	6823      	ldr	r3, [r4, #0]
    eef4:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    eef6:	42a3      	cmp	r3, r4
    eef8:	d007      	beq.n	ef0a <z_impl_k_mutex_lock+0xb6>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    eefa:	b133      	cbz	r3, ef0a <z_impl_k_mutex_lock+0xb6>
    eefc:	f993 300e 	ldrsb.w	r3, [r3, #14]
    ef00:	4299      	cmp	r1, r3
    ef02:	bfa8      	it	ge
    ef04:	4619      	movge	r1, r3
    ef06:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    ef0a:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
    ef0c:	f990 300e 	ldrsb.w	r3, [r0, #14]
    ef10:	4299      	cmp	r1, r3
    ef12:	d109      	bne.n	ef28 <z_impl_k_mutex_lock+0xd4>
	if (resched) {
    ef14:	b16d      	cbz	r5, ef32 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
    ef16:	4631      	mov	r1, r6
    ef18:	4809      	ldr	r0, [pc, #36]	; (ef40 <z_impl_k_mutex_lock+0xec>)
    ef1a:	f000 f8d1 	bl	f0c0 <z_reschedule>
	return -EAGAIN;
    ef1e:	f06f 000a 	mvn.w	r0, #10
    ef22:	e7c2      	b.n	eeaa <z_impl_k_mutex_lock+0x56>
	bool resched = false;
    ef24:	2500      	movs	r5, #0
    ef26:	e7d3      	b.n	eed0 <z_impl_k_mutex_lock+0x7c>
		return z_set_prio(mutex->owner, new_prio);
    ef28:	f000 fb60 	bl	f5ec <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    ef2c:	2800      	cmp	r0, #0
    ef2e:	d1f2      	bne.n	ef16 <z_impl_k_mutex_lock+0xc2>
    ef30:	e7f0      	b.n	ef14 <z_impl_k_mutex_lock+0xc0>
	__asm__ volatile(
    ef32:	f386 8811 	msr	BASEPRI, r6
    ef36:	f3bf 8f6f 	isb	sy
    ef3a:	e7f0      	b.n	ef1e <z_impl_k_mutex_lock+0xca>
    ef3c:	20001c9c 	.word	0x20001c9c
    ef40:	20002e1c 	.word	0x20002e1c

0000ef44 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    ef44:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	CHECKIF(mutex->owner == NULL) {
    ef46:	6883      	ldr	r3, [r0, #8]
{
    ef48:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    ef4a:	2b00      	cmp	r3, #0
    ef4c:	d037      	beq.n	efbe <z_impl_k_mutex_unlock+0x7a>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    ef4e:	4a1f      	ldr	r2, [pc, #124]	; (efcc <z_impl_k_mutex_unlock+0x88>)
    ef50:	6892      	ldr	r2, [r2, #8]
    ef52:	4293      	cmp	r3, r2
    ef54:	d136      	bne.n	efc4 <z_impl_k_mutex_unlock+0x80>
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
    ef56:	7bda      	ldrb	r2, [r3, #15]
    ef58:	3a01      	subs	r2, #1
    ef5a:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
    ef5c:	68c3      	ldr	r3, [r0, #12]
    ef5e:	2b01      	cmp	r3, #1
    ef60:	d005      	beq.n	ef6e <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
    ef62:	3b01      	subs	r3, #1
    ef64:	60c3      	str	r3, [r0, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
    ef66:	f000 f90f 	bl	f188 <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
    ef6a:	2000      	movs	r0, #0
}
    ef6c:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    ef6e:	f04f 0320 	mov.w	r3, #32
    ef72:	f3ef 8511 	mrs	r5, BASEPRI
    ef76:	f383 8811 	msr	BASEPRI, r3
    ef7a:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    ef7e:	6901      	ldr	r1, [r0, #16]
    ef80:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
    ef82:	f990 300e 	ldrsb.w	r3, [r0, #14]
    ef86:	4299      	cmp	r1, r3
    ef88:	d001      	beq.n	ef8e <z_impl_k_mutex_unlock+0x4a>
		return z_set_prio(mutex->owner, new_prio);
    ef8a:	f000 fb2f 	bl	f5ec <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    ef8e:	4620      	mov	r0, r4
    ef90:	f006 f896 	bl	150c0 <z_unpend_first_thread>
	mutex->owner = new_owner;
    ef94:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    ef96:	b160      	cbz	r0, efb2 <z_impl_k_mutex_unlock+0x6e>
		mutex->owner_orig_prio = new_owner->base.prio;
    ef98:	f990 200e 	ldrsb.w	r2, [r0, #14]
    ef9c:	6122      	str	r2, [r4, #16]
    ef9e:	2200      	movs	r2, #0
    efa0:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
		z_ready_thread(new_owner);
    efa4:	f006 f831 	bl	1500a <z_ready_thread>
		z_reschedule(&lock, key);
    efa8:	4629      	mov	r1, r5
    efaa:	4809      	ldr	r0, [pc, #36]	; (efd0 <z_impl_k_mutex_unlock+0x8c>)
    efac:	f000 f888 	bl	f0c0 <z_reschedule>
    efb0:	e7d9      	b.n	ef66 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
    efb2:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    efb4:	f385 8811 	msr	BASEPRI, r5
    efb8:	f3bf 8f6f 	isb	sy
    efbc:	e7d3      	b.n	ef66 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
    efbe:	f06f 0015 	mvn.w	r0, #21
    efc2:	e7d3      	b.n	ef6c <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
    efc4:	f04f 30ff 	mov.w	r0, #4294967295
    efc8:	e7d0      	b.n	ef6c <z_impl_k_mutex_unlock+0x28>
    efca:	bf00      	nop
    efcc:	20001c9c 	.word	0x20001c9c
    efd0:	20002e1c 	.word	0x20002e1c

0000efd4 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
    efd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    efd6:	4616      	mov	r6, r2
    efd8:	461f      	mov	r7, r3
	__asm__ volatile(
    efda:	f04f 0320 	mov.w	r3, #32
    efde:	f3ef 8511 	mrs	r5, BASEPRI
    efe2:	f383 8811 	msr	BASEPRI, r3
    efe6:	f3bf 8f6f 	isb	sy
 *
 * @return a boolean, true if it's empty, false otherwise
 */
static inline bool sys_sflist_is_empty(sys_sflist_t *list);

Z_GENLIST_IS_EMPTY(sflist)
    efea:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
    efec:	b19c      	cbz	r4, f016 <z_impl_k_queue_get+0x42>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    efee:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
    eff0:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    eff2:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
    eff6:	4294      	cmp	r4, r2
	list->head = node;
    eff8:	6003      	str	r3, [r0, #0]
	list->tail = node;
    effa:	bf08      	it	eq
    effc:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
    effe:	2101      	movs	r1, #1
    f000:	4620      	mov	r0, r4
    f002:	f005 ff2e 	bl	14e62 <z_queue_node_peek>
    f006:	4604      	mov	r4, r0
	__asm__ volatile(
    f008:	f385 8811 	msr	BASEPRI, r5
    f00c:	f3bf 8f6f 	isb	sy
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
    f010:	4620      	mov	r0, r4
    f012:	b003      	add	sp, #12
    f014:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    f016:	ea56 0307 	orrs.w	r3, r6, r7
    f01a:	d0f5      	beq.n	f008 <z_impl_k_queue_get+0x34>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
    f01c:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
    f020:	4629      	mov	r1, r5
    f022:	4610      	mov	r0, r2
    f024:	e9cd 6700 	strd	r6, r7, [sp]
    f028:	f000 fa92 	bl	f550 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
    f02c:	2800      	cmp	r0, #0
    f02e:	d1ef      	bne.n	f010 <z_impl_k_queue_get+0x3c>
    f030:	4b01      	ldr	r3, [pc, #4]	; (f038 <z_impl_k_queue_get+0x64>)
    f032:	689b      	ldr	r3, [r3, #8]
    f034:	695c      	ldr	r4, [r3, #20]
    f036:	e7eb      	b.n	f010 <z_impl_k_queue_get+0x3c>
    f038:	20001c9c 	.word	0x20001c9c

0000f03c <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
    f03c:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
    f03e:	4c08      	ldr	r4, [pc, #32]	; (f060 <z_reset_time_slice+0x24>)
    f040:	6823      	ldr	r3, [r4, #0]
    f042:	b15b      	cbz	r3, f05c <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
    f044:	f7f4 fcea 	bl	3a1c <z_clock_elapsed>
    f048:	4603      	mov	r3, r0
    f04a:	6820      	ldr	r0, [r4, #0]
    f04c:	4a05      	ldr	r2, [pc, #20]	; (f064 <z_reset_time_slice+0x28>)
    f04e:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
    f050:	2100      	movs	r1, #0
	}
}
    f052:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
    f056:	6153      	str	r3, [r2, #20]
		z_set_timeout_expiry(slice_time, false);
    f058:	f006 b91a 	b.w	15290 <z_set_timeout_expiry>
}
    f05c:	bd10      	pop	{r4, pc}
    f05e:	bf00      	nop
    f060:	20001cd8 	.word	0x20001cd8
    f064:	20001c9c 	.word	0x20001c9c

0000f068 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    f068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f06a:	4605      	mov	r5, r0
    f06c:	460c      	mov	r4, r1
	__asm__ volatile(
    f06e:	f04f 0320 	mov.w	r3, #32
    f072:	f3ef 8611 	mrs	r6, BASEPRI
    f076:	f383 8811 	msr	BASEPRI, r3
    f07a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    f07e:	2200      	movs	r2, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
    f080:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    f084:	f240 30e7 	movw	r0, #999	; 0x3e7
    f088:	2100      	movs	r1, #0
    f08a:	4b0a      	ldr	r3, [pc, #40]	; (f0b4 <k_sched_time_slice_set+0x4c>)
    f08c:	fbe7 0105 	umlal	r0, r1, r7, r5
    f090:	615a      	str	r2, [r3, #20]
    f092:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    f096:	2300      	movs	r3, #0
    f098:	f7f1 f85e 	bl	158 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
    f09c:	4b06      	ldr	r3, [pc, #24]	; (f0b8 <k_sched_time_slice_set+0x50>)
    f09e:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
    f0a0:	4b06      	ldr	r3, [pc, #24]	; (f0bc <k_sched_time_slice_set+0x54>)
    f0a2:	601c      	str	r4, [r3, #0]
		z_reset_time_slice();
    f0a4:	f7ff ffca 	bl	f03c <z_reset_time_slice>
	__asm__ volatile(
    f0a8:	f386 8811 	msr	BASEPRI, r6
    f0ac:	f3bf 8f6f 	isb	sy
	}
}
    f0b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f0b2:	bf00      	nop
    f0b4:	20001c9c 	.word	0x20001c9c
    f0b8:	20001cd8 	.word	0x20001cd8
    f0bc:	20001cd4 	.word	0x20001cd4

0000f0c0 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
    f0c0:	b949      	cbnz	r1, f0d6 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    f0c2:	f3ef 8005 	mrs	r0, IPSR
    f0c6:	b930      	cbnz	r0, f0d6 <z_reschedule+0x16>
	return _kernel.ready_q.cache;
    f0c8:	4b05      	ldr	r3, [pc, #20]	; (f0e0 <z_reschedule+0x20>)
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
    f0ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    f0cc:	689b      	ldr	r3, [r3, #8]
    f0ce:	429a      	cmp	r2, r3
    f0d0:	d001      	beq.n	f0d6 <z_reschedule+0x16>
	ret = arch_swap(key);
    f0d2:	f7f4 bf83 	b.w	3fdc <arch_swap>
    f0d6:	f381 8811 	msr	BASEPRI, r1
    f0da:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    f0de:	4770      	bx	lr
    f0e0:	20001c9c 	.word	0x20001c9c

0000f0e4 <k_sched_lock>:
	__asm__ volatile(
    f0e4:	f04f 0320 	mov.w	r3, #32
    f0e8:	f3ef 8111 	mrs	r1, BASEPRI
    f0ec:	f383 8811 	msr	BASEPRI, r3
    f0f0:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
    f0f4:	4b04      	ldr	r3, [pc, #16]	; (f108 <k_sched_lock+0x24>)
    f0f6:	689a      	ldr	r2, [r3, #8]
    f0f8:	7bd3      	ldrb	r3, [r2, #15]
    f0fa:	3b01      	subs	r3, #1
    f0fc:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    f0fe:	f381 8811 	msr	BASEPRI, r1
    f102:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
    f106:	4770      	bx	lr
    f108:	20001c9c 	.word	0x20001c9c

0000f10c <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
    f10c:	4b09      	ldr	r3, [pc, #36]	; (f134 <z_priq_dumb_remove+0x28>)
    f10e:	f103 022c 	add.w	r2, r3, #44	; 0x2c
    f112:	4282      	cmp	r2, r0
    f114:	d105      	bne.n	f122 <z_priq_dumb_remove+0x16>
    f116:	689b      	ldr	r3, [r3, #8]
    f118:	428b      	cmp	r3, r1
    f11a:	d102      	bne.n	f122 <z_priq_dumb_remove+0x16>
    f11c:	7b4b      	ldrb	r3, [r1, #13]
    f11e:	06db      	lsls	r3, r3, #27
    f120:	d106      	bne.n	f130 <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    f122:	e9d1 3200 	ldrd	r3, r2, [r1]
    f126:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    f128:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    f12a:	2300      	movs	r3, #0
	node->prev = NULL;
    f12c:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    f130:	4770      	bx	lr
    f132:	bf00      	nop
    f134:	20001c9c 	.word	0x20001c9c

0000f138 <update_cache>:
{
    f138:	b538      	push	{r3, r4, r5, lr}
    f13a:	4c12      	ldr	r4, [pc, #72]	; (f184 <update_cache+0x4c>)
    f13c:	4601      	mov	r1, r0
	if (_current_cpu->pending_abort != NULL) {
    f13e:	6923      	ldr	r3, [r4, #16]
    f140:	68a2      	ldr	r2, [r4, #8]
    f142:	b10b      	cbz	r3, f148 <update_cache+0x10>
	return thread ? thread : _current_cpu->idle_thread;
    f144:	68e5      	ldr	r5, [r4, #12]
    f146:	e00c      	b.n	f162 <update_cache+0x2a>
	thread = _priq_run_best(&_kernel.ready_q.runq);
    f148:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    f14c:	f005 ff53 	bl	14ff6 <z_priq_dumb_best>
    f150:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
    f152:	7b53      	ldrb	r3, [r2, #13]
    f154:	0698      	lsls	r0, r3, #26
		_current->base.thread_state |= _THREAD_DEAD;
    f156:	bf44      	itt	mi
    f158:	f043 0308 	orrmi.w	r3, r3, #8
    f15c:	7353      	strbmi	r3, [r2, #13]
	return thread ? thread : _current_cpu->idle_thread;
    f15e:	2d00      	cmp	r5, #0
    f160:	d0f0      	beq.n	f144 <update_cache+0xc>
	if (preempt_ok != 0) {
    f162:	b949      	cbnz	r1, f178 <update_cache+0x40>
	if (z_is_thread_prevented_from_running(_current)) {
    f164:	7b53      	ldrb	r3, [r2, #13]
    f166:	06db      	lsls	r3, r3, #27
    f168:	d106      	bne.n	f178 <update_cache+0x40>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    f16a:	69ab      	ldr	r3, [r5, #24]
    f16c:	b923      	cbnz	r3, f178 <update_cache+0x40>
	if (is_preempt(_current) || is_metairq(thread)) {
    f16e:	89d3      	ldrh	r3, [r2, #14]
    f170:	2b7f      	cmp	r3, #127	; 0x7f
    f172:	d901      	bls.n	f178 <update_cache+0x40>
		_kernel.ready_q.cache = _current;
    f174:	62a2      	str	r2, [r4, #40]	; 0x28
}
    f176:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    f178:	4295      	cmp	r5, r2
    f17a:	d001      	beq.n	f180 <update_cache+0x48>
			z_reset_time_slice();
    f17c:	f7ff ff5e 	bl	f03c <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    f180:	62a5      	str	r5, [r4, #40]	; 0x28
}
    f182:	e7f8      	b.n	f176 <update_cache+0x3e>
    f184:	20001c9c 	.word	0x20001c9c

0000f188 <k_sched_unlock>:
{
    f188:	b510      	push	{r4, lr}
	__asm__ volatile(
    f18a:	f04f 0320 	mov.w	r3, #32
    f18e:	f3ef 8411 	mrs	r4, BASEPRI
    f192:	f383 8811 	msr	BASEPRI, r3
    f196:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    f19a:	4b08      	ldr	r3, [pc, #32]	; (f1bc <k_sched_unlock+0x34>)
		update_cache(0);
    f19c:	2000      	movs	r0, #0
		++_current->base.sched_locked;
    f19e:	689a      	ldr	r2, [r3, #8]
    f1a0:	7bd3      	ldrb	r3, [r2, #15]
    f1a2:	3301      	adds	r3, #1
    f1a4:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    f1a6:	f7ff ffc7 	bl	f138 <update_cache>
	__asm__ volatile(
    f1aa:	f384 8811 	msr	BASEPRI, r4
    f1ae:	f3bf 8f6f 	isb	sy
}
    f1b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    f1b6:	f005 bef2 	b.w	14f9e <z_reschedule_unlocked>
    f1ba:	bf00      	nop
    f1bc:	20001c9c 	.word	0x20001c9c

0000f1c0 <ready_thread>:
{
    f1c0:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    f1c2:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    f1c6:	7b43      	ldrb	r3, [r0, #13]
    f1c8:	2a00      	cmp	r2, #0
    f1ca:	db2c      	blt.n	f226 <ready_thread+0x66>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    f1cc:	06db      	lsls	r3, r3, #27
    f1ce:	d12a      	bne.n	f226 <ready_thread+0x66>

int z_abort_timeout(struct _timeout *to);

static inline bool z_is_inactive_timeout(const struct _timeout *t)
{
	return !sys_dnode_is_linked(&t->node);
    f1d0:	6983      	ldr	r3, [r0, #24]
    f1d2:	bb43      	cbnz	r3, f226 <ready_thread+0x66>
	return list->head == list;
    f1d4:	4a15      	ldr	r2, [pc, #84]	; (f22c <ready_thread+0x6c>)
    f1d6:	4611      	mov	r1, r2
    f1d8:	f851 4f2c 	ldr.w	r4, [r1, #44]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f1dc:	428c      	cmp	r4, r1
    f1de:	bf18      	it	ne
    f1e0:	4623      	movne	r3, r4
    f1e2:	2b00      	cmp	r3, #0
    f1e4:	bf38      	it	cc
    f1e6:	2300      	movcc	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    f1e8:	6b14      	ldr	r4, [r2, #48]	; 0x30
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    f1ea:	b1b3      	cbz	r3, f21a <ready_thread+0x5a>
	if (thread_1->base.prio < thread_2->base.prio) {
    f1ec:	f990 600e 	ldrsb.w	r6, [r0, #14]
    f1f0:	f993 500e 	ldrsb.w	r5, [r3, #14]
    f1f4:	42ae      	cmp	r6, r5
    f1f6:	db03      	blt.n	f200 <ready_thread+0x40>
	return (node == list->tail) ? NULL : node->next;
    f1f8:	42a3      	cmp	r3, r4
    f1fa:	d00e      	beq.n	f21a <ready_thread+0x5a>
    f1fc:	681b      	ldr	r3, [r3, #0]
    f1fe:	e7f4      	b.n	f1ea <ready_thread+0x2a>
	node->prev = successor->prev;
    f200:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    f202:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
    f206:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    f208:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
    f20a:	7b43      	ldrb	r3, [r0, #13]
    f20c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    f210:	7343      	strb	r3, [r0, #13]
}
    f212:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    f214:	2000      	movs	r0, #0
    f216:	f7ff bf8f 	b.w	f138 <update_cache>
	node->prev = list->tail;
    f21a:	e9c0 1400 	strd	r1, r4, [r0]
	list->tail->next = node;
    f21e:	6b13      	ldr	r3, [r2, #48]	; 0x30
    f220:	6018      	str	r0, [r3, #0]
	list->tail = node;
    f222:	6310      	str	r0, [r2, #48]	; 0x30
}
    f224:	e7f1      	b.n	f20a <ready_thread+0x4a>
}
    f226:	bc70      	pop	{r4, r5, r6}
    f228:	4770      	bx	lr
    f22a:	bf00      	nop
    f22c:	20001c9c 	.word	0x20001c9c

0000f230 <z_sched_start>:
{
    f230:	b510      	push	{r4, lr}
	__asm__ volatile(
    f232:	f04f 0220 	mov.w	r2, #32
    f236:	f3ef 8411 	mrs	r4, BASEPRI
    f23a:	f382 8811 	msr	BASEPRI, r2
    f23e:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
    f242:	7b42      	ldrb	r2, [r0, #13]
    f244:	0751      	lsls	r1, r2, #29
    f246:	d404      	bmi.n	f252 <z_sched_start+0x22>
	__asm__ volatile(
    f248:	f384 8811 	msr	BASEPRI, r4
    f24c:	f3bf 8f6f 	isb	sy
}
    f250:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    f252:	f022 0204 	bic.w	r2, r2, #4
    f256:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    f258:	f7ff ffb2 	bl	f1c0 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    f25c:	4621      	mov	r1, r4
}
    f25e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    f262:	4801      	ldr	r0, [pc, #4]	; (f268 <z_sched_start+0x38>)
    f264:	f7ff bf2c 	b.w	f0c0 <z_reschedule>
    f268:	20002e1c 	.word	0x20002e1c

0000f26c <move_thread_to_end_of_prio_q>:
{
    f26c:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    f26e:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
    f272:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    f274:	2b00      	cmp	r3, #0
    f276:	da02      	bge.n	f27e <move_thread_to_end_of_prio_q+0x12>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
    f278:	4817      	ldr	r0, [pc, #92]	; (f2d8 <move_thread_to_end_of_prio_q+0x6c>)
    f27a:	f7ff ff47 	bl	f10c <z_priq_dumb_remove>
	return list->head == list;
    f27e:	4a17      	ldr	r2, [pc, #92]	; (f2dc <move_thread_to_end_of_prio_q+0x70>)
    f280:	4610      	mov	r0, r2
    f282:	f850 3f2c 	ldr.w	r3, [r0, #44]!
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    f286:	6b14      	ldr	r4, [r2, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f288:	4283      	cmp	r3, r0
    f28a:	bf08      	it	eq
    f28c:	2300      	moveq	r3, #0
    f28e:	2b00      	cmp	r3, #0
    f290:	bf38      	it	cc
    f292:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    f294:	b1d3      	cbz	r3, f2cc <move_thread_to_end_of_prio_q+0x60>
	if (thread_1->base.prio < thread_2->base.prio) {
    f296:	f991 600e 	ldrsb.w	r6, [r1, #14]
    f29a:	f993 500e 	ldrsb.w	r5, [r3, #14]
    f29e:	42ae      	cmp	r6, r5
    f2a0:	db03      	blt.n	f2aa <move_thread_to_end_of_prio_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
    f2a2:	42a3      	cmp	r3, r4
    f2a4:	d012      	beq.n	f2cc <move_thread_to_end_of_prio_q+0x60>
    f2a6:	681b      	ldr	r3, [r3, #0]
    f2a8:	e7f4      	b.n	f294 <move_thread_to_end_of_prio_q+0x28>
	node->prev = successor->prev;
    f2aa:	6858      	ldr	r0, [r3, #4]
	node->next = successor;
    f2ac:	e9c1 3000 	strd	r3, r0, [r1]
	successor->prev->next = node;
    f2b0:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    f2b2:	6059      	str	r1, [r3, #4]
	thread->base.thread_state |= states;
    f2b4:	7b4b      	ldrb	r3, [r1, #13]
	update_cache(thread == _current);
    f2b6:	6890      	ldr	r0, [r2, #8]
    f2b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
    f2bc:	734b      	strb	r3, [r1, #13]
    f2be:	1a43      	subs	r3, r0, r1
    f2c0:	4258      	negs	r0, r3
    f2c2:	4158      	adcs	r0, r3
}
    f2c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    f2c8:	f7ff bf36 	b.w	f138 <update_cache>
	node->prev = list->tail;
    f2cc:	e9c1 0400 	strd	r0, r4, [r1]
	list->tail->next = node;
    f2d0:	6b13      	ldr	r3, [r2, #48]	; 0x30
    f2d2:	6019      	str	r1, [r3, #0]
	list->tail = node;
    f2d4:	6311      	str	r1, [r2, #48]	; 0x30
}
    f2d6:	e7ed      	b.n	f2b4 <move_thread_to_end_of_prio_q+0x48>
    f2d8:	20001cc8 	.word	0x20001cc8
    f2dc:	20001c9c 	.word	0x20001c9c

0000f2e0 <z_time_slice>:
{
    f2e0:	4601      	mov	r1, r0
    f2e2:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile(
    f2e4:	f04f 0320 	mov.w	r3, #32
    f2e8:	f3ef 8411 	mrs	r4, BASEPRI
    f2ec:	f383 8811 	msr	BASEPRI, r3
    f2f0:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    f2f4:	4b16      	ldr	r3, [pc, #88]	; (f350 <z_time_slice+0x70>)
    f2f6:	4a17      	ldr	r2, [pc, #92]	; (f354 <z_time_slice+0x74>)
    f2f8:	6898      	ldr	r0, [r3, #8]
    f2fa:	6815      	ldr	r5, [r2, #0]
    f2fc:	42a8      	cmp	r0, r5
    f2fe:	461d      	mov	r5, r3
    f300:	d106      	bne.n	f310 <z_time_slice+0x30>
			z_reset_time_slice();
    f302:	f7ff fe9b 	bl	f03c <z_reset_time_slice>
	__asm__ volatile(
    f306:	f384 8811 	msr	BASEPRI, r4
    f30a:	f3bf 8f6f 	isb	sy
}
    f30e:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
    f310:	2600      	movs	r6, #0
    f312:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
    f314:	4a10      	ldr	r2, [pc, #64]	; (f358 <z_time_slice+0x78>)
    f316:	6812      	ldr	r2, [r2, #0]
    f318:	b1ba      	cbz	r2, f34a <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    f31a:	89c2      	ldrh	r2, [r0, #14]
    f31c:	2a7f      	cmp	r2, #127	; 0x7f
    f31e:	d814      	bhi.n	f34a <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
    f320:	7b42      	ldrb	r2, [r0, #13]
    f322:	06d2      	lsls	r2, r2, #27
    f324:	d111      	bne.n	f34a <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    f326:	4a0d      	ldr	r2, [pc, #52]	; (f35c <z_time_slice+0x7c>)
    f328:	f990 600e 	ldrsb.w	r6, [r0, #14]
    f32c:	6812      	ldr	r2, [r2, #0]
    f32e:	4296      	cmp	r6, r2
    f330:	db0b      	blt.n	f34a <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    f332:	4a0b      	ldr	r2, [pc, #44]	; (f360 <z_time_slice+0x80>)
    f334:	4290      	cmp	r0, r2
    f336:	d008      	beq.n	f34a <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
    f338:	695a      	ldr	r2, [r3, #20]
    f33a:	428a      	cmp	r2, r1
    f33c:	dc02      	bgt.n	f344 <z_time_slice+0x64>
			move_thread_to_end_of_prio_q(_current);
    f33e:	f7ff ff95 	bl	f26c <move_thread_to_end_of_prio_q>
    f342:	e7de      	b.n	f302 <z_time_slice+0x22>
			_current_cpu->slice_ticks -= ticks;
    f344:	1a52      	subs	r2, r2, r1
    f346:	615a      	str	r2, [r3, #20]
    f348:	e7dd      	b.n	f306 <z_time_slice+0x26>
		_current_cpu->slice_ticks = 0;
    f34a:	2300      	movs	r3, #0
    f34c:	616b      	str	r3, [r5, #20]
    f34e:	e7da      	b.n	f306 <z_time_slice+0x26>
    f350:	20001c9c 	.word	0x20001c9c
    f354:	20001cd0 	.word	0x20001cd0
    f358:	20001cd8 	.word	0x20001cd8
    f35c:	20001cd4 	.word	0x20001cd4
    f360:	20000fc0 	.word	0x20000fc0

0000f364 <z_impl_k_thread_suspend>:
{
    f364:	b570      	push	{r4, r5, r6, lr}
    f366:	4604      	mov	r4, r0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    f368:	3018      	adds	r0, #24
    f36a:	f005 ff6b 	bl	15244 <z_abort_timeout>
	__asm__ volatile(
    f36e:	f04f 0320 	mov.w	r3, #32
    f372:	f3ef 8611 	mrs	r6, BASEPRI
    f376:	f383 8811 	msr	BASEPRI, r3
    f37a:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    f37e:	f994 300d 	ldrsb.w	r3, [r4, #13]
    f382:	2b00      	cmp	r3, #0
    f384:	da07      	bge.n	f396 <z_impl_k_thread_suspend+0x32>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
    f386:	4621      	mov	r1, r4
    f388:	480e      	ldr	r0, [pc, #56]	; (f3c4 <z_impl_k_thread_suspend+0x60>)
    f38a:	f7ff febf 	bl	f10c <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    f38e:	7b63      	ldrb	r3, [r4, #13]
    f390:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    f394:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    f396:	4d0c      	ldr	r5, [pc, #48]	; (f3c8 <z_impl_k_thread_suspend+0x64>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    f398:	7b63      	ldrb	r3, [r4, #13]
    f39a:	68a8      	ldr	r0, [r5, #8]
    f39c:	f043 0310 	orr.w	r3, r3, #16
    f3a0:	7363      	strb	r3, [r4, #13]
    f3a2:	1b03      	subs	r3, r0, r4
    f3a4:	4258      	negs	r0, r3
    f3a6:	4158      	adcs	r0, r3
    f3a8:	f7ff fec6 	bl	f138 <update_cache>
	__asm__ volatile(
    f3ac:	f386 8811 	msr	BASEPRI, r6
    f3b0:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    f3b4:	68ab      	ldr	r3, [r5, #8]
    f3b6:	42a3      	cmp	r3, r4
    f3b8:	d103      	bne.n	f3c2 <z_impl_k_thread_suspend+0x5e>
}
    f3ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    f3be:	f005 bdee 	b.w	14f9e <z_reschedule_unlocked>
}
    f3c2:	bd70      	pop	{r4, r5, r6, pc}
    f3c4:	20001cc8 	.word	0x20001cc8
    f3c8:	20001c9c 	.word	0x20001c9c

0000f3cc <z_thread_single_abort>:
{
    f3cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f3d0:	4604      	mov	r4, r0
	__asm__ volatile(
    f3d2:	f04f 0320 	mov.w	r3, #32
    f3d6:	f3ef 8211 	mrs	r2, BASEPRI
    f3da:	f383 8811 	msr	BASEPRI, r3
    f3de:	f3bf 8f6f 	isb	sy
	if ((thread->base.thread_state &
    f3e2:	7b43      	ldrb	r3, [r0, #13]
    f3e4:	f013 0f28 	tst.w	r3, #40	; 0x28
    f3e8:	d005      	beq.n	f3f6 <z_thread_single_abort+0x2a>
	__asm__ volatile(
    f3ea:	f382 8811 	msr	BASEPRI, r2
    f3ee:	f3bf 8f6f 	isb	sy
}
    f3f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	thread->base.thread_state |= _THREAD_ABORTING;
    f3f6:	f043 0320 	orr.w	r3, r3, #32
    f3fa:	7343      	strb	r3, [r0, #13]
    f3fc:	f382 8811 	msr	BASEPRI, r2
    f400:	f3bf 8f6f 	isb	sy
    f404:	3018      	adds	r0, #24
    f406:	f005 ff1d 	bl	15244 <z_abort_timeout>
	__asm__ volatile(
    f40a:	f04f 0320 	mov.w	r3, #32
    f40e:	f3ef 8611 	mrs	r6, BASEPRI
    f412:	f383 8811 	msr	BASEPRI, r3
    f416:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    f41a:	7b63      	ldrb	r3, [r4, #13]
    f41c:	06d8      	lsls	r0, r3, #27
    f41e:	d116      	bne.n	f44e <z_thread_single_abort+0x82>
		if (z_is_thread_ready(thread)) {
    f420:	69a2      	ldr	r2, [r4, #24]
    f422:	b9a2      	cbnz	r2, f44e <z_thread_single_abort+0x82>
			if (z_is_thread_queued(thread)) {
    f424:	0619      	lsls	r1, r3, #24
    f426:	d507      	bpl.n	f438 <z_thread_single_abort+0x6c>
				_priq_run_remove(&_kernel.ready_q.runq,
    f428:	4621      	mov	r1, r4
    f42a:	4826      	ldr	r0, [pc, #152]	; (f4c4 <z_thread_single_abort+0xf8>)
    f42c:	f7ff fe6e 	bl	f10c <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    f430:	7b63      	ldrb	r3, [r4, #13]
    f432:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    f436:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
    f438:	4b23      	ldr	r3, [pc, #140]	; (f4c8 <z_thread_single_abort+0xfc>)
    f43a:	6898      	ldr	r0, [r3, #8]
    f43c:	1b02      	subs	r2, r0, r4
    f43e:	4250      	negs	r0, r2
    f440:	4150      	adcs	r0, r2
    f442:	f7ff fe79 	bl	f138 <update_cache>
			waiter->base.pended_on = NULL;
    f446:	2700      	movs	r7, #0
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    f448:	f104 0830 	add.w	r8, r4, #48	; 0x30
    f44c:	e01e      	b.n	f48c <z_thread_single_abort+0xc0>
			if (z_is_thread_pending(thread)) {
    f44e:	079b      	lsls	r3, r3, #30
    f450:	d5f9      	bpl.n	f446 <z_thread_single_abort+0x7a>
				_priq_wait_remove(&pended_on(thread)->waitq,
    f452:	4621      	mov	r1, r4
    f454:	68a0      	ldr	r0, [r4, #8]
    f456:	f7ff fe59 	bl	f10c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    f45a:	7b63      	ldrb	r3, [r4, #13]
    f45c:	f023 0302 	bic.w	r3, r3, #2
    f460:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
    f462:	2300      	movs	r3, #0
    f464:	60a3      	str	r3, [r4, #8]
    f466:	e7ee      	b.n	f446 <z_thread_single_abort+0x7a>
    f468:	f105 0018 	add.w	r0, r5, #24
    f46c:	f005 feea 	bl	15244 <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
    f470:	68a8      	ldr	r0, [r5, #8]
    f472:	4629      	mov	r1, r5
    f474:	f7ff fe4a 	bl	f10c <z_priq_dumb_remove>
    f478:	7b6b      	ldrb	r3, [r5, #13]
			ready_thread(waiter);
    f47a:	4628      	mov	r0, r5
    f47c:	f023 0302 	bic.w	r3, r3, #2
    f480:	736b      	strb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
    f482:	60af      	str	r7, [r5, #8]
    f484:	f8c5 7080 	str.w	r7, [r5, #128]	; 0x80
			ready_thread(waiter);
    f488:	f7ff fe9a 	bl	f1c0 <ready_thread>
	return list->head == list;
    f48c:	6b25      	ldr	r5, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f48e:	4545      	cmp	r5, r8
    f490:	d001      	beq.n	f496 <z_thread_single_abort+0xca>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
    f492:	2d00      	cmp	r5, #0
    f494:	d1e8      	bne.n	f468 <z_thread_single_abort+0x9c>
		if (z_is_idle_thread_object(_current)) {
    f496:	4b0c      	ldr	r3, [pc, #48]	; (f4c8 <z_thread_single_abort+0xfc>)
    f498:	689a      	ldr	r2, [r3, #8]
    f49a:	4b0c      	ldr	r3, [pc, #48]	; (f4cc <z_thread_single_abort+0x100>)
    f49c:	429a      	cmp	r2, r3
    f49e:	d102      	bne.n	f4a6 <z_thread_single_abort+0xda>
			update_cache(1);
    f4a0:	2001      	movs	r0, #1
    f4a2:	f7ff fe49 	bl	f138 <update_cache>
		thread->base.thread_state |= _THREAD_DEAD;
    f4a6:	7b63      	ldrb	r3, [r4, #13]
    f4a8:	f043 0308 	orr.w	r3, r3, #8
    f4ac:	7363      	strb	r3, [r4, #13]
		fn_abort = thread->fn_abort;
    f4ae:	6e23      	ldr	r3, [r4, #96]	; 0x60
	__asm__ volatile(
    f4b0:	f386 8811 	msr	BASEPRI, r6
    f4b4:	f3bf 8f6f 	isb	sy
	if (fn_abort != NULL) {
    f4b8:	2b00      	cmp	r3, #0
    f4ba:	d09a      	beq.n	f3f2 <z_thread_single_abort+0x26>
		fn_abort(thread);
    f4bc:	4620      	mov	r0, r4
}
    f4be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		fn_abort(thread);
    f4c2:	4718      	bx	r3
    f4c4:	20001cc8 	.word	0x20001cc8
    f4c8:	20001c9c 	.word	0x20001c9c
    f4cc:	20000fc0 	.word	0x20000fc0

0000f4d0 <unready_thread>:
{
    f4d0:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    f4d2:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
    f4d6:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    f4d8:	2b00      	cmp	r3, #0
    f4da:	da06      	bge.n	f4ea <unready_thread+0x1a>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
    f4dc:	4807      	ldr	r0, [pc, #28]	; (f4fc <unready_thread+0x2c>)
    f4de:	f7ff fe15 	bl	f10c <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    f4e2:	7b4b      	ldrb	r3, [r1, #13]
    f4e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    f4e8:	734b      	strb	r3, [r1, #13]
	update_cache(thread == _current);
    f4ea:	4b05      	ldr	r3, [pc, #20]	; (f500 <unready_thread+0x30>)
    f4ec:	6898      	ldr	r0, [r3, #8]
    f4ee:	1a43      	subs	r3, r0, r1
    f4f0:	4258      	negs	r0, r3
    f4f2:	4158      	adcs	r0, r3
}
    f4f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    f4f8:	f7ff be1e 	b.w	f138 <update_cache>
    f4fc:	20001cc8 	.word	0x20001cc8
    f500:	20001c9c 	.word	0x20001c9c

0000f504 <pend>:
{
    f504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f508:	4606      	mov	r6, r0
    f50a:	4614      	mov	r4, r2
    f50c:	461d      	mov	r5, r3
	__asm__ volatile(
    f50e:	f04f 0320 	mov.w	r3, #32
    f512:	f3ef 8711 	mrs	r7, BASEPRI
    f516:	f383 8811 	msr	BASEPRI, r3
    f51a:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
    f51e:	f005 fda4 	bl	1506a <add_to_waitq_locked>
	__asm__ volatile(
    f522:	f387 8811 	msr	BASEPRI, r7
    f526:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    f52a:	1c6b      	adds	r3, r5, #1
    f52c:	bf08      	it	eq
    f52e:	f1b4 3fff 	cmpeq.w	r4, #4294967295
    f532:	d008      	beq.n	f546 <pend+0x42>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
    f534:	4622      	mov	r2, r4
    f536:	462b      	mov	r3, r5
    f538:	f106 0018 	add.w	r0, r6, #24
    f53c:	4903      	ldr	r1, [pc, #12]	; (f54c <pend+0x48>)
}
    f53e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    f542:	f000 bb2b 	b.w	fb9c <z_add_timeout>
    f546:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f54a:	bf00      	nop
    f54c:	0001502b 	.word	0x0001502b

0000f550 <z_pend_curr>:
{
    f550:	b510      	push	{r4, lr}
    f552:	460c      	mov	r4, r1
	pending_current = _current;
    f554:	4b06      	ldr	r3, [pc, #24]	; (f570 <z_pend_curr+0x20>)
{
    f556:	4611      	mov	r1, r2
	pending_current = _current;
    f558:	6898      	ldr	r0, [r3, #8]
    f55a:	4b06      	ldr	r3, [pc, #24]	; (f574 <z_pend_curr+0x24>)
    f55c:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
    f55e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    f562:	f7ff ffcf 	bl	f504 <pend>
    f566:	4620      	mov	r0, r4
}
    f568:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f56c:	f7f4 bd36 	b.w	3fdc <arch_swap>
    f570:	20001c9c 	.word	0x20001c9c
    f574:	20001cd0 	.word	0x20001cd0

0000f578 <z_tick_sleep.part.0>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
    f578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f57c:	4605      	mov	r5, r0
    f57e:	460f      	mov	r7, r1
		return 0;
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);

	expected_wakeup_ticks = ticks + z_tick_get_32();
    f580:	f005 fea0 	bl	152c4 <z_tick_get_32>
    f584:	4604      	mov	r4, r0
	__asm__ volatile(
    f586:	f04f 0320 	mov.w	r3, #32
    f58a:	f3ef 8811 	mrs	r8, BASEPRI
    f58e:	f383 8811 	msr	BASEPRI, r3
    f592:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
    f596:	4e12      	ldr	r6, [pc, #72]	; (f5e0 <z_tick_sleep.part.0+0x68>)
    f598:	4b12      	ldr	r3, [pc, #72]	; (f5e4 <z_tick_sleep.part.0+0x6c>)
    f59a:	68b0      	ldr	r0, [r6, #8]
	expected_wakeup_ticks = ticks + z_tick_get_32();
    f59c:	442c      	add	r4, r5
	pending_current = _current;
    f59e:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
    f5a0:	f7ff ff96 	bl	f4d0 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    f5a4:	68b0      	ldr	r0, [r6, #8]
    f5a6:	4910      	ldr	r1, [pc, #64]	; (f5e8 <z_tick_sleep.part.0+0x70>)
    f5a8:	462a      	mov	r2, r5
    f5aa:	463b      	mov	r3, r7
    f5ac:	3018      	adds	r0, #24
    f5ae:	f000 faf5 	bl	fb9c <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    f5b2:	68b2      	ldr	r2, [r6, #8]
    f5b4:	4640      	mov	r0, r8
	thread->base.thread_state |= _THREAD_SUSPENDED;
    f5b6:	7b53      	ldrb	r3, [r2, #13]

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - z_tick_get_32();
    f5b8:	2500      	movs	r5, #0
    f5ba:	f043 0310 	orr.w	r3, r3, #16
    f5be:	7353      	strb	r3, [r2, #13]
    f5c0:	f7f4 fd0c 	bl	3fdc <arch_swap>
    f5c4:	f005 fe7e 	bl	152c4 <z_tick_get_32>
    f5c8:	1a24      	subs	r4, r4, r0
    f5ca:	f165 0500 	sbc.w	r5, r5, #0
    f5ce:	2c00      	cmp	r4, #0
    f5d0:	f175 0300 	sbcs.w	r3, r5, #0
    f5d4:	bfb8      	it	lt
    f5d6:	2400      	movlt	r4, #0
		return ticks;
	}
#endif

	return 0;
}
    f5d8:	4620      	mov	r0, r4
    f5da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f5de:	bf00      	nop
    f5e0:	20001c9c 	.word	0x20001c9c
    f5e4:	20001cd0 	.word	0x20001cd0
    f5e8:	0001502b 	.word	0x0001502b

0000f5ec <z_set_prio>:
{
    f5ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f5f0:	4604      	mov	r4, r0
    f5f2:	f04f 0320 	mov.w	r3, #32
    f5f6:	f3ef 8811 	mrs	r8, BASEPRI
    f5fa:	f383 8811 	msr	BASEPRI, r3
    f5fe:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    f602:	7b43      	ldrb	r3, [r0, #13]
    f604:	b24e      	sxtb	r6, r1
    f606:	06db      	lsls	r3, r3, #27
    f608:	d12e      	bne.n	f668 <z_set_prio+0x7c>
	return !sys_dnode_is_linked(&t->node);
    f60a:	6985      	ldr	r5, [r0, #24]
		if (need_sched) {
    f60c:	bb65      	cbnz	r5, f668 <z_set_prio+0x7c>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
    f60e:	4f18      	ldr	r7, [pc, #96]	; (f670 <z_set_prio+0x84>)
    f610:	4621      	mov	r1, r4
    f612:	f107 002c 	add.w	r0, r7, #44	; 0x2c
    f616:	f7ff fd79 	bl	f10c <z_priq_dumb_remove>
	return list->head == list;
    f61a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    f61c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f61e:	4283      	cmp	r3, r0
    f620:	bf18      	it	ne
    f622:	461d      	movne	r5, r3
    f624:	2d00      	cmp	r5, #0
    f626:	bf38      	it	cc
    f628:	2500      	movcc	r5, #0
				thread->base.prio = prio;
    f62a:	73a6      	strb	r6, [r4, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    f62c:	b1b5      	cbz	r5, f65c <z_set_prio+0x70>
	if (thread_1->base.prio < thread_2->base.prio) {
    f62e:	f995 100e 	ldrsb.w	r1, [r5, #14]
    f632:	42b1      	cmp	r1, r6
    f634:	dc03      	bgt.n	f63e <z_set_prio+0x52>
	return (node == list->tail) ? NULL : node->next;
    f636:	42aa      	cmp	r2, r5
    f638:	d010      	beq.n	f65c <z_set_prio+0x70>
    f63a:	682d      	ldr	r5, [r5, #0]
    f63c:	e7f6      	b.n	f62c <z_set_prio+0x40>
	node->prev = successor->prev;
    f63e:	686a      	ldr	r2, [r5, #4]
	node->next = successor;
    f640:	e9c4 5200 	strd	r5, r2, [r4]
	successor->prev->next = node;
    f644:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    f646:	606c      	str	r4, [r5, #4]
			update_cache(1);
    f648:	2001      	movs	r0, #1
    f64a:	f7ff fd75 	bl	f138 <update_cache>
    f64e:	2001      	movs	r0, #1
	__asm__ volatile(
    f650:	f388 8811 	msr	BASEPRI, r8
    f654:	f3bf 8f6f 	isb	sy
}
    f658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	node->prev = list->tail;
    f65c:	e9c4 0200 	strd	r0, r2, [r4]
	list->tail->next = node;
    f660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    f662:	601c      	str	r4, [r3, #0]
	list->tail = node;
    f664:	633c      	str	r4, [r7, #48]	; 0x30
}
    f666:	e7ef      	b.n	f648 <z_set_prio+0x5c>
			thread->base.prio = prio;
    f668:	2000      	movs	r0, #0
    f66a:	73a6      	strb	r6, [r4, #14]
    f66c:	e7f0      	b.n	f650 <z_set_prio+0x64>
    f66e:	bf00      	nop
    f670:	20001c9c 	.word	0x20001c9c

0000f674 <z_sched_init>:
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    f674:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
    f676:	4b04      	ldr	r3, [pc, #16]	; (f688 <z_sched_init+0x14>)
    f678:	4608      	mov	r0, r1
    f67a:	f103 022c 	add.w	r2, r3, #44	; 0x2c
	list->tail = (sys_dnode_t *)list;
    f67e:	e9c3 220b 	strd	r2, r2, [r3, #44]	; 0x2c
    f682:	f7ff bcf1 	b.w	f068 <k_sched_time_slice_set>
    f686:	bf00      	nop
    f688:	20001c9c 	.word	0x20001c9c

0000f68c <z_impl_k_yield>:
{
    f68c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
    f68e:	4c24      	ldr	r4, [pc, #144]	; (f720 <z_impl_k_yield+0x94>)
    f690:	4b24      	ldr	r3, [pc, #144]	; (f724 <z_impl_k_yield+0x98>)
    f692:	68a2      	ldr	r2, [r4, #8]
    f694:	429a      	cmp	r2, r3
    f696:	d030      	beq.n	f6fa <z_impl_k_yield+0x6e>
	__asm__ volatile(
    f698:	f04f 0320 	mov.w	r3, #32
    f69c:	f3ef 8511 	mrs	r5, BASEPRI
    f6a0:	f383 8811 	msr	BASEPRI, r3
    f6a4:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
    f6a8:	68a1      	ldr	r1, [r4, #8]
    f6aa:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    f6ae:	f7ff fd2d 	bl	f10c <z_priq_dumb_remove>
	return list->head == list;
    f6b2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			_priq_run_add(&_kernel.ready_q.runq, _current);
    f6b4:	68a2      	ldr	r2, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f6b6:	4283      	cmp	r3, r0
    f6b8:	bf08      	it	eq
    f6ba:	2300      	moveq	r3, #0
    f6bc:	2b00      	cmp	r3, #0
    f6be:	bf38      	it	cc
    f6c0:	2300      	movcc	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    f6c2:	6b21      	ldr	r1, [r4, #48]	; 0x30
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    f6c4:	b32b      	cbz	r3, f712 <z_impl_k_yield+0x86>
	if (thread_1->base.prio < thread_2->base.prio) {
    f6c6:	f992 700e 	ldrsb.w	r7, [r2, #14]
    f6ca:	f993 600e 	ldrsb.w	r6, [r3, #14]
    f6ce:	42b7      	cmp	r7, r6
    f6d0:	db03      	blt.n	f6da <z_impl_k_yield+0x4e>
	return (node == list->tail) ? NULL : node->next;
    f6d2:	428b      	cmp	r3, r1
    f6d4:	d01d      	beq.n	f712 <z_impl_k_yield+0x86>
    f6d6:	681b      	ldr	r3, [r3, #0]
    f6d8:	e7f4      	b.n	f6c4 <z_impl_k_yield+0x38>
	node->prev = successor->prev;
    f6da:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    f6dc:	e9c2 3100 	strd	r3, r1, [r2]
	successor->prev->next = node;
    f6e0:	600a      	str	r2, [r1, #0]
	successor->prev = node;
    f6e2:	605a      	str	r2, [r3, #4]
	thread->base.thread_state |= states;
    f6e4:	7b53      	ldrb	r3, [r2, #13]
			update_cache(1);
    f6e6:	2001      	movs	r0, #1
    f6e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
    f6ec:	7353      	strb	r3, [r2, #13]
    f6ee:	f7ff fd23 	bl	f138 <update_cache>
	__asm__ volatile(
    f6f2:	f385 8811 	msr	BASEPRI, r5
    f6f6:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    f6fa:	f04f 0320 	mov.w	r3, #32
    f6fe:	f3ef 8011 	mrs	r0, BASEPRI
    f702:	f383 8811 	msr	BASEPRI, r3
    f706:	f3bf 8f6f 	isb	sy
}
    f70a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    f70e:	f7f4 bc65 	b.w	3fdc <arch_swap>
	node->prev = list->tail;
    f712:	e9c2 0100 	strd	r0, r1, [r2]
	list->tail->next = node;
    f716:	6b23      	ldr	r3, [r4, #48]	; 0x30
    f718:	601a      	str	r2, [r3, #0]
	list->tail = node;
    f71a:	6322      	str	r2, [r4, #48]	; 0x30
}
    f71c:	e7e2      	b.n	f6e4 <z_impl_k_yield+0x58>
    f71e:	bf00      	nop
    f720:	20001c9c 	.word	0x20001c9c
    f724:	20000fc0 	.word	0x20000fc0

0000f728 <z_impl_k_sleep>:

	__ASSERT(!arch_is_in_isr(), "");
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    f728:	f1b1 3fff 	cmp.w	r1, #4294967295
    f72c:	bf08      	it	eq
    f72e:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
    f732:	b508      	push	{r3, lr}
    f734:	4602      	mov	r2, r0
    f736:	460b      	mov	r3, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    f738:	d106      	bne.n	f748 <z_impl_k_sleep+0x20>
		k_thread_suspend(_current);
    f73a:	4b0b      	ldr	r3, [pc, #44]	; (f768 <z_impl_k_sleep+0x40>)
    f73c:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    f73e:	f7ff fe11 	bl	f364 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
    f742:	f04f 30ff 	mov.w	r0, #4294967295
	ticks = timeout.ticks;

	ticks = z_tick_sleep(ticks);
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
}
    f746:	bd08      	pop	{r3, pc}
	if (ticks == 0) {
    f748:	4313      	orrs	r3, r2
    f74a:	d10a      	bne.n	f762 <z_impl_k_sleep+0x3a>
	z_impl_k_yield();
    f74c:	f7ff ff9e 	bl	f68c <z_impl_k_yield>
		return 0;
    f750:	2000      	movs	r0, #0
			return (t * to_hz + off) / from_hz;
    f752:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    f756:	fb80 2303 	smull	r2, r3, r0, r3
    f75a:	0bd0      	lsrs	r0, r2, #15
    f75c:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return k_ticks_to_ms_floor64(ticks);
    f760:	e7f1      	b.n	f746 <z_impl_k_sleep+0x1e>
    f762:	f7ff ff09 	bl	f578 <z_tick_sleep.part.0>
    f766:	e7f4      	b.n	f752 <z_impl_k_sleep+0x2a>
    f768:	20001c9c 	.word	0x20001c9c

0000f76c <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    f76c:	4b01      	ldr	r3, [pc, #4]	; (f774 <z_impl_k_current_get+0x8>)
    f76e:	6898      	ldr	r0, [r3, #8]
    f770:	4770      	bx	lr
    f772:	bf00      	nop
    f774:	20001c9c 	.word	0x20001c9c

0000f778 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    f778:	b538      	push	{r3, r4, r5, lr}
    f77a:	4604      	mov	r4, r0
    f77c:	f04f 0320 	mov.w	r3, #32
    f780:	f3ef 8511 	mrs	r5, BASEPRI
    f784:	f383 8811 	msr	BASEPRI, r3
    f788:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	sys_trace_semaphore_give(sem);
	thread = z_unpend_first_thread(&sem->wait_q);
    f78c:	f005 fc98 	bl	150c0 <z_unpend_first_thread>

	if (thread != NULL) {
    f790:	b150      	cbz	r0, f7a8 <z_impl_k_sem_give+0x30>
    f792:	2200      	movs	r2, #0
    f794:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    f798:	f005 fc37 	bl	1500a <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    f79c:	4629      	mov	r1, r5
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
}
    f79e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    f7a2:	4807      	ldr	r0, [pc, #28]	; (f7c0 <z_impl_k_sem_give+0x48>)
    f7a4:	f7ff bc8c 	b.w	f0c0 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    f7a8:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    f7ac:	429a      	cmp	r2, r3
    f7ae:	bf18      	it	ne
    f7b0:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
    f7b2:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    f7b4:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
    f7b6:	f104 0010 	add.w	r0, r4, #16
    f7ba:	f005 ff20 	bl	155fe <z_handle_obj_poll_events>
}
    f7be:	e7ed      	b.n	f79c <z_impl_k_sem_give+0x24>
    f7c0:	20002e1c 	.word	0x20002e1c

0000f7c4 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    f7c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    f7c6:	4614      	mov	r4, r2
    f7c8:	461d      	mov	r5, r3
    f7ca:	f04f 0320 	mov.w	r3, #32
    f7ce:	f3ef 8111 	mrs	r1, BASEPRI
    f7d2:	f383 8811 	msr	BASEPRI, r3
    f7d6:	f3bf 8f6f 	isb	sy
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	k_spinlock_key_t key = k_spin_lock(&lock);
	sys_trace_semaphore_take(sem);

	if (likely(sem->count > 0U)) {
    f7da:	6883      	ldr	r3, [r0, #8]
    f7dc:	b143      	cbz	r3, f7f0 <z_impl_k_sem_take+0x2c>
		sem->count--;
    f7de:	3b01      	subs	r3, #1
    f7e0:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
    f7e2:	f381 8811 	msr	BASEPRI, r1
    f7e6:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    f7ea:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
    f7ec:	b003      	add	sp, #12
    f7ee:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    f7f0:	ea54 0305 	orrs.w	r3, r4, r5
    f7f4:	d106      	bne.n	f804 <z_impl_k_sem_take+0x40>
    f7f6:	f381 8811 	msr	BASEPRI, r1
    f7fa:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    f7fe:	f06f 000f 	mvn.w	r0, #15
    f802:	e7f3      	b.n	f7ec <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    f804:	4602      	mov	r2, r0
    f806:	e9cd 4500 	strd	r4, r5, [sp]
    f80a:	4802      	ldr	r0, [pc, #8]	; (f814 <z_impl_k_sem_take+0x50>)
    f80c:	f7ff fea0 	bl	f550 <z_pend_curr>
	return ret;
    f810:	e7ec      	b.n	f7ec <z_impl_k_sem_take+0x28>
    f812:	bf00      	nop
    f814:	20002e1c 	.word	0x20002e1c

0000f818 <k_sys_work_q_init>:
K_KERNEL_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
    f818:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
    f81a:	4c08      	ldr	r4, [pc, #32]	; (f83c <k_sys_work_q_init+0x24>)
    f81c:	f04f 33ff 	mov.w	r3, #4294967295
    f820:	f44f 6200 	mov.w	r2, #2048	; 0x800
    f824:	4620      	mov	r0, r4
    f826:	4906      	ldr	r1, [pc, #24]	; (f840 <k_sys_work_q_init+0x28>)
    f828:	f000 f8dc 	bl	f9e4 <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
    f82c:	4905      	ldr	r1, [pc, #20]	; (f844 <k_sys_work_q_init+0x2c>)
    f82e:	f104 0018 	add.w	r0, r4, #24
    f832:	f005 fc94 	bl	1515e <z_impl_k_thread_name_set>
		       K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
    f836:	2000      	movs	r0, #0
    f838:	bd10      	pop	{r4, pc}
    f83a:	bf00      	nop
    f83c:	200010d0 	.word	0x200010d0
    f840:	20005428 	.word	0x20005428
    f844:	0001916e 	.word	0x0001916e

0000f848 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    f848:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	sys_dlist_init(&w->waitq);
    f84c:	f100 0530 	add.w	r5, r0, #48	; 0x30
	list->tail = (sys_dnode_t *)list;
    f850:	e9c0 550c 	strd	r5, r5, [r0, #48]	; 0x30
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (uint8_t)options;
    f854:	9d0e      	ldr	r5, [sp, #56]	; 0x38
{
    f856:	4604      	mov	r4, r0
	thread_base->user_options = (uint8_t)options;
    f858:	7305      	strb	r5, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    f85a:	2504      	movs	r5, #4
    f85c:	7345      	strb	r5, [r0, #13]

	thread_base->prio = priority;
    f85e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    f860:	1dd6      	adds	r6, r2, #7
	thread_base->prio = priority;
    f862:	7385      	strb	r5, [r0, #14]

	thread_base->sched_locked = 0U;
    f864:	2500      	movs	r5, #0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    f866:	9a0c      	ldr	r2, [sp, #48]	; 0x30
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    f868:	f026 0607 	bic.w	r6, r6, #7
	node->prev = NULL;
    f86c:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
    f870:	e9c0 161b 	strd	r1, r6, [r0, #108]	; 0x6c
	thread_base->sched_locked = 0U;
    f874:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    f876:	6745      	str	r5, [r0, #116]	; 0x74
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    f878:	9202      	str	r2, [sp, #8]
    f87a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	stack_ptr = (char *)stack + stack_obj_size;
    f87c:	eb01 0806 	add.w	r8, r1, r6
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    f880:	9201      	str	r2, [sp, #4]
    f882:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    f884:	9200      	str	r2, [sp, #0]
    f886:	4642      	mov	r2, r8
    f888:	f7f4 fc34 	bl	40f4 <arch_new_thread>
	if (!_current) {
    f88c:	4b05      	ldr	r3, [pc, #20]	; (f8a4 <z_setup_new_thread+0x5c>)
	new_thread->fn_abort = NULL;
    f88e:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
	if (!_current) {
    f892:	689b      	ldr	r3, [r3, #8]
    f894:	b103      	cbz	r3, f898 <z_setup_new_thread+0x50>
	new_thread->resource_pool = _current->resource_pool;
    f896:	6f9b      	ldr	r3, [r3, #120]	; 0x78
}
    f898:	4640      	mov	r0, r8
    f89a:	67a3      	str	r3, [r4, #120]	; 0x78
    f89c:	b004      	add	sp, #16
    f89e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f8a2:	bf00      	nop
    f8a4:	20001c9c 	.word	0x20001c9c

0000f8a8 <z_impl_k_thread_create>:
{
    f8a8:	b5f0      	push	{r4, r5, r6, r7, lr}
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    f8aa:	2500      	movs	r5, #0
{
    f8ac:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    f8ae:	9505      	str	r5, [sp, #20]
    f8b0:	9d10      	ldr	r5, [sp, #64]	; 0x40
{
    f8b2:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    f8b6:	9504      	str	r5, [sp, #16]
    f8b8:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
{
    f8ba:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    f8bc:	9503      	str	r5, [sp, #12]
    f8be:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    f8c0:	9502      	str	r5, [sp, #8]
    f8c2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    f8c4:	9501      	str	r5, [sp, #4]
    f8c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    f8c8:	9500      	str	r5, [sp, #0]
    f8ca:	f7ff ffbd 	bl	f848 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    f8ce:	1c7b      	adds	r3, r7, #1
    f8d0:	bf08      	it	eq
    f8d2:	f1b6 3fff 	cmpeq.w	r6, #4294967295
    f8d6:	d005      	beq.n	f8e4 <z_impl_k_thread_create+0x3c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    f8d8:	ea56 0307 	orrs.w	r3, r6, r7
    f8dc:	d105      	bne.n	f8ea <z_impl_k_thread_create+0x42>
	z_sched_start(thread);
    f8de:	4620      	mov	r0, r4
    f8e0:	f7ff fca6 	bl	f230 <z_sched_start>
}
    f8e4:	4620      	mov	r0, r4
    f8e6:	b007      	add	sp, #28
    f8e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
    f8ea:	4632      	mov	r2, r6
    f8ec:	463b      	mov	r3, r7
    f8ee:	4903      	ldr	r1, [pc, #12]	; (f8fc <z_impl_k_thread_create+0x54>)
    f8f0:	f104 0018 	add.w	r0, r4, #24
    f8f4:	f000 f952 	bl	fb9c <z_add_timeout>
    f8f8:	e7f4      	b.n	f8e4 <z_impl_k_thread_create+0x3c>
    f8fa:	bf00      	nop
    f8fc:	0001502b 	.word	0x0001502b

0000f900 <z_init_static_threads>:
{
    f900:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
    f904:	4e2a      	ldr	r6, [pc, #168]	; (f9b0 <z_init_static_threads+0xb0>)
    f906:	4d2b      	ldr	r5, [pc, #172]	; (f9b4 <z_init_static_threads+0xb4>)
    f908:	46b0      	mov	r8, r6
{
    f90a:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
    f90c:	42b5      	cmp	r5, r6
    f90e:	f105 0430 	add.w	r4, r5, #48	; 0x30
    f912:	d310      	bcc.n	f936 <z_init_static_threads+0x36>
	k_sched_lock();
    f914:	f7ff fbe6 	bl	f0e4 <k_sched_lock>
    f918:	f44f 4900 	mov.w	r9, #32768	; 0x8000
    f91c:	f240 36e7 	movw	r6, #999	; 0x3e7
    f920:	2700      	movs	r7, #0
	_FOREACH_STATIC_THREAD(thread_data) {
    f922:	4c24      	ldr	r4, [pc, #144]	; (f9b4 <z_init_static_threads+0xb4>)
    f924:	f8df a090 	ldr.w	sl, [pc, #144]	; f9b8 <z_init_static_threads+0xb8>
    f928:	4544      	cmp	r4, r8
    f92a:	d321      	bcc.n	f970 <z_init_static_threads+0x70>
}
    f92c:	b006      	add	sp, #24
    f92e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_sched_unlock();
    f932:	f7ff bc29 	b.w	f188 <k_sched_unlock>
		z_setup_new_thread(
    f936:	f854 3c04 	ldr.w	r3, [r4, #-4]
    f93a:	9305      	str	r3, [sp, #20]
    f93c:	f854 3c10 	ldr.w	r3, [r4, #-16]
    f940:	9304      	str	r3, [sp, #16]
    f942:	f854 3c14 	ldr.w	r3, [r4, #-20]
    f946:	9303      	str	r3, [sp, #12]
    f948:	f854 3c18 	ldr.w	r3, [r4, #-24]
    f94c:	9302      	str	r3, [sp, #8]
    f94e:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    f952:	9301      	str	r3, [sp, #4]
    f954:	f854 3c20 	ldr.w	r3, [r4, #-32]
    f958:	9300      	str	r3, [sp, #0]
    f95a:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    f95e:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    f962:	f7ff ff71 	bl	f848 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    f966:	f854 3c30 	ldr.w	r3, [r4, #-48]
    f96a:	65dd      	str	r5, [r3, #92]	; 0x5c
    f96c:	4625      	mov	r5, r4
    f96e:	e7cd      	b.n	f90c <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    f970:	6a63      	ldr	r3, [r4, #36]	; 0x24
    f972:	1c5a      	adds	r2, r3, #1
    f974:	d00d      	beq.n	f992 <z_init_static_threads+0x92>
    f976:	4630      	mov	r0, r6
    f978:	4639      	mov	r1, r7
					    K_MSEC(thread_data->init_delay));
    f97a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    f97e:	fbc9 0103 	smlal	r0, r1, r9, r3
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    f982:	42b9      	cmp	r1, r7
    f984:	bf08      	it	eq
    f986:	42b0      	cmpeq	r0, r6
			schedule_new_thread(thread_data->init_thread,
    f988:	6825      	ldr	r5, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    f98a:	d104      	bne.n	f996 <z_init_static_threads+0x96>
	z_sched_start(thread);
    f98c:	4628      	mov	r0, r5
    f98e:	f7ff fc4f 	bl	f230 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    f992:	3430      	adds	r4, #48	; 0x30
    f994:	e7c8      	b.n	f928 <z_init_static_threads+0x28>
    f996:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    f99a:	2300      	movs	r3, #0
    f99c:	f7f0 fbdc 	bl	158 <__aeabi_uldivmod>
    f9a0:	4602      	mov	r2, r0
    f9a2:	460b      	mov	r3, r1
    f9a4:	f105 0018 	add.w	r0, r5, #24
    f9a8:	4651      	mov	r1, sl
    f9aa:	f000 f8f7 	bl	fb9c <z_add_timeout>
    f9ae:	e7f0      	b.n	f992 <z_init_static_threads+0x92>
    f9b0:	200005bc 	.word	0x200005bc
    f9b4:	200005bc 	.word	0x200005bc
    f9b8:	0001502b 	.word	0x0001502b

0000f9bc <z_self_abort>:
#include <syscall_handler.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

FUNC_NORETURN void z_self_abort(void)
{
    f9bc:	b508      	push	{r3, lr}
	__asm__ volatile(
    f9be:	f04f 0320 	mov.w	r3, #32
    f9c2:	f3ef 8411 	mrs	r4, BASEPRI
    f9c6:	f383 8811 	msr	BASEPRI, r3
    f9ca:	f3bf 8f6f 	isb	sy
	 * while we set this up
	 */
	key = arch_irq_lock();
	cpu = _current_cpu;
	__ASSERT(cpu->pending_abort == NULL, "already have a thread to abort");
	cpu->pending_abort = _current;
    f9ce:	4b04      	ldr	r3, [pc, #16]	; (f9e0 <z_self_abort+0x24>)
    f9d0:	6898      	ldr	r0, [r3, #8]
    f9d2:	6118      	str	r0, [r3, #16]
	z_impl_k_thread_suspend(thread);
    f9d4:	f7ff fcc6 	bl	f364 <z_impl_k_thread_suspend>
    f9d8:	4620      	mov	r0, r4
    f9da:	f7f4 faff 	bl	3fdc <arch_swap>
		_current, cpu->idle_thread);

	k_thread_suspend(_current);
	z_swap_irqlock(key);
	__ASSERT(false, "should never get here");
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    f9de:	bf00      	nop
    f9e0:	20001c9c 	.word	0x20001c9c

0000f9e4 <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
    f9e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f9e8:	4604      	mov	r4, r0
    f9ea:	b088      	sub	sp, #32
    f9ec:	460d      	mov	r5, r1
    f9ee:	4616      	mov	r6, r2
    f9f0:	461f      	mov	r7, r3
	z_impl_k_queue_init(queue);
    f9f2:	f005 fa42 	bl	14e7a <z_impl_k_queue_init>
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
    f9f6:	f104 0818 	add.w	r8, r4, #24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    f9fa:	2200      	movs	r2, #0
    f9fc:	2300      	movs	r3, #0
    f9fe:	e9cd 7203 	strd	r7, r2, [sp, #12]
    fa02:	e9cd 2306 	strd	r2, r3, [sp, #24]
    fa06:	e9cd 2201 	strd	r2, r2, [sp, #4]
    fa0a:	4629      	mov	r1, r5
    fa0c:	4632      	mov	r2, r6
    fa0e:	4640      	mov	r0, r8
    fa10:	4b05      	ldr	r3, [pc, #20]	; (fa28 <k_work_q_start+0x44>)
    fa12:	9400      	str	r4, [sp, #0]
    fa14:	f7ff ff48 	bl	f8a8 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    fa18:	4640      	mov	r0, r8
    fa1a:	4904      	ldr	r1, [pc, #16]	; (fa2c <k_work_q_start+0x48>)
			work_q, NULL, NULL, prio, 0, K_NO_WAIT);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
    fa1c:	b008      	add	sp, #32
    fa1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    fa22:	f005 bb9c 	b.w	1515e <z_impl_k_thread_name_set>
    fa26:	bf00      	nop
    fa28:	00010605 	.word	0x00010605
    fa2c:	00019177 	.word	0x00019177

0000fa30 <k_delayed_work_submit_to_queue>:
}

int k_delayed_work_submit_to_queue(struct k_work_q *work_q,
				   struct k_delayed_work *work,
				   k_timeout_t delay)
{
    fa30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    fa34:	4606      	mov	r6, r0
    fa36:	460d      	mov	r5, r1
    fa38:	4690      	mov	r8, r2
    fa3a:	4699      	mov	r9, r3
    fa3c:	f04f 0320 	mov.w	r3, #32
    fa40:	f3ef 8711 	mrs	r7, BASEPRI
    fa44:	f383 8811 	msr	BASEPRI, r3
    fa48:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int err = 0;

	/* Work cannot be active in multiple queues */
	if (work->work_q != NULL && work->work_q != work_q) {
    fa4c:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    fa4e:	b17b      	cbz	r3, fa70 <k_delayed_work_submit_to_queue+0x40>
    fa50:	4283      	cmp	r3, r0
    fa52:	d128      	bne.n	faa6 <k_delayed_work_submit_to_queue+0x76>
		goto done;
	}

	/* Cancel if work has been submitted */
	if (work->work_q == work_q) {
		err = work_cancel(work);
    fa54:	4628      	mov	r0, r5
    fa56:	f005 fba0 	bl	1519a <work_cancel>
		/* -EALREADY may indicate the work has already completed so
		 * this is likely a recurring work.  It may also indicate that
		 * the work handler is still executing.  But it's neither
		 * delayed nor pending, so it can be rescheduled.
		 */
		if (err == -EALREADY) {
    fa5a:	f110 0f45 	cmn.w	r0, #69	; 0x45
		err = work_cancel(work);
    fa5e:	4604      	mov	r4, r0
		if (err == -EALREADY) {
    fa60:	d008      	beq.n	fa74 <k_delayed_work_submit_to_queue+0x44>
			err = 0;
		} else if (err < 0) {
    fa62:	2800      	cmp	r0, #0
    fa64:	da07      	bge.n	fa76 <k_delayed_work_submit_to_queue+0x46>
	__asm__ volatile(
    fa66:	f387 8811 	msr	BASEPRI, r7
    fa6a:	f3bf 8f6f 	isb	sy
	/* Add timeout */
	z_add_timeout(&work->timeout, work_timeout, delay);

done:
	k_spin_unlock(&lock, key);
	return err;
    fa6e:	e00f      	b.n	fa90 <k_delayed_work_submit_to_queue+0x60>
	if (work->work_q == work_q) {
    fa70:	2800      	cmp	r0, #0
    fa72:	d0ef      	beq.n	fa54 <k_delayed_work_submit_to_queue+0x24>
	int err = 0;
    fa74:	2400      	movs	r4, #0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    fa76:	ea58 0309 	orrs.w	r3, r8, r9
	work->work_q = work_q;
    fa7a:	62ae      	str	r6, [r5, #40]	; 0x28
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    fa7c:	d10b      	bne.n	fa96 <k_delayed_work_submit_to_queue+0x66>
    fa7e:	f387 8811 	msr	BASEPRI, r7
    fa82:	f3bf 8f6f 	isb	sy
		k_work_submit_to_queue(work_q, &work->work);
    fa86:	4629      	mov	r1, r5
    fa88:	4630      	mov	r0, r6
    fa8a:	f005 fb6d 	bl	15168 <k_work_submit_to_queue>
		return 0;
    fa8e:	2400      	movs	r4, #0
}
    fa90:	4620      	mov	r0, r4
    fa92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_add_timeout(&work->timeout, work_timeout, delay);
    fa96:	4642      	mov	r2, r8
    fa98:	464b      	mov	r3, r9
    fa9a:	4904      	ldr	r1, [pc, #16]	; (faac <k_delayed_work_submit_to_queue+0x7c>)
    fa9c:	f105 0010 	add.w	r0, r5, #16
    faa0:	f000 f87c 	bl	fb9c <z_add_timeout>
    faa4:	e7df      	b.n	fa66 <k_delayed_work_submit_to_queue+0x36>
		err = -EADDRINUSE;
    faa6:	f06f 042f 	mvn.w	r4, #47	; 0x2f
    faaa:	e7dc      	b.n	fa66 <k_delayed_work_submit_to_queue+0x36>
    faac:	00015191 	.word	0x00015191

0000fab0 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    fab0:	4a02      	ldr	r2, [pc, #8]	; (fabc <boot_banner+0xc>)
    fab2:	4903      	ldr	r1, [pc, #12]	; (fac0 <boot_banner+0x10>)
    fab4:	4803      	ldr	r0, [pc, #12]	; (fac4 <boot_banner+0x14>)
    fab6:	f000 bcd6 	b.w	10466 <printk>
    faba:	bf00      	nop
    fabc:	00016746 	.word	0x00016746
    fac0:	00019181 	.word	0x00019181
    fac4:	0001918e 	.word	0x0001918e

0000fac8 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    fac8:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
    faca:	4806      	ldr	r0, [pc, #24]	; (fae4 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
    facc:	4a06      	ldr	r2, [pc, #24]	; (fae8 <z_data_copy+0x20>)
    face:	4907      	ldr	r1, [pc, #28]	; (faec <z_data_copy+0x24>)
    fad0:	1a12      	subs	r2, r2, r0
    fad2:	f002 fc22 	bl	1231a <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    fad6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
    fada:	4a05      	ldr	r2, [pc, #20]	; (faf0 <z_data_copy+0x28>)
    fadc:	4905      	ldr	r1, [pc, #20]	; (faf4 <z_data_copy+0x2c>)
    fade:	4806      	ldr	r0, [pc, #24]	; (faf8 <z_data_copy+0x30>)
    fae0:	f002 bc1b 	b.w	1231a <memcpy>
    fae4:	20000000 	.word	0x20000000
    fae8:	20000810 	.word	0x20000810
    faec:	000191b8 	.word	0x000191b8
    faf0:	00000000 	.word	0x00000000
    faf4:	000191b8 	.word	0x000191b8
    faf8:	20000000 	.word	0x20000000

0000fafc <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0U;
    fafc:	4b03      	ldr	r3, [pc, #12]	; (fb0c <elapsed+0x10>)
    fafe:	681b      	ldr	r3, [r3, #0]
    fb00:	b90b      	cbnz	r3, fb06 <elapsed+0xa>
    fb02:	f7f3 bf8b 	b.w	3a1c <z_clock_elapsed>
}
    fb06:	2000      	movs	r0, #0
    fb08:	4770      	bx	lr
    fb0a:	bf00      	nop
    fb0c:	20001cdc 	.word	0x20001cdc

0000fb10 <remove_timeout>:
{
    fb10:	b530      	push	{r4, r5, lr}
    fb12:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    fb14:	b168      	cbz	r0, fb32 <remove_timeout+0x22>
    fb16:	4a0a      	ldr	r2, [pc, #40]	; (fb40 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
    fb18:	6852      	ldr	r2, [r2, #4]
    fb1a:	4290      	cmp	r0, r2
    fb1c:	d009      	beq.n	fb32 <remove_timeout+0x22>
	if (next(t) != NULL) {
    fb1e:	b143      	cbz	r3, fb32 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    fb20:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    fb24:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    fb28:	1912      	adds	r2, r2, r4
    fb2a:	eb45 0101 	adc.w	r1, r5, r1
    fb2e:	e9c3 2104 	strd	r2, r1, [r3, #16]
	node->prev->next = node->next;
    fb32:	6842      	ldr	r2, [r0, #4]
    fb34:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    fb36:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    fb38:	2300      	movs	r3, #0
	node->prev = NULL;
    fb3a:	e9c0 3300 	strd	r3, r3, [r0]
}
    fb3e:	bd30      	pop	{r4, r5, pc}
    fb40:	200003e8 	.word	0x200003e8

0000fb44 <next_timeout>:

static int32_t next_timeout(void)
{
    fb44:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    fb46:	4b13      	ldr	r3, [pc, #76]	; (fb94 <next_timeout+0x50>)
    fb48:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    fb4a:	429c      	cmp	r4, r3
    fb4c:	bf08      	it	eq
    fb4e:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    fb50:	f7ff ffd4 	bl	fafc <elapsed>
    fb54:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
    fb56:	b1bc      	cbz	r4, fb88 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    fb58:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    fb5c:	1b40      	subs	r0, r0, r5
    fb5e:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
    fb62:	2801      	cmp	r0, #1
    fb64:	f171 0300 	sbcs.w	r3, r1, #0
    fb68:	db11      	blt.n	fb8e <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    fb6a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    fb6e:	2300      	movs	r3, #0
    fb70:	4282      	cmp	r2, r0
    fb72:	eb73 0401 	sbcs.w	r4, r3, r1
    fb76:	da00      	bge.n	fb7a <next_timeout+0x36>
    fb78:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    fb7a:	4b07      	ldr	r3, [pc, #28]	; (fb98 <next_timeout+0x54>)
    fb7c:	695b      	ldr	r3, [r3, #20]
    fb7e:	b113      	cbz	r3, fb86 <next_timeout+0x42>
    fb80:	4298      	cmp	r0, r3
    fb82:	bfa8      	it	ge
    fb84:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    fb86:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
    fb88:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    fb8c:	e7f5      	b.n	fb7a <next_timeout+0x36>
    fb8e:	2000      	movs	r0, #0
    fb90:	e7f3      	b.n	fb7a <next_timeout+0x36>
    fb92:	bf00      	nop
    fb94:	200003e8 	.word	0x200003e8
    fb98:	20001c9c 	.word	0x20001c9c

0000fb9c <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
    fb9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fba0:	9101      	str	r1, [sp, #4]
    fba2:	4619      	mov	r1, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    fba4:	1c4b      	adds	r3, r1, #1
    fba6:	bf08      	it	eq
    fba8:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    fbac:	4682      	mov	sl, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    fbae:	d070      	beq.n	fc92 <z_add_timeout+0xf6>
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	k_ticks_t ticks = timeout.ticks + 1;

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
    fbb0:	f06f 0301 	mvn.w	r3, #1
    fbb4:	f04f 3bff 	mov.w	fp, #4294967295
	k_ticks_t ticks = timeout.ticks + 1;
    fbb8:	1c54      	adds	r4, r2, #1
    fbba:	f141 0500 	adc.w	r5, r1, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
    fbbe:	ebb3 0804 	subs.w	r8, r3, r4
    fbc2:	eb6b 0905 	sbc.w	r9, fp, r5
    fbc6:	f1b8 0f00 	cmp.w	r8, #0
    fbca:	f179 0300 	sbcs.w	r3, r9, #0
    fbce:	db0f      	blt.n	fbf0 <z_add_timeout+0x54>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
    fbd0:	f7ff ff94 	bl	fafc <elapsed>
    fbd4:	f06f 0301 	mvn.w	r3, #1
    fbd8:	4a34      	ldr	r2, [pc, #208]	; (fcac <z_add_timeout+0x110>)
    fbda:	e9d2 1c00 	ldrd	r1, ip, [r2]
    fbde:	1a5b      	subs	r3, r3, r1
    fbe0:	eb6b 020c 	sbc.w	r2, fp, ip
    fbe4:	1b1e      	subs	r6, r3, r4
    fbe6:	eb62 0705 	sbc.w	r7, r2, r5
    fbea:	1a34      	subs	r4, r6, r0
    fbec:	eb67 75e0 	sbc.w	r5, r7, r0, asr #31
	}

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    fbf0:	9b01      	ldr	r3, [sp, #4]
    fbf2:	f8ca 3008 	str.w	r3, [sl, #8]
	__asm__ volatile(
    fbf6:	f04f 0320 	mov.w	r3, #32
    fbfa:	f3ef 8611 	mrs	r6, BASEPRI
    fbfe:	f383 8811 	msr	BASEPRI, r3
    fc02:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
    fc06:	f7ff ff79 	bl	fafc <elapsed>
	ticks = MAX(1, ticks);
    fc0a:	2c01      	cmp	r4, #1
    fc0c:	f175 0300 	sbcs.w	r3, r5, #0
    fc10:	bfbc      	itt	lt
    fc12:	2401      	movlt	r4, #1
    fc14:	2500      	movlt	r5, #0
	return list->head == list;
    fc16:	4b26      	ldr	r3, [pc, #152]	; (fcb0 <z_add_timeout+0x114>)
		to->dticks = ticks + elapsed();
    fc18:	1824      	adds	r4, r4, r0
    fc1a:	681a      	ldr	r2, [r3, #0]
    fc1c:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
    fc20:	429a      	cmp	r2, r3
    fc22:	e9ca 4504 	strd	r4, r5, [sl, #16]
    fc26:	d001      	beq.n	fc2c <z_add_timeout+0x90>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    fc28:	685f      	ldr	r7, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
    fc2a:	b952      	cbnz	r2, fc42 <z_add_timeout+0xa6>
	node->prev = list->tail;
    fc2c:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    fc2e:	f8ca 3000 	str.w	r3, [sl]
	node->prev = list->tail;
    fc32:	f8ca 2004 	str.w	r2, [sl, #4]
	list->tail->next = node;
    fc36:	685a      	ldr	r2, [r3, #4]
    fc38:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
    fc3c:	f8c3 a004 	str.w	sl, [r3, #4]
}
    fc40:	e014      	b.n	fc6c <z_add_timeout+0xd0>
			if (t->dticks > to->dticks) {
    fc42:	e9d2 8904 	ldrd	r8, r9, [r2, #16]
    fc46:	e9da 4504 	ldrd	r4, r5, [sl, #16]
    fc4a:	4544      	cmp	r4, r8
    fc4c:	eb75 0109 	sbcs.w	r1, r5, r9
    fc50:	da22      	bge.n	fc98 <z_add_timeout+0xfc>
				t->dticks -= to->dticks;
    fc52:	ebb8 0004 	subs.w	r0, r8, r4
    fc56:	eb69 0105 	sbc.w	r1, r9, r5
    fc5a:	e9c2 0104 	strd	r0, r1, [r2, #16]
	node->prev = successor->prev;
    fc5e:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    fc60:	e9ca 2100 	strd	r2, r1, [sl]
	successor->prev->next = node;
    fc64:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
    fc68:	f8c2 a004 	str.w	sl, [r2, #4]
	return list->head == list;
    fc6c:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    fc6e:	429a      	cmp	r2, r3
    fc70:	d00b      	beq.n	fc8a <z_add_timeout+0xee>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    fc72:	4592      	cmp	sl, r2
    fc74:	d109      	bne.n	fc8a <z_add_timeout+0xee>
			 * last announcement, and slice_ticks is based
			 * on that. It means the that time remaining for
			 * the next announcement can be lesser than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    fc76:	f7ff ff65 	bl	fb44 <next_timeout>

			if (next_time == 0 ||
    fc7a:	b118      	cbz	r0, fc84 <z_add_timeout+0xe8>
			    _current_cpu->slice_ticks != next_time) {
    fc7c:	4b0d      	ldr	r3, [pc, #52]	; (fcb4 <z_add_timeout+0x118>)
			if (next_time == 0 ||
    fc7e:	695b      	ldr	r3, [r3, #20]
    fc80:	4283      	cmp	r3, r0
    fc82:	d002      	beq.n	fc8a <z_add_timeout+0xee>
				z_clock_set_timeout(next_time, false);
    fc84:	2100      	movs	r1, #0
    fc86:	f7f3 fe97 	bl	39b8 <z_clock_set_timeout>
	__asm__ volatile(
    fc8a:	f386 8811 	msr	BASEPRI, r6
    fc8e:	f3bf 8f6f 	isb	sy
#else
			z_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    fc92:	b003      	add	sp, #12
    fc94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			to->dticks -= t->dticks;
    fc98:	ebb4 0008 	subs.w	r0, r4, r8
    fc9c:	eb65 0109 	sbc.w	r1, r5, r9
	return (node == list->tail) ? NULL : node->next;
    fca0:	42ba      	cmp	r2, r7
    fca2:	e9ca 0104 	strd	r0, r1, [sl, #16]
    fca6:	d0c1      	beq.n	fc2c <z_add_timeout+0x90>
    fca8:	6812      	ldr	r2, [r2, #0]
    fcaa:	e7be      	b.n	fc2a <z_add_timeout+0x8e>
    fcac:	20001170 	.word	0x20001170
    fcb0:	200003e8 	.word	0x200003e8
    fcb4:	20001c9c 	.word	0x20001c9c

0000fcb8 <z_clock_announce>:
		}
	}
}

void z_clock_announce(int32_t ticks)
{
    fcb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fcbc:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    fcbe:	f7ff fb0f 	bl	f2e0 <z_time_slice>
	__asm__ volatile(
    fcc2:	f04f 0320 	mov.w	r3, #32
    fcc6:	f3ef 8411 	mrs	r4, BASEPRI
    fcca:	f383 8811 	msr	BASEPRI, r3
    fcce:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    fcd2:	f8df a0b0 	ldr.w	sl, [pc, #176]	; fd84 <z_clock_announce+0xcc>
    fcd6:	4d2a      	ldr	r5, [pc, #168]	; (fd80 <z_clock_announce+0xc8>)
    fcd8:	4651      	mov	r1, sl
	return list->head == list;
    fcda:	f8df b0ac 	ldr.w	fp, [pc, #172]	; fd88 <z_clock_announce+0xd0>
    fcde:	602e      	str	r6, [r5, #0]
    fce0:	f8d5 c000 	ldr.w	ip, [r5]
    fce4:	f8db 0000 	ldr.w	r0, [fp]
    fce8:	4662      	mov	r2, ip
    fcea:	e9da 8900 	ldrd	r8, r9, [sl]
    fcee:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
    fcf0:	4558      	cmp	r0, fp
    fcf2:	e9cd 2300 	strd	r2, r3, [sp]
    fcf6:	d00d      	beq.n	fd14 <z_clock_announce+0x5c>

	while (first() != NULL && first()->dticks <= announce_remaining) {
    fcf8:	b160      	cbz	r0, fd14 <z_clock_announce+0x5c>
    fcfa:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
    fcfe:	45b4      	cmp	ip, r6
    fd00:	41bb      	sbcs	r3, r7
    fd02:	da1d      	bge.n	fd40 <z_clock_announce+0x88>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    fd04:	9b00      	ldr	r3, [sp, #0]
    fd06:	ebb6 0c03 	subs.w	ip, r6, r3
    fd0a:	9b01      	ldr	r3, [sp, #4]
    fd0c:	eb67 0603 	sbc.w	r6, r7, r3
    fd10:	e9c0 c604 	strd	ip, r6, [r0, #16]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
    fd14:	2600      	movs	r6, #0
	curr_tick += announce_remaining;
    fd16:	9b00      	ldr	r3, [sp, #0]
	announce_remaining = 0;
    fd18:	602e      	str	r6, [r5, #0]
	curr_tick += announce_remaining;
    fd1a:	eb13 0208 	adds.w	r2, r3, r8
    fd1e:	9b01      	ldr	r3, [sp, #4]
    fd20:	eb43 0309 	adc.w	r3, r3, r9
    fd24:	e9c1 2300 	strd	r2, r3, [r1]

	z_clock_set_timeout(next_timeout(), false);
    fd28:	f7ff ff0c 	bl	fb44 <next_timeout>
    fd2c:	4631      	mov	r1, r6
    fd2e:	f7f3 fe43 	bl	39b8 <z_clock_set_timeout>
	__asm__ volatile(
    fd32:	f384 8811 	msr	BASEPRI, r4
    fd36:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    fd3a:	b003      	add	sp, #12
    fd3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		t->dticks = 0;
    fd40:	2200      	movs	r2, #0
    fd42:	2300      	movs	r3, #0
		curr_tick += dt;
    fd44:	eb18 0806 	adds.w	r8, r8, r6
    fd48:	eb49 79e6 	adc.w	r9, r9, r6, asr #31
		t->dticks = 0;
    fd4c:	e9c0 2304 	strd	r2, r3, [r0, #16]
		announce_remaining -= dt;
    fd50:	ebac 0606 	sub.w	r6, ip, r6
		curr_tick += dt;
    fd54:	e9ca 8900 	strd	r8, r9, [sl]
		announce_remaining -= dt;
    fd58:	602e      	str	r6, [r5, #0]
		remove_timeout(t);
    fd5a:	f7ff fed9 	bl	fb10 <remove_timeout>
    fd5e:	f384 8811 	msr	BASEPRI, r4
    fd62:	f3bf 8f6f 	isb	sy
		t->fn(t);
    fd66:	6883      	ldr	r3, [r0, #8]
    fd68:	4798      	blx	r3
	__asm__ volatile(
    fd6a:	f04f 0320 	mov.w	r3, #32
    fd6e:	f3ef 8411 	mrs	r4, BASEPRI
    fd72:	f383 8811 	msr	BASEPRI, r3
    fd76:	f3bf 8f6f 	isb	sy

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
    fd7a:	4902      	ldr	r1, [pc, #8]	; (fd84 <z_clock_announce+0xcc>)
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    fd7c:	e7b0      	b.n	fce0 <z_clock_announce+0x28>
    fd7e:	bf00      	nop
    fd80:	20001cdc 	.word	0x20001cdc
    fd84:	20001170 	.word	0x20001170
    fd88:	200003e8 	.word	0x200003e8

0000fd8c <z_tick_get>:

int64_t z_tick_get(void)
{
    fd8c:	b510      	push	{r4, lr}
    fd8e:	f04f 0320 	mov.w	r3, #32
    fd92:	f3ef 8411 	mrs	r4, BASEPRI
    fd96:	f383 8811 	msr	BASEPRI, r3
    fd9a:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
    fd9e:	f7f3 fe3d 	bl	3a1c <z_clock_elapsed>
    fda2:	4b06      	ldr	r3, [pc, #24]	; (fdbc <z_tick_get+0x30>)
    fda4:	e9d3 2300 	ldrd	r2, r3, [r3]
    fda8:	1812      	adds	r2, r2, r0
    fdaa:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
    fdae:	f384 8811 	msr	BASEPRI, r4
    fdb2:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    fdb6:	4610      	mov	r0, r2
    fdb8:	4619      	mov	r1, r3
    fdba:	bd10      	pop	{r4, pc}
    fdbc:	20001170 	.word	0x20001170

0000fdc0 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    fdc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    fdc2:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
    fdc6:	1c56      	adds	r6, r2, #1
    fdc8:	f143 0700 	adc.w	r7, r3, #0
    fdcc:	2f00      	cmp	r7, #0
    fdce:	bf08      	it	eq
    fdd0:	2e02      	cmpeq	r6, #2
{
    fdd2:	4604      	mov	r4, r0
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    fdd4:	d302      	bcc.n	fddc <z_timer_expiration_handler+0x1c>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    fdd6:	490c      	ldr	r1, [pc, #48]	; (fe08 <z_timer_expiration_handler+0x48>)
    fdd8:	f7ff fee0 	bl	fb9c <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
    fddc:	6b23      	ldr	r3, [r4, #48]	; 0x30
    fdde:	3301      	adds	r3, #1
    fde0:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    fde2:	6a23      	ldr	r3, [r4, #32]
    fde4:	b10b      	cbz	r3, fdea <z_timer_expiration_handler+0x2a>
		timer->expiry_fn(timer);
    fde6:	4620      	mov	r0, r4
    fde8:	4798      	blx	r3
	return list->head == list;
    fdea:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    fdee:	42a5      	cmp	r5, r4
    fdf0:	d009      	beq.n	fe06 <z_timer_expiration_handler+0x46>
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    fdf2:	b145      	cbz	r5, fe06 <z_timer_expiration_handler+0x46>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
    fdf4:	4628      	mov	r0, r5
    fdf6:	f005 f8b6 	bl	14f66 <z_unpend_thread_no_timeout>

	z_ready_thread(thread);
    fdfa:	4628      	mov	r0, r5
    fdfc:	f005 f905 	bl	1500a <z_ready_thread>
    fe00:	2300      	movs	r3, #0
    fe02:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80

	arch_thread_return_value_set(thread, 0);
}
    fe06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fe08:	0000fdc1 	.word	0x0000fdc1

0000fe0c <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    fe0c:	e92d 4f73 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, lr}
    fe10:	4619      	mov	r1, r3
    fe12:	4606      	mov	r6, r0
    fe14:	4610      	mov	r0, r2
    fe16:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    fe1a:	1c4c      	adds	r4, r1, #1
    fe1c:	bf08      	it	eq
    fe1e:	f1b0 3fff 	cmpeq.w	r0, #4294967295
    fe22:	4680      	mov	r8, r0
    fe24:	4689      	mov	r9, r1
    fe26:	d047      	beq.n	feb8 <z_impl_k_timer_start+0xac>
    fe28:	4614      	mov	r4, r2
    fe2a:	461d      	mov	r5, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (period.ticks != 0 && Z_TICK_ABS(period.ticks) < 0) {
    fe2c:	ea54 0305 	orrs.w	r3, r4, r5
    fe30:	d016      	beq.n	fe60 <z_impl_k_timer_start+0x54>
    fe32:	f06f 0301 	mvn.w	r3, #1
    fe36:	ebb3 0a02 	subs.w	sl, r3, r2
    fe3a:	f04f 33ff 	mov.w	r3, #4294967295
    fe3e:	eb63 0b05 	sbc.w	fp, r3, r5
    fe42:	f1ba 0f00 	cmp.w	sl, #0
    fe46:	f17b 0300 	sbcs.w	r3, fp, #0
    fe4a:	da09      	bge.n	fe60 <z_impl_k_timer_start+0x54>
		period.ticks = MAX(period.ticks - 1, 1);
    fe4c:	f112 34ff 	adds.w	r4, r2, #4294967295
    fe50:	f145 35ff 	adc.w	r5, r5, #4294967295
    fe54:	2c01      	cmp	r4, #1
    fe56:	f175 0300 	sbcs.w	r3, r5, #0
    fe5a:	bfbc      	itt	lt
    fe5c:	2401      	movlt	r4, #1
    fe5e:	2500      	movlt	r5, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
    fe60:	f06f 0301 	mvn.w	r3, #1
    fe64:	1a1b      	subs	r3, r3, r0
    fe66:	9300      	str	r3, [sp, #0]
    fe68:	f04f 33ff 	mov.w	r3, #4294967295
    fe6c:	eb63 0301 	sbc.w	r3, r3, r1
    fe70:	9301      	str	r3, [sp, #4]
    fe72:	e9dd 2300 	ldrd	r2, r3, [sp]
    fe76:	2a00      	cmp	r2, #0
    fe78:	f173 0300 	sbcs.w	r3, r3, #0
    fe7c:	da0c      	bge.n	fe98 <z_impl_k_timer_start+0x8c>
		duration.ticks = MAX(duration.ticks - 1, 0);
    fe7e:	f110 38ff 	adds.w	r8, r0, #4294967295
    fe82:	f141 39ff 	adc.w	r9, r1, #4294967295
    fe86:	f1b8 0f00 	cmp.w	r8, #0
    fe8a:	f179 0300 	sbcs.w	r3, r9, #0
    fe8e:	bfbc      	itt	lt
    fe90:	f04f 0800 	movlt.w	r8, #0
    fe94:	f04f 0900 	movlt.w	r9, #0
	}

	(void)z_abort_timeout(&timer->timeout);
    fe98:	4630      	mov	r0, r6
    fe9a:	f005 f9d3 	bl	15244 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
    fe9e:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    fea0:	4642      	mov	r2, r8
	timer->status = 0U;
    fea2:	6333      	str	r3, [r6, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    fea4:	4630      	mov	r0, r6
    fea6:	464b      	mov	r3, r9
    fea8:	4905      	ldr	r1, [pc, #20]	; (fec0 <z_impl_k_timer_start+0xb4>)
	timer->period = period;
    feaa:	e9c6 450a 	strd	r4, r5, [r6, #40]	; 0x28
		     duration);
}
    feae:	b002      	add	sp, #8
    feb0:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    feb4:	f7ff be72 	b.w	fb9c <z_add_timeout>
}
    feb8:	b002      	add	sp, #8
    feba:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
    febe:	bf00      	nop
    fec0:	0000fdc1 	.word	0x0000fdc1

0000fec4 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
    fec4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    fec8:	461f      	mov	r7, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
    feca:	4b2a      	ldr	r3, [pc, #168]	; (ff74 <z_impl_k_poll+0xb0>)
{
    fecc:	4616      	mov	r6, r2
	struct z_poller *poller = &_current->poller;
    fece:	689d      	ldr	r5, [r3, #8]

	poller->is_polling = true;
    fed0:	2301      	movs	r3, #1
    fed2:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
	poller->mode = MODE_POLL;
    fed6:	f885 3065 	strb.w	r3, [r5, #101]	; 0x65

	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	events_registered = register_events(events, num_events, poller,
    feda:	ea52 0307 	orrs.w	r3, r2, r7
    fede:	bf0c      	ite	eq
    fee0:	2301      	moveq	r3, #1
    fee2:	2300      	movne	r3, #0
    fee4:	f105 0264 	add.w	r2, r5, #100	; 0x64
{
    fee8:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
    feea:	f005 fb18 	bl	1551e <register_events>
    feee:	4681      	mov	r9, r0
	__asm__ volatile(
    fef0:	f04f 0320 	mov.w	r3, #32
    fef4:	f3ef 8a11 	mrs	sl, BASEPRI
    fef8:	f383 8811 	msr	BASEPRI, r3
    fefc:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
    ff00:	f895 4064 	ldrb.w	r4, [r5, #100]	; 0x64
    ff04:	b964      	cbnz	r4, ff20 <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
    ff06:	4601      	mov	r1, r0
    ff08:	4652      	mov	r2, sl
    ff0a:	4640      	mov	r0, r8
    ff0c:	f005 fa37 	bl	1537e <clear_event_registrations>
	__asm__ volatile(
    ff10:	f38a 8811 	msr	BASEPRI, sl
    ff14:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
	k_spin_unlock(&lock, key);

	return swap_rc;
}
    ff18:	4620      	mov	r0, r4
    ff1a:	b004      	add	sp, #16
    ff1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
    ff20:	2300      	movs	r3, #0
    ff22:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    ff26:	ea56 0307 	orrs.w	r3, r6, r7
    ff2a:	d106      	bne.n	ff3a <z_impl_k_poll+0x76>
    ff2c:	f38a 8811 	msr	BASEPRI, sl
    ff30:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
    ff34:	f06f 040a 	mvn.w	r4, #10
    ff38:	e7ee      	b.n	ff18 <z_impl_k_poll+0x54>
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
    ff3a:	aa02      	add	r2, sp, #8
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
    ff3c:	4651      	mov	r1, sl
    ff3e:	e9cd 6700 	strd	r6, r7, [sp]
    ff42:	480d      	ldr	r0, [pc, #52]	; (ff78 <z_impl_k_poll+0xb4>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
    ff44:	e9cd 2202 	strd	r2, r2, [sp, #8]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
    ff48:	f7ff fb02 	bl	f550 <z_pend_curr>
    ff4c:	4604      	mov	r4, r0
	__asm__ volatile(
    ff4e:	f04f 0320 	mov.w	r3, #32
    ff52:	f3ef 8511 	mrs	r5, BASEPRI
    ff56:	f383 8811 	msr	BASEPRI, r3
    ff5a:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
    ff5e:	462a      	mov	r2, r5
    ff60:	4649      	mov	r1, r9
    ff62:	4640      	mov	r0, r8
    ff64:	f005 fa0b 	bl	1537e <clear_event_registrations>
	__asm__ volatile(
    ff68:	f385 8811 	msr	BASEPRI, r5
    ff6c:	f3bf 8f6f 	isb	sy
	return swap_rc;
    ff70:	e7d2      	b.n	ff18 <z_impl_k_poll+0x54>
    ff72:	bf00      	nop
    ff74:	20001c9c 	.word	0x20001c9c
    ff78:	20002e1c 	.word	0x20002e1c

0000ff7c <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *signal, int result)
{
    ff7c:	b538      	push	{r3, r4, r5, lr}
    ff7e:	4603      	mov	r3, r0
	__asm__ volatile(
    ff80:	f04f 0220 	mov.w	r2, #32
    ff84:	f3ef 8511 	mrs	r5, BASEPRI
    ff88:	f382 8811 	msr	BASEPRI, r2
    ff8c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	signal->result = result;
    ff90:	60c1      	str	r1, [r0, #12]
	signal->signaled = 1U;
    ff92:	2101      	movs	r1, #1
    ff94:	6081      	str	r1, [r0, #8]
	return list->head == list;
    ff96:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
    ff98:	4283      	cmp	r3, r0
    ff9a:	d106      	bne.n	ffaa <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
    ff9c:	f385 8811 	msr	BASEPRI, r5
    ffa0:	f3bf 8f6f 	isb	sy

	poll_event = (struct k_poll_event *)sys_dlist_get(&signal->poll_events);
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);
		return 0;
    ffa4:	2400      	movs	r4, #0

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);

	z_reschedule(&lock, key);
	return rc;
}
    ffa6:	4620      	mov	r0, r4
    ffa8:	bd38      	pop	{r3, r4, r5, pc}
	node->prev->next = node->next;
    ffaa:	e9d0 3200 	ldrd	r3, r2, [r0]
    ffae:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    ffb0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    ffb2:	2300      	movs	r3, #0
	node->prev = NULL;
    ffb4:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
    ffb8:	f005 fa20 	bl	153fc <signal_poll_event>
	z_reschedule(&lock, key);
    ffbc:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
    ffbe:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
    ffc0:	4801      	ldr	r0, [pc, #4]	; (ffc8 <z_impl_k_poll_signal_raise+0x4c>)
    ffc2:	f7ff f87d 	bl	f0c0 <z_reschedule>
	return rc;
    ffc6:	e7ee      	b.n	ffa6 <z_impl_k_poll_signal_raise+0x2a>
    ffc8:	20002e1c 	.word	0x20002e1c

0000ffcc <k_aligned_alloc>:

K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
    ffcc:	460a      	mov	r2, r1
		"align must be a multiple of sizeof(void *)");

	__ASSERT((align & (align - 1)) == 0,
		"align must be a power of 2");

	return z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
    ffce:	4601      	mov	r1, r0
    ffd0:	4801      	ldr	r0, [pc, #4]	; (ffd8 <k_aligned_alloc+0xc>)
    ffd2:	f005 bb22 	b.w	1561a <z_heap_aligned_alloc>
    ffd6:	bf00      	nop
    ffd8:	20000610 	.word	0x20000610

0000ffdc <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
    ffdc:	b538      	push	{r3, r4, r5, lr}
    ffde:	4604      	mov	r4, r0
    ffe0:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
    ffe2:	f005 f8b2 	bl	1514a <k_is_in_isr>
    ffe6:	b950      	cbnz	r0, fffe <z_thread_aligned_alloc+0x22>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
    ffe8:	4b06      	ldr	r3, [pc, #24]	; (10004 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x4>)
    ffea:	689b      	ldr	r3, [r3, #8]
    ffec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
	}

	if (heap) {
    ffee:	b143      	cbz	r3, 10002 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x2>
		ret = z_heap_aligned_alloc(heap, align, size);
    fff0:	462a      	mov	r2, r5
    fff2:	4621      	mov	r1, r4
    fff4:	4618      	mov	r0, r3
	} else {
		ret = NULL;
	}

	return ret;
}
    fff6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		ret = z_heap_aligned_alloc(heap, align, size);
    fffa:	f005 bb0e 	b.w	1561a <z_heap_aligned_alloc>
		heap = _SYSTEM_HEAP;
    fffe:	4b02      	ldr	r3, [pc, #8]	; (10008 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x8>)
   10000:	e7f6      	b.n	fff0 <z_thread_aligned_alloc+0x14>
}
   10002:	bd38      	pop	{r3, r4, r5, pc}
   10004:	20001c9c 	.word	0x20001c9c
   10008:	20000610 	.word	0x20000610

0001000c <nrf_cc3xx_platform_init_no_rng>:
   1000c:	b510      	push	{r4, lr}
   1000e:	4c0a      	ldr	r4, [pc, #40]	; (10038 <nrf_cc3xx_platform_init_no_rng+0x2c>)
   10010:	6823      	ldr	r3, [r4, #0]
   10012:	b11b      	cbz	r3, 1001c <nrf_cc3xx_platform_init_no_rng+0x10>
   10014:	2301      	movs	r3, #1
   10016:	2000      	movs	r0, #0
   10018:	6023      	str	r3, [r4, #0]
   1001a:	bd10      	pop	{r4, pc}
   1001c:	f000 f8b2 	bl	10184 <CC_LibInitNoRng>
   10020:	2800      	cmp	r0, #0
   10022:	d0f7      	beq.n	10014 <nrf_cc3xx_platform_init_no_rng+0x8>
   10024:	3801      	subs	r0, #1
   10026:	2807      	cmp	r0, #7
   10028:	d803      	bhi.n	10032 <nrf_cc3xx_platform_init_no_rng+0x26>
   1002a:	4b04      	ldr	r3, [pc, #16]	; (1003c <nrf_cc3xx_platform_init_no_rng+0x30>)
   1002c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   10030:	bd10      	pop	{r4, pc}
   10032:	4803      	ldr	r0, [pc, #12]	; (10040 <nrf_cc3xx_platform_init_no_rng+0x34>)
   10034:	bd10      	pop	{r4, pc}
   10036:	bf00      	nop
   10038:	20002ce0 	.word	0x20002ce0
   1003c:	00016470 	.word	0x00016470
   10040:	ffff8ffe 	.word	0xffff8ffe

00010044 <nrf_cc3xx_platform_abort>:
   10044:	f3bf 8f4f 	dsb	sy
   10048:	4905      	ldr	r1, [pc, #20]	; (10060 <nrf_cc3xx_platform_abort+0x1c>)
   1004a:	4b06      	ldr	r3, [pc, #24]	; (10064 <nrf_cc3xx_platform_abort+0x20>)
   1004c:	68ca      	ldr	r2, [r1, #12]
   1004e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   10052:	4313      	orrs	r3, r2
   10054:	60cb      	str	r3, [r1, #12]
   10056:	f3bf 8f4f 	dsb	sy
   1005a:	bf00      	nop
   1005c:	e7fd      	b.n	1005a <nrf_cc3xx_platform_abort+0x16>
   1005e:	bf00      	nop
   10060:	e000ed00 	.word	0xe000ed00
   10064:	05fa0004 	.word	0x05fa0004

00010068 <CC_PalAbort>:
   10068:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
   1006c:	2100      	movs	r1, #0
   1006e:	b430      	push	{r4, r5}
   10070:	4a08      	ldr	r2, [pc, #32]	; (10094 <CC_PalAbort+0x2c>)
   10072:	4c09      	ldr	r4, [pc, #36]	; (10098 <CC_PalAbort+0x30>)
   10074:	4d09      	ldr	r5, [pc, #36]	; (1009c <CC_PalAbort+0x34>)
   10076:	6023      	str	r3, [r4, #0]
   10078:	602b      	str	r3, [r5, #0]
   1007a:	6013      	str	r3, [r2, #0]
   1007c:	60e3      	str	r3, [r4, #12]
   1007e:	60eb      	str	r3, [r5, #12]
   10080:	60d3      	str	r3, [r2, #12]
   10082:	61a3      	str	r3, [r4, #24]
   10084:	4a06      	ldr	r2, [pc, #24]	; (100a0 <CC_PalAbort+0x38>)
   10086:	4c07      	ldr	r4, [pc, #28]	; (100a4 <CC_PalAbort+0x3c>)
   10088:	61ab      	str	r3, [r5, #24]
   1008a:	6863      	ldr	r3, [r4, #4]
   1008c:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
   10090:	bc30      	pop	{r4, r5}
   10092:	4718      	bx	r3
   10094:	50845408 	.word	0x50845408
   10098:	50845400 	.word	0x50845400
   1009c:	50845404 	.word	0x50845404
   100a0:	50844000 	.word	0x50844000
   100a4:	200003f0 	.word	0x200003f0

000100a8 <nrf_cc3xx_platform_set_abort>:
   100a8:	4b02      	ldr	r3, [pc, #8]	; (100b4 <nrf_cc3xx_platform_set_abort+0xc>)
   100aa:	e9d0 1200 	ldrd	r1, r2, [r0]
   100ae:	e9c3 1200 	strd	r1, r2, [r3]
   100b2:	4770      	bx	lr
   100b4:	200003f0 	.word	0x200003f0

000100b8 <mutex_unlock>:
   100b8:	b148      	cbz	r0, 100ce <mutex_unlock+0x16>
   100ba:	6843      	ldr	r3, [r0, #4]
   100bc:	b12b      	cbz	r3, 100ca <mutex_unlock+0x12>
   100be:	f3bf 8f5f 	dmb	sy
   100c2:	2300      	movs	r3, #0
   100c4:	6003      	str	r3, [r0, #0]
   100c6:	4618      	mov	r0, r3
   100c8:	4770      	bx	lr
   100ca:	4802      	ldr	r0, [pc, #8]	; (100d4 <mutex_unlock+0x1c>)
   100cc:	4770      	bx	lr
   100ce:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   100d2:	4770      	bx	lr
   100d4:	ffff8fea 	.word	0xffff8fea

000100d8 <mutex_free>:
   100d8:	b510      	push	{r4, lr}
   100da:	4604      	mov	r4, r0
   100dc:	b128      	cbz	r0, 100ea <mutex_free+0x12>
   100de:	6863      	ldr	r3, [r4, #4]
   100e0:	b113      	cbz	r3, 100e8 <mutex_free+0x10>
   100e2:	2300      	movs	r3, #0
   100e4:	6023      	str	r3, [r4, #0]
   100e6:	6063      	str	r3, [r4, #4]
   100e8:	bd10      	pop	{r4, pc}
   100ea:	4b02      	ldr	r3, [pc, #8]	; (100f4 <mutex_free+0x1c>)
   100ec:	4802      	ldr	r0, [pc, #8]	; (100f8 <mutex_free+0x20>)
   100ee:	685b      	ldr	r3, [r3, #4]
   100f0:	4798      	blx	r3
   100f2:	e7f4      	b.n	100de <mutex_free+0x6>
   100f4:	200003f0 	.word	0x200003f0
   100f8:	00016490 	.word	0x00016490

000100fc <mutex_init>:
   100fc:	b510      	push	{r4, lr}
   100fe:	4604      	mov	r4, r0
   10100:	b130      	cbz	r0, 10110 <mutex_init+0x14>
   10102:	2200      	movs	r2, #0
   10104:	6863      	ldr	r3, [r4, #4]
   10106:	6022      	str	r2, [r4, #0]
   10108:	f043 0301 	orr.w	r3, r3, #1
   1010c:	6063      	str	r3, [r4, #4]
   1010e:	bd10      	pop	{r4, pc}
   10110:	4801      	ldr	r0, [pc, #4]	; (10118 <mutex_init+0x1c>)
   10112:	f7ff ffa9 	bl	10068 <CC_PalAbort>
   10116:	e7f4      	b.n	10102 <mutex_init+0x6>
   10118:	000164b8 	.word	0x000164b8

0001011c <mutex_lock>:
   1011c:	b180      	cbz	r0, 10140 <mutex_lock+0x24>
   1011e:	6843      	ldr	r3, [r0, #4]
   10120:	b163      	cbz	r3, 1013c <mutex_lock+0x20>
   10122:	2201      	movs	r2, #1
   10124:	e8d0 3fef 	ldaex	r3, [r0]
   10128:	e8c0 2fe1 	stlex	r1, r2, [r0]
   1012c:	2900      	cmp	r1, #0
   1012e:	d1f9      	bne.n	10124 <mutex_lock+0x8>
   10130:	2b01      	cmp	r3, #1
   10132:	d0f7      	beq.n	10124 <mutex_lock+0x8>
   10134:	f3bf 8f5f 	dmb	sy
   10138:	2000      	movs	r0, #0
   1013a:	4770      	bx	lr
   1013c:	4802      	ldr	r0, [pc, #8]	; (10148 <mutex_lock+0x2c>)
   1013e:	4770      	bx	lr
   10140:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   10144:	4770      	bx	lr
   10146:	bf00      	nop
   10148:	ffff8fea 	.word	0xffff8fea

0001014c <nrf_cc3xx_platform_set_mutexes>:
   1014c:	b470      	push	{r4, r5, r6}
   1014e:	4b0b      	ldr	r3, [pc, #44]	; (1017c <nrf_cc3xx_platform_set_mutexes+0x30>)
   10150:	6806      	ldr	r6, [r0, #0]
   10152:	68c2      	ldr	r2, [r0, #12]
   10154:	e9d0 5401 	ldrd	r5, r4, [r0, #4]
   10158:	e9c3 4202 	strd	r4, r2, [r3, #8]
   1015c:	e9c3 6500 	strd	r6, r5, [r3]
   10160:	e9d1 0203 	ldrd	r0, r2, [r1, #12]
   10164:	680e      	ldr	r6, [r1, #0]
   10166:	4b06      	ldr	r3, [pc, #24]	; (10180 <nrf_cc3xx_platform_set_mutexes+0x34>)
   10168:	e9d1 5401 	ldrd	r5, r4, [r1, #4]
   1016c:	e9c3 6500 	strd	r6, r5, [r3]
   10170:	e9c3 4002 	strd	r4, r0, [r3, #8]
   10174:	611a      	str	r2, [r3, #16]
   10176:	bc70      	pop	{r4, r5, r6}
   10178:	4770      	bx	lr
   1017a:	bf00      	nop
   1017c:	20000400 	.word	0x20000400
   10180:	20000410 	.word	0x20000410

00010184 <CC_LibInitNoRng>:
   10184:	b508      	push	{r3, lr}
   10186:	f000 f80f 	bl	101a8 <CC_HalInit>
   1018a:	b928      	cbnz	r0, 10198 <CC_LibInitNoRng+0x14>
   1018c:	f000 f80e 	bl	101ac <CC_PalInit>
   10190:	b930      	cbnz	r0, 101a0 <CC_LibInitNoRng+0x1c>
   10192:	4a04      	ldr	r2, [pc, #16]	; (101a4 <CC_LibInitNoRng+0x20>)
   10194:	6010      	str	r0, [r2, #0]
   10196:	bd08      	pop	{r3, pc}
   10198:	f000 f836 	bl	10208 <CC_PalTerminate>
   1019c:	2003      	movs	r0, #3
   1019e:	bd08      	pop	{r3, pc}
   101a0:	2004      	movs	r0, #4
   101a2:	bd08      	pop	{r3, pc}
   101a4:	50845a0c 	.word	0x50845a0c

000101a8 <CC_HalInit>:
   101a8:	2000      	movs	r0, #0
   101aa:	4770      	bx	lr

000101ac <CC_PalInit>:
   101ac:	b510      	push	{r4, lr}
   101ae:	4811      	ldr	r0, [pc, #68]	; (101f4 <CC_PalInit+0x48>)
   101b0:	f000 f848 	bl	10244 <CC_PalMutexCreate>
   101b4:	b100      	cbz	r0, 101b8 <CC_PalInit+0xc>
   101b6:	bd10      	pop	{r4, pc}
   101b8:	480f      	ldr	r0, [pc, #60]	; (101f8 <CC_PalInit+0x4c>)
   101ba:	f000 f843 	bl	10244 <CC_PalMutexCreate>
   101be:	2800      	cmp	r0, #0
   101c0:	d1f9      	bne.n	101b6 <CC_PalInit+0xa>
   101c2:	4c0e      	ldr	r4, [pc, #56]	; (101fc <CC_PalInit+0x50>)
   101c4:	4620      	mov	r0, r4
   101c6:	f000 f83d 	bl	10244 <CC_PalMutexCreate>
   101ca:	2800      	cmp	r0, #0
   101cc:	d1f3      	bne.n	101b6 <CC_PalInit+0xa>
   101ce:	4b0c      	ldr	r3, [pc, #48]	; (10200 <CC_PalInit+0x54>)
   101d0:	480c      	ldr	r0, [pc, #48]	; (10204 <CC_PalInit+0x58>)
   101d2:	601c      	str	r4, [r3, #0]
   101d4:	f000 f836 	bl	10244 <CC_PalMutexCreate>
   101d8:	4601      	mov	r1, r0
   101da:	2800      	cmp	r0, #0
   101dc:	d1eb      	bne.n	101b6 <CC_PalInit+0xa>
   101de:	f000 f82d 	bl	1023c <CC_PalDmaInit>
   101e2:	4604      	mov	r4, r0
   101e4:	b108      	cbz	r0, 101ea <CC_PalInit+0x3e>
   101e6:	4620      	mov	r0, r4
   101e8:	bd10      	pop	{r4, pc}
   101ea:	f000 f83f 	bl	1026c <CC_PalPowerSaveModeInit>
   101ee:	4620      	mov	r0, r4
   101f0:	e7fa      	b.n	101e8 <CC_PalInit+0x3c>
   101f2:	bf00      	nop
   101f4:	20000448 	.word	0x20000448
   101f8:	2000043c 	.word	0x2000043c
   101fc:	20000444 	.word	0x20000444
   10200:	2000044c 	.word	0x2000044c
   10204:	20000440 	.word	0x20000440

00010208 <CC_PalTerminate>:
   10208:	b508      	push	{r3, lr}
   1020a:	4808      	ldr	r0, [pc, #32]	; (1022c <CC_PalTerminate+0x24>)
   1020c:	f000 f824 	bl	10258 <CC_PalMutexDestroy>
   10210:	4807      	ldr	r0, [pc, #28]	; (10230 <CC_PalTerminate+0x28>)
   10212:	f000 f821 	bl	10258 <CC_PalMutexDestroy>
   10216:	4807      	ldr	r0, [pc, #28]	; (10234 <CC_PalTerminate+0x2c>)
   10218:	f000 f81e 	bl	10258 <CC_PalMutexDestroy>
   1021c:	4806      	ldr	r0, [pc, #24]	; (10238 <CC_PalTerminate+0x30>)
   1021e:	f000 f81b 	bl	10258 <CC_PalMutexDestroy>
   10222:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   10226:	f000 b80b 	b.w	10240 <CC_PalDmaTerminate>
   1022a:	bf00      	nop
   1022c:	20000448 	.word	0x20000448
   10230:	2000043c 	.word	0x2000043c
   10234:	20000444 	.word	0x20000444
   10238:	20000440 	.word	0x20000440

0001023c <CC_PalDmaInit>:
   1023c:	2000      	movs	r0, #0
   1023e:	4770      	bx	lr

00010240 <CC_PalDmaTerminate>:
   10240:	4770      	bx	lr
   10242:	bf00      	nop

00010244 <CC_PalMutexCreate>:
   10244:	b508      	push	{r3, lr}
   10246:	4b03      	ldr	r3, [pc, #12]	; (10254 <CC_PalMutexCreate+0x10>)
   10248:	6802      	ldr	r2, [r0, #0]
   1024a:	681b      	ldr	r3, [r3, #0]
   1024c:	6810      	ldr	r0, [r2, #0]
   1024e:	4798      	blx	r3
   10250:	2000      	movs	r0, #0
   10252:	bd08      	pop	{r3, pc}
   10254:	20000400 	.word	0x20000400

00010258 <CC_PalMutexDestroy>:
   10258:	b508      	push	{r3, lr}
   1025a:	4b03      	ldr	r3, [pc, #12]	; (10268 <CC_PalMutexDestroy+0x10>)
   1025c:	6802      	ldr	r2, [r0, #0]
   1025e:	685b      	ldr	r3, [r3, #4]
   10260:	6810      	ldr	r0, [r2, #0]
   10262:	4798      	blx	r3
   10264:	2000      	movs	r0, #0
   10266:	bd08      	pop	{r3, pc}
   10268:	20000400 	.word	0x20000400

0001026c <CC_PalPowerSaveModeInit>:
   1026c:	b570      	push	{r4, r5, r6, lr}
   1026e:	4c09      	ldr	r4, [pc, #36]	; (10294 <CC_PalPowerSaveModeInit+0x28>)
   10270:	4d09      	ldr	r5, [pc, #36]	; (10298 <CC_PalPowerSaveModeInit+0x2c>)
   10272:	6920      	ldr	r0, [r4, #16]
   10274:	68ab      	ldr	r3, [r5, #8]
   10276:	4798      	blx	r3
   10278:	b118      	cbz	r0, 10282 <CC_PalPowerSaveModeInit+0x16>
   1027a:	4b08      	ldr	r3, [pc, #32]	; (1029c <CC_PalPowerSaveModeInit+0x30>)
   1027c:	4808      	ldr	r0, [pc, #32]	; (102a0 <CC_PalPowerSaveModeInit+0x34>)
   1027e:	685b      	ldr	r3, [r3, #4]
   10280:	4798      	blx	r3
   10282:	2100      	movs	r1, #0
   10284:	4a07      	ldr	r2, [pc, #28]	; (102a4 <CC_PalPowerSaveModeInit+0x38>)
   10286:	68eb      	ldr	r3, [r5, #12]
   10288:	6011      	str	r1, [r2, #0]
   1028a:	6920      	ldr	r0, [r4, #16]
   1028c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   10290:	4718      	bx	r3
   10292:	bf00      	nop
   10294:	20000410 	.word	0x20000410
   10298:	20000400 	.word	0x20000400
   1029c:	200003f0 	.word	0x200003f0
   102a0:	000164dc 	.word	0x000164dc
   102a4:	20002cf4 	.word	0x20002cf4

000102a8 <vnd_ccc_cfg_changed>:
}
   102a8:	4770      	bx	lr

000102aa <read_otown>:
{
   102aa:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	const char *value = attr->user_data;
   102ae:	f8d1 800c 	ldr.w	r8, [r1, #12]
{
   102b2:	4605      	mov	r5, r0
				 strlen(value));
   102b4:	4640      	mov	r0, r8
{
   102b6:	461f      	mov	r7, r3
   102b8:	460c      	mov	r4, r1
   102ba:	4616      	mov	r6, r2
				 strlen(value));
   102bc:	f001 fff2 	bl	122a4 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
   102c0:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   102c4:	b280      	uxth	r0, r0
   102c6:	e9cd 8001 	strd	r8, r0, [sp, #4]
   102ca:	9300      	str	r3, [sp, #0]
   102cc:	4632      	mov	r2, r6
   102ce:	463b      	mov	r3, r7
   102d0:	4621      	mov	r1, r4
   102d2:	4628      	mov	r0, r5
   102d4:	f003 fa09 	bl	136ea <bt_gatt_attr_read>
}
   102d8:	b004      	add	sp, #16
   102da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000102de <gpio_pin_set.constprop.0>:

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   102de:	68c3      	ldr	r3, [r0, #12]
   102e0:	681b      	ldr	r3, [r3, #0]
   102e2:	00db      	lsls	r3, r3, #3
		value = (value != 0) ? 0 : 1;
   102e4:	bf48      	it	mi
   102e6:	f081 0101 	eormi.w	r1, r1, #1
	if (value != 0)	{
   102ea:	b121      	cbz	r1, 102f6 <gpio_pin_set.constprop.0+0x18>
	return api->port_set_bits_raw(port, pins);
   102ec:	6883      	ldr	r3, [r0, #8]
   102ee:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   102f0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   102f4:	4718      	bx	r3
   102f6:	6883      	ldr	r3, [r0, #8]
   102f8:	691b      	ldr	r3, [r3, #16]
   102fa:	e7f9      	b.n	102f0 <gpio_pin_set.constprop.0+0x12>

000102fc <u8_to_dec>:
 */

#include <sys/util.h>

uint8_t u8_to_dec(char *buf, uint8_t buflen, uint8_t value)
{
   102fc:	b5f0      	push	{r4, r5, r6, r7, lr}
			buflen--;
			num_digits++;
		}

		value -= digit * divisor;
		divisor /= 10;
   102fe:	f04f 0c0a 	mov.w	ip, #10
{
   10302:	4605      	mov	r5, r0
	while (buflen > 0 && divisor > 0) {
   10304:	2604      	movs	r6, #4
	uint8_t num_digits = 0;
   10306:	2000      	movs	r0, #0
	uint8_t divisor = 100;
   10308:	2464      	movs	r4, #100	; 0x64
	while (buflen > 0 && divisor > 0) {
   1030a:	b111      	cbz	r1, 10312 <u8_to_dec+0x16>
   1030c:	3e01      	subs	r6, #1
   1030e:	d101      	bne.n	10314 <u8_to_dec+0x18>
	}

	if (buflen) {
		*buf = '\0';
   10310:	702e      	strb	r6, [r5, #0]
	}

	return num_digits;
}
   10312:	bdf0      	pop	{r4, r5, r6, r7, pc}
		digit = value / divisor;
   10314:	fbb2 f7f4 	udiv	r7, r2, r4
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   10318:	42a2      	cmp	r2, r4
		digit = value / divisor;
   1031a:	b2fb      	uxtb	r3, r7
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   1031c:	d202      	bcs.n	10324 <u8_to_dec+0x28>
   1031e:	2c01      	cmp	r4, #1
   10320:	d000      	beq.n	10324 <u8_to_dec+0x28>
   10322:	b130      	cbz	r0, 10332 <u8_to_dec+0x36>
			*buf = (char)digit + '0';
   10324:	3330      	adds	r3, #48	; 0x30
   10326:	f805 3b01 	strb.w	r3, [r5], #1
			buflen--;
   1032a:	3901      	subs	r1, #1
			num_digits++;
   1032c:	1c43      	adds	r3, r0, #1
			buflen--;
   1032e:	b2c9      	uxtb	r1, r1
			num_digits++;
   10330:	b2d8      	uxtb	r0, r3
		value -= digit * divisor;
   10332:	fb04 2217 	mls	r2, r4, r7, r2
		divisor /= 10;
   10336:	fbb4 f4fc 	udiv	r4, r4, ip
   1033a:	b2d2      	uxtb	r2, r2
   1033c:	e7e5      	b.n	1030a <u8_to_dec+0xe>

0001033e <char2hex>:
#include <errno.h>
#include <sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
   1033e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   10342:	b2db      	uxtb	r3, r3
   10344:	2b09      	cmp	r3, #9
   10346:	d802      	bhi.n	1034e <char2hex+0x10>
		*x = c - '0';
   10348:	700b      	strb	r3, [r1, #0]
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   1034a:	2000      	movs	r0, #0
   1034c:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   1034e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   10352:	2b05      	cmp	r3, #5
   10354:	d802      	bhi.n	1035c <char2hex+0x1e>
		*x = c - 'a' + 10;
   10356:	3857      	subs	r0, #87	; 0x57
   10358:	7008      	strb	r0, [r1, #0]
   1035a:	e7f6      	b.n	1034a <char2hex+0xc>
	} else if (c >= 'A' && c <= 'F') {
   1035c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   10360:	2b05      	cmp	r3, #5
   10362:	d801      	bhi.n	10368 <char2hex+0x2a>
		*x = c - 'A' + 10;
   10364:	3837      	subs	r0, #55	; 0x37
   10366:	e7f7      	b.n	10358 <char2hex+0x1a>
		return -EINVAL;
   10368:	f06f 0015 	mvn.w	r0, #21
}
   1036c:	4770      	bx	lr

0001036e <hex2bin>:
	hex[2 * buflen] = '\0';
	return 2 * buflen;
}

size_t hex2bin(const char *hex, size_t hexlen, uint8_t *buf, size_t buflen)
{
   1036e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10370:	4604      	mov	r4, r0
	uint8_t dec;

	if (buflen < hexlen / 2 + hexlen % 2) {
   10372:	f001 0001 	and.w	r0, r1, #1
   10376:	eb00 0551 	add.w	r5, r0, r1, lsr #1
   1037a:	429d      	cmp	r5, r3
   1037c:	ea4f 0651 	mov.w	r6, r1, lsr #1
   10380:	d903      	bls.n	1038a <hex2bin+0x1c>
		return 0;
   10382:	2500      	movs	r5, #0
		}
		buf[i] += dec;
	}

	return hexlen / 2 + hexlen % 2;
}
   10384:	4628      	mov	r0, r5
   10386:	b003      	add	sp, #12
   10388:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hexlen % 2) {
   1038a:	b158      	cbz	r0, 103a4 <hex2bin+0x36>
		if (char2hex(hex[0], &dec) < 0) {
   1038c:	7820      	ldrb	r0, [r4, #0]
   1038e:	f10d 0107 	add.w	r1, sp, #7
   10392:	f7ff ffd4 	bl	1033e <char2hex>
   10396:	2800      	cmp	r0, #0
   10398:	dbf3      	blt.n	10382 <hex2bin+0x14>
		buf[0] = dec;
   1039a:	f89d 3007 	ldrb.w	r3, [sp, #7]
		hex++;
   1039e:	3401      	adds	r4, #1
		buf[0] = dec;
   103a0:	f802 3b01 	strb.w	r3, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   103a4:	3401      	adds	r4, #1
   103a6:	4416      	add	r6, r2
   103a8:	42b2      	cmp	r2, r6
   103aa:	d0eb      	beq.n	10384 <hex2bin+0x16>
		if (char2hex(hex[2 * i], &dec) < 0) {
   103ac:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   103b0:	f10d 0107 	add.w	r1, sp, #7
   103b4:	f7ff ffc3 	bl	1033e <char2hex>
   103b8:	2800      	cmp	r0, #0
   103ba:	dbe2      	blt.n	10382 <hex2bin+0x14>
		buf[i] = dec << 4;
   103bc:	f89d 3007 	ldrb.w	r3, [sp, #7]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   103c0:	f10d 0107 	add.w	r1, sp, #7
		buf[i] = dec << 4;
   103c4:	011b      	lsls	r3, r3, #4
   103c6:	7013      	strb	r3, [r2, #0]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   103c8:	f814 0b02 	ldrb.w	r0, [r4], #2
   103cc:	f7ff ffb7 	bl	1033e <char2hex>
   103d0:	2800      	cmp	r0, #0
   103d2:	dbd6      	blt.n	10382 <hex2bin+0x14>
		buf[i] += dec;
   103d4:	7813      	ldrb	r3, [r2, #0]
   103d6:	f89d 1007 	ldrb.w	r1, [sp, #7]
   103da:	440b      	add	r3, r1
   103dc:	f802 3b01 	strb.w	r3, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   103e0:	e7e2      	b.n	103a8 <hex2bin+0x3a>

000103e2 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   103e2:	4603      	mov	r3, r0
   103e4:	b140      	cbz	r0, 103f8 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   103e6:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   103e8:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   103ec:	2a02      	cmp	r2, #2
   103ee:	d006      	beq.n	103fe <sys_notify_validate+0x1c>
   103f0:	2a03      	cmp	r2, #3
   103f2:	d004      	beq.n	103fe <sys_notify_validate+0x1c>
   103f4:	2a01      	cmp	r2, #1
   103f6:	d005      	beq.n	10404 <sys_notify_validate+0x22>
		return -EINVAL;
   103f8:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   103fc:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   103fe:	681a      	ldr	r2, [r3, #0]
   10400:	2a00      	cmp	r2, #0
   10402:	d0f9      	beq.n	103f8 <sys_notify_validate+0x16>
		notify->result = 0;
   10404:	2000      	movs	r0, #0
   10406:	6098      	str	r0, [r3, #8]
   10408:	4770      	bx	lr

0001040a <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1040a:	6842      	ldr	r2, [r0, #4]

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   1040c:	b510      	push	{r4, lr}
	return method & SYS_NOTIFY_METHOD_MASK;
   1040e:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   10412:	2a02      	cmp	r2, #2
{
   10414:	4603      	mov	r3, r0
	notify->result = res;
   10416:	6081      	str	r1, [r0, #8]
	switch (method) {
   10418:	d00a      	beq.n	10430 <sys_notify_finalize+0x26>
   1041a:	2a03      	cmp	r2, #3
   1041c:	d10b      	bne.n	10436 <sys_notify_finalize+0x2c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   1041e:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   10420:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   10422:	2200      	movs	r2, #0
   10424:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   10426:	b108      	cbz	r0, 1042c <sys_notify_finalize+0x22>
	return z_impl_k_poll_signal_raise(signal, result);
   10428:	f7ff fda8 	bl	ff7c <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   1042c:	4620      	mov	r0, r4
   1042e:	bd10      	pop	{r4, pc}
	sys_notify_generic_callback rv = 0;
   10430:	2400      	movs	r4, #0
		sig = notify->method.signal;
   10432:	6800      	ldr	r0, [r0, #0]
		break;
   10434:	e7f5      	b.n	10422 <sys_notify_finalize+0x18>
	switch (method) {
   10436:	2400      	movs	r4, #0
   10438:	4620      	mov	r0, r4
   1043a:	e7f2      	b.n	10422 <sys_notify_finalize+0x18>

0001043c <arch_printk_char_out>:
}
   1043c:	2000      	movs	r0, #0
   1043e:	4770      	bx	lr

00010440 <str_out>:
{
   10440:	b530      	push	{r4, r5, lr}
   10442:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   10444:	680c      	ldr	r4, [r1, #0]
   10446:	1c55      	adds	r5, r2, #1
   10448:	b114      	cbz	r4, 10450 <str_out+0x10>
   1044a:	684b      	ldr	r3, [r1, #4]
   1044c:	4293      	cmp	r3, r2
   1044e:	dc01      	bgt.n	10454 <str_out+0x14>
		ctx->count++;
   10450:	608d      	str	r5, [r1, #8]
}
   10452:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   10454:	3b01      	subs	r3, #1
   10456:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   10458:	bf08      	it	eq
   1045a:	2200      	moveq	r2, #0
   1045c:	608d      	str	r5, [r1, #8]
   1045e:	bf0c      	ite	eq
   10460:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   10462:	54a0      	strbne	r0, [r4, r2]
   10464:	e7f5      	b.n	10452 <str_out+0x12>

00010466 <printk>:
{
   10466:	b40f      	push	{r0, r1, r2, r3}
   10468:	b507      	push	{r0, r1, r2, lr}
   1046a:	a904      	add	r1, sp, #16
   1046c:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   10470:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   10472:	f7f0 fbc3 	bl	bfc <vprintk>
}
   10476:	b003      	add	sp, #12
   10478:	f85d eb04 	ldr.w	lr, [sp], #4
   1047c:	b004      	add	sp, #16
   1047e:	4770      	bx	lr

00010480 <snprintk>:
{
   10480:	b40c      	push	{r2, r3}
   10482:	b507      	push	{r0, r1, r2, lr}
   10484:	ab04      	add	r3, sp, #16
   10486:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   1048a:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   1048c:	f7f0 fbc4 	bl	c18 <vsnprintk>
}
   10490:	b003      	add	sp, #12
   10492:	f85d eb04 	ldr.w	lr, [sp], #4
   10496:	b002      	add	sp, #8
   10498:	4770      	bx	lr

0001049a <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1049a:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   1049c:	f013 0307 	ands.w	r3, r3, #7
   104a0:	d105      	bne.n	104ae <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   104a2:	6803      	ldr	r3, [r0, #0]
   104a4:	2b00      	cmp	r3, #0
		evt = EVT_START;
   104a6:	bf0c      	ite	eq
   104a8:	2000      	moveq	r0, #0
   104aa:	2003      	movne	r0, #3
   104ac:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   104ae:	2b02      	cmp	r3, #2
   104b0:	d105      	bne.n	104be <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   104b2:	8b43      	ldrh	r3, [r0, #26]
   104b4:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
   104b6:	bf14      	ite	ne
   104b8:	2000      	movne	r0, #0
   104ba:	2004      	moveq	r0, #4
   104bc:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   104be:	2b01      	cmp	r3, #1
   104c0:	d105      	bne.n	104ce <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   104c2:	6803      	ldr	r3, [r0, #0]
   104c4:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
   104c6:	bf0c      	ite	eq
   104c8:	2000      	moveq	r0, #0
   104ca:	2005      	movne	r0, #5
   104cc:	4770      	bx	lr
	int evt = EVT_NOP;
   104ce:	2000      	movs	r0, #0
}
   104d0:	4770      	bx	lr

000104d2 <notify_one>:
{
   104d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   104d6:	460d      	mov	r5, r1
   104d8:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   104da:	4619      	mov	r1, r3
   104dc:	1d28      	adds	r0, r5, #4
{
   104de:	4690      	mov	r8, r2
   104e0:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   104e2:	f7ff ff92 	bl	1040a <sys_notify_finalize>
	if (cb) {
   104e6:	4604      	mov	r4, r0
   104e8:	b138      	cbz	r0, 104fa <notify_one+0x28>
		cb(mgr, cli, state, res);
   104ea:	4633      	mov	r3, r6
   104ec:	4642      	mov	r2, r8
   104ee:	4629      	mov	r1, r5
   104f0:	4638      	mov	r0, r7
   104f2:	46a4      	mov	ip, r4
}
   104f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   104f8:	4760      	bx	ip
}
   104fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000104fe <transition_complete>:
{
   104fe:	b410      	push	{r4}
	__asm__ volatile(
   10500:	f04f 0420 	mov.w	r4, #32
   10504:	f3ef 8211 	mrs	r2, BASEPRI
   10508:	f384 8811 	msr	BASEPRI, r4
   1050c:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   10510:	6141      	str	r1, [r0, #20]
}
   10512:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   10514:	2101      	movs	r1, #1
   10516:	f7f0 bb93 	b.w	c40 <process_event>

0001051a <validate_args>:
{
   1051a:	b510      	push	{r4, lr}
   1051c:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   1051e:	b140      	cbz	r0, 10532 <validate_args+0x18>
   10520:	b139      	cbz	r1, 10532 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   10522:	1d08      	adds	r0, r1, #4
   10524:	f7ff ff5d 	bl	103e2 <sys_notify_validate>
	if ((rv == 0)
   10528:	b928      	cbnz	r0, 10536 <validate_args+0x1c>
	    && ((cli->notify.flags
   1052a:	68a3      	ldr	r3, [r4, #8]
   1052c:	f033 0303 	bics.w	r3, r3, #3
   10530:	d001      	beq.n	10536 <validate_args+0x1c>
		rv = -EINVAL;
   10532:	f06f 0015 	mvn.w	r0, #21
}
   10536:	bd10      	pop	{r4, pc}

00010538 <onoff_manager_init>:
{
   10538:	b538      	push	{r3, r4, r5, lr}
   1053a:	460c      	mov	r4, r1
	if ((mgr == NULL)
   1053c:	4605      	mov	r5, r0
   1053e:	b158      	cbz	r0, 10558 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   10540:	b151      	cbz	r1, 10558 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   10542:	680b      	ldr	r3, [r1, #0]
   10544:	b143      	cbz	r3, 10558 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   10546:	684b      	ldr	r3, [r1, #4]
   10548:	b133      	cbz	r3, 10558 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1054a:	221c      	movs	r2, #28
   1054c:	2100      	movs	r1, #0
   1054e:	f001 ff0f 	bl	12370 <memset>
	return 0;
   10552:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   10554:	612c      	str	r4, [r5, #16]
}
   10556:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   10558:	f06f 0015 	mvn.w	r0, #21
   1055c:	e7fb      	b.n	10556 <onoff_manager_init+0x1e>

0001055e <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   1055e:	b570      	push	{r4, r5, r6, lr}
   10560:	4604      	mov	r4, r0
   10562:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   10564:	f7ff ffd9 	bl	1051a <validate_args>

	if (rv < 0) {
   10568:	1e05      	subs	r5, r0, #0
   1056a:	db31      	blt.n	105d0 <onoff_request+0x72>
   1056c:	f04f 0320 	mov.w	r3, #32
   10570:	f3ef 8111 	mrs	r1, BASEPRI
   10574:	f383 8811 	msr	BASEPRI, r3
   10578:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   1057c:	f64f 75ff 	movw	r5, #65535	; 0xffff
   10580:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   10582:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
   10584:	42ab      	cmp	r3, r5
   10586:	f000 0207 	and.w	r2, r0, #7
   1058a:	d02e      	beq.n	105ea <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   1058c:	2a02      	cmp	r2, #2
   1058e:	d10e      	bne.n	105ae <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   10590:	3301      	adds	r3, #1
   10592:	8363      	strh	r3, [r4, #26]
	rv = state;
   10594:	4615      	mov	r5, r2
		notify = true;
   10596:	2301      	movs	r3, #1
	__asm__ volatile(
   10598:	f381 8811 	msr	BASEPRI, r1
   1059c:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   105a0:	b1b3      	cbz	r3, 105d0 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
   105a2:	2300      	movs	r3, #0
   105a4:	4631      	mov	r1, r6
   105a6:	4620      	mov	r0, r4
   105a8:	f7ff ff93 	bl	104d2 <notify_one>
   105ac:	e010      	b.n	105d0 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
   105ae:	0783      	lsls	r3, r0, #30
   105b0:	d001      	beq.n	105b6 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
   105b2:	2a06      	cmp	r2, #6
   105b4:	d10e      	bne.n	105d4 <onoff_request+0x76>
	parent->next = child;
   105b6:	2300      	movs	r3, #0
   105b8:	6033      	str	r3, [r6, #0]
Z_GENLIST_APPEND(slist, snode)
   105ba:	6863      	ldr	r3, [r4, #4]
   105bc:	b993      	cbnz	r3, 105e4 <onoff_request+0x86>
	list->head = node;
   105be:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
   105c2:	4615      	mov	r5, r2
   105c4:	b962      	cbnz	r2, 105e0 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
   105c6:	460a      	mov	r2, r1
   105c8:	4620      	mov	r0, r4
   105ca:	2102      	movs	r1, #2
   105cc:	f7f0 fb38 	bl	c40 <process_event>
		}
	}

	return rv;
}
   105d0:	4628      	mov	r0, r5
   105d2:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
   105d4:	2a05      	cmp	r2, #5
   105d6:	bf0c      	ite	eq
   105d8:	f06f 0522 	mvneq.w	r5, #34	; 0x22
   105dc:	f06f 0504 	mvnne.w	r5, #4
   105e0:	2300      	movs	r3, #0
   105e2:	e7d9      	b.n	10598 <onoff_request+0x3a>
	parent->next = child;
   105e4:	601e      	str	r6, [r3, #0]
	list->tail = node;
   105e6:	6066      	str	r6, [r4, #4]
}
   105e8:	e7eb      	b.n	105c2 <onoff_request+0x64>
		rv = -EAGAIN;
   105ea:	f06f 050a 	mvn.w	r5, #10
   105ee:	e7f7      	b.n	105e0 <onoff_request+0x82>

000105f0 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   105f0:	4604      	mov	r4, r0
   105f2:	b508      	push	{r3, lr}
   105f4:	4608      	mov	r0, r1
   105f6:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   105f8:	461a      	mov	r2, r3
   105fa:	47a0      	blx	r4
	return z_impl_k_current_get();
   105fc:	f7ff f8b6 	bl	f76c <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   10600:	f7f4 f8ae 	bl	4760 <z_impl_k_thread_abort>

00010604 <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
   10604:	b510      	push	{r4, lr}
   10606:	4604      	mov	r4, r0
	return z_impl_k_queue_get(queue, timeout);
   10608:	f04f 33ff 	mov.w	r3, #4294967295
   1060c:	f04f 32ff 	mov.w	r2, #4294967295
   10610:	4620      	mov	r0, r4
   10612:	f7fe fcdf 	bl	efd4 <z_impl_k_queue_get>
   10616:	4603      	mov	r3, r0
	while (true) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_queue_get(&work_q->queue, K_FOREVER);
		if (work == NULL) {
   10618:	2800      	cmp	r0, #0
   1061a:	d0f5      	beq.n	10608 <z_work_q_main+0x4>
			continue;
		}

		handler = work->handler;
   1061c:	6842      	ldr	r2, [r0, #4]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1061e:	3308      	adds	r3, #8
   10620:	e8d3 1fef 	ldaex	r1, [r3]
   10624:	f021 0c01 	bic.w	ip, r1, #1
   10628:	e8c3 cfee 	stlex	lr, ip, [r3]
   1062c:	f1be 0f00 	cmp.w	lr, #0
   10630:	d1f6      	bne.n	10620 <z_work_q_main+0x1c>
		__ASSERT(handler != NULL, "handler must be provided");

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
   10632:	07cb      	lsls	r3, r1, #31
   10634:	d500      	bpl.n	10638 <z_work_q_main+0x34>
					      K_WORK_STATE_PENDING)) {
			handler(work);
   10636:	4790      	blx	r2
	z_impl_k_yield();
   10638:	f7ff f828 	bl	f68c <z_impl_k_yield>
   1063c:	e7e4      	b.n	10608 <z_work_q_main+0x4>

0001063e <chunk_field>:
				 enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   1063e:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   10640:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   10644:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
   10648:	bf2c      	ite	cs
   1064a:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
   1064e:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
   10652:	4770      	bx	lr

00010654 <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->len);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   10654:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
   10658:	6880      	ldr	r0, [r0, #8]
   1065a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
   1065e:	bf2c      	ite	cs
   10660:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
   10664:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
   10668:	4770      	bx	lr

0001066a <chunk_size>:
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline size_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   1066a:	2201      	movs	r2, #1
{
   1066c:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   1066e:	f7ff ffe6 	bl	1063e <chunk_field>
}
   10672:	0840      	lsrs	r0, r0, #1
   10674:	bd08      	pop	{r3, pc}

00010676 <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   10676:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   10678:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   1067c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   10680:	d308      	bcc.n	10694 <set_chunk_used+0x1e>
		if (used) {
   10682:	684b      	ldr	r3, [r1, #4]
   10684:	b11a      	cbz	r2, 1068e <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   10686:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1068a:	604b      	str	r3, [r1, #4]
   1068c:	4770      	bx	lr
   1068e:	f023 0301 	bic.w	r3, r3, #1
   10692:	e7fa      	b.n	1068a <set_chunk_used+0x14>
		}
	} else {
		if (used) {
   10694:	884b      	ldrh	r3, [r1, #2]
   10696:	b11a      	cbz	r2, 106a0 <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   10698:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1069c:	804b      	strh	r3, [r1, #2]
		}
	}
}
   1069e:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   106a0:	f023 0301 	bic.w	r3, r3, #1
   106a4:	e7fa      	b.n	1069c <set_chunk_used+0x26>

000106a6 <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, size_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   106a6:	0053      	lsls	r3, r2, #1
   106a8:	2201      	movs	r2, #1
   106aa:	f7ff bfd3 	b.w	10654 <chunk_set>

000106ae <bucket_idx>:
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
   106ae:	6880      	ldr	r0, [r0, #8]
	return bytes_to_chunksz(h, 1);
}

static inline int bucket_idx(struct z_heap *h, size_t sz)
{
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   106b0:	3101      	adds	r1, #1
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   106b2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   106b6:	bf2c      	ite	cs
   106b8:	2002      	movcs	r0, #2
   106ba:	2001      	movcc	r0, #1
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   106bc:	1a08      	subs	r0, r1, r0
	return 31 - __builtin_clz(usable_sz);
   106be:	fab0 f080 	clz	r0, r0
}
   106c2:	f1c0 001f 	rsb	r0, r0, #31
   106c6:	4770      	bx	lr

000106c8 <merge_chunks>:
	set_left_chunk_size(h, right_chunk(h, rc), rsz);
}

/* Does not modify free list */
static void merge_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   106c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   106cc:	4616      	mov	r6, r2
   106ce:	4604      	mov	r4, r0
   106d0:	460f      	mov	r7, r1
	size_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   106d2:	f7ff ffca 	bl	1066a <chunk_size>
   106d6:	4631      	mov	r1, r6
   106d8:	4605      	mov	r5, r0
   106da:	4620      	mov	r0, r4
   106dc:	f7ff ffc5 	bl	1066a <chunk_size>
   106e0:	4405      	add	r5, r0

	set_chunk_size(h, lc, newsz);
   106e2:	462a      	mov	r2, r5
   106e4:	4639      	mov	r1, r7
   106e6:	4620      	mov	r0, r4
   106e8:	f7ff ffdd 	bl	106a6 <set_chunk_size>
	return c + chunk_size(h, c);
   106ec:	4631      	mov	r1, r6
   106ee:	4620      	mov	r0, r4
   106f0:	f7ff ffbb 	bl	1066a <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   106f4:	462b      	mov	r3, r5
   106f6:	1831      	adds	r1, r6, r0
   106f8:	2200      	movs	r2, #0
   106fa:	4620      	mov	r0, r4
	set_left_chunk_size(h, right_chunk(h, rc), newsz);
}
   106fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   10700:	f7ff bfa8 	b.w	10654 <chunk_set>

00010704 <split_chunks>:
{
   10704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10708:	4614      	mov	r4, r2
   1070a:	460e      	mov	r6, r1
   1070c:	4605      	mov	r5, r0
	size_t sz0 = chunk_size(h, lc);
   1070e:	f7ff ffac 	bl	1066a <chunk_size>
	size_t lsz = rc - lc;
   10712:	eba4 0806 	sub.w	r8, r4, r6
	size_t rsz = sz0 - lsz;
   10716:	1b37      	subs	r7, r6, r4
   10718:	4407      	add	r7, r0
	set_chunk_size(h, lc, lsz);
   1071a:	4642      	mov	r2, r8
   1071c:	4631      	mov	r1, r6
   1071e:	4628      	mov	r0, r5
   10720:	f7ff ffc1 	bl	106a6 <set_chunk_size>
	set_chunk_size(h, rc, rsz);
   10724:	463a      	mov	r2, r7
   10726:	4621      	mov	r1, r4
   10728:	4628      	mov	r0, r5
   1072a:	f7ff ffbc 	bl	106a6 <set_chunk_size>
   1072e:	4643      	mov	r3, r8
   10730:	2200      	movs	r2, #0
   10732:	4621      	mov	r1, r4
   10734:	4628      	mov	r0, r5
   10736:	f7ff ff8d 	bl	10654 <chunk_set>
	return c + chunk_size(h, c);
   1073a:	4621      	mov	r1, r4
   1073c:	4628      	mov	r0, r5
   1073e:	f7ff ff94 	bl	1066a <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   10742:	463b      	mov	r3, r7
   10744:	1821      	adds	r1, r4, r0
   10746:	2200      	movs	r2, #0
   10748:	4628      	mov	r0, r5
}
   1074a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1074e:	f7ff bf81 	b.w	10654 <chunk_set>

00010752 <free_list_remove_bidx>:
{
   10752:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10756:	4617      	mov	r7, r2
	return chunk_field(h, c, FREE_NEXT);
   10758:	2203      	movs	r2, #3
   1075a:	460e      	mov	r6, r1
   1075c:	4604      	mov	r4, r0
   1075e:	f7ff ff6e 	bl	1063e <chunk_field>
	if (next_free_chunk(h, c) == c) {
   10762:	4286      	cmp	r6, r0
   10764:	4605      	mov	r5, r0
   10766:	f107 0804 	add.w	r8, r7, #4
   1076a:	d10b      	bne.n	10784 <free_list_remove_bidx+0x32>
		h->avail_buckets &= ~(1 << bidx);
   1076c:	2301      	movs	r3, #1
   1076e:	fa03 f707 	lsl.w	r7, r3, r7
   10772:	68e3      	ldr	r3, [r4, #12]
   10774:	ea23 0307 	bic.w	r3, r3, r7
   10778:	60e3      	str	r3, [r4, #12]
		b->next = 0;
   1077a:	2300      	movs	r3, #0
   1077c:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
}
   10780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
   10784:	4631      	mov	r1, r6
   10786:	2202      	movs	r2, #2
   10788:	4620      	mov	r0, r4
   1078a:	f7ff ff58 	bl	1063e <chunk_field>
   1078e:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
   10790:	462b      	mov	r3, r5
   10792:	4601      	mov	r1, r0
   10794:	2203      	movs	r2, #3
   10796:	4620      	mov	r0, r4
		b->next = second;
   10798:	f844 5028 	str.w	r5, [r4, r8, lsl #2]
   1079c:	f7ff ff5a 	bl	10654 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   107a0:	4633      	mov	r3, r6
   107a2:	4629      	mov	r1, r5
   107a4:	4620      	mov	r0, r4
}
   107a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   107aa:	2202      	movs	r2, #2
   107ac:	f7ff bf52 	b.w	10654 <chunk_set>

000107b0 <alloc_chunk>:
	set_chunk_used(h, c, false);
	free_chunk(h, c);
}

static chunkid_t alloc_chunk(struct z_heap *h, size_t sz)
{
   107b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   107b4:	4604      	mov	r4, r0
   107b6:	4688      	mov	r8, r1
	int bi = bucket_idx(h, sz);
   107b8:	f7ff ff79 	bl	106ae <bucket_idx>
	struct z_heap_bucket *b = &h->buckets[bi];

	if (bi > bucket_idx(h, h->len)) {
   107bc:	68a1      	ldr	r1, [r4, #8]
	int bi = bucket_idx(h, sz);
   107be:	4605      	mov	r5, r0
	if (bi > bucket_idx(h, h->len)) {
   107c0:	4620      	mov	r0, r4
   107c2:	f7ff ff74 	bl	106ae <bucket_idx>
   107c6:	42a8      	cmp	r0, r5
   107c8:	da03      	bge.n	107d2 <alloc_chunk+0x22>
		return 0;
   107ca:	2600      	movs	r6, #0
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   107cc:	4630      	mov	r0, r6
   107ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (b->next) {
   107d2:	eb04 0a85 	add.w	sl, r4, r5, lsl #2
   107d6:	f8da 9010 	ldr.w	r9, [sl, #16]
   107da:	f1b9 0f00 	cmp.w	r9, #0
   107de:	d019      	beq.n	10814 <alloc_chunk+0x64>
   107e0:	2703      	movs	r7, #3
			chunkid_t c = b->next;
   107e2:	f8da 6010 	ldr.w	r6, [sl, #16]
			if (chunk_size(h, c) >= sz) {
   107e6:	4620      	mov	r0, r4
   107e8:	4631      	mov	r1, r6
   107ea:	f7ff ff3e 	bl	1066a <chunk_size>
   107ee:	4540      	cmp	r0, r8
   107f0:	d305      	bcc.n	107fe <alloc_chunk+0x4e>
				free_list_remove_bidx(h, c, bi);
   107f2:	462a      	mov	r2, r5
		free_list_remove_bidx(h, c, minbucket);
   107f4:	4631      	mov	r1, r6
   107f6:	4620      	mov	r0, r4
   107f8:	f7ff ffab 	bl	10752 <free_list_remove_bidx>
		return c;
   107fc:	e7e6      	b.n	107cc <alloc_chunk+0x1c>
	return chunk_field(h, c, FREE_NEXT);
   107fe:	2203      	movs	r2, #3
   10800:	4631      	mov	r1, r6
   10802:	4620      	mov	r0, r4
   10804:	f7ff ff1b 	bl	1063e <chunk_field>
		} while (--i && b->next != first);
   10808:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
   1080a:	f8ca 0010 	str.w	r0, [sl, #16]
		} while (--i && b->next != first);
   1080e:	d001      	beq.n	10814 <alloc_chunk+0x64>
   10810:	4581      	cmp	r9, r0
   10812:	d1e6      	bne.n	107e2 <alloc_chunk+0x32>
	size_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   10814:	f04f 32ff 	mov.w	r2, #4294967295
   10818:	68e3      	ldr	r3, [r4, #12]
   1081a:	3501      	adds	r5, #1
   1081c:	40aa      	lsls	r2, r5
	if ((bmask & h->avail_buckets) != 0U) {
   1081e:	401a      	ands	r2, r3
   10820:	d0d3      	beq.n	107ca <alloc_chunk+0x1a>
		int minbucket = __builtin_ctz(bmask & h->avail_buckets);
   10822:	fa92 f2a2 	rbit	r2, r2
   10826:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   1082a:	1d13      	adds	r3, r2, #4
   1082c:	f854 6023 	ldr.w	r6, [r4, r3, lsl #2]
   10830:	e7e0      	b.n	107f4 <alloc_chunk+0x44>

00010832 <free_list_add>:
{
   10832:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10836:	4604      	mov	r4, r0
   10838:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   1083a:	f7ff ff16 	bl	1066a <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
   1083e:	68a3      	ldr	r3, [r4, #8]
   10840:	4601      	mov	r1, r0
   10842:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   10846:	d301      	bcc.n	1084c <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
   10848:	2801      	cmp	r0, #1
   1084a:	d035      	beq.n	108b8 <free_list_add+0x86>
		int bidx = bucket_idx(h, chunk_size(h, c));
   1084c:	4620      	mov	r0, r4
   1084e:	f7ff ff2e 	bl	106ae <bucket_idx>
	if (b->next == 0U) {
   10852:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   10856:	6916      	ldr	r6, [r2, #16]
   10858:	b99e      	cbnz	r6, 10882 <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
   1085a:	2301      	movs	r3, #1
   1085c:	fa03 f000 	lsl.w	r0, r3, r0
   10860:	68e3      	ldr	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
   10862:	4629      	mov	r1, r5
   10864:	4303      	orrs	r3, r0
   10866:	60e3      	str	r3, [r4, #12]
   10868:	4620      	mov	r0, r4
		b->next = c;
   1086a:	6115      	str	r5, [r2, #16]
   1086c:	462b      	mov	r3, r5
   1086e:	2202      	movs	r2, #2
   10870:	f7ff fef0 	bl	10654 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   10874:	2203      	movs	r2, #3
   10876:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
   10878:	4620      	mov	r0, r4
}
   1087a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1087e:	f7ff bee9 	b.w	10654 <chunk_set>
	return chunk_field(h, c, FREE_PREV);
   10882:	2202      	movs	r2, #2
   10884:	4631      	mov	r1, r6
   10886:	4620      	mov	r0, r4
   10888:	f7ff fed9 	bl	1063e <chunk_field>
   1088c:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
   1088e:	4603      	mov	r3, r0
   10890:	2202      	movs	r2, #2
   10892:	4629      	mov	r1, r5
   10894:	4620      	mov	r0, r4
   10896:	f7ff fedd 	bl	10654 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   1089a:	4633      	mov	r3, r6
   1089c:	2203      	movs	r2, #3
   1089e:	4629      	mov	r1, r5
   108a0:	4620      	mov	r0, r4
   108a2:	f7ff fed7 	bl	10654 <chunk_set>
   108a6:	2203      	movs	r2, #3
   108a8:	4639      	mov	r1, r7
   108aa:	462b      	mov	r3, r5
   108ac:	4620      	mov	r0, r4
   108ae:	f7ff fed1 	bl	10654 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   108b2:	2202      	movs	r2, #2
   108b4:	4631      	mov	r1, r6
   108b6:	e7df      	b.n	10878 <free_list_add+0x46>
   108b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000108bc <free_list_remove>:
{
   108bc:	b538      	push	{r3, r4, r5, lr}
   108be:	4604      	mov	r4, r0
   108c0:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   108c2:	f7ff fed2 	bl	1066a <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
   108c6:	68a3      	ldr	r3, [r4, #8]
   108c8:	4601      	mov	r1, r0
   108ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   108ce:	d301      	bcc.n	108d4 <free_list_remove+0x18>
	if (!solo_free_header(h, c)) {
   108d0:	2801      	cmp	r0, #1
   108d2:	d009      	beq.n	108e8 <free_list_remove+0x2c>
		int bidx = bucket_idx(h, chunk_size(h, c));
   108d4:	4620      	mov	r0, r4
   108d6:	f7ff feea 	bl	106ae <bucket_idx>
		free_list_remove_bidx(h, c, bidx);
   108da:	4629      	mov	r1, r5
		int bidx = bucket_idx(h, chunk_size(h, c));
   108dc:	4602      	mov	r2, r0
		free_list_remove_bidx(h, c, bidx);
   108de:	4620      	mov	r0, r4
}
   108e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		free_list_remove_bidx(h, c, bidx);
   108e4:	f7ff bf35 	b.w	10752 <free_list_remove_bidx>
}
   108e8:	bd38      	pop	{r3, r4, r5, pc}

000108ea <free_chunk>:
{
   108ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   108ec:	460c      	mov	r4, r1
   108ee:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   108f0:	f7ff febb 	bl	1066a <chunk_size>
   108f4:	1826      	adds	r6, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   108f6:	2201      	movs	r2, #1
   108f8:	4631      	mov	r1, r6
   108fa:	4628      	mov	r0, r5
   108fc:	f7ff fe9f 	bl	1063e <chunk_field>
	if (!chunk_used(h, right_chunk(h, c))) {
   10900:	07c3      	lsls	r3, r0, #31
   10902:	d40c      	bmi.n	1091e <free_chunk+0x34>
		free_list_remove(h, right_chunk(h, c));
   10904:	4631      	mov	r1, r6
   10906:	4628      	mov	r0, r5
   10908:	f7ff ffd8 	bl	108bc <free_list_remove>
	return c + chunk_size(h, c);
   1090c:	4621      	mov	r1, r4
   1090e:	4628      	mov	r0, r5
   10910:	f7ff feab 	bl	1066a <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   10914:	4621      	mov	r1, r4
   10916:	1822      	adds	r2, r4, r0
   10918:	4628      	mov	r0, r5
   1091a:	f7ff fed5 	bl	106c8 <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
   1091e:	2200      	movs	r2, #0
   10920:	4621      	mov	r1, r4
   10922:	4628      	mov	r0, r5
   10924:	f7ff fe8b 	bl	1063e <chunk_field>
   10928:	1a27      	subs	r7, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1092a:	2201      	movs	r2, #1
   1092c:	4639      	mov	r1, r7
   1092e:	4628      	mov	r0, r5
   10930:	f7ff fe85 	bl	1063e <chunk_field>
	if (!chunk_used(h, left_chunk(h, c))) {
   10934:	f010 0601 	ands.w	r6, r0, #1
   10938:	d113      	bne.n	10962 <free_chunk+0x78>
		free_list_remove(h, left_chunk(h, c));
   1093a:	4639      	mov	r1, r7
   1093c:	4628      	mov	r0, r5
   1093e:	f7ff ffbd 	bl	108bc <free_list_remove>
	return c - chunk_field(h, c, LEFT_SIZE);
   10942:	4621      	mov	r1, r4
   10944:	4632      	mov	r2, r6
   10946:	4628      	mov	r0, r5
   10948:	f7ff fe79 	bl	1063e <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
   1094c:	4622      	mov	r2, r4
   1094e:	1a21      	subs	r1, r4, r0
   10950:	4628      	mov	r0, r5
   10952:	f7ff feb9 	bl	106c8 <merge_chunks>
   10956:	4621      	mov	r1, r4
   10958:	4632      	mov	r2, r6
   1095a:	4628      	mov	r0, r5
   1095c:	f7ff fe6f 	bl	1063e <chunk_field>
   10960:	1a24      	subs	r4, r4, r0
	free_list_add(h, c);
   10962:	4621      	mov	r1, r4
   10964:	4628      	mov	r0, r5
}
   10966:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, c);
   1096a:	f7ff bf62 	b.w	10832 <free_list_add>

0001096e <sys_heap_free>:
{
   1096e:	b510      	push	{r4, lr}
	if (mem == NULL) {
   10970:	b191      	cbz	r1, 10998 <sys_heap_free+0x2a>
	struct z_heap *h = heap->heap;
   10972:	6800      	ldr	r0, [r0, #0]
	set_chunk_used(h, c, false);
   10974:	2200      	movs	r2, #0
	return big_heap(h) ? 8 : 4;
   10976:	6883      	ldr	r3, [r0, #8]
   10978:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1097c:	bf2c      	ite	cs
   1097e:	2408      	movcs	r4, #8
   10980:	2404      	movcc	r4, #4
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   10982:	1b0c      	subs	r4, r1, r4
   10984:	1a24      	subs	r4, r4, r0
   10986:	08e4      	lsrs	r4, r4, #3
	set_chunk_used(h, c, false);
   10988:	4621      	mov	r1, r4
   1098a:	f7ff fe74 	bl	10676 <set_chunk_used>
	free_chunk(h, c);
   1098e:	4621      	mov	r1, r4
}
   10990:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	free_chunk(h, c);
   10994:	f7ff bfa9 	b.w	108ea <free_chunk>
}
   10998:	bd10      	pop	{r4, pc}

0001099a <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   1099a:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   1099c:	6805      	ldr	r5, [r0, #0]

	if (bytes == 0U || size_too_big(h, bytes)) {
   1099e:	b909      	cbnz	r1, 109a4 <sys_heap_alloc+0xa>
		return NULL;
   109a0:	2000      	movs	r0, #0
		free_list_add(h, c + chunk_sz);
	}

	set_chunk_used(h, c, true);
	return chunk_mem(h, c);
}
   109a2:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   109a4:	68ab      	ldr	r3, [r5, #8]
   109a6:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   109aa:	d9f9      	bls.n	109a0 <sys_heap_alloc+0x6>
   109ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   109b0:	bf2c      	ite	cs
   109b2:	2208      	movcs	r2, #8
   109b4:	2204      	movcc	r2, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   109b6:	1dcc      	adds	r4, r1, #7
   109b8:	4414      	add	r4, r2
   109ba:	08e4      	lsrs	r4, r4, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   109bc:	4621      	mov	r1, r4
   109be:	4628      	mov	r0, r5
   109c0:	f7ff fef6 	bl	107b0 <alloc_chunk>
	if (c == 0U) {
   109c4:	4606      	mov	r6, r0
   109c6:	2800      	cmp	r0, #0
   109c8:	d0ea      	beq.n	109a0 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   109ca:	4601      	mov	r1, r0
   109cc:	4628      	mov	r0, r5
   109ce:	f7ff fe4c 	bl	1066a <chunk_size>
   109d2:	42a0      	cmp	r0, r4
   109d4:	d909      	bls.n	109ea <sys_heap_alloc+0x50>
		split_chunks(h, c, c + chunk_sz);
   109d6:	4434      	add	r4, r6
   109d8:	4631      	mov	r1, r6
   109da:	4628      	mov	r0, r5
   109dc:	4622      	mov	r2, r4
   109de:	f7ff fe91 	bl	10704 <split_chunks>
		free_list_add(h, c + chunk_sz);
   109e2:	4621      	mov	r1, r4
   109e4:	4628      	mov	r0, r5
   109e6:	f7ff ff24 	bl	10832 <free_list_add>
	set_chunk_used(h, c, true);
   109ea:	4628      	mov	r0, r5
   109ec:	2201      	movs	r2, #1
   109ee:	4631      	mov	r1, r6
   109f0:	f7ff fe41 	bl	10676 <set_chunk_used>
	return big_heap(h) ? 8 : 4;
   109f4:	68ab      	ldr	r3, [r5, #8]
   109f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   109fa:	bf2c      	ite	cs
   109fc:	2008      	movcs	r0, #8
   109fe:	2004      	movcc	r0, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   10a00:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
   10a04:	4428      	add	r0, r5
	return chunk_mem(h, c);
   10a06:	e7cc      	b.n	109a2 <sys_heap_alloc+0x8>

00010a08 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   10a08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct z_heap *h = heap->heap;
   10a0c:	6805      	ldr	r5, [r0, #0]
{
   10a0e:	4614      	mov	r4, r2
   10a10:	68ab      	ldr	r3, [r5, #8]
   10a12:	460f      	mov	r7, r1
   10a14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   10a18:	bf2c      	ite	cs
   10a1a:	2208      	movcs	r2, #8
   10a1c:	2204      	movcc	r2, #4

	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (align <= chunk_header_bytes(h)) {
   10a1e:	4291      	cmp	r1, r2
   10a20:	d804      	bhi.n	10a2c <sys_heap_aligned_alloc+0x24>
		return sys_heap_alloc(heap, bytes);
   10a22:	4621      	mov	r1, r4
		free_list_add(h, c_end);
	}

	set_chunk_used(h, c, true);
	return mem;
}
   10a24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return sys_heap_alloc(heap, bytes);
   10a28:	f7ff bfb7 	b.w	1099a <sys_heap_alloc>
	if (bytes == 0 || size_too_big(h, bytes)) {
   10a2c:	b91c      	cbnz	r4, 10a36 <sys_heap_aligned_alloc+0x2e>
		return NULL;
   10a2e:	2600      	movs	r6, #0
}
   10a30:	4630      	mov	r0, r6
   10a32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bytes == 0 || size_too_big(h, bytes)) {
   10a36:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   10a3a:	d9f8      	bls.n	10a2e <sys_heap_aligned_alloc+0x26>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   10a3c:	1de1      	adds	r1, r4, #7
   10a3e:	4439      	add	r1, r7
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   10a40:	4628      	mov	r0, r5
   10a42:	08c9      	lsrs	r1, r1, #3
   10a44:	f7ff feb4 	bl	107b0 <alloc_chunk>
	if (c0 == 0) {
   10a48:	4680      	mov	r8, r0
   10a4a:	2800      	cmp	r0, #0
   10a4c:	d0ef      	beq.n	10a2e <sys_heap_aligned_alloc+0x26>
	return big_heap(h) ? 8 : 4;
   10a4e:	68ab      	ldr	r3, [r5, #8]
	uint8_t *mem = (uint8_t *) ROUND_UP(chunk_mem(h, c0), align);
   10a50:	1e7a      	subs	r2, r7, #1
   10a52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   10a56:	bf2c      	ite	cs
   10a58:	2308      	movcs	r3, #8
   10a5a:	2304      	movcc	r3, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   10a5c:	eb03 06c0 	add.w	r6, r3, r0, lsl #3
   10a60:	442e      	add	r6, r5
	uint8_t *mem = (uint8_t *) ROUND_UP(chunk_mem(h, c0), align);
   10a62:	427f      	negs	r7, r7
   10a64:	4416      	add	r6, r2
   10a66:	403e      	ands	r6, r7
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   10a68:	4434      	add	r4, r6
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   10a6a:	1af3      	subs	r3, r6, r3
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   10a6c:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   10a6e:	1b5b      	subs	r3, r3, r5
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   10a70:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   10a74:	1b64      	subs	r4, r4, r5
	if (c > c0) {
   10a76:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   10a7a:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   10a7e:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   10a82:	d208      	bcs.n	10a96 <sys_heap_aligned_alloc+0x8e>
		split_chunks(h, c0, c);
   10a84:	4601      	mov	r1, r0
   10a86:	463a      	mov	r2, r7
   10a88:	4628      	mov	r0, r5
   10a8a:	f7ff fe3b 	bl	10704 <split_chunks>
		free_list_add(h, c0);
   10a8e:	4641      	mov	r1, r8
   10a90:	4628      	mov	r0, r5
   10a92:	f7ff fece 	bl	10832 <free_list_add>
	return c + chunk_size(h, c);
   10a96:	4639      	mov	r1, r7
   10a98:	4628      	mov	r0, r5
   10a9a:	f7ff fde6 	bl	1066a <chunk_size>
   10a9e:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   10aa0:	4284      	cmp	r4, r0
   10aa2:	d208      	bcs.n	10ab6 <sys_heap_aligned_alloc+0xae>
		split_chunks(h, c, c_end);
   10aa4:	4639      	mov	r1, r7
   10aa6:	4628      	mov	r0, r5
   10aa8:	4622      	mov	r2, r4
   10aaa:	f7ff fe2b 	bl	10704 <split_chunks>
		free_list_add(h, c_end);
   10aae:	4621      	mov	r1, r4
   10ab0:	4628      	mov	r0, r5
   10ab2:	f7ff febe 	bl	10832 <free_list_add>
	set_chunk_used(h, c, true);
   10ab6:	2201      	movs	r2, #1
   10ab8:	4639      	mov	r1, r7
   10aba:	4628      	mov	r0, r5
   10abc:	f7ff fddb 	bl	10676 <set_chunk_used>
	return mem;
   10ac0:	e7b6      	b.n	10a30 <sys_heap_aligned_alloc+0x28>

00010ac2 <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
   10ac2:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
		return ptr2;
	}
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   10ac6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10ac8:	bf2c      	ite	cs
   10aca:	2508      	movcs	r5, #8
   10acc:	2504      	movcc	r5, #4
	CHECK(end > addr);
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->chunk0_hdr_area = 0;
   10ace:	2300      	movs	r3, #0
	bytes -= heap_footer_bytes(bytes);
   10ad0:	1b55      	subs	r5, r2, r5
	h->chunk0_hdr_area = 0;
   10ad2:	2200      	movs	r2, #0
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   10ad4:	1dcc      	adds	r4, r1, #7
   10ad6:	f024 0407 	bic.w	r4, r4, #7
	heap->heap = h;
   10ada:	6004      	str	r4, [r0, #0]
	h->chunk0_hdr_area = 0;
   10adc:	e9c4 2300 	strd	r2, r3, [r4]
	h->len = buf_sz;
	h->avail_buckets = 0;
   10ae0:	2300      	movs	r3, #0
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   10ae2:	440d      	add	r5, r1
   10ae4:	f025 0507 	bic.w	r5, r5, #7
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
   10ae8:	1b2d      	subs	r5, r5, r4
   10aea:	08ed      	lsrs	r5, r5, #3

	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   10aec:	4629      	mov	r1, r5
   10aee:	4620      	mov	r0, r4
	h->len = buf_sz;
   10af0:	60a5      	str	r5, [r4, #8]
	h->avail_buckets = 0;
   10af2:	60e3      	str	r3, [r4, #12]
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   10af4:	f7ff fddb 	bl	106ae <bucket_idx>
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
   10af8:	0086      	lsls	r6, r0, #2
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   10afa:	1c41      	adds	r1, r0, #1
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < buf_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
   10afc:	4618      	mov	r0, r3
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   10afe:	361b      	adds	r6, #27
   10b00:	08f6      	lsrs	r6, r6, #3
	for (int i = 0; i < nb_buckets; i++) {
   10b02:	f104 0210 	add.w	r2, r4, #16
   10b06:	428b      	cmp	r3, r1
   10b08:	db29      	blt.n	10b5e <sys_heap_init+0x9c>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
   10b0a:	4632      	mov	r2, r6
   10b0c:	4620      	mov	r0, r4
   10b0e:	2100      	movs	r1, #0
   10b10:	f7ff fdc9 	bl	106a6 <set_chunk_size>
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
   10b14:	1baf      	subs	r7, r5, r6
	set_chunk_used(h, 0, true);
   10b16:	4620      	mov	r0, r4
   10b18:	2201      	movs	r2, #1
   10b1a:	2100      	movs	r1, #0
   10b1c:	f7ff fdab 	bl	10676 <set_chunk_used>
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
   10b20:	463a      	mov	r2, r7
   10b22:	4631      	mov	r1, r6
   10b24:	f7ff fdbf 	bl	106a6 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   10b28:	4633      	mov	r3, r6
   10b2a:	4631      	mov	r1, r6
   10b2c:	4620      	mov	r0, r4
   10b2e:	2200      	movs	r2, #0
   10b30:	f7ff fd90 	bl	10654 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, buf_sz, 0);
   10b34:	4629      	mov	r1, r5
   10b36:	4620      	mov	r0, r4
   10b38:	2200      	movs	r2, #0
   10b3a:	f7ff fdb4 	bl	106a6 <set_chunk_size>
   10b3e:	463b      	mov	r3, r7
   10b40:	4629      	mov	r1, r5
   10b42:	4620      	mov	r0, r4
   10b44:	2200      	movs	r2, #0
   10b46:	f7ff fd85 	bl	10654 <chunk_set>
	set_left_chunk_size(h, buf_sz, buf_sz - chunk0_size);
	set_chunk_used(h, buf_sz, true);
   10b4a:	4629      	mov	r1, r5
   10b4c:	4620      	mov	r0, r4
   10b4e:	2201      	movs	r2, #1
   10b50:	f7ff fd91 	bl	10676 <set_chunk_used>

	free_list_add(h, chunk0_size);
   10b54:	4631      	mov	r1, r6
}
   10b56:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
   10b5a:	f7ff be6a 	b.w	10832 <free_list_add>
		h->buckets[i].next = 0;
   10b5e:	f842 0b04 	str.w	r0, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
   10b62:	3301      	adds	r3, #1
   10b64:	e7cf      	b.n	10b06 <sys_heap_init+0x44>

00010b66 <encode_uint>:
{
   10b66:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10b6a:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
   10b6c:	78d3      	ldrb	r3, [r2, #3]
{
   10b6e:	4614      	mov	r4, r2
	switch (specifier) {
   10b70:	2b6f      	cmp	r3, #111	; 0x6f
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   10b72:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
{
   10b76:	4606      	mov	r6, r0
   10b78:	460f      	mov	r7, r1
   10b7a:	9201      	str	r2, [sp, #4]
	switch (specifier) {
   10b7c:	d02d      	beq.n	10bda <encode_uint+0x74>
   10b7e:	d828      	bhi.n	10bd2 <encode_uint+0x6c>
		return 16;
   10b80:	2b58      	cmp	r3, #88	; 0x58
   10b82:	bf14      	ite	ne
   10b84:	250a      	movne	r5, #10
   10b86:	2510      	moveq	r5, #16
		unsigned int lsv = (unsigned int)(value % radix);
   10b88:	46aa      	mov	sl, r5
   10b8a:	f04f 0b00 	mov.w	fp, #0
	char *bp = bps + (bpe - bps);
   10b8e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
		unsigned int lsv = (unsigned int)(value % radix);
   10b92:	4652      	mov	r2, sl
   10b94:	465b      	mov	r3, fp
   10b96:	4630      	mov	r0, r6
   10b98:	4639      	mov	r1, r7
   10b9a:	f7ef fadd 	bl	158 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   10b9e:	2a09      	cmp	r2, #9
   10ba0:	b2d3      	uxtb	r3, r2
   10ba2:	d81f      	bhi.n	10be4 <encode_uint+0x7e>
   10ba4:	3330      	adds	r3, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   10ba6:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
   10ba8:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
   10baa:	bf08      	it	eq
   10bac:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
   10bae:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
   10bb2:	d301      	bcc.n	10bb8 <encode_uint+0x52>
   10bb4:	45c8      	cmp	r8, r9
   10bb6:	d812      	bhi.n	10bde <encode_uint+0x78>
	if (conv->flag_hash) {
   10bb8:	7823      	ldrb	r3, [r4, #0]
   10bba:	069b      	lsls	r3, r3, #26
   10bbc:	d505      	bpl.n	10bca <encode_uint+0x64>
		if (radix == 8) {
   10bbe:	2d08      	cmp	r5, #8
   10bc0:	d116      	bne.n	10bf0 <encode_uint+0x8a>
			conv->altform_0 = true;
   10bc2:	78a3      	ldrb	r3, [r4, #2]
   10bc4:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   10bc8:	70a3      	strb	r3, [r4, #2]
}
   10bca:	4640      	mov	r0, r8
   10bcc:	b003      	add	sp, #12
   10bce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   10bd2:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   10bd6:	2b70      	cmp	r3, #112	; 0x70
   10bd8:	e7d3      	b.n	10b82 <encode_uint+0x1c>
	switch (specifier) {
   10bda:	2508      	movs	r5, #8
   10bdc:	e7d4      	b.n	10b88 <encode_uint+0x22>
		value /= radix;
   10bde:	4606      	mov	r6, r0
   10be0:	460f      	mov	r7, r1
   10be2:	e7d6      	b.n	10b92 <encode_uint+0x2c>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   10be4:	9a01      	ldr	r2, [sp, #4]
   10be6:	2a19      	cmp	r2, #25
   10be8:	bf94      	ite	ls
   10bea:	3337      	addls	r3, #55	; 0x37
   10bec:	3357      	addhi	r3, #87	; 0x57
   10bee:	e7da      	b.n	10ba6 <encode_uint+0x40>
		} else if (radix == 16) {
   10bf0:	2d10      	cmp	r5, #16
   10bf2:	d1ea      	bne.n	10bca <encode_uint+0x64>
			conv->altform_0c = true;
   10bf4:	78a3      	ldrb	r3, [r4, #2]
   10bf6:	f043 0310 	orr.w	r3, r3, #16
   10bfa:	e7e5      	b.n	10bc8 <encode_uint+0x62>

00010bfc <outs>:
{
   10bfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10c00:	4607      	mov	r7, r0
   10c02:	4688      	mov	r8, r1
   10c04:	4615      	mov	r5, r2
   10c06:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   10c08:	4614      	mov	r4, r2
   10c0a:	42b4      	cmp	r4, r6
   10c0c:	eba4 0005 	sub.w	r0, r4, r5
   10c10:	d302      	bcc.n	10c18 <outs+0x1c>
   10c12:	b93e      	cbnz	r6, 10c24 <outs+0x28>
   10c14:	7823      	ldrb	r3, [r4, #0]
   10c16:	b12b      	cbz	r3, 10c24 <outs+0x28>
		int rc = out((int)*sp++, ctx);
   10c18:	4641      	mov	r1, r8
   10c1a:	f814 0b01 	ldrb.w	r0, [r4], #1
   10c1e:	47b8      	blx	r7
		if (rc < 0) {
   10c20:	2800      	cmp	r0, #0
   10c22:	daf2      	bge.n	10c0a <outs+0xe>
}
   10c24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00010c28 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_REBOOT, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   10c28:	4770      	bx	lr

00010c2a <z_platform_init>:
	SystemInit();
   10c2a:	f7fd b8a7 	b.w	dd7c <SystemInit>

00010c2e <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   10c2e:	2300      	movs	r3, #0
	list->head = NULL;
   10c30:	e9c0 3300 	strd	r3, r3, [r0]
}
   10c34:	4770      	bx	lr

00010c36 <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   10c36:	6803      	ldr	r3, [r0, #0]
   10c38:	b923      	cbnz	r3, 10c44 <log_list_add_tail+0xe>
		list->head = msg;
   10c3a:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
   10c3c:	2300      	movs	r3, #0
	list->tail = msg;
   10c3e:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   10c40:	600b      	str	r3, [r1, #0]
}
   10c42:	4770      	bx	lr
		list->tail->next = msg;
   10c44:	6843      	ldr	r3, [r0, #4]
   10c46:	6019      	str	r1, [r3, #0]
   10c48:	e7f8      	b.n	10c3c <log_list_add_tail+0x6>

00010c4a <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   10c4a:	6800      	ldr	r0, [r0, #0]
   10c4c:	4770      	bx	lr

00010c4e <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
   10c4e:	4603      	mov	r3, r0
	struct log_msg *msg = list->head;
   10c50:	6800      	ldr	r0, [r0, #0]

	if (list->head != NULL) {
   10c52:	b108      	cbz	r0, 10c58 <log_list_head_get+0xa>
		list->head = list->head->next;
   10c54:	6802      	ldr	r2, [r0, #0]
   10c56:	601a      	str	r2, [r3, #0]
	}

	return msg;
}
   10c58:	4770      	bx	lr

00010c5a <z_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
   10c5a:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   10c5c:	f7f0 ffc0 	bl	1be0 <log_msg_chunk_alloc>

	if (msg != NULL) {
   10c60:	b118      	cbz	r0, 10c6a <z_log_msg_std_alloc+0x10>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
   10c62:	2301      	movs	r3, #1
   10c64:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   10c66:	2300      	movs	r3, #0
   10c68:	8103      	strh	r3, [r0, #8]
			msg->hdr.ids.source_id = 0;
		}
	}

	return msg;
}
   10c6a:	bd08      	pop	{r3, pc}

00010c6c <k_cycle_get_32_wrapper>:
#ifndef _ASMLANGUAGE
extern uint32_t z_timer_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return z_timer_cycle_get_32();
   10c6c:	f7f2 bef0 	b.w	3a50 <z_timer_cycle_get_32>

00010c70 <dummy_timestamp>:
   10c70:	2000      	movs	r0, #0
   10c72:	4770      	bx	lr

00010c74 <z_log_get_s_mask>:
{
   10c74:	b5f0      	push	{r4, r5, r6, r7, lr}
   10c76:	4605      	mov	r5, r0
	uint32_t mask = 0;
   10c78:	2000      	movs	r0, #0
				mask |= BIT(arg);
   10c7a:	2701      	movs	r7, #1
	uint32_t arg = 0;
   10c7c:	4603      	mov	r3, r0
	bool arm = false;
   10c7e:	4602      	mov	r2, r0
	while ((curr = *str++) && arg < nargs) {
   10c80:	f815 4b01 	ldrb.w	r4, [r5], #1
   10c84:	b10c      	cbz	r4, 10c8a <z_log_get_s_mask+0x16>
   10c86:	428b      	cmp	r3, r1
   10c88:	d300      	bcc.n	10c8c <z_log_get_s_mask+0x18>
}
   10c8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (curr == '%') {
   10c8c:	2c25      	cmp	r4, #37	; 0x25
   10c8e:	d102      	bne.n	10c96 <z_log_get_s_mask+0x22>
			arm = !arm;
   10c90:	f082 0201 	eor.w	r2, r2, #1
   10c94:	e7f4      	b.n	10c80 <z_log_get_s_mask+0xc>
		} else if (arm && isalpha((int)curr)) {
   10c96:	2a00      	cmp	r2, #0
   10c98:	d0f2      	beq.n	10c80 <z_log_get_s_mask+0xc>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   10c9a:	f044 0620 	orr.w	r6, r4, #32
   10c9e:	3e61      	subs	r6, #97	; 0x61
   10ca0:	2e19      	cmp	r6, #25
   10ca2:	d8ed      	bhi.n	10c80 <z_log_get_s_mask+0xc>
			if (curr == 's') {
   10ca4:	2c73      	cmp	r4, #115	; 0x73
				mask |= BIT(arg);
   10ca6:	bf04      	itt	eq
   10ca8:	fa07 f203 	lsleq.w	r2, r7, r3
   10cac:	4310      	orreq	r0, r2
			arg++;
   10cae:	3301      	adds	r3, #1
			arm = false;
   10cb0:	2200      	movs	r2, #0
   10cb2:	e7e5      	b.n	10c80 <z_log_get_s_mask+0xc>

00010cb4 <log_0>:
{
   10cb4:	b538      	push	{r3, r4, r5, lr}
   10cb6:	4605      	mov	r5, r0
   10cb8:	460c      	mov	r4, r1
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
   10cba:	f7ff ffce 	bl	10c5a <z_log_msg_std_alloc>

	if (msg != NULL) {
   10cbe:	b128      	cbz	r0, 10ccc <log_0+0x18>
		msg_finalize(msg, src_level);
   10cc0:	4621      	mov	r1, r4
		msg->str = str;
   10cc2:	6105      	str	r5, [r0, #16]
}
   10cc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		msg_finalize(msg, src_level);
   10cc8:	f7f0 beac 	b.w	1a24 <msg_finalize>
}
   10ccc:	bd38      	pop	{r3, r4, r5, pc}

00010cce <log_1>:
{
   10cce:	b570      	push	{r4, r5, r6, lr}
   10cd0:	4606      	mov	r6, r0
   10cd2:	460d      	mov	r5, r1
   10cd4:	4614      	mov	r4, r2
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   10cd6:	f7ff ffc0 	bl	10c5a <z_log_msg_std_alloc>

	if (msg != NULL) {
   10cda:	b158      	cbz	r0, 10cf4 <log_1+0x26>
		msg->str = str;
		msg->hdr.params.std.nargs = 1U;
   10cdc:	2101      	movs	r1, #1
   10cde:	7a42      	ldrb	r2, [r0, #9]
		msg->str = str;
   10ce0:	6106      	str	r6, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
   10ce2:	f361 1207 	bfi	r2, r1, #4, #4
   10ce6:	7242      	strb	r2, [r0, #9]
		msg_finalize(msg, src_level);
   10ce8:	4621      	mov	r1, r4
		msg->payload.single.args[0] = arg1;
   10cea:	6145      	str	r5, [r0, #20]
}
   10cec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		msg_finalize(msg, src_level);
   10cf0:	f7f0 be98 	b.w	1a24 <msg_finalize>
}
   10cf4:	bd70      	pop	{r4, r5, r6, pc}

00010cf6 <log_2>:
{
   10cf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10cfa:	4680      	mov	r8, r0
   10cfc:	460f      	mov	r7, r1
   10cfe:	4616      	mov	r6, r2
   10d00:	461d      	mov	r5, r3
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   10d02:	f7ff ffaa 	bl	10c5a <z_log_msg_std_alloc>

	if (msg != NULL) {
   10d06:	b168      	cbz	r0, 10d24 <log_2+0x2e>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
   10d08:	2202      	movs	r2, #2
   10d0a:	7a43      	ldrb	r3, [r0, #9]
		msg_finalize(msg, src_level);
   10d0c:	4629      	mov	r1, r5
   10d0e:	f362 1307 	bfi	r3, r2, #4, #4
   10d12:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   10d14:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg->str = str;
   10d18:	f8c0 8010 	str.w	r8, [r0, #16]
}
   10d1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
   10d20:	f7f0 be80 	b.w	1a24 <msg_finalize>
}
   10d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00010d28 <log_3>:
{
   10d28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10d2c:	4680      	mov	r8, r0
   10d2e:	460f      	mov	r7, r1
   10d30:	4616      	mov	r6, r2
   10d32:	461d      	mov	r5, r3
   10d34:	f8bd 9020 	ldrh.w	r9, [sp, #32]
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   10d38:	f7ff ff8f 	bl	10c5a <z_log_msg_std_alloc>

	if (msg != NULL) {
   10d3c:	b170      	cbz	r0, 10d5c <log_3+0x34>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
   10d3e:	2203      	movs	r2, #3
   10d40:	7a43      	ldrb	r3, [r0, #9]
		msg_finalize(msg, src_level);
   10d42:	4649      	mov	r1, r9
   10d44:	f362 1307 	bfi	r3, r2, #4, #4
   10d48:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   10d4a:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg->str = str;
   10d4e:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->payload.single.args[2] = arg3;
   10d52:	61c5      	str	r5, [r0, #28]
}
   10d54:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		msg_finalize(msg, src_level);
   10d58:	f7f0 be64 	b.w	1a24 <msg_finalize>
}
   10d5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00010d60 <log_n>:
{
   10d60:	b510      	push	{r4, lr}
   10d62:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
   10d64:	f000 f899 	bl	10e9a <log_msg_create_n>
		if (msg == NULL) {
   10d68:	b120      	cbz	r0, 10d74 <log_n+0x14>
		msg_finalize(msg, src_level);
   10d6a:	4621      	mov	r1, r4
}
   10d6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   10d70:	f7f0 be58 	b.w	1a24 <msg_finalize>
}
   10d74:	bd10      	pop	{r4, pc}

00010d76 <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    uint8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
   10d76:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10d7a:	461c      	mov	r4, r3
	uint32_t available_len = msg->hdr.params.hexdump.length;
   10d7c:	8903      	ldrh	r3, [r0, #8]
{
   10d7e:	460e      	mov	r6, r1
   10d80:	4611      	mov	r1, r2
	uint32_t available_len = msg->hdr.params.hexdump.length;
   10d82:	f3c3 028d 	ubfx	r2, r3, #2, #14
	uint8_t *head_data;
	uint32_t chunk_len;
	uint32_t req_len;
	uint32_t cpy_len;

	if (offset >= available_len) {
   10d86:	42a2      	cmp	r2, r4
{
   10d88:	f89d 7020 	ldrb.w	r7, [sp, #32]
	if (offset >= available_len) {
   10d8c:	d803      	bhi.n	10d96 <log_msg_hexdump_data_op+0x20>
		*length = 0;
   10d8e:	2300      	movs	r3, #0
   10d90:	600b      	str	r3, [r1, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
   10d92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
   10d96:	680b      	ldr	r3, [r1, #0]
   10d98:	4423      	add	r3, r4
   10d9a:	4293      	cmp	r3, r2
		*length = available_len - offset;
   10d9c:	bf84      	itt	hi
   10d9e:	1b13      	subhi	r3, r2, r4
   10da0:	600b      	strhi	r3, [r1, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   10da2:	2a0c      	cmp	r2, #12
	req_len = *length;
   10da4:	f8d1 9000 	ldr.w	r9, [r1]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   10da8:	d92a      	bls.n	10e00 <log_msg_hexdump_data_op+0x8a>
	if (offset < chunk_len) {
   10daa:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
   10dac:	f8d0 8014 	ldr.w	r8, [r0, #20]
	if (offset < chunk_len) {
   10db0:	d82d      	bhi.n	10e0e <log_msg_hexdump_data_op+0x98>
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   10db2:	2208      	movs	r2, #8
		head_data = msg->payload.ext.data.bytes;
   10db4:	3018      	adds	r0, #24
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   10db6:	454a      	cmp	r2, r9
   10db8:	bf28      	it	cs
   10dba:	464a      	movcs	r2, r9
   10dbc:	4420      	add	r0, r4
   10dbe:	4615      	mov	r5, r2
		if (put_op) {
   10dc0:	b317      	cbz	r7, 10e08 <log_msg_hexdump_data_op+0x92>
			(void)memcpy(&head_data[offset], data, cpy_len);
   10dc2:	4631      	mov	r1, r6
			(void)memcpy(data, &head_data[offset], cpy_len);
   10dc4:	f001 faa9 	bl	1231a <memcpy>
		req_len -= cpy_len;
   10dc8:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   10dcc:	442e      	add	r6, r5
	while ((req_len > 0) && (cont != NULL)) {
   10dce:	f1b9 0f00 	cmp.w	r9, #0
   10dd2:	d0de      	beq.n	10d92 <log_msg_hexdump_data_op+0x1c>
   10dd4:	f1b8 0f00 	cmp.w	r8, #0
   10dd8:	d0db      	beq.n	10d92 <log_msg_hexdump_data_op+0x1c>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
   10dda:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   10dde:	454d      	cmp	r5, r9
   10de0:	bf28      	it	cs
   10de2:	464d      	movcs	r5, r9
		if (put_op) {
   10de4:	1d20      	adds	r0, r4, #4
			(void)memcpy(&cont->payload.bytes[offset],
   10de6:	462a      	mov	r2, r5
   10de8:	4440      	add	r0, r8
		if (put_op) {
   10dea:	b1bf      	cbz	r7, 10e1c <log_msg_hexdump_data_op+0xa6>
			(void)memcpy(&cont->payload.bytes[offset],
   10dec:	4631      	mov	r1, r6
			(void)memcpy(data, &cont->payload.bytes[offset],
   10dee:	f001 fa94 	bl	1231a <memcpy>
		offset = 0;
   10df2:	2400      	movs	r4, #0
		cont = cont->next;
   10df4:	f8d8 8000 	ldr.w	r8, [r8]
		req_len -= cpy_len;
   10df8:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   10dfc:	442e      	add	r6, r5
   10dfe:	e7e6      	b.n	10dce <log_msg_hexdump_data_op+0x58>
	struct log_msg_cont *cont = NULL;
   10e00:	f04f 0800 	mov.w	r8, #0
		head_data = msg->payload.single.bytes;
   10e04:	3014      	adds	r0, #20
	if (offset < chunk_len) {
   10e06:	e7d6      	b.n	10db6 <log_msg_hexdump_data_op+0x40>
			(void)memcpy(data, &head_data[offset], cpy_len);
   10e08:	4601      	mov	r1, r0
   10e0a:	4630      	mov	r0, r6
   10e0c:	e7da      	b.n	10dc4 <log_msg_hexdump_data_op+0x4e>
		offset -= chunk_len;
   10e0e:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
   10e10:	2c1b      	cmp	r4, #27
   10e12:	d9dc      	bls.n	10dce <log_msg_hexdump_data_op+0x58>
			cont = cont->next;
   10e14:	f8d8 8000 	ldr.w	r8, [r8]
			offset -= chunk_len;
   10e18:	3c1c      	subs	r4, #28
   10e1a:	e7f9      	b.n	10e10 <log_msg_hexdump_data_op+0x9a>
			(void)memcpy(data, &cont->payload.bytes[offset],
   10e1c:	4601      	mov	r1, r0
   10e1e:	4630      	mov	r0, r6
   10e20:	e7e5      	b.n	10dee <log_msg_hexdump_data_op+0x78>

00010e22 <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   10e22:	3004      	adds	r0, #4
   10e24:	e8d0 3fef 	ldaex	r3, [r0]
   10e28:	3301      	adds	r3, #1
   10e2a:	e8c0 3fe2 	stlex	r2, r3, [r0]
   10e2e:	2a00      	cmp	r2, #0
   10e30:	d1f8      	bne.n	10e24 <log_msg_get+0x2>
}
   10e32:	4770      	bx	lr

00010e34 <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   10e34:	7a40      	ldrb	r0, [r0, #9]
}
   10e36:	0900      	lsrs	r0, r0, #4
   10e38:	4770      	bx	lr

00010e3a <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
   10e3a:	7a43      	ldrb	r3, [r0, #9]
   10e3c:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
   10e40:	ea4f 1213 	mov.w	r2, r3, lsr #4
   10e44:	d216      	bcs.n	10e74 <log_msg_arg_get+0x3a>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   10e46:	2a03      	cmp	r2, #3
   10e48:	d803      	bhi.n	10e52 <log_msg_arg_get+0x18>
		arg = msg->payload.single.args[arg_idx];
   10e4a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   10e4e:	6948      	ldr	r0, [r1, #20]
   10e50:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   10e52:	2901      	cmp	r1, #1
   10e54:	d803      	bhi.n	10e5e <log_msg_arg_get+0x24>
		return msg->payload.ext.data.args[arg_idx];
   10e56:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   10e5a:	6988      	ldr	r0, [r1, #24]
   10e5c:	4770      	bx	lr
	cont = msg->payload.ext.next;
   10e5e:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   10e60:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
   10e62:	2906      	cmp	r1, #6
   10e64:	d803      	bhi.n	10e6e <log_msg_arg_get+0x34>
	return cont->payload.args[arg_idx];
   10e66:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   10e6a:	6848      	ldr	r0, [r1, #4]
   10e6c:	4770      	bx	lr
		cont = cont->next;
   10e6e:	681b      	ldr	r3, [r3, #0]
		arg_idx -= ARGS_CONT_MSG;
   10e70:	3907      	subs	r1, #7
		cont = cont->next;
   10e72:	e7f6      	b.n	10e62 <log_msg_arg_get+0x28>
		return 0;
   10e74:	2000      	movs	r0, #0
}
   10e76:	4770      	bx	lr

00010e78 <log_msg_put>:
{
   10e78:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   10e7a:	1d02      	adds	r2, r0, #4
   10e7c:	e8d2 1fef 	ldaex	r1, [r2]
   10e80:	3901      	subs	r1, #1
   10e82:	e8c2 1fec 	stlex	ip, r1, [r2]
   10e86:	f1bc 0f00 	cmp.w	ip, #0
   10e8a:	d1f7      	bne.n	10e7c <log_msg_put+0x4>
	if (msg->hdr.ref_cnt == 0) {
   10e8c:	685b      	ldr	r3, [r3, #4]
   10e8e:	b90b      	cbnz	r3, 10e94 <log_msg_put+0x1c>
		msg_free(msg);
   10e90:	f7f0 beba 	b.w	1c08 <msg_free>
}
   10e94:	4770      	bx	lr

00010e96 <log_msg_str_get>:
}
   10e96:	6900      	ldr	r0, [r0, #16]
   10e98:	4770      	bx	lr

00010e9a <log_msg_create_n>:
{
   10e9a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10e9e:	4681      	mov	r9, r0
   10ea0:	4688      	mov	r8, r1
   10ea2:	4615      	mov	r5, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   10ea4:	f7f0 fe9c 	bl	1be0 <log_msg_chunk_alloc>
	if (msg != NULL) {
   10ea8:	4604      	mov	r4, r0
   10eaa:	b330      	cbz	r0, 10efa <log_msg_create_n+0x60>
		msg->hdr.ref_cnt = 1;
   10eac:	2301      	movs	r3, #1
		msg->hdr.params.raw = 0U;
   10eae:	2700      	movs	r7, #0
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   10eb0:	2d03      	cmp	r5, #3
		msg->hdr.ref_cnt = 1;
   10eb2:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   10eb4:	8107      	strh	r7, [r0, #8]
   10eb6:	d909      	bls.n	10ecc <log_msg_create_n+0x32>
	msg->hdr.params.generic.ext = 1;
   10eb8:	2202      	movs	r2, #2
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
   10eba:	f1a5 0a02 	sub.w	sl, r5, #2
	msg->hdr.params.generic.ext = 1;
   10ebe:	8102      	strh	r2, [r0, #8]
	next = &msg->payload.ext.next;
   10ec0:	f100 0b14 	add.w	fp, r0, #20
	*next = NULL;
   10ec4:	6147      	str	r7, [r0, #20]
	while (n > 0) {
   10ec6:	f1ba 0f00 	cmp.w	sl, #0
   10eca:	dc0e      	bgt.n	10eea <log_msg_create_n+0x50>
		msg->hdr.params.std.nargs = nargs;
   10ecc:	7a63      	ldrb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   10ece:	2d03      	cmp	r5, #3
		msg->hdr.params.std.nargs = nargs;
   10ed0:	f365 1307 	bfi	r3, r5, #4, #4
		msg->str = str;
   10ed4:	f8c4 9010 	str.w	r9, [r4, #16]
		msg->hdr.params.std.nargs = nargs;
   10ed8:	7263      	strb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   10eda:	d818      	bhi.n	10f0e <log_msg_create_n+0x74>
		(void)memcpy(msg->payload.single.args, args,
   10edc:	4641      	mov	r1, r8
   10ede:	00aa      	lsls	r2, r5, #2
   10ee0:	f104 0014 	add.w	r0, r4, #20
   10ee4:	f001 fa19 	bl	1231a <memcpy>
	while (nargs != 0U) {
   10ee8:	e007      	b.n	10efa <log_msg_create_n+0x60>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   10eea:	f7f0 fe79 	bl	1be0 <log_msg_chunk_alloc>
		if (cont == NULL) {
   10eee:	4606      	mov	r6, r0
   10ef0:	b930      	cbnz	r0, 10f00 <log_msg_create_n+0x66>
			msg_free(msg);
   10ef2:	4620      	mov	r0, r4
   10ef4:	f7f0 fe88 	bl	1c08 <msg_free>
			return NULL;
   10ef8:	4634      	mov	r4, r6
}
   10efa:	4620      	mov	r0, r4
   10efc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*next = cont;
   10f00:	f8cb 0000 	str.w	r0, [fp]
		cont->next = NULL;
   10f04:	f1aa 0a07 	sub.w	sl, sl, #7
		next = &cont->next;
   10f08:	4683      	mov	fp, r0
		cont->next = NULL;
   10f0a:	6007      	str	r7, [r0, #0]
		n -= ARGS_CONT_MSG;
   10f0c:	e7db      	b.n	10ec6 <log_msg_create_n+0x2c>
		(void)memcpy(msg->payload.ext.data.args, args,
   10f0e:	4641      	mov	r1, r8
   10f10:	2208      	movs	r2, #8
   10f12:	f104 0018 	add.w	r0, r4, #24
	struct log_msg_cont *cont = msg->payload.ext.next;
   10f16:	6967      	ldr	r7, [r4, #20]
		(void)memcpy(msg->payload.ext.data.args, args,
   10f18:	f001 f9ff 	bl	1231a <memcpy>
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
   10f1c:	3d02      	subs	r5, #2
		args += LOG_MSG_NARGS_HEAD_CHUNK;
   10f1e:	f108 0808 	add.w	r8, r8, #8
		uint32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
   10f22:	2d07      	cmp	r5, #7
   10f24:	462e      	mov	r6, r5
   10f26:	bf28      	it	cs
   10f28:	2607      	movcs	r6, #7
		(void)memcpy(cont->payload.args, args,
   10f2a:	ea4f 0986 	mov.w	r9, r6, lsl #2
   10f2e:	4641      	mov	r1, r8
   10f30:	1d38      	adds	r0, r7, #4
   10f32:	464a      	mov	r2, r9
   10f34:	f001 f9f1 	bl	1231a <memcpy>
	while (nargs != 0U) {
   10f38:	1bad      	subs	r5, r5, r6
		cont = cont->next;
   10f3a:	683f      	ldr	r7, [r7, #0]
		args += cpy_args;
   10f3c:	44c8      	add	r8, r9
	while (nargs != 0U) {
   10f3e:	d1f0      	bne.n	10f22 <log_msg_create_n+0x88>
   10f40:	e7db      	b.n	10efa <log_msg_create_n+0x60>

00010f42 <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      uint8_t *data,
			      size_t *length,
			      size_t offset)
{
   10f42:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
   10f44:	2400      	movs	r4, #0
   10f46:	9400      	str	r4, [sp, #0]
   10f48:	f7ff ff15 	bl	10d76 <log_msg_hexdump_data_op>
}
   10f4c:	b002      	add	sp, #8
   10f4e:	bd10      	pop	{r4, pc}

00010f50 <buffer_write>:
{
   10f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10f52:	4606      	mov	r6, r0
   10f54:	460d      	mov	r5, r1
   10f56:	4614      	mov	r4, r2
   10f58:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   10f5a:	4621      	mov	r1, r4
   10f5c:	4628      	mov	r0, r5
   10f5e:	463a      	mov	r2, r7
   10f60:	47b0      	blx	r6
	} while (len != 0);
   10f62:	1a24      	subs	r4, r4, r0
		buf += processed;
   10f64:	4405      	add	r5, r0
	} while (len != 0);
   10f66:	d1f8      	bne.n	10f5a <buffer_write+0xa>
}
   10f68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00010f6a <std_print>:
{
   10f6a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10f6e:	b08e      	sub	sp, #56	; 0x38
   10f70:	af0e      	add	r7, sp, #56	; 0x38
   10f72:	4680      	mov	r8, r0
   10f74:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
   10f76:	f7ff ff8e 	bl	10e96 <log_msg_str_get>
   10f7a:	4606      	mov	r6, r0
	uint32_t nargs = log_msg_nargs_get(msg);
   10f7c:	4640      	mov	r0, r8
   10f7e:	f7ff ff59 	bl	10e34 <log_msg_nargs_get>
	for (i = 0; i < nargs; i++) {
   10f82:	f04f 0900 	mov.w	r9, #0
	uint32_t nargs = log_msg_nargs_get(msg);
   10f86:	4682      	mov	sl, r0
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
   10f88:	0083      	lsls	r3, r0, #2
   10f8a:	3307      	adds	r3, #7
   10f8c:	f023 0307 	bic.w	r3, r3, #7
   10f90:	ebad 0d03 	sub.w	sp, sp, r3
   10f94:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
   10f96:	45d1      	cmp	r9, sl
   10f98:	d116      	bne.n	10fc8 <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
   10f9a:	4640      	mov	r0, r8
   10f9c:	f7ff ff4a 	bl	10e34 <log_msg_nargs_get>
   10fa0:	280f      	cmp	r0, #15
   10fa2:	d81e      	bhi.n	10fe2 <std_print+0x78>
   10fa4:	e8df f010 	tbh	[pc, r0, lsl #1]
   10fa8:	00200019 	.word	0x00200019
   10fac:	002d0026 	.word	0x002d0026
   10fb0:	00410036 	.word	0x00410036
   10fb4:	005d004e 	.word	0x005d004e
   10fb8:	0081006e 	.word	0x0081006e
   10fbc:	00ad0096 	.word	0x00ad0096
   10fc0:	00e100c6 	.word	0x00e100c6
   10fc4:	011d00fe 	.word	0x011d00fe
		args[i] = log_msg_arg_get(msg, i);
   10fc8:	4649      	mov	r1, r9
   10fca:	4640      	mov	r0, r8
   10fcc:	f7ff ff35 	bl	10e3a <log_msg_arg_get>
   10fd0:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
	for (i = 0; i < nargs; i++) {
   10fd4:	f109 0901 	add.w	r9, r9, #1
   10fd8:	e7dd      	b.n	10f96 <std_print+0x2c>
		print_formatted(log_output, str);
   10fda:	4631      	mov	r1, r6
   10fdc:	4628      	mov	r0, r5
   10fde:	f7f0 fe51 	bl	1c84 <print_formatted>
}
   10fe2:	46bd      	mov	sp, r7
   10fe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, str, args[0]);
   10fe8:	4631      	mov	r1, r6
   10fea:	4628      	mov	r0, r5
   10fec:	6822      	ldr	r2, [r4, #0]
   10fee:	f7f0 fe49 	bl	1c84 <print_formatted>
		break;
   10ff2:	e7f6      	b.n	10fe2 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1]);
   10ff4:	4631      	mov	r1, r6
   10ff6:	e9d4 2300 	ldrd	r2, r3, [r4]
   10ffa:	4628      	mov	r0, r5
   10ffc:	f7f0 fe42 	bl	1c84 <print_formatted>
		break;
   11000:	e7ef      	b.n	10fe2 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2]);
   11002:	68a3      	ldr	r3, [r4, #8]
   11004:	4631      	mov	r1, r6
   11006:	9300      	str	r3, [sp, #0]
   11008:	4628      	mov	r0, r5
   1100a:	e9d4 2300 	ldrd	r2, r3, [r4]
   1100e:	f7f0 fe39 	bl	1c84 <print_formatted>
		break;
   11012:	e7e6      	b.n	10fe2 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   11014:	68e3      	ldr	r3, [r4, #12]
   11016:	4631      	mov	r1, r6
   11018:	9301      	str	r3, [sp, #4]
   1101a:	68a3      	ldr	r3, [r4, #8]
   1101c:	4628      	mov	r0, r5
   1101e:	9300      	str	r3, [sp, #0]
   11020:	e9d4 2300 	ldrd	r2, r3, [r4]
   11024:	f7f0 fe2e 	bl	1c84 <print_formatted>
		break;
   11028:	e7db      	b.n	10fe2 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1102a:	6923      	ldr	r3, [r4, #16]
   1102c:	4631      	mov	r1, r6
   1102e:	9302      	str	r3, [sp, #8]
   11030:	68e3      	ldr	r3, [r4, #12]
   11032:	4628      	mov	r0, r5
   11034:	9301      	str	r3, [sp, #4]
   11036:	68a3      	ldr	r3, [r4, #8]
   11038:	9300      	str	r3, [sp, #0]
   1103a:	e9d4 2300 	ldrd	r2, r3, [r4]
   1103e:	f7f0 fe21 	bl	1c84 <print_formatted>
		break;
   11042:	e7ce      	b.n	10fe2 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   11044:	6963      	ldr	r3, [r4, #20]
   11046:	4631      	mov	r1, r6
   11048:	9303      	str	r3, [sp, #12]
   1104a:	6923      	ldr	r3, [r4, #16]
   1104c:	4628      	mov	r0, r5
   1104e:	9302      	str	r3, [sp, #8]
   11050:	68e3      	ldr	r3, [r4, #12]
   11052:	9301      	str	r3, [sp, #4]
   11054:	68a3      	ldr	r3, [r4, #8]
   11056:	9300      	str	r3, [sp, #0]
   11058:	e9d4 2300 	ldrd	r2, r3, [r4]
   1105c:	f7f0 fe12 	bl	1c84 <print_formatted>
		break;
   11060:	e7bf      	b.n	10fe2 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   11062:	69a3      	ldr	r3, [r4, #24]
   11064:	4631      	mov	r1, r6
   11066:	9304      	str	r3, [sp, #16]
   11068:	6963      	ldr	r3, [r4, #20]
   1106a:	4628      	mov	r0, r5
   1106c:	9303      	str	r3, [sp, #12]
   1106e:	6923      	ldr	r3, [r4, #16]
   11070:	9302      	str	r3, [sp, #8]
   11072:	68e3      	ldr	r3, [r4, #12]
   11074:	9301      	str	r3, [sp, #4]
   11076:	68a3      	ldr	r3, [r4, #8]
   11078:	9300      	str	r3, [sp, #0]
   1107a:	e9d4 2300 	ldrd	r2, r3, [r4]
   1107e:	f7f0 fe01 	bl	1c84 <print_formatted>
		break;
   11082:	e7ae      	b.n	10fe2 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   11084:	69e3      	ldr	r3, [r4, #28]
   11086:	4631      	mov	r1, r6
   11088:	9305      	str	r3, [sp, #20]
   1108a:	69a3      	ldr	r3, [r4, #24]
   1108c:	4628      	mov	r0, r5
   1108e:	9304      	str	r3, [sp, #16]
   11090:	6963      	ldr	r3, [r4, #20]
   11092:	9303      	str	r3, [sp, #12]
   11094:	6923      	ldr	r3, [r4, #16]
   11096:	9302      	str	r3, [sp, #8]
   11098:	68e3      	ldr	r3, [r4, #12]
   1109a:	9301      	str	r3, [sp, #4]
   1109c:	68a3      	ldr	r3, [r4, #8]
   1109e:	9300      	str	r3, [sp, #0]
   110a0:	e9d4 2300 	ldrd	r2, r3, [r4]
   110a4:	f7f0 fdee 	bl	1c84 <print_formatted>
		break;
   110a8:	e79b      	b.n	10fe2 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   110aa:	6a23      	ldr	r3, [r4, #32]
   110ac:	4631      	mov	r1, r6
   110ae:	9306      	str	r3, [sp, #24]
   110b0:	69e3      	ldr	r3, [r4, #28]
   110b2:	4628      	mov	r0, r5
   110b4:	9305      	str	r3, [sp, #20]
   110b6:	69a3      	ldr	r3, [r4, #24]
   110b8:	9304      	str	r3, [sp, #16]
   110ba:	6963      	ldr	r3, [r4, #20]
   110bc:	9303      	str	r3, [sp, #12]
   110be:	6923      	ldr	r3, [r4, #16]
   110c0:	9302      	str	r3, [sp, #8]
   110c2:	68e3      	ldr	r3, [r4, #12]
   110c4:	9301      	str	r3, [sp, #4]
   110c6:	68a3      	ldr	r3, [r4, #8]
   110c8:	9300      	str	r3, [sp, #0]
   110ca:	e9d4 2300 	ldrd	r2, r3, [r4]
   110ce:	f7f0 fdd9 	bl	1c84 <print_formatted>
		break;
   110d2:	e786      	b.n	10fe2 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   110d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   110d6:	4631      	mov	r1, r6
   110d8:	9307      	str	r3, [sp, #28]
   110da:	6a23      	ldr	r3, [r4, #32]
   110dc:	4628      	mov	r0, r5
   110de:	9306      	str	r3, [sp, #24]
   110e0:	69e3      	ldr	r3, [r4, #28]
   110e2:	9305      	str	r3, [sp, #20]
   110e4:	69a3      	ldr	r3, [r4, #24]
   110e6:	9304      	str	r3, [sp, #16]
   110e8:	6963      	ldr	r3, [r4, #20]
   110ea:	9303      	str	r3, [sp, #12]
   110ec:	6923      	ldr	r3, [r4, #16]
   110ee:	9302      	str	r3, [sp, #8]
   110f0:	68e3      	ldr	r3, [r4, #12]
   110f2:	9301      	str	r3, [sp, #4]
   110f4:	68a3      	ldr	r3, [r4, #8]
   110f6:	9300      	str	r3, [sp, #0]
   110f8:	e9d4 2300 	ldrd	r2, r3, [r4]
   110fc:	f7f0 fdc2 	bl	1c84 <print_formatted>
		break;
   11100:	e76f      	b.n	10fe2 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   11102:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   11104:	4631      	mov	r1, r6
   11106:	9308      	str	r3, [sp, #32]
   11108:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1110a:	4628      	mov	r0, r5
   1110c:	9307      	str	r3, [sp, #28]
   1110e:	6a23      	ldr	r3, [r4, #32]
   11110:	9306      	str	r3, [sp, #24]
   11112:	69e3      	ldr	r3, [r4, #28]
   11114:	9305      	str	r3, [sp, #20]
   11116:	69a3      	ldr	r3, [r4, #24]
   11118:	9304      	str	r3, [sp, #16]
   1111a:	6963      	ldr	r3, [r4, #20]
   1111c:	9303      	str	r3, [sp, #12]
   1111e:	6923      	ldr	r3, [r4, #16]
   11120:	9302      	str	r3, [sp, #8]
   11122:	68e3      	ldr	r3, [r4, #12]
   11124:	9301      	str	r3, [sp, #4]
   11126:	68a3      	ldr	r3, [r4, #8]
   11128:	9300      	str	r3, [sp, #0]
   1112a:	e9d4 2300 	ldrd	r2, r3, [r4]
   1112e:	f7f0 fda9 	bl	1c84 <print_formatted>
		break;
   11132:	e756      	b.n	10fe2 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   11134:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   11136:	4631      	mov	r1, r6
   11138:	9309      	str	r3, [sp, #36]	; 0x24
   1113a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1113c:	4628      	mov	r0, r5
   1113e:	9308      	str	r3, [sp, #32]
   11140:	6a63      	ldr	r3, [r4, #36]	; 0x24
   11142:	9307      	str	r3, [sp, #28]
   11144:	6a23      	ldr	r3, [r4, #32]
   11146:	9306      	str	r3, [sp, #24]
   11148:	69e3      	ldr	r3, [r4, #28]
   1114a:	9305      	str	r3, [sp, #20]
   1114c:	69a3      	ldr	r3, [r4, #24]
   1114e:	9304      	str	r3, [sp, #16]
   11150:	6963      	ldr	r3, [r4, #20]
   11152:	9303      	str	r3, [sp, #12]
   11154:	6923      	ldr	r3, [r4, #16]
   11156:	9302      	str	r3, [sp, #8]
   11158:	68e3      	ldr	r3, [r4, #12]
   1115a:	9301      	str	r3, [sp, #4]
   1115c:	68a3      	ldr	r3, [r4, #8]
   1115e:	9300      	str	r3, [sp, #0]
   11160:	e9d4 2300 	ldrd	r2, r3, [r4]
   11164:	f7f0 fd8e 	bl	1c84 <print_formatted>
		break;
   11168:	e73b      	b.n	10fe2 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1116a:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1116c:	4631      	mov	r1, r6
   1116e:	930a      	str	r3, [sp, #40]	; 0x28
   11170:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   11172:	4628      	mov	r0, r5
   11174:	9309      	str	r3, [sp, #36]	; 0x24
   11176:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   11178:	9308      	str	r3, [sp, #32]
   1117a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1117c:	9307      	str	r3, [sp, #28]
   1117e:	6a23      	ldr	r3, [r4, #32]
   11180:	9306      	str	r3, [sp, #24]
   11182:	69e3      	ldr	r3, [r4, #28]
   11184:	9305      	str	r3, [sp, #20]
   11186:	69a3      	ldr	r3, [r4, #24]
   11188:	9304      	str	r3, [sp, #16]
   1118a:	6963      	ldr	r3, [r4, #20]
   1118c:	9303      	str	r3, [sp, #12]
   1118e:	6923      	ldr	r3, [r4, #16]
   11190:	9302      	str	r3, [sp, #8]
   11192:	68e3      	ldr	r3, [r4, #12]
   11194:	9301      	str	r3, [sp, #4]
   11196:	68a3      	ldr	r3, [r4, #8]
   11198:	9300      	str	r3, [sp, #0]
   1119a:	e9d4 2300 	ldrd	r2, r3, [r4]
   1119e:	f7f0 fd71 	bl	1c84 <print_formatted>
		break;
   111a2:	e71e      	b.n	10fe2 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   111a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
   111a6:	4631      	mov	r1, r6
   111a8:	930b      	str	r3, [sp, #44]	; 0x2c
   111aa:	6b23      	ldr	r3, [r4, #48]	; 0x30
   111ac:	4628      	mov	r0, r5
   111ae:	930a      	str	r3, [sp, #40]	; 0x28
   111b0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   111b2:	9309      	str	r3, [sp, #36]	; 0x24
   111b4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   111b6:	9308      	str	r3, [sp, #32]
   111b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   111ba:	9307      	str	r3, [sp, #28]
   111bc:	6a23      	ldr	r3, [r4, #32]
   111be:	9306      	str	r3, [sp, #24]
   111c0:	69e3      	ldr	r3, [r4, #28]
   111c2:	9305      	str	r3, [sp, #20]
   111c4:	69a3      	ldr	r3, [r4, #24]
   111c6:	9304      	str	r3, [sp, #16]
   111c8:	6963      	ldr	r3, [r4, #20]
   111ca:	9303      	str	r3, [sp, #12]
   111cc:	6923      	ldr	r3, [r4, #16]
   111ce:	9302      	str	r3, [sp, #8]
   111d0:	68e3      	ldr	r3, [r4, #12]
   111d2:	9301      	str	r3, [sp, #4]
   111d4:	68a3      	ldr	r3, [r4, #8]
   111d6:	9300      	str	r3, [sp, #0]
   111d8:	e9d4 2300 	ldrd	r2, r3, [r4]
   111dc:	f7f0 fd52 	bl	1c84 <print_formatted>
		break;
   111e0:	e6ff      	b.n	10fe2 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   111e2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   111e4:	4631      	mov	r1, r6
   111e6:	930c      	str	r3, [sp, #48]	; 0x30
   111e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
   111ea:	4628      	mov	r0, r5
   111ec:	930b      	str	r3, [sp, #44]	; 0x2c
   111ee:	6b23      	ldr	r3, [r4, #48]	; 0x30
   111f0:	930a      	str	r3, [sp, #40]	; 0x28
   111f2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   111f4:	9309      	str	r3, [sp, #36]	; 0x24
   111f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   111f8:	9308      	str	r3, [sp, #32]
   111fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
   111fc:	9307      	str	r3, [sp, #28]
   111fe:	6a23      	ldr	r3, [r4, #32]
   11200:	9306      	str	r3, [sp, #24]
   11202:	69e3      	ldr	r3, [r4, #28]
   11204:	9305      	str	r3, [sp, #20]
   11206:	69a3      	ldr	r3, [r4, #24]
   11208:	9304      	str	r3, [sp, #16]
   1120a:	6963      	ldr	r3, [r4, #20]
   1120c:	9303      	str	r3, [sp, #12]
   1120e:	6923      	ldr	r3, [r4, #16]
   11210:	9302      	str	r3, [sp, #8]
   11212:	68e3      	ldr	r3, [r4, #12]
   11214:	9301      	str	r3, [sp, #4]
   11216:	68a3      	ldr	r3, [r4, #8]
   11218:	9300      	str	r3, [sp, #0]
   1121a:	e9d4 2300 	ldrd	r2, r3, [r4]
   1121e:	f7f0 fd31 	bl	1c84 <print_formatted>
}
   11222:	e6de      	b.n	10fe2 <std_print+0x78>

00011224 <log_output_flush>:
		     log_output->control_block->offset,
   11224:	6842      	ldr	r2, [r0, #4]
{
   11226:	b510      	push	{r4, lr}
	buffer_write(log_output->func, log_output->buf,
   11228:	e9d2 2300 	ldrd	r2, r3, [r2]
{
   1122c:	4604      	mov	r4, r0
	buffer_write(log_output->func, log_output->buf,
   1122e:	6881      	ldr	r1, [r0, #8]
   11230:	6800      	ldr	r0, [r0, #0]
   11232:	f7ff fe8d 	bl	10f50 <buffer_write>
	log_output->control_block->offset = 0;
   11236:	2200      	movs	r2, #0
   11238:	6863      	ldr	r3, [r4, #4]
   1123a:	601a      	str	r2, [r3, #0]
}
   1123c:	bd10      	pop	{r4, pc}

0001123e <out_func>:
{
   1123e:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   11240:	684b      	ldr	r3, [r1, #4]
{
   11242:	4605      	mov	r5, r0
	if (out_ctx->control_block->offset == out_ctx->size) {
   11244:	681a      	ldr	r2, [r3, #0]
   11246:	68cb      	ldr	r3, [r1, #12]
{
   11248:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   1124a:	429a      	cmp	r2, r3
   1124c:	d102      	bne.n	11254 <out_func+0x16>
		log_output_flush(out_ctx);
   1124e:	4608      	mov	r0, r1
   11250:	f7ff ffe8 	bl	11224 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   11254:	6863      	ldr	r3, [r4, #4]
   11256:	e8d3 2fef 	ldaex	r2, [r3]
   1125a:	1c51      	adds	r1, r2, #1
   1125c:	e8c3 1fe0 	stlex	r0, r1, [r3]
   11260:	2800      	cmp	r0, #0
   11262:	d1f8      	bne.n	11256 <out_func+0x18>
	out_ctx->buf[idx] = (uint8_t)c;
   11264:	68a3      	ldr	r3, [r4, #8]
}
   11266:	2000      	movs	r0, #0
	out_ctx->buf[idx] = (uint8_t)c;
   11268:	549d      	strb	r5, [r3, r2]
}
   1126a:	bd38      	pop	{r3, r4, r5, pc}

0001126c <read_str>:
{
   1126c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   11270:	f8d1 800c 	ldr.w	r8, [r1, #12]
{
   11274:	4605      	mov	r5, r0
				 strlen(attr->user_data));
   11276:	4640      	mov	r0, r8
{
   11278:	461f      	mov	r7, r3
   1127a:	460c      	mov	r4, r1
   1127c:	4616      	mov	r6, r2
				 strlen(attr->user_data));
   1127e:	f001 f811 	bl	122a4 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   11282:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   11286:	b280      	uxth	r0, r0
   11288:	e9cd 8001 	strd	r8, r0, [sp, #4]
   1128c:	9300      	str	r3, [sp, #0]
   1128e:	4632      	mov	r2, r6
   11290:	463b      	mov	r3, r7
   11292:	4621      	mov	r1, r4
   11294:	4628      	mov	r0, r5
   11296:	f002 fa28 	bl	136ea <bt_gatt_attr_read>
}
   1129a:	b004      	add	sp, #16
   1129c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000112a0 <flash_write_protection_set>:
	return api->write_protection(dev, enable);
   112a0:	6883      	ldr	r3, [r0, #8]
   112a2:	68db      	ldr	r3, [r3, #12]
   112a4:	4718      	bx	r3

000112a6 <nvs_flash_rd>:
{
   112a6:	b470      	push	{r4, r5, r6}
	offset += addr & ADDR_OFFS_MASK;
   112a8:	6806      	ldr	r6, [r0, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   112aa:	8984      	ldrh	r4, [r0, #12]
   112ac:	0c0d      	lsrs	r5, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   112ae:	fa16 f181 	uxtah	r1, r6, r1
   112b2:	fb05 1104 	mla	r1, r5, r4, r1
	rc = flash_read(fs->flash_device, offset, data, len);
   112b6:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return api->read(dev, offset, data, len);
   112b8:	6884      	ldr	r4, [r0, #8]
   112ba:	6824      	ldr	r4, [r4, #0]
   112bc:	46a4      	mov	ip, r4
}
   112be:	bc70      	pop	{r4, r5, r6}
   112c0:	4760      	bx	ip

000112c2 <nvs_flash_block_cmp>:
{
   112c2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   112c6:	4681      	mov	r9, r0
   112c8:	460e      	mov	r6, r1
   112ca:	4617      	mov	r7, r2
   112cc:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   112ce:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
{
   112d0:	b089      	sub	sp, #36	; 0x24
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   112d2:	681d      	ldr	r5, [r3, #0]
   112d4:	426d      	negs	r5, r5
	block_size =
   112d6:	f005 0520 	and.w	r5, r5, #32
	while (len) {
   112da:	b91c      	cbnz	r4, 112e4 <nvs_flash_block_cmp+0x22>
	return 0;
   112dc:	4620      	mov	r0, r4
}
   112de:	b009      	add	sp, #36	; 0x24
   112e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bytes_to_cmp = MIN(block_size, len);
   112e4:	42ac      	cmp	r4, r5
   112e6:	46a0      	mov	r8, r4
   112e8:	bf28      	it	cs
   112ea:	46a8      	movcs	r8, r5
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_cmp);
   112ec:	466a      	mov	r2, sp
   112ee:	4643      	mov	r3, r8
   112f0:	4631      	mov	r1, r6
   112f2:	4648      	mov	r0, r9
   112f4:	f7ff ffd7 	bl	112a6 <nvs_flash_rd>
		if (rc) {
   112f8:	2800      	cmp	r0, #0
   112fa:	d1f0      	bne.n	112de <nvs_flash_block_cmp+0x1c>
		rc = memcmp(data8, buf, bytes_to_cmp);
   112fc:	4642      	mov	r2, r8
   112fe:	4669      	mov	r1, sp
   11300:	4638      	mov	r0, r7
   11302:	f000 fffa 	bl	122fa <memcmp>
		if (rc) {
   11306:	b920      	cbnz	r0, 11312 <nvs_flash_block_cmp+0x50>
		len -= bytes_to_cmp;
   11308:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   1130c:	4446      	add	r6, r8
		data8 += bytes_to_cmp;
   1130e:	4447      	add	r7, r8
   11310:	e7e3      	b.n	112da <nvs_flash_block_cmp+0x18>
			return 1;
   11312:	2001      	movs	r0, #1
   11314:	e7e3      	b.n	112de <nvs_flash_block_cmp+0x1c>

00011316 <nvs_flash_cmp_const>:
{
   11316:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1131a:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   1131c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
{
   1131e:	b088      	sub	sp, #32
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   11320:	681d      	ldr	r5, [r3, #0]
{
   11322:	4607      	mov	r7, r0
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   11324:	426d      	negs	r5, r5
	block_size =
   11326:	f005 0520 	and.w	r5, r5, #32
{
   1132a:	460e      	mov	r6, r1
	(void)memset(cmp, value, block_size);
   1132c:	4668      	mov	r0, sp
{
   1132e:	4611      	mov	r1, r2
	(void)memset(cmp, value, block_size);
   11330:	462a      	mov	r2, r5
   11332:	f001 f81d 	bl	12370 <memset>
	while (len) {
   11336:	b91c      	cbnz	r4, 11340 <nvs_flash_cmp_const+0x2a>
	return 0;
   11338:	4620      	mov	r0, r4
}
   1133a:	b008      	add	sp, #32
   1133c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bytes_to_cmp = MIN(block_size, len);
   11340:	42ac      	cmp	r4, r5
   11342:	46a0      	mov	r8, r4
   11344:	bf28      	it	cs
   11346:	46a8      	movcs	r8, r5
		rc = nvs_flash_block_cmp(fs, addr, cmp, bytes_to_cmp);
   11348:	466a      	mov	r2, sp
   1134a:	4643      	mov	r3, r8
   1134c:	4631      	mov	r1, r6
   1134e:	4638      	mov	r0, r7
   11350:	f7ff ffb7 	bl	112c2 <nvs_flash_block_cmp>
		if (rc) {
   11354:	2800      	cmp	r0, #0
   11356:	d1f0      	bne.n	1133a <nvs_flash_cmp_const+0x24>
		len -= bytes_to_cmp;
   11358:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   1135c:	4446      	add	r6, r8
   1135e:	e7ea      	b.n	11336 <nvs_flash_cmp_const+0x20>

00011360 <nvs_ate_crc8_check>:
{
   11360:	b510      	push	{r4, lr}
   11362:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   11364:	4601      	mov	r1, r0
   11366:	2207      	movs	r2, #7
   11368:	20ff      	movs	r0, #255	; 0xff
   1136a:	f7ef fc21 	bl	bb0 <crc8_ccitt>
	if (crc8 == entry->crc8) {
   1136e:	79e3      	ldrb	r3, [r4, #7]
}
   11370:	1a18      	subs	r0, r3, r0
   11372:	bf18      	it	ne
   11374:	2001      	movne	r0, #1
   11376:	bd10      	pop	{r4, pc}

00011378 <nvs_ate_crc8_update>:
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   11378:	4601      	mov	r1, r0
{
   1137a:	b510      	push	{r4, lr}
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   1137c:	2207      	movs	r2, #7
{
   1137e:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   11380:	20ff      	movs	r0, #255	; 0xff
   11382:	f7ef fc15 	bl	bb0 <crc8_ccitt>
	entry->crc8 = crc8;
   11386:	71e0      	strb	r0, [r4, #7]
}
   11388:	bd10      	pop	{r4, pc}

0001138a <nvs_al_size.isra.0>:
	if (write_block_size <= 1U) {
   1138a:	7800      	ldrb	r0, [r0, #0]
   1138c:	2801      	cmp	r0, #1
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   1138e:	bf81      	itttt	hi
   11390:	1809      	addhi	r1, r1, r0
   11392:	f101 31ff 	addhi.w	r1, r1, #4294967295
   11396:	4240      	neghi	r0, r0
   11398:	4001      	andhi	r1, r0
}
   1139a:	4608      	mov	r0, r1
   1139c:	4770      	bx	lr

0001139e <nvs_sector_advance.isra.0>:
	*addr += (1 << ADDR_SECT_SHIFT);
   1139e:	680b      	ldr	r3, [r1, #0]
   113a0:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
	if ((*addr >> ADDR_SECT_SHIFT) == fs->sector_count) {
   113a4:	0c1a      	lsrs	r2, r3, #16
   113a6:	ebb0 4f13 	cmp.w	r0, r3, lsr #16
		*addr -= (fs->sector_count << ADDR_SECT_SHIFT);
   113aa:	bf08      	it	eq
   113ac:	eba3 4302 	subeq.w	r3, r3, r2, lsl #16
   113b0:	600b      	str	r3, [r1, #0]
}
   113b2:	4770      	bx	lr

000113b4 <nvs_flash_erase_sector>:
{
   113b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	rc = nvs_flash_cmp_const(fs, addr, fs->flash_parameters->erase_value,
   113b8:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
	addr &= ADDR_SECT_MASK;
   113ba:	0c0e      	lsrs	r6, r1, #16
   113bc:	0436      	lsls	r6, r6, #16
	rc = nvs_flash_cmp_const(fs, addr, fs->flash_parameters->erase_value,
   113be:	4631      	mov	r1, r6
   113c0:	8983      	ldrh	r3, [r0, #12]
   113c2:	7912      	ldrb	r2, [r2, #4]
{
   113c4:	4605      	mov	r5, r0
	rc = nvs_flash_cmp_const(fs, addr, fs->flash_parameters->erase_value,
   113c6:	f7ff ffa6 	bl	11316 <nvs_flash_cmp_const>
	if (rc <= 0) {
   113ca:	1e04      	subs	r4, r0, #0
   113cc:	dd17      	ble.n	113fe <nvs_flash_erase_sector+0x4a>
	rc = flash_write_protection_set(fs->flash_device, false);
   113ce:	2100      	movs	r1, #0
   113d0:	6aa8      	ldr	r0, [r5, #40]	; 0x28
	offset = fs->offset;
   113d2:	682f      	ldr	r7, [r5, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   113d4:	f8b5 800c 	ldrh.w	r8, [r5, #12]
	rc = flash_write_protection_set(fs->flash_device, false);
   113d8:	f7ff ff62 	bl	112a0 <flash_write_protection_set>
	if (rc) {
   113dc:	4604      	mov	r4, r0
   113de:	b970      	cbnz	r0, 113fe <nvs_flash_erase_sector+0x4a>
	rc = flash_erase(fs->flash_device, offset, fs->sector_size);
   113e0:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   113e2:	89aa      	ldrh	r2, [r5, #12]
	return api->erase(dev, offset, size);
   113e4:	6883      	ldr	r3, [r0, #8]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   113e6:	0c31      	lsrs	r1, r6, #16
   113e8:	fb08 7101 	mla	r1, r8, r1, r7
   113ec:	689b      	ldr	r3, [r3, #8]
   113ee:	4798      	blx	r3
	if (rc) {
   113f0:	4604      	mov	r4, r0
   113f2:	b920      	cbnz	r0, 113fe <nvs_flash_erase_sector+0x4a>
	(void) flash_write_protection_set(fs->flash_device, true);
   113f4:	6aa8      	ldr	r0, [r5, #40]	; 0x28
	return api->write_protection(dev, enable);
   113f6:	6883      	ldr	r3, [r0, #8]
   113f8:	2101      	movs	r1, #1
   113fa:	68db      	ldr	r3, [r3, #12]
   113fc:	4798      	blx	r3
}
   113fe:	4620      	mov	r0, r4
   11400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00011404 <nvs_prev_ate>:
{
   11404:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   11406:	4604      	mov	r4, r0
   11408:	460d      	mov	r5, r1
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   1140a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   1140c:	2108      	movs	r1, #8
   1140e:	f7ff ffbc 	bl	1138a <nvs_al_size.isra.0>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   11412:	2308      	movs	r3, #8
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   11414:	4606      	mov	r6, r0
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   11416:	6829      	ldr	r1, [r5, #0]
   11418:	4620      	mov	r0, r4
   1141a:	f7ff ff44 	bl	112a6 <nvs_flash_rd>
	if (rc) {
   1141e:	2800      	cmp	r0, #0
   11420:	d13e      	bne.n	114a0 <nvs_prev_ate+0x9c>
	*addr += ate_size;
   11422:	682b      	ldr	r3, [r5, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   11424:	89a2      	ldrh	r2, [r4, #12]
	*addr += ate_size;
   11426:	4433      	add	r3, r6
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   11428:	b299      	uxth	r1, r3
   1142a:	1b92      	subs	r2, r2, r6
   1142c:	4291      	cmp	r1, r2
	*addr += ate_size;
   1142e:	602b      	str	r3, [r5, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   11430:	d136      	bne.n	114a0 <nvs_prev_ate+0x9c>
	if (((*addr) >> ADDR_SECT_SHIFT) == 0U) {
   11432:	0c1a      	lsrs	r2, r3, #16
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
   11434:	bf09      	itett	eq
   11436:	89e1      	ldrheq	r1, [r4, #14]
		*addr -= (1 << ADDR_SECT_SHIFT);
   11438:	f5a3 3180 	subne.w	r1, r3, #65536	; 0x10000
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
   1143c:	f101 31ff 	addeq.w	r1, r1, #4294967295
   11440:	eb03 4101 	addeq.w	r1, r3, r1, lsl #16
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   11444:	466a      	mov	r2, sp
   11446:	2308      	movs	r3, #8
   11448:	4620      	mov	r0, r4
   1144a:	6029      	str	r1, [r5, #0]
   1144c:	f7ff ff2b 	bl	112a6 <nvs_flash_rd>
	if (rc) {
   11450:	bb30      	cbnz	r0, 114a0 <nvs_prev_ate+0x9c>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   11452:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   11454:	466a      	mov	r2, sp
   11456:	7919      	ldrb	r1, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   11458:	4603      	mov	r3, r0
		if (data8[i] != value) {
   1145a:	f812 7b01 	ldrb.w	r7, [r2], #1
   1145e:	42b9      	cmp	r1, r7
   11460:	d115      	bne.n	1148e <nvs_prev_ate+0x8a>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   11462:	3301      	adds	r3, #1
   11464:	2b08      	cmp	r3, #8
   11466:	d1f8      	bne.n	1145a <nvs_prev_ate+0x56>
		*addr = fs->ate_wra;
   11468:	6863      	ldr	r3, [r4, #4]
   1146a:	e00e      	b.n	1148a <nvs_prev_ate+0x86>
		if (close_ate.offset < (fs->sector_size - ate_size) &&
   1146c:	89a3      	ldrh	r3, [r4, #12]
   1146e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   11472:	1b9b      	subs	r3, r3, r6
   11474:	429a      	cmp	r2, r3
   11476:	d20f      	bcs.n	11498 <nvs_prev_ate+0x94>
		    !(close_ate.offset % ate_size)) {
   11478:	fbb2 f3f6 	udiv	r3, r2, r6
   1147c:	fb06 2613 	mls	r6, r6, r3, r2
		if (close_ate.offset < (fs->sector_size - ate_size) &&
   11480:	b956      	cbnz	r6, 11498 <nvs_prev_ate+0x94>
			(*addr) &= ADDR_SECT_MASK;
   11482:	682b      	ldr	r3, [r5, #0]
   11484:	0c1b      	lsrs	r3, r3, #16
   11486:	041b      	lsls	r3, r3, #16
			(*addr) += close_ate.offset;
   11488:	4413      	add	r3, r2
		*addr = fs->ate_wra;
   1148a:	602b      	str	r3, [r5, #0]
		return 0;
   1148c:	e008      	b.n	114a0 <nvs_prev_ate+0x9c>
	if (!nvs_ate_crc8_check(&close_ate)) {
   1148e:	4668      	mov	r0, sp
   11490:	f7ff ff66 	bl	11360 <nvs_ate_crc8_check>
   11494:	2800      	cmp	r0, #0
   11496:	d0e9      	beq.n	1146c <nvs_prev_ate+0x68>
	return nvs_recover_last_ate(fs, addr);
   11498:	4629      	mov	r1, r5
   1149a:	4620      	mov	r0, r4
   1149c:	f7f0 fe28 	bl	20f0 <nvs_recover_last_ate>
}
   114a0:	b003      	add	sp, #12
   114a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000114a4 <nvs_flash_al_wrt.part.0>:
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   114a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   114a8:	4605      	mov	r5, r0
   114aa:	460c      	mov	r4, r1
	offset = fs->offset;
   114ac:	f8d0 a000 	ldr.w	sl, [r0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   114b0:	8987      	ldrh	r7, [r0, #12]
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   114b2:	b088      	sub	sp, #32
	rc = flash_write_protection_set(fs->flash_device, false);
   114b4:	2100      	movs	r1, #0
   114b6:	6a80      	ldr	r0, [r0, #40]	; 0x28
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   114b8:	4690      	mov	r8, r2
   114ba:	461e      	mov	r6, r3
	rc = flash_write_protection_set(fs->flash_device, false);
   114bc:	f7ff fef0 	bl	112a0 <flash_write_protection_set>
	if (rc) {
   114c0:	2800      	cmp	r0, #0
   114c2:	d132      	bne.n	1152a <nvs_flash_al_wrt.part.0+0x86>
	blen = len & ~(fs->flash_parameters->write_block_size - 1U);
   114c4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   114c6:	ea4f 4914 	mov.w	r9, r4, lsr #16
	offset += addr & ADDR_OFFS_MASK;
   114ca:	fa1a f484 	uxtah	r4, sl, r4
   114ce:	fb07 4909 	mla	r9, r7, r9, r4
	blen = len & ~(fs->flash_parameters->write_block_size - 1U);
   114d2:	681f      	ldr	r7, [r3, #0]
   114d4:	427f      	negs	r7, r7
	if (blen > 0) {
   114d6:	4037      	ands	r7, r6
   114d8:	d00b      	beq.n	114f2 <nvs_flash_al_wrt.part.0+0x4e>
		rc = flash_write(fs->flash_device, offset, data8, blen);
   114da:	6aa8      	ldr	r0, [r5, #40]	; 0x28
	return api->write(dev, offset, data, len);
   114dc:	6883      	ldr	r3, [r0, #8]
   114de:	4642      	mov	r2, r8
   114e0:	685c      	ldr	r4, [r3, #4]
   114e2:	4649      	mov	r1, r9
   114e4:	463b      	mov	r3, r7
   114e6:	47a0      	blx	r4
		if (rc) {
   114e8:	4604      	mov	r4, r0
   114ea:	b9c8      	cbnz	r0, 11520 <nvs_flash_al_wrt.part.0+0x7c>
		len -= blen;
   114ec:	1bf6      	subs	r6, r6, r7
		offset += blen;
   114ee:	44b9      	add	r9, r7
		data8 += blen;
   114f0:	44b8      	add	r8, r7
	if (len) {
   114f2:	b1ee      	cbz	r6, 11530 <nvs_flash_al_wrt.part.0+0x8c>
		memcpy(buf, data8, len);
   114f4:	4632      	mov	r2, r6
   114f6:	4641      	mov	r1, r8
   114f8:	4668      	mov	r0, sp
   114fa:	f000 ff0e 	bl	1231a <memcpy>
		(void)memset(buf + len, fs->flash_parameters->erase_value,
   114fe:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   11500:	eb0d 0006 	add.w	r0, sp, r6
   11504:	681a      	ldr	r2, [r3, #0]
   11506:	7919      	ldrb	r1, [r3, #4]
   11508:	1b92      	subs	r2, r2, r6
   1150a:	f000 ff31 	bl	12370 <memset>
		rc = flash_write(fs->flash_device, offset, buf,
   1150e:	e9d5 030a 	ldrd	r0, r3, [r5, #40]	; 0x28
   11512:	681b      	ldr	r3, [r3, #0]
   11514:	6882      	ldr	r2, [r0, #8]
   11516:	4649      	mov	r1, r9
   11518:	6854      	ldr	r4, [r2, #4]
   1151a:	466a      	mov	r2, sp
   1151c:	47a0      	blx	r4
   1151e:	4604      	mov	r4, r0
	(void) flash_write_protection_set(fs->flash_device, true);
   11520:	2101      	movs	r1, #1
   11522:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   11524:	f7ff febc 	bl	112a0 <flash_write_protection_set>
	return rc;
   11528:	4620      	mov	r0, r4
}
   1152a:	b008      	add	sp, #32
   1152c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
end:
   11530:	4634      	mov	r4, r6
   11532:	e7f5      	b.n	11520 <nvs_flash_al_wrt.part.0+0x7c>

00011534 <nvs_flash_ate_wrt>:
{
   11534:	460a      	mov	r2, r1
   11536:	b510      	push	{r4, lr}
   11538:	2308      	movs	r3, #8
   1153a:	6841      	ldr	r1, [r0, #4]
   1153c:	4604      	mov	r4, r0
   1153e:	f7ff ffb1 	bl	114a4 <nvs_flash_al_wrt.part.0>
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   11542:	2108      	movs	r1, #8
   11544:	4603      	mov	r3, r0
   11546:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   11548:	f7ff ff1f 	bl	1138a <nvs_al_size.isra.0>
   1154c:	6862      	ldr	r2, [r4, #4]
   1154e:	1a12      	subs	r2, r2, r0
   11550:	6062      	str	r2, [r4, #4]
}
   11552:	4618      	mov	r0, r3
   11554:	bd10      	pop	{r4, pc}

00011556 <nvs_delete>:
	return nvs_write(fs, id, NULL, 0);
   11556:	2300      	movs	r3, #0
   11558:	461a      	mov	r2, r3
   1155a:	f7f1 b81f 	b.w	259c <nvs_write>

0001155e <nvs_read>:

ssize_t nvs_read(struct nvs_fs *fs, uint16_t id, void *data, size_t len)
{
   1155e:	b513      	push	{r0, r1, r4, lr}
	int rc;

	rc = nvs_read_hist(fs, id, data, len, 0);
   11560:	2400      	movs	r4, #0
   11562:	9400      	str	r4, [sp, #0]
   11564:	f7f1 f8fe 	bl	2764 <nvs_read_hist>
	return rc;
}
   11568:	b002      	add	sp, #8
   1156a:	bd10      	pop	{r4, pc}

0001156c <virtio_get_status>:
}
   1156c:	2004      	movs	r0, #4
   1156e:	4770      	bx	lr

00011570 <virtio_get_features>:
}
   11570:	2001      	movs	r0, #1
   11572:	4770      	bx	lr

00011574 <virtio_set_features>:
}
   11574:	4770      	bx	lr

00011576 <virtqueue_allocate.constprop.0>:

int virtqueue_enable_cb(struct virtqueue *vq);

void virtqueue_kick(struct virtqueue *vq);

static inline struct virtqueue *virtqueue_allocate(unsigned int num_desc_extra)
   11576:	b510      	push	{r4, lr}
	return k_aligned_alloc(sizeof(void *), size);
   11578:	21b4      	movs	r1, #180	; 0xb4
   1157a:	2004      	movs	r0, #4
   1157c:	f7fe fd26 	bl	ffcc <k_aligned_alloc>
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
		 num_desc_extra * sizeof(struct vq_desc_extra);

	vqs = (struct virtqueue *)metal_allocate_memory(vq_size);
	if (vqs) {
   11580:	4604      	mov	r4, r0
   11582:	b118      	cbz	r0, 1158c <virtqueue_allocate.constprop.0+0x16>
		memset(vqs, 0x00, vq_size);
   11584:	22b4      	movs	r2, #180	; 0xb4
   11586:	2100      	movs	r1, #0
   11588:	f000 fef2 	bl	12370 <memset>
	}

	return vqs;
}
   1158c:	4620      	mov	r0, r4
   1158e:	bd10      	pop	{r4, pc}

00011590 <rpmsg_service_unbind>:
	rpmsg_destroy_ept(ep);
   11590:	f003 ba80 	b.w	14a94 <rpmsg_destroy_ept>

00011594 <device_get_binding>:
   11594:	f7fd ba66 	b.w	ea64 <z_impl_device_get_binding>

00011598 <get_sectors_cb>:
{
   11598:	b570      	push	{r4, r5, r6, lr}
	if (info->start_offset < data->area_off) {
   1159a:	6802      	ldr	r2, [r0, #0]
   1159c:	684c      	ldr	r4, [r1, #4]
   1159e:	42a2      	cmp	r2, r4
   115a0:	d316      	bcc.n	115d0 <get_sectors_cb+0x38>
	} else if (info->start_offset >= data->area_off + data->area_len) {
   115a2:	688b      	ldr	r3, [r1, #8]
   115a4:	4423      	add	r3, r4
   115a6:	429a      	cmp	r2, r3
   115a8:	d206      	bcs.n	115b8 <get_sectors_cb+0x20>
	} else if (data->ret_idx >= data->ret_len) {
   115aa:	e9d1 3504 	ldrd	r3, r5, [r1, #16]
   115ae:	42ab      	cmp	r3, r5
   115b0:	d304      	bcc.n	115bc <get_sectors_cb+0x24>
		data->status = -ENOMEM;
   115b2:	f06f 030b 	mvn.w	r3, #11
   115b6:	618b      	str	r3, [r1, #24]
		*bail_value = false;
   115b8:	2000      	movs	r0, #0
   115ba:	e00a      	b.n	115d2 <get_sectors_cb+0x3a>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
   115bc:	68cd      	ldr	r5, [r1, #12]
   115be:	1b12      	subs	r2, r2, r4
   115c0:	f845 2033 	str.w	r2, [r5, r3, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
   115c4:	6842      	ldr	r2, [r0, #4]
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
   115c6:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
	data->ret_idx++;
   115ca:	3301      	adds	r3, #1
	ret[data->ret_idx].fs_size = info->size;
   115cc:	6072      	str	r2, [r6, #4]
	data->ret_idx++;
   115ce:	610b      	str	r3, [r1, #16]
		*bail_value = true;
   115d0:	2001      	movs	r0, #1
}
   115d2:	bd70      	pop	{r4, r5, r6, pc}

000115d4 <settings_load>:
	return settings_load_subtree(NULL);
   115d4:	2000      	movs	r0, #0
   115d6:	f7f1 bbe9 	b.w	2dac <settings_load_subtree>

000115da <settings_delete>:
	return settings_save_one(name, NULL, 0);
   115da:	2200      	movs	r2, #0
   115dc:	4611      	mov	r1, r2
   115de:	f7f1 bbab 	b.w	2d38 <settings_save_one>

000115e2 <settings_name_steq>:
{
   115e2:	4603      	mov	r3, r0
   115e4:	b530      	push	{r4, r5, lr}
   115e6:	4608      	mov	r0, r1
	if (next) {
   115e8:	b10a      	cbz	r2, 115ee <settings_name_steq+0xc>
		*next = NULL;
   115ea:	2100      	movs	r1, #0
   115ec:	6011      	str	r1, [r2, #0]
	if ((!name) || (!key)) {
   115ee:	b163      	cbz	r3, 1160a <settings_name_steq+0x28>
   115f0:	b190      	cbz	r0, 11618 <settings_name_steq+0x36>
   115f2:	1e41      	subs	r1, r0, #1
   115f4:	4618      	mov	r0, r3
	while ((*key != '\0') && (*key == *name) &&
   115f6:	f811 5f01 	ldrb.w	r5, [r1, #1]!
   115fa:	4604      	mov	r4, r0
   115fc:	f810 3b01 	ldrb.w	r3, [r0], #1
   11600:	b15d      	cbz	r5, 1161a <settings_name_steq+0x38>
   11602:	429d      	cmp	r5, r3
   11604:	d101      	bne.n	1160a <settings_name_steq+0x28>
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   11606:	2d3d      	cmp	r5, #61	; 0x3d
   11608:	d1f5      	bne.n	115f6 <settings_name_steq+0x14>
	return 0;
   1160a:	2000      	movs	r0, #0
   1160c:	e004      	b.n	11618 <settings_name_steq+0x36>
	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
   1160e:	2b3d      	cmp	r3, #61	; 0x3d
   11610:	d008      	beq.n	11624 <settings_name_steq+0x42>
   11612:	fab3 f083 	clz	r0, r3
   11616:	0940      	lsrs	r0, r0, #5
}
   11618:	bd30      	pop	{r4, r5, pc}
	if (*name == SETTINGS_NAME_SEPARATOR) {
   1161a:	2b2f      	cmp	r3, #47	; 0x2f
   1161c:	d1f7      	bne.n	1160e <settings_name_steq+0x2c>
		if (next) {
   1161e:	b10a      	cbz	r2, 11624 <settings_name_steq+0x42>
			*next = name + 1;
   11620:	3401      	adds	r4, #1
   11622:	6014      	str	r4, [r2, #0]
		return 1;
   11624:	2001      	movs	r0, #1
   11626:	e7f7      	b.n	11618 <settings_name_steq+0x36>

00011628 <settings_name_next>:
{
   11628:	4603      	mov	r3, r0
   1162a:	b530      	push	{r4, r5, lr}
	if (next) {
   1162c:	b109      	cbz	r1, 11632 <settings_name_next+0xa>
		*next = NULL;
   1162e:	2200      	movs	r2, #0
   11630:	600a      	str	r2, [r1, #0]
	if (!name) {
   11632:	b16b      	cbz	r3, 11650 <settings_name_next+0x28>
   11634:	461a      	mov	r2, r3
   11636:	4614      	mov	r4, r2
   11638:	1ad0      	subs	r0, r2, r3
	while ((*name != '\0') && (*name != SETTINGS_NAME_END) &&
   1163a:	f812 5b01 	ldrb.w	r5, [r2], #1
   1163e:	b135      	cbz	r5, 1164e <settings_name_next+0x26>
   11640:	2d3d      	cmp	r5, #61	; 0x3d
   11642:	d004      	beq.n	1164e <settings_name_next+0x26>
   11644:	2d2f      	cmp	r5, #47	; 0x2f
   11646:	d1f6      	bne.n	11636 <settings_name_next+0xe>
		if (next) {
   11648:	b109      	cbz	r1, 1164e <settings_name_next+0x26>
			*next = name + 1;
   1164a:	3401      	adds	r4, #1
   1164c:	600c      	str	r4, [r1, #0]
}
   1164e:	bd30      	pop	{r4, r5, pc}
		return 0;
   11650:	4618      	mov	r0, r3
   11652:	e7fc      	b.n	1164e <settings_name_next+0x26>

00011654 <settings_nvs_read_fn>:
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   11654:	4613      	mov	r3, r2
{
   11656:	b510      	push	{r4, lr}
   11658:	4614      	mov	r4, r2
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   1165a:	460a      	mov	r2, r1
   1165c:	8881      	ldrh	r1, [r0, #4]
   1165e:	6800      	ldr	r0, [r0, #0]
   11660:	f7ff ff7d 	bl	1155e <nvs_read>
}
   11664:	42a0      	cmp	r0, r4
   11666:	bfa8      	it	ge
   11668:	4620      	movge	r0, r4
   1166a:	bd10      	pop	{r4, pc}

0001166c <settings_nvs_save>:
{
   1166c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11670:	b097      	sub	sp, #92	; 0x5c
   11672:	4604      	mov	r4, r0
   11674:	469b      	mov	fp, r3
	if (!name) {
   11676:	4689      	mov	r9, r1
{
   11678:	9201      	str	r2, [sp, #4]
	if (!name) {
   1167a:	2900      	cmp	r1, #0
   1167c:	d069      	beq.n	11752 <settings_nvs_save+0xe6>
	delete = ((value == NULL) || (val_len == 0));
   1167e:	b1da      	cbz	r2, 116b8 <settings_nvs_save+0x4c>
   11680:	fabb f78b 	clz	r7, fp
   11684:	097f      	lsrs	r7, r7, #5
	name_id = cf->last_name_id + 1;
   11686:	8f25      	ldrh	r5, [r4, #56]	; 0x38
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   11688:	f104 0a08 	add.w	sl, r4, #8
	name_id = cf->last_name_id + 1;
   1168c:	3501      	adds	r5, #1
   1168e:	b2ad      	uxth	r5, r5
	write_name_id = cf->last_name_id + 1;
   11690:	46a8      	mov	r8, r5
		name_id--;
   11692:	1e6e      	subs	r6, r5, #1
   11694:	b2b6      	uxth	r6, r6
		if (name_id == NVS_NAMECNT_ID) {
   11696:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   1169a:	d02e      	beq.n	116fa <settings_nvs_save+0x8e>
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   1169c:	234a      	movs	r3, #74	; 0x4a
   1169e:	4631      	mov	r1, r6
   116a0:	4650      	mov	r0, sl
   116a2:	aa03      	add	r2, sp, #12
   116a4:	f7ff ff5b 	bl	1155e <nvs_read>
		if (rc < 0) {
   116a8:	2800      	cmp	r0, #0
   116aa:	da07      	bge.n	116bc <settings_nvs_save+0x50>
			if (rc == -ENOENT) {
   116ac:	f110 0f02 	cmn.w	r0, #2
   116b0:	bf08      	it	eq
   116b2:	46b0      	moveq	r8, r6
   116b4:	4635      	mov	r5, r6
   116b6:	e7ec      	b.n	11692 <settings_nvs_save+0x26>
	delete = ((value == NULL) || (val_len == 0));
   116b8:	2701      	movs	r7, #1
   116ba:	e7e4      	b.n	11686 <settings_nvs_save+0x1a>
		rdname[rc] = '\0';
   116bc:	ab16      	add	r3, sp, #88	; 0x58
   116be:	4418      	add	r0, r3
   116c0:	2300      	movs	r3, #0
		if (strcmp(name, rdname)) {
   116c2:	a903      	add	r1, sp, #12
		rdname[rc] = '\0';
   116c4:	f800 3c4c 	strb.w	r3, [r0, #-76]
		if (strcmp(name, rdname)) {
   116c8:	4648      	mov	r0, r9
   116ca:	f000 fdfb 	bl	122c4 <strcmp>
   116ce:	2800      	cmp	r0, #0
   116d0:	d1f0      	bne.n	116b4 <settings_nvs_save+0x48>
		if ((delete) && (name_id == cf->last_name_id)) {
   116d2:	2f00      	cmp	r7, #0
   116d4:	d03b      	beq.n	1174e <settings_nvs_save+0xe2>
   116d6:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   116d8:	42b3      	cmp	r3, r6
   116da:	d142      	bne.n	11762 <settings_nvs_save+0xf6>
			cf->last_name_id--;
   116dc:	4622      	mov	r2, r4
   116de:	1e73      	subs	r3, r6, #1
   116e0:	f822 3f38 	strh.w	r3, [r2, #56]!
			rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   116e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   116e8:	2302      	movs	r3, #2
   116ea:	4650      	mov	r0, sl
   116ec:	f7f0 ff56 	bl	259c <nvs_write>
			if (rc < 0) {
   116f0:	2800      	cmp	r0, #0
   116f2:	da36      	bge.n	11762 <settings_nvs_save+0xf6>
}
   116f4:	b017      	add	sp, #92	; 0x5c
   116f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (delete) {
   116fa:	bb6f      	cbnz	r7, 11758 <settings_nvs_save+0xec>
	write_name = true;
   116fc:	2701      	movs	r7, #1
	if (write_name_id == NVS_NAMECNT_ID + NVS_NAME_ID_OFFSET) {
   116fe:	f5b8 4f40 	cmp.w	r8, #49152	; 0xc000
   11702:	d02b      	beq.n	1175c <settings_nvs_save+0xf0>
	rc = nvs_write(&cf->cf_nvs, write_name_id + NVS_NAME_ID_OFFSET,
   11704:	f104 0508 	add.w	r5, r4, #8
   11708:	f508 4180 	add.w	r1, r8, #16384	; 0x4000
   1170c:	465b      	mov	r3, fp
   1170e:	4628      	mov	r0, r5
   11710:	9a01      	ldr	r2, [sp, #4]
   11712:	b289      	uxth	r1, r1
   11714:	f7f0 ff42 	bl	259c <nvs_write>
	if (rc < 0) {
   11718:	2800      	cmp	r0, #0
   1171a:	dbeb      	blt.n	116f4 <settings_nvs_save+0x88>
	if (write_name) {
   1171c:	b157      	cbz	r7, 11734 <settings_nvs_save+0xc8>
		rc = nvs_write(&cf->cf_nvs, write_name_id, name, strlen(name));
   1171e:	4648      	mov	r0, r9
   11720:	f000 fdc0 	bl	122a4 <strlen>
   11724:	464a      	mov	r2, r9
   11726:	4603      	mov	r3, r0
   11728:	4641      	mov	r1, r8
   1172a:	4628      	mov	r0, r5
   1172c:	f7f0 ff36 	bl	259c <nvs_write>
		if (rc < 0) {
   11730:	2800      	cmp	r0, #0
   11732:	dbdf      	blt.n	116f4 <settings_nvs_save+0x88>
	if (write_name_id > cf->last_name_id) {
   11734:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   11736:	4543      	cmp	r3, r8
   11738:	d220      	bcs.n	1177c <settings_nvs_save+0x110>
		cf->last_name_id = write_name_id;
   1173a:	4622      	mov	r2, r4
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   1173c:	2302      	movs	r3, #2
   1173e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   11742:	4628      	mov	r0, r5
		cf->last_name_id = write_name_id;
   11744:	f822 8f38 	strh.w	r8, [r2, #56]!
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   11748:	f7f0 ff28 	bl	259c <nvs_write>
   1174c:	e016      	b.n	1177c <settings_nvs_save+0x110>
   1174e:	46b0      	mov	r8, r6
   11750:	e7d5      	b.n	116fe <settings_nvs_save+0x92>
		return -EINVAL;
   11752:	f06f 0015 	mvn.w	r0, #21
   11756:	e7cd      	b.n	116f4 <settings_nvs_save+0x88>
		return 0;
   11758:	2000      	movs	r0, #0
   1175a:	e7cb      	b.n	116f4 <settings_nvs_save+0x88>
		return -ENOMEM;
   1175c:	f06f 000b 	mvn.w	r0, #11
   11760:	e7c8      	b.n	116f4 <settings_nvs_save+0x88>
			rc = nvs_delete(&cf->cf_nvs, name_id);
   11762:	4631      	mov	r1, r6
   11764:	4650      	mov	r0, sl
   11766:	f7ff fef6 	bl	11556 <nvs_delete>
			if (rc >= 0) {
   1176a:	2800      	cmp	r0, #0
   1176c:	dbc2      	blt.n	116f4 <settings_nvs_save+0x88>
				rc = nvs_delete(&cf->cf_nvs, name_id +
   1176e:	f505 517f 	add.w	r1, r5, #16320	; 0x3fc0
   11772:	313f      	adds	r1, #63	; 0x3f
   11774:	4650      	mov	r0, sl
   11776:	b289      	uxth	r1, r1
   11778:	f7ff feed 	bl	11556 <nvs_delete>
	if (rc < 0) {
   1177c:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   11780:	e7b8      	b.n	116f4 <settings_nvs_save+0x88>

00011782 <settings_nvs_backend_init>:
{
   11782:	b573      	push	{r0, r1, r4, r5, r6, lr}
	rc = nvs_init(&cf->cf_nvs, cf->flash_dev_name);
   11784:	f100 0608 	add.w	r6, r0, #8
   11788:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
{
   1178a:	4604      	mov	r4, r0
	rc = nvs_init(&cf->cf_nvs, cf->flash_dev_name);
   1178c:	4630      	mov	r0, r6
   1178e:	f7f0 fd9f 	bl	22d0 <nvs_init>
	if (rc) {
   11792:	4605      	mov	r5, r0
   11794:	b970      	cbnz	r0, 117b4 <settings_nvs_backend_init+0x32>
	rc = nvs_read(&cf->cf_nvs, NVS_NAMECNT_ID, &last_name_id,
   11796:	2302      	movs	r3, #2
   11798:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   1179c:	4630      	mov	r0, r6
   1179e:	f10d 0206 	add.w	r2, sp, #6
   117a2:	f7ff fedc 	bl	1155e <nvs_read>
	if (rc < 0) {
   117a6:	2800      	cmp	r0, #0
		cf->last_name_id = NVS_NAMECNT_ID;
   117a8:	bfb4      	ite	lt
   117aa:	f44f 4300 	movlt.w	r3, #32768	; 0x8000
		cf->last_name_id = last_name_id;
   117ae:	f8bd 3006 	ldrhge.w	r3, [sp, #6]
   117b2:	8723      	strh	r3, [r4, #56]	; 0x38
}
   117b4:	4628      	mov	r0, r5
   117b6:	b002      	add	sp, #8
   117b8:	bd70      	pop	{r4, r5, r6, pc}

000117ba <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   117ba:	b2cb      	uxtb	r3, r1
   117bc:	210c      	movs	r1, #12
   117be:	68c2      	ldr	r2, [r0, #12]
   117c0:	fb03 2101 	mla	r1, r3, r1, r2
   117c4:	6f88      	ldr	r0, [r1, #120]	; 0x78
}
   117c6:	f000 0007 	and.w	r0, r0, #7
   117ca:	4770      	bx	lr

000117cc <set_off_state>:
	__asm__ volatile(
   117cc:	f04f 0320 	mov.w	r3, #32
   117d0:	f3ef 8211 	mrs	r2, BASEPRI
   117d4:	f383 8811 	msr	BASEPRI, r3
   117d8:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   117dc:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   117de:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   117e2:	d001      	beq.n	117e8 <set_off_state+0x1c>
   117e4:	428b      	cmp	r3, r1
   117e6:	d107      	bne.n	117f8 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   117e8:	2301      	movs	r3, #1
   117ea:	6003      	str	r3, [r0, #0]
	int err = 0;
   117ec:	2000      	movs	r0, #0
	__asm__ volatile(
   117ee:	f382 8811 	msr	BASEPRI, r2
   117f2:	f3bf 8f6f 	isb	sy
}
   117f6:	4770      	bx	lr
		err = -EPERM;
   117f8:	f04f 30ff 	mov.w	r0, #4294967295
   117fc:	e7f7      	b.n	117ee <set_off_state+0x22>

000117fe <set_starting_state>:
{
   117fe:	b510      	push	{r4, lr}
	__asm__ volatile(
   11800:	f04f 0320 	mov.w	r3, #32
   11804:	f3ef 8211 	mrs	r2, BASEPRI
   11808:	f383 8811 	msr	BASEPRI, r3
   1180c:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   11810:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   11812:	f003 0407 	and.w	r4, r3, #7
   11816:	2c01      	cmp	r4, #1
   11818:	d106      	bne.n	11828 <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   1181a:	6001      	str	r1, [r0, #0]
	int err = 0;
   1181c:	2000      	movs	r0, #0
	__asm__ volatile(
   1181e:	f382 8811 	msr	BASEPRI, r2
   11822:	f3bf 8f6f 	isb	sy
}
   11826:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   11828:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
   1182c:	428b      	cmp	r3, r1
		err = -EALREADY;
   1182e:	bf14      	ite	ne
   11830:	f04f 30ff 	movne.w	r0, #4294967295
   11834:	f06f 0044 	mvneq.w	r0, #68	; 0x44
   11838:	e7f1      	b.n	1181e <set_starting_state+0x20>

0001183a <set_on_state>:
	__asm__ volatile(
   1183a:	f04f 0320 	mov.w	r3, #32
   1183e:	f3ef 8211 	mrs	r2, BASEPRI
   11842:	f383 8811 	msr	BASEPRI, r3
   11846:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   1184a:	6803      	ldr	r3, [r0, #0]
   1184c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   11850:	f043 0302 	orr.w	r3, r3, #2
   11854:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   11856:	f382 8811 	msr	BASEPRI, r2
   1185a:	f3bf 8f6f 	isb	sy
}
   1185e:	4770      	bx	lr

00011860 <onoff_started_callback>:
{
   11860:	b410      	push	{r4}
	notify(mgr, 0);
   11862:	241c      	movs	r4, #28
	return &data->mgr[type];
   11864:	68c0      	ldr	r0, [r0, #12]
   11866:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   11868:	fb03 0004 	mla	r0, r3, r4, r0
   1186c:	2100      	movs	r1, #0
}
   1186e:	bc10      	pop	{r4}
	notify(mgr, 0);
   11870:	4710      	bx	r2

00011872 <hfclkaudio_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   11872:	2003      	movs	r0, #3
   11874:	f7fc bb14 	b.w	dea0 <nrfx_clock_start>

00011878 <hfclk192m_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK192M);
   11878:	2002      	movs	r0, #2
   1187a:	f7fc bb11 	b.w	dea0 <nrfx_clock_start>

0001187e <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   1187e:	2000      	movs	r0, #0
   11880:	f7fc bb0e 	b.w	dea0 <nrfx_clock_start>

00011884 <hfclkaudio_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   11884:	2003      	movs	r0, #3
   11886:	f7fc bb5f 	b.w	df48 <nrfx_clock_stop>

0001188a <hfclk192m_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK192M);
   1188a:	2002      	movs	r0, #2
   1188c:	f7fc bb5c 	b.w	df48 <nrfx_clock_stop>

00011890 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   11890:	2000      	movs	r0, #0
   11892:	f7fc bb59 	b.w	df48 <nrfx_clock_stop>

00011896 <blocking_start_callback>:
{
   11896:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   11898:	f7fd bf6e 	b.w	f778 <z_impl_k_sem_give>

0001189c <api_stop>:
{
   1189c:	b538      	push	{r3, r4, r5, lr}
	err = set_off_state(&subdata->flags, ctx);
   1189e:	240c      	movs	r4, #12
   118a0:	b2c9      	uxtb	r1, r1
   118a2:	434c      	muls	r4, r1
{
   118a4:	4605      	mov	r5, r0
	err = set_off_state(&subdata->flags, ctx);
   118a6:	68c0      	ldr	r0, [r0, #12]
   118a8:	f104 0378 	add.w	r3, r4, #120	; 0x78
   118ac:	2180      	movs	r1, #128	; 0x80
   118ae:	4418      	add	r0, r3
   118b0:	f7ff ff8c 	bl	117cc <set_off_state>
	if (err < 0) {
   118b4:	2800      	cmp	r0, #0
   118b6:	db04      	blt.n	118c2 <api_stop+0x26>
	get_sub_config(dev, type)->stop();
   118b8:	6869      	ldr	r1, [r5, #4]
   118ba:	440c      	add	r4, r1
   118bc:	6863      	ldr	r3, [r4, #4]
   118be:	4798      	blx	r3
	return 0;
   118c0:	2000      	movs	r0, #0
}
   118c2:	bd38      	pop	{r3, r4, r5, pc}

000118c4 <api_start>:
{
   118c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	err = set_starting_state(&subdata->flags, ctx);
   118c8:	240c      	movs	r4, #12
   118ca:	b2c9      	uxtb	r1, r1
   118cc:	434c      	muls	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   118ce:	68c5      	ldr	r5, [r0, #12]
{
   118d0:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
   118d2:	f104 0078 	add.w	r0, r4, #120	; 0x78
   118d6:	2180      	movs	r1, #128	; 0x80
   118d8:	4428      	add	r0, r5
{
   118da:	4690      	mov	r8, r2
   118dc:	461f      	mov	r7, r3
	err = set_starting_state(&subdata->flags, ctx);
   118de:	f7ff ff8e 	bl	117fe <set_starting_state>
	if (err < 0) {
   118e2:	2800      	cmp	r0, #0
   118e4:	db06      	blt.n	118f4 <api_start+0x30>
	subdata->cb = cb;
   118e6:	4425      	add	r5, r4
	subdata->user_data = user_data;
   118e8:	e9c5 871c 	strd	r8, r7, [r5, #112]	; 0x70
	 get_sub_config(dev, type)->start();
   118ec:	6873      	ldr	r3, [r6, #4]
   118ee:	591b      	ldr	r3, [r3, r4]
   118f0:	4798      	blx	r3
	return 0;
   118f2:	2000      	movs	r0, #0
}
   118f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000118f8 <bt_rpmsg_open>:
{
   118f8:	b508      	push	{r3, lr}
	while (!bt_rpmsg_platform_endpoint_is_bound()) {
   118fa:	f7f1 ffab 	bl	3854 <bt_rpmsg_platform_endpoint_is_bound>
   118fe:	b108      	cbz	r0, 11904 <bt_rpmsg_open+0xc>
}
   11900:	2000      	movs	r0, #0
   11902:	bd08      	pop	{r3, pc}
	return z_impl_k_sleep(timeout);
   11904:	2100      	movs	r1, #0
   11906:	2021      	movs	r0, #33	; 0x21
   11908:	f7fd ff0e 	bl	f728 <z_impl_k_sleep>
   1190c:	e7f5      	b.n	118fa <bt_rpmsg_open+0x2>

0001190e <endpoint_cb>:
{
   1190e:	b508      	push	{r3, lr}
   11910:	4608      	mov	r0, r1
	bt_rpmsg_rx(data, len);
   11912:	4611      	mov	r1, r2
   11914:	f7f1 fe72 	bl	35fc <bt_rpmsg_rx>
}
   11918:	2000      	movs	r0, #0
   1191a:	bd08      	pop	{r3, pc}

0001191c <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   1191c:	4770      	bx	lr

0001191e <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   1191e:	4770      	bx	lr

00011920 <sys_clock_disable>:
   11920:	4770      	bx	lr

00011922 <abort_function>:
	sys_reboot(SYS_REBOOT_WARM);
   11922:	2000      	movs	r0, #0
   11924:	f7f1 bc2c 	b.w	3180 <sys_reboot>

00011928 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   11928:	b538      	push	{r3, r4, r5, lr}
   1192a:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   1192c:	42ab      	cmp	r3, r5
{
   1192e:	4611      	mov	r1, r2
   11930:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   11932:	d804      	bhi.n	1193e <_copy+0x16>
		(void)memcpy(to, from, from_len);
   11934:	461a      	mov	r2, r3
   11936:	f000 fcf0 	bl	1231a <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   1193a:	4620      	mov	r0, r4
   1193c:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   1193e:	2400      	movs	r4, #0
   11940:	e7fb      	b.n	1193a <_copy+0x12>

00011942 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   11942:	f000 bd15 	b.w	12370 <memset>

00011946 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   11946:	09c3      	lsrs	r3, r0, #7
   11948:	005a      	lsls	r2, r3, #1
   1194a:	4413      	add	r3, r2
   1194c:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   11950:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   11954:	b2c0      	uxtb	r0, r0
   11956:	4770      	bx	lr

00011958 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   11958:	78cb      	ldrb	r3, [r1, #3]
   1195a:	7802      	ldrb	r2, [r0, #0]
   1195c:	4053      	eors	r3, r2
   1195e:	7003      	strb	r3, [r0, #0]
   11960:	884b      	ldrh	r3, [r1, #2]
   11962:	7842      	ldrb	r2, [r0, #1]
   11964:	4053      	eors	r3, r2
   11966:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   11968:	680a      	ldr	r2, [r1, #0]
   1196a:	7883      	ldrb	r3, [r0, #2]
   1196c:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   11970:	7083      	strb	r3, [r0, #2]
   11972:	680a      	ldr	r2, [r1, #0]
   11974:	78c3      	ldrb	r3, [r0, #3]
   11976:	4053      	eors	r3, r2
   11978:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   1197a:	79cb      	ldrb	r3, [r1, #7]
   1197c:	7902      	ldrb	r2, [r0, #4]
   1197e:	4053      	eors	r3, r2
   11980:	7103      	strb	r3, [r0, #4]
   11982:	88cb      	ldrh	r3, [r1, #6]
   11984:	7942      	ldrb	r2, [r0, #5]
   11986:	4053      	eors	r3, r2
   11988:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   1198a:	684a      	ldr	r2, [r1, #4]
   1198c:	7983      	ldrb	r3, [r0, #6]
   1198e:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   11992:	7183      	strb	r3, [r0, #6]
   11994:	684a      	ldr	r2, [r1, #4]
   11996:	79c3      	ldrb	r3, [r0, #7]
   11998:	4053      	eors	r3, r2
   1199a:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   1199c:	7acb      	ldrb	r3, [r1, #11]
   1199e:	7a02      	ldrb	r2, [r0, #8]
   119a0:	4053      	eors	r3, r2
   119a2:	7203      	strb	r3, [r0, #8]
   119a4:	7a42      	ldrb	r2, [r0, #9]
   119a6:	894b      	ldrh	r3, [r1, #10]
   119a8:	4053      	eors	r3, r2
   119aa:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   119ac:	688a      	ldr	r2, [r1, #8]
   119ae:	7a83      	ldrb	r3, [r0, #10]
   119b0:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   119b4:	7283      	strb	r3, [r0, #10]
   119b6:	688a      	ldr	r2, [r1, #8]
   119b8:	7ac3      	ldrb	r3, [r0, #11]
   119ba:	4053      	eors	r3, r2
   119bc:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   119be:	7bcb      	ldrb	r3, [r1, #15]
   119c0:	7b02      	ldrb	r2, [r0, #12]
   119c2:	4053      	eors	r3, r2
   119c4:	7303      	strb	r3, [r0, #12]
   119c6:	89cb      	ldrh	r3, [r1, #14]
   119c8:	7b42      	ldrb	r2, [r0, #13]
   119ca:	4053      	eors	r3, r2
   119cc:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   119ce:	68ca      	ldr	r2, [r1, #12]
   119d0:	7b83      	ldrb	r3, [r0, #14]
   119d2:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   119d6:	7383      	strb	r3, [r0, #14]
   119d8:	68ca      	ldr	r2, [r1, #12]
   119da:	7bc3      	ldrb	r3, [r0, #15]
   119dc:	4053      	eors	r3, r2
   119de:	73c3      	strb	r3, [r0, #15]
}
   119e0:	4770      	bx	lr

000119e2 <shift_rows>:
{
   119e2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   119e4:	7802      	ldrb	r2, [r0, #0]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   119e6:	7ac3      	ldrb	r3, [r0, #11]
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   119e8:	f88d 2000 	strb.w	r2, [sp]
   119ec:	7942      	ldrb	r2, [r0, #5]
   119ee:	f88d 2001 	strb.w	r2, [sp, #1]
   119f2:	7a82      	ldrb	r2, [r0, #10]
   119f4:	f88d 2002 	strb.w	r2, [sp, #2]
   119f8:	7bc2      	ldrb	r2, [r0, #15]
   119fa:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   119fe:	7902      	ldrb	r2, [r0, #4]
   11a00:	f88d 2004 	strb.w	r2, [sp, #4]
   11a04:	7a42      	ldrb	r2, [r0, #9]
   11a06:	f88d 2005 	strb.w	r2, [sp, #5]
   11a0a:	7b82      	ldrb	r2, [r0, #14]
   11a0c:	f88d 2006 	strb.w	r2, [sp, #6]
   11a10:	78c2      	ldrb	r2, [r0, #3]
   11a12:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   11a16:	7a02      	ldrb	r2, [r0, #8]
   11a18:	f88d 2008 	strb.w	r2, [sp, #8]
   11a1c:	7b42      	ldrb	r2, [r0, #13]
   11a1e:	f88d 2009 	strb.w	r2, [sp, #9]
   11a22:	7882      	ldrb	r2, [r0, #2]
   11a24:	f88d 200a 	strb.w	r2, [sp, #10]
   11a28:	79c2      	ldrb	r2, [r0, #7]
   11a2a:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   11a2e:	7b02      	ldrb	r2, [r0, #12]
   11a30:	f88d 200c 	strb.w	r2, [sp, #12]
   11a34:	7842      	ldrb	r2, [r0, #1]
   11a36:	f88d 200d 	strb.w	r2, [sp, #13]
   11a3a:	7982      	ldrb	r2, [r0, #6]
   11a3c:	f88d 200e 	strb.w	r2, [sp, #14]
   11a40:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   11a44:	2310      	movs	r3, #16
   11a46:	466a      	mov	r2, sp
   11a48:	4619      	mov	r1, r3
   11a4a:	f7ff ff6d 	bl	11928 <_copy>
}
   11a4e:	b005      	add	sp, #20
   11a50:	f85d fb04 	ldr.w	pc, [sp], #4

00011a54 <mult_row_column>:
{
   11a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11a56:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   11a58:	7808      	ldrb	r0, [r1, #0]
{
   11a5a:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   11a5c:	f7ff ff73 	bl	11946 <_double_byte>
   11a60:	4605      	mov	r5, r0
   11a62:	7860      	ldrb	r0, [r4, #1]
   11a64:	f7ff ff6f 	bl	11946 <_double_byte>
   11a68:	78a2      	ldrb	r2, [r4, #2]
   11a6a:	7863      	ldrb	r3, [r4, #1]
   11a6c:	4053      	eors	r3, r2
   11a6e:	78e2      	ldrb	r2, [r4, #3]
   11a70:	4053      	eors	r3, r2
   11a72:	405d      	eors	r5, r3
   11a74:	4045      	eors	r5, r0
   11a76:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   11a78:	7860      	ldrb	r0, [r4, #1]
   11a7a:	7827      	ldrb	r7, [r4, #0]
   11a7c:	f7ff ff63 	bl	11946 <_double_byte>
   11a80:	4605      	mov	r5, r0
   11a82:	78a0      	ldrb	r0, [r4, #2]
   11a84:	f7ff ff5f 	bl	11946 <_double_byte>
   11a88:	78a3      	ldrb	r3, [r4, #2]
   11a8a:	405f      	eors	r7, r3
   11a8c:	78e3      	ldrb	r3, [r4, #3]
   11a8e:	405f      	eors	r7, r3
   11a90:	407d      	eors	r5, r7
   11a92:	4045      	eors	r5, r0
   11a94:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   11a96:	78a0      	ldrb	r0, [r4, #2]
   11a98:	7865      	ldrb	r5, [r4, #1]
   11a9a:	7827      	ldrb	r7, [r4, #0]
   11a9c:	f7ff ff53 	bl	11946 <_double_byte>
   11aa0:	406f      	eors	r7, r5
   11aa2:	4605      	mov	r5, r0
   11aa4:	78e0      	ldrb	r0, [r4, #3]
   11aa6:	f7ff ff4e 	bl	11946 <_double_byte>
   11aaa:	78e3      	ldrb	r3, [r4, #3]
   11aac:	405f      	eors	r7, r3
   11aae:	407d      	eors	r5, r7
   11ab0:	4045      	eors	r5, r0
   11ab2:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   11ab4:	7820      	ldrb	r0, [r4, #0]
   11ab6:	f7ff ff46 	bl	11946 <_double_byte>
   11aba:	7863      	ldrb	r3, [r4, #1]
   11abc:	7825      	ldrb	r5, [r4, #0]
   11abe:	405d      	eors	r5, r3
   11ac0:	78a3      	ldrb	r3, [r4, #2]
   11ac2:	405d      	eors	r5, r3
   11ac4:	4045      	eors	r5, r0
   11ac6:	78e0      	ldrb	r0, [r4, #3]
   11ac8:	f7ff ff3d 	bl	11946 <_double_byte>
   11acc:	b2ed      	uxtb	r5, r5
   11ace:	4045      	eors	r5, r0
   11ad0:	70f5      	strb	r5, [r6, #3]
}
   11ad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00011ad4 <gf_double>:

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   11ad4:	460a      	mov	r2, r1
{
   11ad6:	b510      	push	{r4, lr}
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   11ad8:	f912 3b10 	ldrsb.w	r3, [r2], #16

	out += (TC_AES_BLOCK_SIZE - 1);
   11adc:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   11ade:	2b00      	cmp	r3, #0
   11ae0:	bfb4      	ite	lt
   11ae2:	2387      	movlt	r3, #135	; 0x87
   11ae4:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   11ae6:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   11aea:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   11aee:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   11af0:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   11af4:	d002      	beq.n	11afc <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   11af6:	7813      	ldrb	r3, [r2, #0]
   11af8:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   11afa:	e7f4      	b.n	11ae6 <gf_double+0x12>
	}
}
   11afc:	bd10      	pop	{r4, pc}

00011afe <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   11afe:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   11b00:	b120      	cbz	r0, 11b0c <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   11b02:	2258      	movs	r2, #88	; 0x58
   11b04:	2100      	movs	r1, #0
   11b06:	f7ff ff1c 	bl	11942 <_set>
   11b0a:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   11b0c:	bd08      	pop	{r3, pc}

00011b0e <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   11b0e:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   11b10:	4604      	mov	r4, r0
   11b12:	b188      	cbz	r0, 11b38 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   11b14:	2210      	movs	r2, #16
   11b16:	2100      	movs	r1, #0
   11b18:	f7ff ff13 	bl	11942 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   11b1c:	2210      	movs	r2, #16
   11b1e:	f104 0030 	add.w	r0, r4, #48	; 0x30
   11b22:	2100      	movs	r1, #0
   11b24:	f7ff ff0d 	bl	11942 <_set>
	s->leftover_offset = 0;
   11b28:	2300      	movs	r3, #0

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   11b2a:	2200      	movs	r2, #0
	s->leftover_offset = 0;
   11b2c:	6463      	str	r3, [r4, #68]	; 0x44
	s->countdown = MAX_CALLS;
   11b2e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   11b32:	2001      	movs	r0, #1
   11b34:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50

	return TC_CRYPTO_SUCCESS;
}
   11b38:	bd10      	pop	{r4, pc}

00011b3a <tc_cmac_setup>:
{
   11b3a:	b570      	push	{r4, r5, r6, lr}
   11b3c:	460d      	mov	r5, r1
   11b3e:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   11b40:	4604      	mov	r4, r0
   11b42:	b310      	cbz	r0, 11b8a <tc_cmac_setup+0x50>
   11b44:	b311      	cbz	r1, 11b8c <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   11b46:	2258      	movs	r2, #88	; 0x58
   11b48:	2100      	movs	r1, #0
   11b4a:	f7ff fefa 	bl	11942 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   11b4e:	4629      	mov	r1, r5
   11b50:	4630      	mov	r0, r6
	s->sched = sched;
   11b52:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   11b54:	f7f2 f872 	bl	3c3c <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   11b58:	2210      	movs	r2, #16
   11b5a:	2100      	movs	r1, #0
   11b5c:	4620      	mov	r0, r4
   11b5e:	f7ff fef0 	bl	11942 <_set>
	gf_double (s->K1, s->iv);
   11b62:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   11b66:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   11b68:	4621      	mov	r1, r4
   11b6a:	4620      	mov	r0, r4
   11b6c:	f7f2 f8ba 	bl	3ce4 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   11b70:	4621      	mov	r1, r4
   11b72:	4628      	mov	r0, r5
   11b74:	f7ff ffae 	bl	11ad4 <gf_double>
	gf_double (s->K2, s->K1);
   11b78:	4629      	mov	r1, r5
   11b7a:	f104 0020 	add.w	r0, r4, #32
   11b7e:	f7ff ffa9 	bl	11ad4 <gf_double>
	tc_cmac_init(s);
   11b82:	4620      	mov	r0, r4
   11b84:	f7ff ffc3 	bl	11b0e <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   11b88:	2001      	movs	r0, #1
}
   11b8a:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   11b8c:	4608      	mov	r0, r1
   11b8e:	e7fc      	b.n	11b8a <tc_cmac_setup+0x50>

00011b90 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   11b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11b94:	460d      	mov	r5, r1
   11b96:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   11b98:	4604      	mov	r4, r0
   11b9a:	2800      	cmp	r0, #0
   11b9c:	d062      	beq.n	11c64 <tc_cmac_update+0xd4>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   11b9e:	b912      	cbnz	r2, 11ba6 <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   11ba0:	2001      	movs	r0, #1
}
   11ba2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   11ba6:	2900      	cmp	r1, #0
   11ba8:	d05c      	beq.n	11c64 <tc_cmac_update+0xd4>
	if (s->countdown == 0) {
   11baa:	e9d0 0114 	ldrd	r0, r1, [r0, #80]	; 0x50
   11bae:	ea50 0301 	orrs.w	r3, r0, r1
   11bb2:	d057      	beq.n	11c64 <tc_cmac_update+0xd4>
	s->countdown--;
   11bb4:	f110 32ff 	adds.w	r2, r0, #4294967295
	if (s->leftover_offset > 0) {
   11bb8:	f8d4 8044 	ldr.w	r8, [r4, #68]	; 0x44
	s->countdown--;
   11bbc:	f141 33ff 	adc.w	r3, r1, #4294967295
   11bc0:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
	if (s->leftover_offset > 0) {
   11bc4:	f1b8 0f00 	cmp.w	r8, #0
   11bc8:	d02a      	beq.n	11c20 <tc_cmac_update+0x90>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   11bca:	f1c8 0710 	rsb	r7, r8, #16
		if (data_length < remaining_space) {
   11bce:	f108 0030 	add.w	r0, r8, #48	; 0x30
   11bd2:	42be      	cmp	r6, r7
   11bd4:	4420      	add	r0, r4
   11bd6:	d208      	bcs.n	11bea <tc_cmac_update+0x5a>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   11bd8:	462a      	mov	r2, r5
   11bda:	4633      	mov	r3, r6
   11bdc:	4631      	mov	r1, r6
   11bde:	f7ff fea3 	bl	11928 <_copy>
			s->leftover_offset += data_length;
   11be2:	6c62      	ldr	r2, [r4, #68]	; 0x44
   11be4:	4432      	add	r2, r6
   11be6:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   11be8:	e7da      	b.n	11ba0 <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   11bea:	463b      	mov	r3, r7
   11bec:	462a      	mov	r2, r5
   11bee:	4639      	mov	r1, r7
   11bf0:	f7ff fe9a 	bl	11928 <_copy>
		s->leftover_offset = 0;
   11bf4:	2300      	movs	r3, #0
   11bf6:	3e10      	subs	r6, #16
   11bf8:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   11bfa:	4446      	add	r6, r8
		data += remaining_space;
   11bfc:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   11bfe:	1e63      	subs	r3, r4, #1
   11c00:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   11c04:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   11c08:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   11c0c:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   11c0e:	ea82 0200 	eor.w	r2, r2, r0
   11c12:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   11c14:	d1f6      	bne.n	11c04 <tc_cmac_update+0x74>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   11c16:	4621      	mov	r1, r4
   11c18:	4620      	mov	r0, r4
   11c1a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   11c1c:	f7f2 f862 	bl	3ce4 <tc_aes_encrypt>
   11c20:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   11c24:	2e10      	cmp	r6, #16
   11c26:	d80a      	bhi.n	11c3e <tc_cmac_update+0xae>
	if (data_length > 0) {
   11c28:	2e00      	cmp	r6, #0
   11c2a:	d0b9      	beq.n	11ba0 <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   11c2c:	4633      	mov	r3, r6
   11c2e:	462a      	mov	r2, r5
   11c30:	4631      	mov	r1, r6
   11c32:	f104 0030 	add.w	r0, r4, #48	; 0x30
   11c36:	f7ff fe77 	bl	11928 <_copy>
		s->leftover_offset = data_length;
   11c3a:	6466      	str	r6, [r4, #68]	; 0x44
   11c3c:	e7b0      	b.n	11ba0 <tc_cmac_update+0x10>
   11c3e:	1e63      	subs	r3, r4, #1
   11c40:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   11c42:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   11c46:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   11c4a:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   11c4c:	ea82 0200 	eor.w	r2, r2, r0
   11c50:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   11c52:	d1f6      	bne.n	11c42 <tc_cmac_update+0xb2>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   11c54:	4621      	mov	r1, r4
   11c56:	4620      	mov	r0, r4
   11c58:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   11c5a:	f7f2 f843 	bl	3ce4 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   11c5e:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   11c60:	3e10      	subs	r6, #16
   11c62:	e7df      	b.n	11c24 <tc_cmac_update+0x94>
		return TC_CRYPTO_FAIL;
   11c64:	2000      	movs	r0, #0
   11c66:	e79c      	b.n	11ba2 <tc_cmac_update+0x12>

00011c68 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   11c68:	b570      	push	{r4, r5, r6, lr}
   11c6a:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   11c6c:	4605      	mov	r5, r0
   11c6e:	b1f0      	cbz	r0, 11cae <tc_cmac_final+0x46>
   11c70:	b371      	cbz	r1, 11cd0 <tc_cmac_final+0x68>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   11c72:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   11c74:	2a10      	cmp	r2, #16
   11c76:	d11b      	bne.n	11cb0 <tc_cmac_final+0x48>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   11c78:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   11c7a:	1e63      	subs	r3, r4, #1
   11c7c:	3901      	subs	r1, #1
   11c7e:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   11c82:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   11c86:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   11c8a:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   11c8c:	ea82 0206 	eor.w	r2, r2, r6
   11c90:	f811 6f01 	ldrb.w	r6, [r1, #1]!
   11c94:	ea82 0206 	eor.w	r2, r2, r6
   11c98:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   11c9a:	d1f2      	bne.n	11c82 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   11c9c:	4621      	mov	r1, r4
   11c9e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   11ca0:	4628      	mov	r0, r5
   11ca2:	f7f2 f81f 	bl	3ce4 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   11ca6:	4620      	mov	r0, r4
   11ca8:	f7ff ff29 	bl	11afe <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   11cac:	2001      	movs	r0, #1
}
   11cae:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   11cb0:	f102 0030 	add.w	r0, r2, #48	; 0x30
   11cb4:	2100      	movs	r1, #0
   11cb6:	f1c2 0210 	rsb	r2, r2, #16
   11cba:	4420      	add	r0, r4
   11cbc:	f7ff fe41 	bl	11942 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   11cc0:	2280      	movs	r2, #128	; 0x80
   11cc2:	6c63      	ldr	r3, [r4, #68]	; 0x44
		k = (uint8_t *) s->K2;
   11cc4:	f104 0120 	add.w	r1, r4, #32
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   11cc8:	4423      	add	r3, r4
   11cca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   11cce:	e7d4      	b.n	11c7a <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   11cd0:	4608      	mov	r0, r1
   11cd2:	e7ec      	b.n	11cae <tc_cmac_final+0x46>

00011cd4 <tc_sha256_update>:
{
   11cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11cd6:	460c      	mov	r4, r1
	if (s == (TCSha256State_t) 0 ||
   11cd8:	b110      	cbz	r0, 11ce0 <tc_sha256_update+0xc>
   11cda:	b1f9      	cbz	r1, 11d1c <tc_sha256_update+0x48>
	} else if (datalen == 0) {
   11cdc:	b90a      	cbnz	r2, 11ce2 <tc_sha256_update+0xe>
		return TC_CRYPTO_SUCCESS;
   11cde:	2001      	movs	r0, #1
}
   11ce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			s->leftover_offset = 0;
   11ce2:	2600      	movs	r6, #0
   11ce4:	188d      	adds	r5, r1, r2
			compress(s->iv, s->leftover);
   11ce6:	f100 0728 	add.w	r7, r0, #40	; 0x28
	while (datalen-- > 0) {
   11cea:	42a5      	cmp	r5, r4
   11cec:	d0f7      	beq.n	11cde <tc_sha256_update+0xa>
		s->leftover[s->leftover_offset++] = *(data++);
   11cee:	6e83      	ldr	r3, [r0, #104]	; 0x68
   11cf0:	1c5a      	adds	r2, r3, #1
   11cf2:	6682      	str	r2, [r0, #104]	; 0x68
   11cf4:	f814 1b01 	ldrb.w	r1, [r4], #1
   11cf8:	4403      	add	r3, r0
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
   11cfa:	2a3f      	cmp	r2, #63	; 0x3f
		s->leftover[s->leftover_offset++] = *(data++);
   11cfc:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
   11d00:	d9f3      	bls.n	11cea <tc_sha256_update+0x16>
			compress(s->iv, s->leftover);
   11d02:	4639      	mov	r1, r7
   11d04:	f7f2 f858 	bl	3db8 <compress>
			s->bits_hashed += (TC_SHA256_BLOCK_SIZE << 3);
   11d08:	e9d0 3208 	ldrd	r3, r2, [r0, #32]
   11d0c:	f513 7300 	adds.w	r3, r3, #512	; 0x200
   11d10:	f142 0200 	adc.w	r2, r2, #0
   11d14:	e9c0 3208 	strd	r3, r2, [r0, #32]
			s->leftover_offset = 0;
   11d18:	6686      	str	r6, [r0, #104]	; 0x68
			s->bits_hashed += (TC_SHA256_BLOCK_SIZE << 3);
   11d1a:	e7e6      	b.n	11cea <tc_sha256_update+0x16>
		return TC_CRYPTO_FAIL;
   11d1c:	4608      	mov	r0, r1
   11d1e:	e7df      	b.n	11ce0 <tc_sha256_update+0xc>

00011d20 <tc_sha256_final>:
{
   11d20:	b570      	push	{r4, r5, r6, lr}
   11d22:	460c      	mov	r4, r1
	if (digest == (uint8_t *) 0 ||
   11d24:	4605      	mov	r5, r0
   11d26:	2800      	cmp	r0, #0
   11d28:	d054      	beq.n	11dd4 <tc_sha256_final+0xb4>
   11d2a:	2900      	cmp	r1, #0
   11d2c:	d053      	beq.n	11dd6 <tc_sha256_final+0xb6>
	s->bits_hashed += (s->leftover_offset << 3);
   11d2e:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
   11d32:	6e89      	ldr	r1, [r1, #104]	; 0x68
   11d34:	f104 0628 	add.w	r6, r4, #40	; 0x28
   11d38:	00c8      	lsls	r0, r1, #3
   11d3a:	1812      	adds	r2, r2, r0
   11d3c:	f143 0300 	adc.w	r3, r3, #0
   11d40:	e9c4 2308 	strd	r2, r3, [r4, #32]
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   11d44:	2380      	movs	r3, #128	; 0x80
   11d46:	1c48      	adds	r0, r1, #1
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
   11d48:	2838      	cmp	r0, #56	; 0x38
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   11d4a:	4421      	add	r1, r4
   11d4c:	66a0      	str	r0, [r4, #104]	; 0x68
   11d4e:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
   11d52:	d90b      	bls.n	11d6c <tc_sha256_final+0x4c>
		_set(s->leftover + s->leftover_offset, 0x00,
   11d54:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
   11d58:	2100      	movs	r1, #0
   11d5a:	4430      	add	r0, r6
   11d5c:	f7ff fdf1 	bl	11942 <_set>
		compress(s->iv, s->leftover);
   11d60:	4631      	mov	r1, r6
   11d62:	4620      	mov	r0, r4
   11d64:	f7f2 f828 	bl	3db8 <compress>
		s->leftover_offset = 0;
   11d68:	2300      	movs	r3, #0
   11d6a:	66a3      	str	r3, [r4, #104]	; 0x68
	_set(s->leftover + s->leftover_offset, 0x00,
   11d6c:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   11d6e:	2100      	movs	r1, #0
   11d70:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
   11d74:	4430      	add	r0, r6
   11d76:	f7ff fde4 	bl	11942 <_set>
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
   11d7a:	6a23      	ldr	r3, [r4, #32]
	compress(s->iv, s->leftover);
   11d7c:	4631      	mov	r1, r6
   11d7e:	ba1a      	rev	r2, r3
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
   11d80:	6a63      	ldr	r3, [r4, #36]	; 0x24
	s->leftover[sizeof(s->leftover) - 4] = (uint8_t)(s->bits_hashed >> 24);
   11d82:	6662      	str	r2, [r4, #100]	; 0x64
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
   11d84:	0a1a      	lsrs	r2, r3, #8
	s->leftover[sizeof(s->leftover) - 5] = (uint8_t)(s->bits_hashed >> 32);
   11d86:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
   11d8a:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
   11d8e:	0c1a      	lsrs	r2, r3, #16
	s->leftover[sizeof(s->leftover) - 8] = (uint8_t)(s->bits_hashed >> 56);
   11d90:	0e1b      	lsrs	r3, r3, #24
	compress(s->iv, s->leftover);
   11d92:	4620      	mov	r0, r4
	s->leftover[sizeof(s->leftover) - 8] = (uint8_t)(s->bits_hashed >> 56);
   11d94:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
   11d98:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
	compress(s->iv, s->leftover);
   11d9c:	f7f2 f80c 	bl	3db8 <compress>
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   11da0:	1f26      	subs	r6, r4, #4
   11da2:	1d2b      	adds	r3, r5, #4
   11da4:	f105 0024 	add.w	r0, r5, #36	; 0x24
		unsigned int t = *((unsigned int *) &s->iv[i]);
   11da8:	f856 2f04 	ldr.w	r2, [r6, #4]!
		*digest++ = (uint8_t)(t >> 24);
   11dac:	3304      	adds	r3, #4
   11dae:	0e11      	lsrs	r1, r2, #24
   11db0:	f803 1c08 	strb.w	r1, [r3, #-8]
		*digest++ = (uint8_t)(t >> 16);
   11db4:	0c11      	lsrs	r1, r2, #16
   11db6:	f803 1c07 	strb.w	r1, [r3, #-7]
		*digest++ = (uint8_t)(t >> 8);
   11dba:	0a11      	lsrs	r1, r2, #8
   11dbc:	f803 1c06 	strb.w	r1, [r3, #-6]
		*digest++ = (uint8_t)(t);
   11dc0:	f803 2c05 	strb.w	r2, [r3, #-5]
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   11dc4:	4283      	cmp	r3, r0
   11dc6:	d1ef      	bne.n	11da8 <tc_sha256_final+0x88>
	_set(s, 0, sizeof(*s));
   11dc8:	4620      	mov	r0, r4
   11dca:	2270      	movs	r2, #112	; 0x70
   11dcc:	2100      	movs	r1, #0
   11dce:	f7ff fdb8 	bl	11942 <_set>
	return TC_CRYPTO_SUCCESS;
   11dd2:	2001      	movs	r0, #1
}
   11dd4:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   11dd6:	4608      	mov	r0, r1
   11dd8:	e7fc      	b.n	11dd4 <tc_sha256_final+0xb4>

00011dda <rekey>:
#include <tinycrypt/hmac.h>
#include <tinycrypt/constants.h>
#include <tinycrypt/utils.h>

static void rekey(uint8_t *key, const uint8_t *new_key, unsigned int key_size)
{
   11dda:	b530      	push	{r4, r5, lr}
   11ddc:	1e43      	subs	r3, r0, #1
   11dde:	188d      	adds	r5, r1, r2
	const uint8_t inner_pad = (uint8_t) 0x36;
	const uint8_t outer_pad = (uint8_t) 0x5c;
	unsigned int i;

	for (i = 0; i < key_size; ++i) {
   11de0:	42a9      	cmp	r1, r5
   11de2:	d106      	bne.n	11df2 <rekey+0x18>
		key[i] = inner_pad ^ new_key[i];
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
	}
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
   11de4:	2136      	movs	r1, #54	; 0x36
   11de6:	245c      	movs	r4, #92	; 0x5c
   11de8:	4402      	add	r2, r0
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
   11dea:	1a13      	subs	r3, r2, r0
   11dec:	2b3f      	cmp	r3, #63	; 0x3f
   11dee:	d90c      	bls.n	11e0a <rekey+0x30>
	}
}
   11df0:	bd30      	pop	{r4, r5, pc}
		key[i] = inner_pad ^ new_key[i];
   11df2:	780c      	ldrb	r4, [r1, #0]
   11df4:	f084 0436 	eor.w	r4, r4, #54	; 0x36
   11df8:	f803 4f01 	strb.w	r4, [r3, #1]!
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
   11dfc:	f811 4b01 	ldrb.w	r4, [r1], #1
   11e00:	f084 045c 	eor.w	r4, r4, #92	; 0x5c
   11e04:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
	for (i = 0; i < key_size; ++i) {
   11e08:	e7ea      	b.n	11de0 <rekey+0x6>
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
   11e0a:	f802 1b01 	strb.w	r1, [r2], #1
   11e0e:	f882 403f 	strb.w	r4, [r2, #63]	; 0x3f
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
   11e12:	e7ea      	b.n	11dea <rekey+0x10>

00011e14 <tc_hmac_set_key>:

int tc_hmac_set_key(TCHmacState_t ctx, const uint8_t *key,
		    unsigned int key_size)
{
   11e14:	b5f0      	push	{r4, r5, r6, r7, lr}
   11e16:	460e      	mov	r6, r1
   11e18:	4614      	mov	r4, r2
	/* Input sanity check */
	if (ctx == (TCHmacState_t) 0 ||
   11e1a:	4605      	mov	r5, r0
{
   11e1c:	b0cd      	sub	sp, #308	; 0x134
	if (ctx == (TCHmacState_t) 0 ||
   11e1e:	b1b8      	cbz	r0, 11e50 <tc_hmac_set_key+0x3c>
   11e20:	b341      	cbz	r1, 11e74 <tc_hmac_set_key+0x60>
	    key == (const uint8_t *) 0 ||
   11e22:	b34a      	cbz	r2, 11e78 <tc_hmac_set_key+0x64>
	}

	const uint8_t dummy_key[TC_SHA256_BLOCK_SIZE];
	struct tc_hmac_state_struct dummy_state;

	if (key_size <= TC_SHA256_BLOCK_SIZE) {
   11e24:	2a40      	cmp	r2, #64	; 0x40
   11e26:	f100 0770 	add.w	r7, r0, #112	; 0x70
   11e2a:	d813      	bhi.n	11e54 <tc_hmac_set_key+0x40>
		 * certain timing attacks. Without these dummy calls,
		 * adversaries would be able to learn whether the key_size is
		 * greater than TC_SHA256_BLOCK_SIZE by measuring the time
		 * consumed in this process.
		 */
		(void)tc_sha256_init(&dummy_state.hash_state);
   11e2c:	a810      	add	r0, sp, #64	; 0x40
   11e2e:	f7f2 f8a9 	bl	3f84 <tc_sha256_init>
		(void)tc_sha256_update(&dummy_state.hash_state,
   11e32:	4622      	mov	r2, r4
   11e34:	4669      	mov	r1, sp
   11e36:	a810      	add	r0, sp, #64	; 0x40
   11e38:	f7ff ff4c 	bl	11cd4 <tc_sha256_update>
				       dummy_key,
				       key_size);
		(void)tc_sha256_final(&dummy_state.key[TC_SHA256_DIGEST_SIZE],
   11e3c:	a910      	add	r1, sp, #64	; 0x40
   11e3e:	a834      	add	r0, sp, #208	; 0xd0
   11e40:	f7ff ff6e 	bl	11d20 <tc_sha256_final>
				      &dummy_state.hash_state);

		/* Actual code for when key_size <= TC_SHA256_BLOCK_SIZE: */
		rekey(ctx->key, key, key_size);
   11e44:	4622      	mov	r2, r4
   11e46:	4631      	mov	r1, r6
	} else {
		(void)tc_sha256_init(&ctx->hash_state);
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
				      &ctx->hash_state);
		rekey(ctx->key,
   11e48:	4638      	mov	r0, r7
   11e4a:	f7ff ffc6 	bl	11dda <rekey>
		      &ctx->key[TC_SHA256_DIGEST_SIZE],
		      TC_SHA256_DIGEST_SIZE);
	}

	return TC_CRYPTO_SUCCESS;
   11e4e:	2001      	movs	r0, #1
}
   11e50:	b04d      	add	sp, #308	; 0x134
   11e52:	bdf0      	pop	{r4, r5, r6, r7, pc}
		(void)tc_sha256_init(&ctx->hash_state);
   11e54:	f7f2 f896 	bl	3f84 <tc_sha256_init>
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
   11e58:	4622      	mov	r2, r4
   11e5a:	4631      	mov	r1, r6
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
   11e5c:	f105 0490 	add.w	r4, r5, #144	; 0x90
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
   11e60:	4628      	mov	r0, r5
   11e62:	f7ff ff37 	bl	11cd4 <tc_sha256_update>
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
   11e66:	4629      	mov	r1, r5
   11e68:	4620      	mov	r0, r4
   11e6a:	f7ff ff59 	bl	11d20 <tc_sha256_final>
		rekey(ctx->key,
   11e6e:	2220      	movs	r2, #32
   11e70:	4621      	mov	r1, r4
   11e72:	e7e9      	b.n	11e48 <tc_hmac_set_key+0x34>
		return TC_CRYPTO_FAIL;
   11e74:	4608      	mov	r0, r1
   11e76:	e7eb      	b.n	11e50 <tc_hmac_set_key+0x3c>
   11e78:	4610      	mov	r0, r2
   11e7a:	e7e9      	b.n	11e50 <tc_hmac_set_key+0x3c>

00011e7c <tc_hmac_init>:

int tc_hmac_init(TCHmacState_t ctx)
{
   11e7c:	b510      	push	{r4, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
   11e7e:	4604      	mov	r4, r0
   11e80:	b140      	cbz	r0, 11e94 <tc_hmac_init+0x18>
		return TC_CRYPTO_FAIL;
	}

  (void) tc_sha256_init(&ctx->hash_state);
   11e82:	f7f2 f87f 	bl	3f84 <tc_sha256_init>
  (void) tc_sha256_update(&ctx->hash_state, ctx->key, TC_SHA256_BLOCK_SIZE);
   11e86:	2240      	movs	r2, #64	; 0x40
   11e88:	4620      	mov	r0, r4
   11e8a:	f104 0170 	add.w	r1, r4, #112	; 0x70
   11e8e:	f7ff ff21 	bl	11cd4 <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
   11e92:	2001      	movs	r0, #1
}
   11e94:	bd10      	pop	{r4, pc}

00011e96 <tc_hmac_update>:

int tc_hmac_update(TCHmacState_t ctx,
		   const void *data,
		   unsigned int data_length)
{
   11e96:	b508      	push	{r3, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
   11e98:	b110      	cbz	r0, 11ea0 <tc_hmac_update+0xa>
		return TC_CRYPTO_FAIL;
	}

	(void)tc_sha256_update(&ctx->hash_state, data, data_length);
   11e9a:	f7ff ff1b 	bl	11cd4 <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
   11e9e:	2001      	movs	r0, #1
}
   11ea0:	bd08      	pop	{r3, pc}

00011ea2 <tc_hmac_final>:

int tc_hmac_final(uint8_t *tag, unsigned int taglen, TCHmacState_t ctx)
{
   11ea2:	b570      	push	{r4, r5, r6, lr}
   11ea4:	460e      	mov	r6, r1
   11ea6:	4614      	mov	r4, r2

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   11ea8:	4605      	mov	r5, r0
   11eaa:	b1f0      	cbz	r0, 11eea <tc_hmac_final+0x48>
   11eac:	2920      	cmp	r1, #32
   11eae:	d11c      	bne.n	11eea <tc_hmac_final+0x48>
	    taglen != TC_SHA256_DIGEST_SIZE ||
   11eb0:	b1ea      	cbz	r2, 11eee <tc_hmac_final+0x4c>
	    ctx == (TCHmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	(void) tc_sha256_final(tag, &ctx->hash_state);
   11eb2:	4611      	mov	r1, r2
   11eb4:	f7ff ff34 	bl	11d20 <tc_sha256_final>

	(void)tc_sha256_init(&ctx->hash_state);
   11eb8:	4620      	mov	r0, r4
   11eba:	f7f2 f863 	bl	3f84 <tc_sha256_init>
	(void)tc_sha256_update(&ctx->hash_state,
   11ebe:	2240      	movs	r2, #64	; 0x40
   11ec0:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
   11ec4:	4620      	mov	r0, r4
   11ec6:	f7ff ff05 	bl	11cd4 <tc_sha256_update>
			       &ctx->key[TC_SHA256_BLOCK_SIZE],
				TC_SHA256_BLOCK_SIZE);
	(void)tc_sha256_update(&ctx->hash_state, tag, TC_SHA256_DIGEST_SIZE);
   11eca:	4632      	mov	r2, r6
   11ecc:	4629      	mov	r1, r5
   11ece:	4620      	mov	r0, r4
   11ed0:	f7ff ff00 	bl	11cd4 <tc_sha256_update>
	(void)tc_sha256_final(tag, &ctx->hash_state);
   11ed4:	4621      	mov	r1, r4
   11ed6:	4628      	mov	r0, r5
   11ed8:	f7ff ff22 	bl	11d20 <tc_sha256_final>

	/* destroy the current state */
	_set(ctx, 0, sizeof(*ctx));
   11edc:	4620      	mov	r0, r4
   11ede:	22f0      	movs	r2, #240	; 0xf0
   11ee0:	2100      	movs	r1, #0
   11ee2:	f7ff fd2e 	bl	11942 <_set>

	return TC_CRYPTO_SUCCESS;
   11ee6:	2001      	movs	r0, #1
}
   11ee8:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   11eea:	2000      	movs	r0, #0
   11eec:	e7fc      	b.n	11ee8 <tc_hmac_final+0x46>
   11eee:	4610      	mov	r0, r2
   11ef0:	e7fa      	b.n	11ee8 <tc_hmac_final+0x46>

00011ef2 <update>:

/*
 * Assumes: prng != NULL
 */
static void update(TCHmacPrng_t prng, const uint8_t *data, unsigned int datalen, const uint8_t *additional_data, unsigned int additional_datalen)
{
   11ef2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11ef6:	4604      	mov	r4, r0
	const uint8_t separator0 = 0x00;
	const uint8_t separator1 = 0x01;
   11ef8:	f04f 0b01 	mov.w	fp, #1
{
   11efc:	461f      	mov	r7, r3
	const uint8_t separator0 = 0x00;
   11efe:	2300      	movs	r3, #0
{
   11f00:	4688      	mov	r8, r1

	/* configure the new prng key into the prng's instance of hmac */
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   11f02:	f100 06f0 	add.w	r6, r0, #240	; 0xf0
   11f06:	4631      	mov	r1, r6
{
   11f08:	4691      	mov	r9, r2
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   11f0a:	2220      	movs	r2, #32
	const uint8_t separator0 = 0x00;
   11f0c:	f88d 3006 	strb.w	r3, [sp, #6]
{
   11f10:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
	const uint8_t separator1 = 0x01;
   11f14:	f88d b007 	strb.w	fp, [sp, #7]

	/* use current state, e and separator 0 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   11f18:	f504 7588 	add.w	r5, r4, #272	; 0x110
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   11f1c:	f7ff ff7a 	bl	11e14 <tc_hmac_set_key>
	(void)tc_hmac_init(&prng->h);
   11f20:	4620      	mov	r0, r4
   11f22:	f7ff ffab 	bl	11e7c <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   11f26:	2220      	movs	r2, #32
   11f28:	4629      	mov	r1, r5
   11f2a:	4620      	mov	r0, r4
   11f2c:	f7ff ffb3 	bl	11e96 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator0, sizeof(separator0));
   11f30:	465a      	mov	r2, fp
   11f32:	4620      	mov	r0, r4
   11f34:	f10d 0106 	add.w	r1, sp, #6
   11f38:	f7ff ffad 	bl	11e96 <tc_hmac_update>

	if (data && datalen)
   11f3c:	f1b8 0f00 	cmp.w	r8, #0
   11f40:	d007      	beq.n	11f52 <update+0x60>
   11f42:	f1b9 0f00 	cmp.w	r9, #0
   11f46:	d004      	beq.n	11f52 <update+0x60>
		(void)tc_hmac_update(&prng->h, data, datalen);
   11f48:	464a      	mov	r2, r9
   11f4a:	4641      	mov	r1, r8
   11f4c:	4620      	mov	r0, r4
   11f4e:	f7ff ffa2 	bl	11e96 <tc_hmac_update>
	if (additional_data && additional_datalen)
   11f52:	b13f      	cbz	r7, 11f64 <update+0x72>
   11f54:	f1ba 0f00 	cmp.w	sl, #0
   11f58:	d004      	beq.n	11f64 <update+0x72>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
   11f5a:	4652      	mov	r2, sl
   11f5c:	4639      	mov	r1, r7
   11f5e:	4620      	mov	r0, r4
   11f60:	f7ff ff99 	bl	11e96 <tc_hmac_update>

	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
   11f64:	4622      	mov	r2, r4
   11f66:	2120      	movs	r1, #32
   11f68:	4630      	mov	r0, r6
   11f6a:	f7ff ff9a 	bl	11ea2 <tc_hmac_final>

	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   11f6e:	2220      	movs	r2, #32
   11f70:	4631      	mov	r1, r6
   11f72:	4620      	mov	r0, r4
   11f74:	f7ff ff4e 	bl	11e14 <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
   11f78:	4620      	mov	r0, r4
   11f7a:	f7ff ff7f 	bl	11e7c <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   11f7e:	2220      	movs	r2, #32
   11f80:	4629      	mov	r1, r5
   11f82:	4620      	mov	r0, r4
   11f84:	f7ff ff87 	bl	11e96 <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   11f88:	4622      	mov	r2, r4
   11f8a:	2120      	movs	r1, #32
   11f8c:	4628      	mov	r0, r5
   11f8e:	f7ff ff88 	bl	11ea2 <tc_hmac_final>

	if (data == 0 || datalen == 0)
   11f92:	f1b8 0f00 	cmp.w	r8, #0
   11f96:	d03a      	beq.n	1200e <update+0x11c>
   11f98:	f1b9 0f00 	cmp.w	r9, #0
   11f9c:	d037      	beq.n	1200e <update+0x11c>
		return;

	/* configure the new prng key into the prng's instance of hmac */
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   11f9e:	2220      	movs	r2, #32
   11fa0:	4631      	mov	r1, r6
   11fa2:	4620      	mov	r0, r4
   11fa4:	f7ff ff36 	bl	11e14 <tc_hmac_set_key>

	/* use current state, e and separator 1 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
   11fa8:	4620      	mov	r0, r4
   11faa:	f7ff ff67 	bl	11e7c <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   11fae:	2220      	movs	r2, #32
   11fb0:	4629      	mov	r1, r5
   11fb2:	4620      	mov	r0, r4
   11fb4:	f7ff ff6f 	bl	11e96 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator1, sizeof(separator1));
   11fb8:	2201      	movs	r2, #1
   11fba:	f10d 0107 	add.w	r1, sp, #7
   11fbe:	4620      	mov	r0, r4
   11fc0:	f7ff ff69 	bl	11e96 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, data, datalen);
   11fc4:	464a      	mov	r2, r9
   11fc6:	4641      	mov	r1, r8
   11fc8:	4620      	mov	r0, r4
   11fca:	f7ff ff64 	bl	11e96 <tc_hmac_update>
	if (additional_data && additional_datalen)
   11fce:	b13f      	cbz	r7, 11fe0 <update+0xee>
   11fd0:	f1ba 0f00 	cmp.w	sl, #0
   11fd4:	d004      	beq.n	11fe0 <update+0xee>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
   11fd6:	4652      	mov	r2, sl
   11fd8:	4639      	mov	r1, r7
   11fda:	4620      	mov	r0, r4
   11fdc:	f7ff ff5b 	bl	11e96 <tc_hmac_update>
	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
   11fe0:	4622      	mov	r2, r4
   11fe2:	2120      	movs	r1, #32
   11fe4:	4630      	mov	r0, r6
   11fe6:	f7ff ff5c 	bl	11ea2 <tc_hmac_final>

	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   11fea:	2220      	movs	r2, #32
   11fec:	4631      	mov	r1, r6
   11fee:	4620      	mov	r0, r4
   11ff0:	f7ff ff10 	bl	11e14 <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
   11ff4:	4620      	mov	r0, r4
   11ff6:	f7ff ff41 	bl	11e7c <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   11ffa:	2220      	movs	r2, #32
   11ffc:	4629      	mov	r1, r5
   11ffe:	4620      	mov	r0, r4
   12000:	f7ff ff49 	bl	11e96 <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   12004:	4622      	mov	r2, r4
   12006:	2120      	movs	r1, #32
   12008:	4628      	mov	r0, r5
   1200a:	f7ff ff4a 	bl	11ea2 <tc_hmac_final>
}
   1200e:	b003      	add	sp, #12
   12010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00012014 <tc_hmac_prng_init>:

int tc_hmac_prng_init(TCHmacPrng_t prng,
		      const uint8_t *personalization,
		      unsigned int plen)
{
   12014:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   12016:	460c      	mov	r4, r1
   12018:	4617      	mov	r7, r2

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
   1201a:	4605      	mov	r5, r0
   1201c:	b1b0      	cbz	r0, 1204c <tc_hmac_prng_init+0x38>
	    personalization == (uint8_t *) 0 ||
   1201e:	b1b9      	cbz	r1, 12050 <tc_hmac_prng_init+0x3c>

	/* put the generator into a known state: */
	_set(prng->key, 0x00, sizeof(prng->key));
	_set(prng->v, 0x01, sizeof(prng->v));

	update(prng, personalization, plen, 0, 0);
   12020:	2600      	movs	r6, #0
	_set(prng->key, 0x00, sizeof(prng->key));
   12022:	2220      	movs	r2, #32
   12024:	2100      	movs	r1, #0
   12026:	30f0      	adds	r0, #240	; 0xf0
   12028:	f7ff fc8b 	bl	11942 <_set>
	_set(prng->v, 0x01, sizeof(prng->v));
   1202c:	2220      	movs	r2, #32
   1202e:	2101      	movs	r1, #1
   12030:	f505 7088 	add.w	r0, r5, #272	; 0x110
   12034:	f7ff fc85 	bl	11942 <_set>
	update(prng, personalization, plen, 0, 0);
   12038:	4628      	mov	r0, r5
   1203a:	4633      	mov	r3, r6
   1203c:	463a      	mov	r2, r7
   1203e:	4621      	mov	r1, r4
   12040:	9600      	str	r6, [sp, #0]
   12042:	f7ff ff56 	bl	11ef2 <update>

	/* force a reseed before allowing tc_hmac_prng_generate to succeed: */
	prng->countdown = 0;

	return TC_CRYPTO_SUCCESS;
   12046:	2001      	movs	r0, #1
	prng->countdown = 0;
   12048:	f8c5 6130 	str.w	r6, [r5, #304]	; 0x130
}
   1204c:	b003      	add	sp, #12
   1204e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   12050:	4608      	mov	r0, r1
   12052:	e7fb      	b.n	1204c <tc_hmac_prng_init+0x38>

00012054 <tc_hmac_prng_reseed>:
int tc_hmac_prng_reseed(TCHmacPrng_t prng,
			const uint8_t *seed,
			unsigned int seedlen,
			const uint8_t *additional_input,
			unsigned int additionallen)
{
   12054:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   12056:	9c08      	ldr	r4, [sp, #32]

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
   12058:	4605      	mov	r5, r0
   1205a:	b180      	cbz	r0, 1207e <tc_hmac_prng_reseed+0x2a>
   1205c:	b179      	cbz	r1, 1207e <tc_hmac_prng_reseed+0x2a>
	    seed == (const uint8_t *) 0 ||
	    seedlen < MIN_SLEN ||
   1205e:	2a1f      	cmp	r2, #31
   12060:	d90d      	bls.n	1207e <tc_hmac_prng_reseed+0x2a>
	    seedlen > MAX_SLEN) {
		return TC_CRYPTO_FAIL;
	}

	if (additional_input != (const uint8_t *) 0) {
   12062:	b153      	cbz	r3, 1207a <tc_hmac_prng_reseed+0x26>
		/*
		 * Abort if additional_input is provided but has inappropriate
		 * length
		 */
		if (additionallen == 0 ||
   12064:	b16c      	cbz	r4, 12082 <tc_hmac_prng_reseed+0x2e>
		    additionallen > MAX_ALEN) {
			return TC_CRYPTO_FAIL;
		} else {
			/* call update for the seed and additional_input */
			update(prng, seed, seedlen, additional_input, additionallen);
   12066:	9400      	str	r4, [sp, #0]
		}
	} else {
		/* call update only for the seed */
		update(prng, seed, seedlen, 0, 0);
   12068:	f7ff ff43 	bl	11ef2 <update>
	}

	/* ... and enable hmac_prng_generate */
	prng->countdown = MAX_GENS;
   1206c:	f04f 33ff 	mov.w	r3, #4294967295

	return TC_CRYPTO_SUCCESS;
   12070:	2001      	movs	r0, #1
	prng->countdown = MAX_GENS;
   12072:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130
}
   12076:	b003      	add	sp, #12
   12078:	bdf0      	pop	{r4, r5, r6, r7, pc}
		update(prng, seed, seedlen, 0, 0);
   1207a:	9300      	str	r3, [sp, #0]
   1207c:	e7f4      	b.n	12068 <tc_hmac_prng_reseed+0x14>
		return TC_CRYPTO_FAIL;
   1207e:	2000      	movs	r0, #0
   12080:	e7f9      	b.n	12076 <tc_hmac_prng_reseed+0x22>
   12082:	4620      	mov	r0, r4
   12084:	e7f7      	b.n	12076 <tc_hmac_prng_reseed+0x22>

00012086 <tc_hmac_prng_generate>:

int tc_hmac_prng_generate(uint8_t *out, unsigned int outlen, TCHmacPrng_t prng)
{
   12086:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1208a:	460d      	mov	r5, r1
   1208c:	4614      	mov	r4, r2
	unsigned int bufferlen;

	/* input sanity check: */
	if (out == (uint8_t *) 0 ||
   1208e:	4680      	mov	r8, r0
   12090:	b3d8      	cbz	r0, 1210a <tc_hmac_prng_generate+0x84>
   12092:	b3d2      	cbz	r2, 1210a <tc_hmac_prng_generate+0x84>
	    prng == (TCHmacPrng_t) 0 ||
   12094:	1e4b      	subs	r3, r1, #1
   12096:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
   1209a:	d236      	bcs.n	1210a <tc_hmac_prng_generate+0x84>
	    outlen == 0 ||
	    outlen > MAX_OUT) {
		return TC_CRYPTO_FAIL;
	} else if (prng->countdown == 0) {
   1209c:	f8d2 3130 	ldr.w	r3, [r2, #304]	; 0x130
   120a0:	b3ab      	cbz	r3, 1210e <tc_hmac_prng_generate+0x88>
		return TC_HMAC_PRNG_RESEED_REQ;
	}

	prng->countdown--;
   120a2:	3b01      	subs	r3, #1
   120a4:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

	while (outlen != 0) {
		/* configure the new prng key into the prng's instance of hmac */
		tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   120a8:	f102 09f0 	add.w	r9, r2, #240	; 0xf0

		/* operate HMAC in OFB mode to create "random" outputs */
		(void)tc_hmac_init(&prng->h);
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   120ac:	f502 7788 	add.w	r7, r2, #272	; 0x110
		tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   120b0:	2220      	movs	r2, #32
   120b2:	4649      	mov	r1, r9
   120b4:	4620      	mov	r0, r4
   120b6:	f7ff fead 	bl	11e14 <tc_hmac_set_key>
		(void)tc_hmac_init(&prng->h);
   120ba:	4620      	mov	r0, r4
   120bc:	f7ff fede 	bl	11e7c <tc_hmac_init>
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   120c0:	2220      	movs	r2, #32
   120c2:	4639      	mov	r1, r7
   120c4:	4620      	mov	r0, r4
   120c6:	f7ff fee6 	bl	11e96 <tc_hmac_update>
		(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   120ca:	4622      	mov	r2, r4
   120cc:	2120      	movs	r1, #32
   120ce:	4638      	mov	r0, r7
   120d0:	f7ff fee7 	bl	11ea2 <tc_hmac_final>

		bufferlen = (TC_SHA256_DIGEST_SIZE > outlen) ?
   120d4:	2d20      	cmp	r5, #32
   120d6:	462e      	mov	r6, r5
   120d8:	bf28      	it	cs
   120da:	2620      	movcs	r6, #32
			outlen : TC_SHA256_DIGEST_SIZE;
		(void)_copy(out, bufferlen, prng->v, bufferlen);
   120dc:	4640      	mov	r0, r8
   120de:	4633      	mov	r3, r6
   120e0:	463a      	mov	r2, r7
   120e2:	4631      	mov	r1, r6
   120e4:	f7ff fc20 	bl	11928 <_copy>

		out += bufferlen;
		outlen = (outlen > TC_SHA256_DIGEST_SIZE) ?
			(outlen - TC_SHA256_DIGEST_SIZE) : 0;
   120e8:	2d20      	cmp	r5, #32
   120ea:	bf38      	it	cc
   120ec:	2520      	movcc	r5, #32
	while (outlen != 0) {
   120ee:	3d20      	subs	r5, #32
		out += bufferlen;
   120f0:	44b0      	add	r8, r6
	while (outlen != 0) {
   120f2:	d1dd      	bne.n	120b0 <tc_hmac_prng_generate+0x2a>
	}

	/* block future PRNG compromises from revealing past state */
	update(prng, 0, 0, 0, 0);
   120f4:	4620      	mov	r0, r4
   120f6:	462b      	mov	r3, r5
   120f8:	462a      	mov	r2, r5
   120fa:	4629      	mov	r1, r5
   120fc:	9500      	str	r5, [sp, #0]
   120fe:	f7ff fef8 	bl	11ef2 <update>

	return TC_CRYPTO_SUCCESS;
   12102:	2001      	movs	r0, #1
}
   12104:	b003      	add	sp, #12
   12106:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
   1210a:	2000      	movs	r0, #0
   1210c:	e7fa      	b.n	12104 <tc_hmac_prng_generate+0x7e>
		return TC_HMAC_PRNG_RESEED_REQ;
   1210e:	f04f 30ff 	mov.w	r0, #4294967295
   12112:	e7f7      	b.n	12104 <tc_hmac_prng_generate+0x7e>

00012114 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   12114:	2100      	movs	r1, #0
   12116:	2001      	movs	r0, #1
   12118:	f7f2 b840 	b.w	419c <z_arm_fatal_error>

0001211c <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   1211c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
   1211e:	f383 880b 	msr	PSPLIM, r3
}
   12122:	4770      	bx	lr

00012124 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   12124:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   12126:	6800      	ldr	r0, [r0, #0]
   12128:	f7f2 b838 	b.w	419c <z_arm_fatal_error>

0001212c <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   1212c:	b508      	push	{r3, lr}
	handler();
   1212e:	f7f2 f86d 	bl	420c <z_SysNmiOnReset>
	z_arm_int_exit();
}
   12132:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   12136:	f7f2 bae7 	b.w	4708 <z_arm_exc_exit>

0001213a <mpu_configure_region>:
{
   1213a:	b530      	push	{r4, r5, lr}
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
   1213c:	684b      	ldr	r3, [r1, #4]
	region_conf.base = new_region->start;
   1213e:	680c      	ldr	r4, [r1, #0]
{
   12140:	b085      	sub	sp, #20
	p_attr->rbar = attr->rbar &
   12142:	890a      	ldrh	r2, [r1, #8]
   12144:	7a8d      	ldrb	r5, [r1, #10]
	region_conf.base = new_region->start;
   12146:	9400      	str	r4, [sp, #0]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   12148:	3b01      	subs	r3, #1
   1214a:	f024 041f 	bic.w	r4, r4, #31
   1214e:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
   12150:	f002 021f 	and.w	r2, r2, #31
   12154:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   12158:	f023 031f 	bic.w	r3, r3, #31
	return region_allocate_and_init(index,
   1215c:	4669      	mov	r1, sp
	p_attr->rbar = attr->rbar &
   1215e:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   12162:	9303      	str	r3, [sp, #12]
   12164:	f7f2 fb52 	bl	480c <region_allocate_and_init>
}
   12168:	b005      	add	sp, #20
   1216a:	bd30      	pop	{r4, r5, pc}

0001216c <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   1216c:	e840 f300 	tt	r3, r0

int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
   12170:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   12174:	b2d8      	uxtb	r0, r3
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
   12176:	bf08      	it	eq
   12178:	f06f 0015 	mvneq.w	r0, #21
   1217c:	4770      	bx	lr

0001217e <strtol>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
long strtol(const char *nptr, char **endptr, register int base)
{
   1217e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12182:	4684      	mov	ip, r0
   12184:	4688      	mov	r8, r1
	register const char *s = nptr;
   12186:	4601      	mov	r1, r0
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
   12188:	460c      	mov	r4, r1
   1218a:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   1218e:	2b20      	cmp	r3, #32
   12190:	d033      	beq.n	121fa <strtol+0x7c>
   12192:	f1a3 0009 	sub.w	r0, r3, #9
   12196:	2804      	cmp	r0, #4
   12198:	d92f      	bls.n	121fa <strtol+0x7c>
	} while (isspace(c));
	if (c == '-') {
   1219a:	2b2d      	cmp	r3, #45	; 0x2d
   1219c:	d12f      	bne.n	121fe <strtol+0x80>
		neg = 1;
		c = *s++;
   1219e:	784b      	ldrb	r3, [r1, #1]
   121a0:	1c8c      	adds	r4, r1, #2
		neg = 1;
   121a2:	2101      	movs	r1, #1
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   121a4:	2a00      	cmp	r2, #0
   121a6:	d05c      	beq.n	12262 <strtol+0xe4>
   121a8:	2a10      	cmp	r2, #16
   121aa:	d109      	bne.n	121c0 <strtol+0x42>
   121ac:	2b30      	cmp	r3, #48	; 0x30
   121ae:	d107      	bne.n	121c0 <strtol+0x42>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   121b0:	7823      	ldrb	r3, [r4, #0]
   121b2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   121b6:	2b58      	cmp	r3, #88	; 0x58
   121b8:	d14e      	bne.n	12258 <strtol+0xda>
		c = s[1];
		s += 2;
		base = 16;
   121ba:	2210      	movs	r2, #16
		c = s[1];
   121bc:	7863      	ldrb	r3, [r4, #1]
		s += 2;
   121be:	3402      	adds	r4, #2
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   121c0:	2600      	movs	r6, #0
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
   121c2:	f101 4700 	add.w	r7, r1, #2147483648	; 0x80000000
   121c6:	3f01      	subs	r7, #1
	cutlim = cutoff % (unsigned long)base;
   121c8:	fbb7 fef2 	udiv	lr, r7, r2
	for (acc = 0, any = 0;; c = *s++) {
   121cc:	4630      	mov	r0, r6
	cutlim = cutoff % (unsigned long)base;
   121ce:	fb02 791e 	mls	r9, r2, lr, r7
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   121d2:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
   121d6:	2d09      	cmp	r5, #9
   121d8:	d817      	bhi.n	1220a <strtol+0x8c>
			c -= '0';
   121da:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   121dc:	429a      	cmp	r2, r3
   121de:	dd24      	ble.n	1222a <strtol+0xac>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   121e0:	1c75      	adds	r5, r6, #1
   121e2:	d007      	beq.n	121f4 <strtol+0x76>
   121e4:	4570      	cmp	r0, lr
   121e6:	d81d      	bhi.n	12224 <strtol+0xa6>
   121e8:	d101      	bne.n	121ee <strtol+0x70>
   121ea:	454b      	cmp	r3, r9
   121ec:	dc1a      	bgt.n	12224 <strtol+0xa6>
			any = -1;
		} else {
			any = 1;
   121ee:	2601      	movs	r6, #1
			acc *= base;
			acc += c;
   121f0:	fb00 3002 	mla	r0, r0, r2, r3
	for (acc = 0, any = 0;; c = *s++) {
   121f4:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
   121f8:	e7eb      	b.n	121d2 <strtol+0x54>
{
   121fa:	4621      	mov	r1, r4
   121fc:	e7c4      	b.n	12188 <strtol+0xa>
	} else if (c == '+') {
   121fe:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   12200:	bf04      	itt	eq
   12202:	784b      	ldrbeq	r3, [r1, #1]
   12204:	1c8c      	addeq	r4, r1, #2
	register int neg = 0, any, cutlim;
   12206:	2100      	movs	r1, #0
   12208:	e7cc      	b.n	121a4 <strtol+0x26>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   1220a:	f043 0520 	orr.w	r5, r3, #32
   1220e:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
   12210:	2d19      	cmp	r5, #25
   12212:	d80a      	bhi.n	1222a <strtol+0xac>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   12214:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   12218:	2d1a      	cmp	r5, #26
   1221a:	bf34      	ite	cc
   1221c:	2537      	movcc	r5, #55	; 0x37
   1221e:	2557      	movcs	r5, #87	; 0x57
   12220:	1b5b      	subs	r3, r3, r5
   12222:	e7db      	b.n	121dc <strtol+0x5e>
			any = -1;
   12224:	f04f 36ff 	mov.w	r6, #4294967295
   12228:	e7e4      	b.n	121f4 <strtol+0x76>
		}
	}

	if (any < 0) {
   1222a:	1c73      	adds	r3, r6, #1
   1222c:	d109      	bne.n	12242 <strtol+0xc4>
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   1222e:	f7fc fc41 	bl	eab4 <z_impl_z_errno>
		acc = neg ? LONG_MIN : LONG_MAX;
		errno = ERANGE;
   12232:	2326      	movs	r3, #38	; 0x26
   12234:	6003      	str	r3, [r0, #0]
		acc = neg ? LONG_MIN : LONG_MAX;
   12236:	4638      	mov	r0, r7
	} else if (neg) {
		acc = -acc;
	}

	if (endptr != NULL) {
   12238:	f1b8 0f00 	cmp.w	r8, #0
   1223c:	d107      	bne.n	1224e <strtol+0xd0>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   1223e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if (neg) {
   12242:	b101      	cbz	r1, 12246 <strtol+0xc8>
		acc = -acc;
   12244:	4240      	negs	r0, r0
	if (endptr != NULL) {
   12246:	f1b8 0f00 	cmp.w	r8, #0
   1224a:	d0f8      	beq.n	1223e <strtol+0xc0>
		*endptr = (char *)(any ? s - 1 : nptr);
   1224c:	b10e      	cbz	r6, 12252 <strtol+0xd4>
   1224e:	f104 3cff 	add.w	ip, r4, #4294967295
   12252:	f8c8 c000 	str.w	ip, [r8]
	return acc;
   12256:	e7f2      	b.n	1223e <strtol+0xc0>
	if (base == 0) {
   12258:	2330      	movs	r3, #48	; 0x30
   1225a:	2a00      	cmp	r2, #0
   1225c:	d1b0      	bne.n	121c0 <strtol+0x42>
		base = c == '0' ? 8 : 10;
   1225e:	2208      	movs	r2, #8
   12260:	e7ae      	b.n	121c0 <strtol+0x42>
	if ((base == 0 || base == 16) &&
   12262:	2b30      	cmp	r3, #48	; 0x30
   12264:	d0a4      	beq.n	121b0 <strtol+0x32>
		base = c == '0' ? 8 : 10;
   12266:	220a      	movs	r2, #10
   12268:	e7aa      	b.n	121c0 <strtol+0x42>

0001226a <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   1226a:	4603      	mov	r3, r0
   1226c:	3901      	subs	r1, #1
   1226e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   12272:	b90a      	cbnz	r2, 12278 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   12274:	701a      	strb	r2, [r3, #0]

	return dest;
}
   12276:	4770      	bx	lr
		*d = *s;
   12278:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   1227c:	e7f7      	b.n	1226e <strcpy+0x4>

0001227e <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
   1227e:	b570      	push	{r4, r5, r6, lr}
   12280:	4605      	mov	r5, r0
   12282:	3901      	subs	r1, #1
   12284:	462c      	mov	r4, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   12286:	b142      	cbz	r2, 1229a <strncpy+0x1c>
   12288:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   1228c:	1e56      	subs	r6, r2, #1
   1228e:	b92b      	cbnz	r3, 1229c <strncpy+0x1e>
   12290:	442a      	add	r2, r5
		d++;
		n--;
	}

	while (n > 0) {
		*d = '\0';
   12292:	f804 3b01 	strb.w	r3, [r4], #1
	while (n > 0) {
   12296:	42a2      	cmp	r2, r4
   12298:	d1fb      	bne.n	12292 <strncpy+0x14>
		d++;
		n--;
	}

	return dest;
}
   1229a:	bd70      	pop	{r4, r5, r6, pc}
		n--;
   1229c:	4632      	mov	r2, r6
		*d = *s;
   1229e:	f805 3b01 	strb.w	r3, [r5], #1
		n--;
   122a2:	e7ef      	b.n	12284 <strncpy+0x6>

000122a4 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   122a4:	4603      	mov	r3, r0
	size_t n = 0;
   122a6:	2000      	movs	r0, #0

	while (*s != '\0') {
   122a8:	5c1a      	ldrb	r2, [r3, r0]
   122aa:	b902      	cbnz	r2, 122ae <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   122ac:	4770      	bx	lr
		n++;
   122ae:	3001      	adds	r0, #1
   122b0:	e7fa      	b.n	122a8 <strlen+0x4>

000122b2 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   122b2:	4603      	mov	r3, r0
	size_t n = 0;
   122b4:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   122b6:	5c1a      	ldrb	r2, [r3, r0]
   122b8:	b10a      	cbz	r2, 122be <strnlen+0xc>
   122ba:	4288      	cmp	r0, r1
   122bc:	d100      	bne.n	122c0 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   122be:	4770      	bx	lr
		n++;
   122c0:	3001      	adds	r0, #1
   122c2:	e7f8      	b.n	122b6 <strnlen+0x4>

000122c4 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   122c4:	1e43      	subs	r3, r0, #1
   122c6:	3901      	subs	r1, #1
   122c8:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   122cc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   122d0:	4282      	cmp	r2, r0
   122d2:	d101      	bne.n	122d8 <strcmp+0x14>
   122d4:	2a00      	cmp	r2, #0
   122d6:	d1f7      	bne.n	122c8 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   122d8:	1a10      	subs	r0, r2, r0
   122da:	4770      	bx	lr

000122dc <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
   122dc:	b530      	push	{r4, r5, lr}
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   122de:	2400      	movs	r4, #0
   122e0:	42a2      	cmp	r2, r4
   122e2:	d008      	beq.n	122f6 <strncmp+0x1a>
   122e4:	5d03      	ldrb	r3, [r0, r4]
   122e6:	5d0d      	ldrb	r5, [r1, r4]
   122e8:	42ab      	cmp	r3, r5
   122ea:	d102      	bne.n	122f2 <strncmp+0x16>
   122ec:	3401      	adds	r4, #1
   122ee:	2b00      	cmp	r3, #0
   122f0:	d1f6      	bne.n	122e0 <strncmp+0x4>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   122f2:	1b58      	subs	r0, r3, r5
   122f4:	e000      	b.n	122f8 <strncmp+0x1c>
   122f6:	2000      	movs	r0, #0
}
   122f8:	bd30      	pop	{r4, r5, pc}

000122fa <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   122fa:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   122fc:	b15a      	cbz	r2, 12316 <memcmp+0x1c>
   122fe:	3901      	subs	r1, #1
   12300:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   12302:	f810 2b01 	ldrb.w	r2, [r0], #1
   12306:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   1230a:	42a0      	cmp	r0, r4
   1230c:	d001      	beq.n	12312 <memcmp+0x18>
   1230e:	429a      	cmp	r2, r3
   12310:	d0f7      	beq.n	12302 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   12312:	1ad0      	subs	r0, r2, r3
}
   12314:	bd10      	pop	{r4, pc}
		return 0;
   12316:	4610      	mov	r0, r2
   12318:	e7fc      	b.n	12314 <memcmp+0x1a>

0001231a <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   1231a:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   1231c:	ea81 0400 	eor.w	r4, r1, r0
   12320:	07a5      	lsls	r5, r4, #30
   12322:	4603      	mov	r3, r0
   12324:	d00b      	beq.n	1233e <memcpy+0x24>
   12326:	3b01      	subs	r3, #1
   12328:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
   1232a:	4291      	cmp	r1, r2
   1232c:	d11b      	bne.n	12366 <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   1232e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
   12330:	2a00      	cmp	r2, #0
   12332:	d0fc      	beq.n	1232e <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
   12334:	f811 4b01 	ldrb.w	r4, [r1], #1
			n--;
   12338:	3a01      	subs	r2, #1
			*(d_byte++) = *(s_byte++);
   1233a:	f803 4b01 	strb.w	r4, [r3], #1
		while (((uintptr_t)d_byte) & mask) {
   1233e:	079c      	lsls	r4, r3, #30
   12340:	d1f6      	bne.n	12330 <memcpy+0x16>
   12342:	f022 0403 	bic.w	r4, r2, #3
   12346:	1f1d      	subs	r5, r3, #4
   12348:	0896      	lsrs	r6, r2, #2
   1234a:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
   1234c:	42b9      	cmp	r1, r7
   1234e:	d105      	bne.n	1235c <memcpy+0x42>
   12350:	f06f 0503 	mvn.w	r5, #3
   12354:	4423      	add	r3, r4
   12356:	fb05 2206 	mla	r2, r5, r6, r2
   1235a:	e7e4      	b.n	12326 <memcpy+0xc>
			*(d_word++) = *(s_word++);
   1235c:	f851 cb04 	ldr.w	ip, [r1], #4
   12360:	f845 cf04 	str.w	ip, [r5, #4]!
			n -= sizeof(mem_word_t);
   12364:	e7f2      	b.n	1234c <memcpy+0x32>
		*(d_byte++) = *(s_byte++);
   12366:	f811 4b01 	ldrb.w	r4, [r1], #1
   1236a:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   1236e:	e7dc      	b.n	1232a <memcpy+0x10>

00012370 <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
   12370:	4603      	mov	r3, r0
{
   12372:	b570      	push	{r4, r5, r6, lr}
	unsigned char c_byte = (unsigned char)c;
   12374:	b2c9      	uxtb	r1, r1

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   12376:	079c      	lsls	r4, r3, #30
   12378:	d111      	bne.n	1239e <memset+0x2e>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
   1237a:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
   1237e:	f022 0603 	bic.w	r6, r2, #3
   12382:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   12386:	441e      	add	r6, r3
   12388:	0894      	lsrs	r4, r2, #2
   1238a:	42b3      	cmp	r3, r6
   1238c:	d10d      	bne.n	123aa <memset+0x3a>
   1238e:	f06f 0503 	mvn.w	r5, #3
   12392:	fb05 2204 	mla	r2, r5, r4, r2
   12396:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
   12398:	4293      	cmp	r3, r2
   1239a:	d109      	bne.n	123b0 <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   1239c:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
   1239e:	2a00      	cmp	r2, #0
   123a0:	d0fc      	beq.n	1239c <memset+0x2c>
		*(d_byte++) = c_byte;
   123a2:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   123a6:	3a01      	subs	r2, #1
   123a8:	e7e5      	b.n	12376 <memset+0x6>
		*(d_word++) = c_word;
   123aa:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
   123ae:	e7ec      	b.n	1238a <memset+0x1a>
		*(d_byte++) = c_byte;
   123b0:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   123b4:	e7f0      	b.n	12398 <memset+0x28>

000123b6 <_stdout_hook_default>:
}
   123b6:	f04f 30ff 	mov.w	r0, #4294967295
   123ba:	4770      	bx	lr

000123bc <ah>:
	return bt_encrypt_le(key, plaintext, enc_data);
#endif
}

static int ah(const uint8_t irk[16], const uint8_t r[3], uint8_t out[3])
{
   123bc:	b530      	push	{r4, r5, lr}
   123be:	4604      	mov	r4, r0
   123c0:	b085      	sub	sp, #20
   123c2:	4615      	mov	r5, r2

	BT_DBG("irk %s", bt_hex(irk, 16));
	BT_DBG("r %s", bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
   123c4:	4668      	mov	r0, sp
   123c6:	2203      	movs	r2, #3
   123c8:	f7ff ffa7 	bl	1231a <memcpy>
	(void)memset(res + 3, 0, 13);
   123cc:	220d      	movs	r2, #13
   123ce:	2100      	movs	r1, #0
   123d0:	f10d 0003 	add.w	r0, sp, #3
   123d4:	f7ff ffcc 	bl	12370 <memset>
	return bt_encrypt_le(key, plaintext, enc_data);
   123d8:	4620      	mov	r0, r4
   123da:	466a      	mov	r2, sp
   123dc:	4669      	mov	r1, sp
   123de:	f000 fa18 	bl	12812 <bt_encrypt_le>

	err = internal_encrypt_le(irk, res, res);
	if (err) {
   123e2:	4604      	mov	r4, r0
   123e4:	b920      	cbnz	r0, 123f0 <ah+0x34>
	 *      ah(h, r) = e(k, r') mod 2^24
	 * The output of the security function e is then truncated to 24 bits
	 * by taking the least significant 24 bits of the output of e as the
	 * result of ah.
	 */
	memcpy(out, res, 3);
   123e6:	2203      	movs	r2, #3
   123e8:	4669      	mov	r1, sp
   123ea:	4628      	mov	r0, r5
   123ec:	f7ff ff95 	bl	1231a <memcpy>

	return 0;
}
   123f0:	4620      	mov	r0, r4
   123f2:	b005      	add	sp, #20
   123f4:	bd30      	pop	{r4, r5, pc}

000123f6 <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const uint8_t irk[16], const bt_addr_t *addr)
{
   123f6:	b513      	push	{r0, r1, r4, lr}
   123f8:	460c      	mov	r4, r1
	uint8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
   123fa:	aa01      	add	r2, sp, #4
   123fc:	3103      	adds	r1, #3
   123fe:	f7ff ffdd 	bl	123bc <ah>
	if (err) {
   12402:	b948      	cbnz	r0, 12418 <bt_rpa_irk_matches+0x22>
		return false;
	}

	return !memcmp(addr->val, hash, 3);
   12404:	2203      	movs	r2, #3
   12406:	4620      	mov	r0, r4
   12408:	a901      	add	r1, sp, #4
   1240a:	f7ff ff76 	bl	122fa <memcmp>
   1240e:	fab0 f080 	clz	r0, r0
   12412:	0940      	lsrs	r0, r0, #5
}
   12414:	b002      	add	sp, #8
   12416:	bd10      	pop	{r4, pc}
		return false;
   12418:	2000      	movs	r0, #0
   1241a:	e7fb      	b.n	12414 <bt_rpa_irk_matches+0x1e>

0001241c <bt_rpa_create>:
#endif

#if defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY)
int bt_rpa_create(const uint8_t irk[16], bt_addr_t *rpa)
{
   1241c:	b570      	push	{r4, r5, r6, lr}
	int err;

	err = internal_rand(rpa->val + 3, 3);
   1241e:	1cce      	adds	r6, r1, #3
{
   12420:	4605      	mov	r5, r0
   12422:	460c      	mov	r4, r1
	return bt_rand(buf, len);
   12424:	4630      	mov	r0, r6
   12426:	2103      	movs	r1, #3
   12428:	f7f5 fb2e 	bl	7a88 <bt_rand>
	if (err) {
   1242c:	b960      	cbnz	r0, 12448 <bt_rpa_create+0x2c>
		return err;
	}

	BT_ADDR_SET_RPA(rpa);
   1242e:	7963      	ldrb	r3, [r4, #5]

	err = ah(irk, rpa->val + 3, rpa->val);
   12430:	4622      	mov	r2, r4
	BT_ADDR_SET_RPA(rpa);
   12432:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   12436:	f043 0340 	orr.w	r3, r3, #64	; 0x40
	err = ah(irk, rpa->val + 3, rpa->val);
   1243a:	4631      	mov	r1, r6
   1243c:	4628      	mov	r0, r5
	BT_ADDR_SET_RPA(rpa);
   1243e:	7163      	strb	r3, [r4, #5]
	}

	BT_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));

	return 0;
}
   12440:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = ah(irk, rpa->val + 3, rpa->val);
   12444:	f7ff bfba 	b.w	123bc <ah>
}
   12448:	bd70      	pop	{r4, r5, r6, pc}

0001244a <bt_settings_decode_key>:
{
   1244a:	b570      	push	{r4, r5, r6, lr}
   1244c:	460d      	mov	r5, r1
	if (settings_name_next(key, NULL) != 13) {
   1244e:	2100      	movs	r1, #0
{
   12450:	4604      	mov	r4, r0
	if (settings_name_next(key, NULL) != 13) {
   12452:	f7ff f8e9 	bl	11628 <settings_name_next>
   12456:	280d      	cmp	r0, #13
   12458:	d118      	bne.n	1248c <bt_settings_decode_key+0x42>
	if (key[12] == '0') {
   1245a:	7b23      	ldrb	r3, [r4, #12]
   1245c:	2b30      	cmp	r3, #48	; 0x30
   1245e:	d111      	bne.n	12484 <bt_settings_decode_key+0x3a>
		addr->type = BT_ADDR_LE_PUBLIC;
   12460:	2300      	movs	r3, #0
   12462:	702b      	strb	r3, [r5, #0]
   12464:	f104 060c 	add.w	r6, r4, #12
   12468:	3506      	adds	r5, #6
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   1246a:	462a      	mov	r2, r5
   1246c:	4620      	mov	r0, r4
   1246e:	2301      	movs	r3, #1
   12470:	2102      	movs	r1, #2
   12472:	3402      	adds	r4, #2
   12474:	f7fd ff7b 	bl	1036e <hex2bin>
	for (uint8_t i = 0; i < 6; i++) {
   12478:	42b4      	cmp	r4, r6
   1247a:	f105 35ff 	add.w	r5, r5, #4294967295
   1247e:	d1f4      	bne.n	1246a <bt_settings_decode_key+0x20>
	return 0;
   12480:	2000      	movs	r0, #0
}
   12482:	bd70      	pop	{r4, r5, r6, pc}
	} else if (key[12] == '1') {
   12484:	2b31      	cmp	r3, #49	; 0x31
   12486:	d101      	bne.n	1248c <bt_settings_decode_key+0x42>
		addr->type = BT_ADDR_LE_RANDOM;
   12488:	2301      	movs	r3, #1
   1248a:	e7ea      	b.n	12462 <bt_settings_decode_key+0x18>
		return -EINVAL;
   1248c:	f06f 0015 	mvn.w	r0, #21
   12490:	e7f7      	b.n	12482 <bt_settings_decode_key+0x38>

00012492 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   12492:	b510      	push	{r4, lr}
   12494:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   12496:	7801      	ldrb	r1, [r0, #0]
   12498:	7822      	ldrb	r2, [r4, #0]
{
   1249a:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   1249c:	428a      	cmp	r2, r1
   1249e:	d00e      	beq.n	124be <bt_uuid_cmp+0x2c>
	uuid_to_uuid128(u1, &uuid1);
   124a0:	4669      	mov	r1, sp
   124a2:	f7f2 fd1d 	bl	4ee0 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   124a6:	4620      	mov	r0, r4
   124a8:	a905      	add	r1, sp, #20
   124aa:	f7f2 fd19 	bl	4ee0 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   124ae:	2210      	movs	r2, #16
   124b0:	f10d 0115 	add.w	r1, sp, #21
   124b4:	f10d 0001 	add.w	r0, sp, #1
	case BT_UUID_TYPE_16:
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
	case BT_UUID_TYPE_32:
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   124b8:	f7ff ff1f 	bl	122fa <memcmp>
   124bc:	e007      	b.n	124ce <bt_uuid_cmp+0x3c>
	switch (u1->type) {
   124be:	2a01      	cmp	r2, #1
   124c0:	d007      	beq.n	124d2 <bt_uuid_cmp+0x40>
   124c2:	2a02      	cmp	r2, #2
   124c4:	d008      	beq.n	124d8 <bt_uuid_cmp+0x46>
   124c6:	b95a      	cbnz	r2, 124e0 <bt_uuid_cmp+0x4e>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   124c8:	8840      	ldrh	r0, [r0, #2]
   124ca:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   124cc:	1ac0      	subs	r0, r0, r3
	}

	return -EINVAL;
}
   124ce:	b00a      	add	sp, #40	; 0x28
   124d0:	bd10      	pop	{r4, pc}
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   124d2:	6840      	ldr	r0, [r0, #4]
   124d4:	6863      	ldr	r3, [r4, #4]
   124d6:	e7f9      	b.n	124cc <bt_uuid_cmp+0x3a>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   124d8:	2210      	movs	r2, #16
   124da:	1c61      	adds	r1, r4, #1
   124dc:	3001      	adds	r0, #1
   124de:	e7eb      	b.n	124b8 <bt_uuid_cmp+0x26>
	switch (u1->type) {
   124e0:	f06f 0015 	mvn.w	r0, #21
   124e4:	e7f3      	b.n	124ce <bt_uuid_cmp+0x3c>

000124e6 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   124e6:	2a04      	cmp	r2, #4
{
   124e8:	b538      	push	{r3, r4, r5, lr}
   124ea:	460c      	mov	r4, r1
	switch (data_len) {
   124ec:	d00d      	beq.n	1250a <bt_uuid_create+0x24>
   124ee:	2a10      	cmp	r2, #16
   124f0:	d019      	beq.n	12526 <bt_uuid_create+0x40>
   124f2:	2a02      	cmp	r2, #2
   124f4:	f04f 0300 	mov.w	r3, #0
   124f8:	d11b      	bne.n	12532 <bt_uuid_create+0x4c>
	case 2:
		uuid->type = BT_UUID_TYPE_16;
   124fa:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   124fc:	784a      	ldrb	r2, [r1, #1]
   124fe:	780b      	ldrb	r3, [r1, #0]
   12500:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   12504:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   12506:	2001      	movs	r0, #1
}
   12508:	bd38      	pop	{r3, r4, r5, pc}
		uuid->type = BT_UUID_TYPE_32;
   1250a:	2301      	movs	r3, #1
   1250c:	7003      	strb	r3, [r0, #0]
   1250e:	78a2      	ldrb	r2, [r4, #2]
   12510:	78c9      	ldrb	r1, [r1, #3]
   12512:	7865      	ldrb	r5, [r4, #1]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   12514:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
	return ((uint16_t)src[1] << 8) | src[0];
   12518:	7822      	ldrb	r2, [r4, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   1251a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
   1251e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   12522:	6042      	str	r2, [r0, #4]
		break;
   12524:	e7ef      	b.n	12506 <bt_uuid_create+0x20>
		uuid->type = BT_UUID_TYPE_128;
   12526:	2302      	movs	r3, #2
   12528:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   1252c:	f7ff fef5 	bl	1231a <memcpy>
		break;
   12530:	e7e9      	b.n	12506 <bt_uuid_create+0x20>
	switch (data_len) {
   12532:	4618      	mov	r0, r3
   12534:	e7e8      	b.n	12508 <bt_uuid_create+0x22>

00012536 <bt_addr_le_create_static>:
#include <bluetooth/addr.h>
#include <bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   12536:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   12538:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   1253a:	2106      	movs	r1, #6
{
   1253c:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   1253e:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   12542:	f7f5 faa1 	bl	7a88 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   12546:	b918      	cbnz	r0, 12550 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   12548:	79a3      	ldrb	r3, [r4, #6]
   1254a:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1254e:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   12550:	bd10      	pop	{r4, pc}

00012552 <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   12552:	280f      	cmp	r0, #15
   12554:	d806      	bhi.n	12564 <bt_hci_evt_get_flags+0x12>
   12556:	280d      	cmp	r0, #13
   12558:	d80b      	bhi.n	12572 <bt_hci_evt_get_flags+0x20>
   1255a:	2805      	cmp	r0, #5
	case BT_HCI_EVT_DISCONN_COMPLETE:
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   1255c:	bf14      	ite	ne
   1255e:	2002      	movne	r0, #2
   12560:	2003      	moveq	r0, #3
   12562:	4770      	bx	lr
	switch (evt) {
   12564:	2813      	cmp	r0, #19
   12566:	d004      	beq.n	12572 <bt_hci_evt_get_flags+0x20>
   12568:	281a      	cmp	r0, #26
   1256a:	bf14      	ite	ne
   1256c:	2002      	movne	r0, #2
   1256e:	2001      	moveq	r0, #1
   12570:	4770      	bx	lr
   12572:	2001      	movs	r0, #1
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
	}
}
   12574:	4770      	bx	lr

00012576 <get_adv_channel_map>:
{
   12576:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   12578:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   1257c:	bf0c      	ite	eq
   1257e:	2007      	moveq	r0, #7
   12580:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   12582:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   12584:	bf48      	it	mi
   12586:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   1258a:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   1258c:	bf48      	it	mi
   1258e:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   12592:	4770      	bx	lr

00012594 <atomic_and>:
{
   12594:	4603      	mov	r3, r0
}
   12596:	e8d3 0fef 	ldaex	r0, [r3]
   1259a:	ea00 0201 	and.w	r2, r0, r1
   1259e:	e8c3 2fec 	stlex	ip, r2, [r3]
   125a2:	f1bc 0f00 	cmp.w	ip, #0
   125a6:	d1f6      	bne.n	12596 <atomic_and+0x2>
   125a8:	4770      	bx	lr

000125aa <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   125aa:	e8d0 0faf 	lda	r0, [r0]
}
   125ae:	4770      	bx	lr

000125b0 <bt_addr_le_cmp>:
   125b0:	2207      	movs	r2, #7
   125b2:	f7ff bea2 	b.w	122fa <memcmp>

000125b6 <bt_addr_copy>:
	memcpy(dst, src, sizeof(*dst));
   125b6:	2206      	movs	r2, #6
   125b8:	f7ff beaf 	b.w	1231a <memcpy>

000125bc <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   125bc:	2207      	movs	r2, #7
   125be:	f7ff beac 	b.w	1231a <memcpy>

000125c2 <atomic_or>:
{
   125c2:	4603      	mov	r3, r0
}
   125c4:	e8d3 0fef 	ldaex	r0, [r3]
   125c8:	ea40 0201 	orr.w	r2, r0, r1
   125cc:	e8c3 2fec 	stlex	ip, r2, [r3]
   125d0:	f1bc 0f00 	cmp.w	ip, #0
   125d4:	d1f6      	bne.n	125c4 <atomic_or+0x2>
   125d6:	4770      	bx	lr

000125d8 <atomic_test_and_set_bit>:
{
   125d8:	b508      	push	{r3, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   125da:	2301      	movs	r3, #1
   125dc:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   125e0:	f7ff ffef 	bl	125c2 <atomic_or>
	return (old & mask) != 0;
   125e4:	4201      	tst	r1, r0
}
   125e6:	bf14      	ite	ne
   125e8:	2001      	movne	r0, #1
   125ea:	2000      	moveq	r0, #0
   125ec:	bd08      	pop	{r3, pc}

000125ee <atomic_set_bit_to>:
 * @param val true for 1, false for 0.
 *
 * @return N/A
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
   125ee:	460b      	mov	r3, r1
   125f0:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   125f2:	f001 041f 	and.w	r4, r1, #31
   125f6:	2101      	movs	r1, #1
   125f8:	095b      	lsrs	r3, r3, #5
   125fa:	40a1      	lsls	r1, r4

	if (val) {
   125fc:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   12600:	b112      	cbz	r2, 12608 <atomic_set_bit_to+0x1a>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
	}
}
   12602:	bc10      	pop	{r4}
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   12604:	f7ff bfdd 	b.w	125c2 <atomic_or>
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   12608:	43c9      	mvns	r1, r1
}
   1260a:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1260c:	f7ff bfc2 	b.w	12594 <atomic_and>

00012610 <net_buf_add_u8>:
	return net_buf_simple_add_u8(&buf->b, val);
   12610:	3008      	adds	r0, #8
   12612:	f001 bd32 	b.w	1407a <net_buf_simple_add_u8>

00012616 <unpair_remote>:
{
   12616:	460b      	mov	r3, r1
	unpair(*id, &info->addr);
   12618:	4601      	mov	r1, r0
   1261a:	7818      	ldrb	r0, [r3, #0]
   1261c:	f7f2 bdc8 	b.w	51b0 <unpair>

00012620 <sys_put_le64>:
	dst[1] = val >> 8;
   12620:	f3c0 2307 	ubfx	r3, r0, #8, #8
   12624:	7053      	strb	r3, [r2, #1]
	dst[0] = val;
   12626:	2300      	movs	r3, #0
   12628:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   1262a:	0e00      	lsrs	r0, r0, #24
   1262c:	70d0      	strb	r0, [r2, #3]
   1262e:	f3c1 2007 	ubfx	r0, r1, #8, #8
   12632:	0e09      	lsrs	r1, r1, #24
	dst[0] = val;
   12634:	7093      	strb	r3, [r2, #2]
   12636:	7113      	strb	r3, [r2, #4]
	dst[1] = val >> 8;
   12638:	7150      	strb	r0, [r2, #5]
	dst[0] = val;
   1263a:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   1263c:	71d1      	strb	r1, [r2, #7]
}
   1263e:	4770      	bx	lr

00012640 <adv_pause_enabled>:
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   12640:	f100 0310 	add.w	r3, r0, #16
{
   12644:	b510      	push	{r4, lr}
   12646:	4604      	mov	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   12648:	4618      	mov	r0, r3
   1264a:	f7ff ffae 	bl	125aa <atomic_get>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   1264e:	0642      	lsls	r2, r0, #25
   12650:	d50a      	bpl.n	12668 <adv_pause_enabled+0x28>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   12652:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   12656:	4618      	mov	r0, r3
   12658:	f7ff ffb3 	bl	125c2 <atomic_or>
	return set_le_adv_enable_legacy(adv, enable);
   1265c:	4620      	mov	r0, r4
}
   1265e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return set_le_adv_enable_legacy(adv, enable);
   12662:	2100      	movs	r1, #0
   12664:	f7f3 bbf2 	b.w	5e4c <set_le_adv_enable_legacy>
}
   12668:	bd10      	pop	{r4, pc}

0001266a <adv_unpause_enabled>:
{
   1266a:	b510      	push	{r4, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1266c:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   12670:	4604      	mov	r4, r0
   12672:	3010      	adds	r0, #16
   12674:	f7ff ff8e 	bl	12594 <atomic_and>
	if (atomic_test_and_clear_bit(adv->flags, BT_ADV_PAUSED)) {
   12678:	0483      	lsls	r3, r0, #18
   1267a:	d505      	bpl.n	12688 <adv_unpause_enabled+0x1e>
	return set_le_adv_enable_legacy(adv, enable);
   1267c:	4620      	mov	r0, r4
}
   1267e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return set_le_adv_enable_legacy(adv, enable);
   12682:	2101      	movs	r1, #1
   12684:	f7f3 bbe2 	b.w	5e4c <set_le_adv_enable_legacy>
}
   12688:	bd10      	pop	{r4, pc}

0001268a <keys_add_id>:
	if (keys->state & BT_KEYS_ID_ADDED) {
   1268a:	7a03      	ldrb	r3, [r0, #8]
{
   1268c:	4602      	mov	r2, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   1268e:	075b      	lsls	r3, r3, #29
   12690:	d505      	bpl.n	1269e <keys_add_id+0x14>
		hci_id_add(keys->id, &keys->addr, keys->irk.val);
   12692:	4601      	mov	r1, r0
   12694:	322a      	adds	r2, #42	; 0x2a
   12696:	f811 0b01 	ldrb.w	r0, [r1], #1
   1269a:	f7f3 bc91 	b.w	5fc0 <hci_id_add>
}
   1269e:	4770      	bx	lr

000126a0 <addr_res_enable>:
{
   126a0:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   126a2:	2101      	movs	r1, #1
{
   126a4:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   126a6:	f242 002d 	movw	r0, #8237	; 0x202d
   126aa:	f7f3 fa5d 	bl	5b68 <bt_hci_cmd_create>
	if (!buf) {
   126ae:	4604      	mov	r4, r0
   126b0:	b150      	cbz	r0, 126c8 <addr_res_enable+0x28>
	net_buf_add_u8(buf, enable);
   126b2:	4629      	mov	r1, r5
   126b4:	f7ff ffac 	bl	12610 <net_buf_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   126b8:	4621      	mov	r1, r4
}
   126ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   126be:	2200      	movs	r2, #0
   126c0:	f242 002d 	movw	r0, #8237	; 0x202d
   126c4:	f7f3 ba88 	b.w	5bd8 <bt_hci_cmd_send_sync>
}
   126c8:	f06f 0036 	mvn.w	r0, #54	; 0x36
   126cc:	bd38      	pop	{r3, r4, r5, pc}

000126ce <bt_lookup_id_addr>:
{
   126ce:	b510      	push	{r4, lr}
   126d0:	460c      	mov	r4, r1
		keys = bt_keys_find_irk(id, addr);
   126d2:	f7fa fb85 	bl	cde0 <bt_keys_find_irk>
		if (keys) {
   126d6:	b100      	cbz	r0, 126da <bt_lookup_id_addr+0xc>
			return &keys->addr;
   126d8:	1c44      	adds	r4, r0, #1
}
   126da:	4620      	mov	r0, r4
   126dc:	bd10      	pop	{r4, pc}

000126de <bt_hci_disconnect>:
{
   126de:	b570      	push	{r4, r5, r6, lr}
   126e0:	4606      	mov	r6, r0
   126e2:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   126e4:	f240 4006 	movw	r0, #1030	; 0x406
   126e8:	2103      	movs	r1, #3
   126ea:	f7f3 fa3d 	bl	5b68 <bt_hci_cmd_create>
	if (!buf) {
   126ee:	4604      	mov	r4, r0
   126f0:	b168      	cbz	r0, 1270e <bt_hci_disconnect+0x30>
	return net_buf_simple_add(&buf->b, len);
   126f2:	2103      	movs	r1, #3
   126f4:	3008      	adds	r0, #8
   126f6:	f001 fcb1 	bl	1405c <net_buf_simple_add>
	disconn->reason = reason;
   126fa:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   126fc:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   126fe:	4621      	mov	r1, r4
}
   12700:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   12704:	2200      	movs	r2, #0
   12706:	f240 4006 	movw	r0, #1030	; 0x406
   1270a:	f7f3 ba65 	b.w	5bd8 <bt_hci_cmd_send_sync>
}
   1270e:	f06f 0036 	mvn.w	r0, #54	; 0x36
   12712:	bd70      	pop	{r4, r5, r6, pc}

00012714 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   12714:	8802      	ldrh	r2, [r0, #0]
   12716:	8843      	ldrh	r3, [r0, #2]
{
   12718:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   1271a:	429a      	cmp	r2, r3
   1271c:	d818      	bhi.n	12750 <bt_le_conn_params_valid+0x3c>
   1271e:	2a05      	cmp	r2, #5
   12720:	d916      	bls.n	12750 <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
   12722:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   12726:	d813      	bhi.n	12750 <bt_le_conn_params_valid+0x3c>
	if (param->latency > 499) {
   12728:	8884      	ldrh	r4, [r0, #4]
   1272a:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
   1272e:	d20f      	bcs.n	12750 <bt_le_conn_params_valid+0x3c>
	if (param->timeout < 10 || param->timeout > 3200 ||
   12730:	88c1      	ldrh	r1, [r0, #6]
   12732:	f640 4076 	movw	r0, #3190	; 0xc76
   12736:	f1a1 020a 	sub.w	r2, r1, #10
   1273a:	b292      	uxth	r2, r2
   1273c:	4282      	cmp	r2, r0
   1273e:	d807      	bhi.n	12750 <bt_le_conn_params_valid+0x3c>
	     ((1U + param->latency) * param->interval_max))) {
   12740:	fb04 3303 	mla	r3, r4, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
   12744:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
   12748:	bf34      	ite	cc
   1274a:	2001      	movcc	r0, #1
   1274c:	2000      	movcs	r0, #0
}
   1274e:	bd10      	pop	{r4, pc}
		return false;
   12750:	2000      	movs	r0, #0
   12752:	e7fc      	b.n	1274e <bt_le_conn_params_valid+0x3a>

00012754 <pending_id_update>:
	if (keys->state & BT_KEYS_ID_PENDING_ADD) {
   12754:	7a03      	ldrb	r3, [r0, #8]
   12756:	07d9      	lsls	r1, r3, #31
   12758:	d504      	bpl.n	12764 <pending_id_update+0x10>
		keys->state &= ~BT_KEYS_ID_PENDING_ADD;
   1275a:	f023 0301 	bic.w	r3, r3, #1
   1275e:	7203      	strb	r3, [r0, #8]
		bt_id_add(keys);
   12760:	f7f3 bd6c 	b.w	623c <bt_id_add>
	if (keys->state & BT_KEYS_ID_PENDING_DEL) {
   12764:	0799      	lsls	r1, r3, #30
   12766:	d504      	bpl.n	12772 <pending_id_update+0x1e>
		keys->state &= ~BT_KEYS_ID_PENDING_DEL;
   12768:	f023 0302 	bic.w	r3, r3, #2
   1276c:	7203      	strb	r3, [r0, #8]
		bt_id_del(keys);
   1276e:	f7f3 be33 	b.w	63d8 <bt_id_del>
}
   12772:	4770      	bx	lr

00012774 <bt_le_set_data_len>:
{
   12774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12776:	4607      	mov	r7, r0
   12778:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   1277a:	f242 0022 	movw	r0, #8226	; 0x2022
   1277e:	2106      	movs	r1, #6
{
   12780:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   12782:	f7f3 f9f1 	bl	5b68 <bt_hci_cmd_create>
	if (!buf) {
   12786:	4604      	mov	r4, r0
   12788:	b170      	cbz	r0, 127a8 <bt_le_set_data_len+0x34>
   1278a:	2106      	movs	r1, #6
   1278c:	3008      	adds	r0, #8
   1278e:	f001 fc65 	bl	1405c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   12792:	883b      	ldrh	r3, [r7, #0]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   12794:	4621      	mov	r1, r4
	cp->handle = sys_cpu_to_le16(conn->handle);
   12796:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   12798:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   1279a:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   1279c:	f242 0022 	movw	r0, #8226	; 0x2022
}
   127a0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   127a4:	f7f3 bebc 	b.w	6520 <bt_hci_cmd_send>
}
   127a8:	f06f 0036 	mvn.w	r0, #54	; 0x36
   127ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000127ae <bt_le_set_phy>:
{
   127ae:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   127b2:	4680      	mov	r8, r0
   127b4:	460f      	mov	r7, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   127b6:	f242 0032 	movw	r0, #8242	; 0x2032
   127ba:	2107      	movs	r1, #7
{
   127bc:	4616      	mov	r6, r2
   127be:	461d      	mov	r5, r3
   127c0:	f89d 9020 	ldrb.w	r9, [sp, #32]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   127c4:	f7f3 f9d0 	bl	5b68 <bt_hci_cmd_create>
	if (!buf) {
   127c8:	4604      	mov	r4, r0
   127ca:	b190      	cbz	r0, 127f2 <bt_le_set_phy+0x44>
   127cc:	2107      	movs	r1, #7
   127ce:	3008      	adds	r0, #8
   127d0:	f001 fc44 	bl	1405c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   127d4:	f8b8 3000 	ldrh.w	r3, [r8]
	cp->all_phys = all_phys;
   127d8:	7087      	strb	r7, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   127da:	70c6      	strb	r6, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   127dc:	7105      	strb	r5, [r0, #4]
	cp->handle = sys_cpu_to_le16(conn->handle);
   127de:	8003      	strh	r3, [r0, #0]
	cp->phy_opts = phy_opts;
   127e0:	f8a0 9005 	strh.w	r9, [r0, #5]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   127e4:	4621      	mov	r1, r4
}
   127e6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   127ea:	f242 0032 	movw	r0, #8242	; 0x2032
   127ee:	f7f3 be97 	b.w	6520 <bt_hci_cmd_send>
}
   127f2:	f06f 0036 	mvn.w	r0, #54	; 0x36
   127f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000127fa <bt_addr_le_is_bonded>:
{
   127fa:	b508      	push	{r3, lr}
		struct bt_keys *keys = bt_keys_find_addr(id, addr);
   127fc:	f7fa fb2a 	bl	ce54 <bt_keys_find_addr>
		return keys && keys->keys;
   12800:	b118      	cbz	r0, 1280a <bt_addr_le_is_bonded+0x10>
   12802:	89c0      	ldrh	r0, [r0, #14]
   12804:	3800      	subs	r0, #0
   12806:	bf18      	it	ne
   12808:	2001      	movne	r0, #1
}
   1280a:	bd08      	pop	{r3, pc}

0001280c <le_enh_conn_complete>:
	enh_conn_complete((void *)buf->data);
   1280c:	6880      	ldr	r0, [r0, #8]
   1280e:	f7f4 bee1 	b.w	75d4 <enh_conn_complete>

00012812 <bt_encrypt_le>:

int bt_encrypt_le(const uint8_t key[16], const uint8_t plaintext[16],
		  uint8_t enc_data[16])
{
   12812:	b5f0      	push	{r4, r5, r6, r7, lr}
   12814:	b0b1      	sub	sp, #196	; 0xc4
   12816:	466d      	mov	r5, sp
   12818:	4614      	mov	r4, r2
   1281a:	460e      	mov	r6, r1
   1281c:	462a      	mov	r2, r5
   1281e:	462f      	mov	r7, r5
   12820:	f100 0310 	add.w	r3, r0, #16
		*pdst++ = *psrc--;
   12824:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
	for (; length > 0; length--) {
   12828:	4283      	cmp	r3, r0
		*pdst++ = *psrc--;
   1282a:	f802 1b01 	strb.w	r1, [r2], #1
	for (; length > 0; length--) {
   1282e:	d1f9      	bne.n	12824 <bt_encrypt_le+0x12>
	BT_DBG("key %s", bt_hex(key, 16));
	BT_DBG("plaintext %s", bt_hex(plaintext, 16));

	sys_memcpy_swap(tmp, key, 16);

	if (tc_aes128_set_encrypt_key(&s, tmp) == TC_CRYPTO_FAIL) {
   12830:	4629      	mov	r1, r5
   12832:	a804      	add	r0, sp, #16
   12834:	f7f1 fa02 	bl	3c3c <tc_aes128_set_encrypt_key>
   12838:	b1e0      	cbz	r0, 12874 <bt_encrypt_le+0x62>
   1283a:	f106 0310 	add.w	r3, r6, #16
		*pdst++ = *psrc--;
   1283e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
	for (; length > 0; length--) {
   12842:	42b3      	cmp	r3, r6
		*pdst++ = *psrc--;
   12844:	f805 2b01 	strb.w	r2, [r5], #1
	for (; length > 0; length--) {
   12848:	d1f9      	bne.n	1283e <bt_encrypt_le+0x2c>
		return -EINVAL;
	}

	sys_memcpy_swap(tmp, plaintext, 16);

	if (tc_aes_encrypt(enc_data, tmp, &s) == TC_CRYPTO_FAIL) {
   1284a:	4639      	mov	r1, r7
   1284c:	4620      	mov	r0, r4
   1284e:	aa04      	add	r2, sp, #16
   12850:	f7f1 fa48 	bl	3ce4 <tc_aes_encrypt>
   12854:	b170      	cbz	r0, 12874 <bt_encrypt_le+0x62>
   12856:	1e63      	subs	r3, r4, #1
   12858:	f104 0210 	add.w	r2, r4, #16
   1285c:	3407      	adds	r4, #7
		uint8_t tmp = ((uint8_t *)buf)[i];
   1285e:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   12862:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
	for (i = 0; i < (length/2); i++) {
   12866:	42a3      	cmp	r3, r4
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   12868:	7018      	strb	r0, [r3, #0]
		((uint8_t *)buf)[length - 1 - i] = tmp;
   1286a:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   1286c:	d1f7      	bne.n	1285e <bt_encrypt_le+0x4c>

	sys_mem_swap(enc_data, 16);

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
   1286e:	2000      	movs	r0, #0
}
   12870:	b031      	add	sp, #196	; 0xc4
   12872:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EINVAL;
   12874:	f06f 0015 	mvn.w	r0, #21
   12878:	e7fa      	b.n	12870 <bt_encrypt_le+0x5e>

0001287a <tx_notify>:
{
   1287a:	b570      	push	{r4, r5, r6, lr}
   1287c:	4604      	mov	r4, r0
	__asm__ volatile(
   1287e:	f04f 0220 	mov.w	r2, #32
   12882:	f3ef 8311 	mrs	r3, BASEPRI
   12886:	f382 8811 	msr	BASEPRI, r2
   1288a:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   1288e:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   12890:	b920      	cbnz	r0, 1289c <tx_notify+0x22>
	__asm__ volatile(
   12892:	f383 8811 	msr	BASEPRI, r3
   12896:	f3bf 8f6f 	isb	sy
}
   1289a:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1289c:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1289e:	6802      	ldr	r2, [r0, #0]
   128a0:	4288      	cmp	r0, r1
	list->tail = node;
   128a2:	bf08      	it	eq
   128a4:	6262      	streq	r2, [r4, #36]	; 0x24
	list->head = node;
   128a6:	6222      	str	r2, [r4, #32]
   128a8:	f383 8811 	msr	BASEPRI, r3
   128ac:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   128b0:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   128b4:	f7f5 f900 	bl	7ab8 <tx_free>
		cb(conn, user_data);
   128b8:	4631      	mov	r1, r6
   128ba:	4620      	mov	r0, r4
   128bc:	47a8      	blx	r5
	while (1) {
   128be:	e7de      	b.n	1287e <tx_notify+0x4>

000128c0 <tx_complete_work>:
	tx_notify(conn);
   128c0:	3828      	subs	r0, #40	; 0x28
   128c2:	f7ff bfda 	b.w	1287a <tx_notify>

000128c6 <bt_conn_new>:
{
   128c6:	b538      	push	{r3, r4, r5, lr}
   128c8:	4604      	mov	r4, r0
	for (i = 0; i < size; i++) {
   128ca:	2300      	movs	r3, #0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   128cc:	2501      	movs	r5, #1
   128ce:	428b      	cmp	r3, r1
   128d0:	d102      	bne.n	128d8 <bt_conn_new+0x12>
		return NULL;
   128d2:	2400      	movs	r4, #0
}
   128d4:	4620      	mov	r0, r4
   128d6:	bd38      	pop	{r3, r4, r5, pc}
   128d8:	f104 02b8 	add.w	r2, r4, #184	; 0xb8
   128dc:	e8d2 0fef 	ldaex	r0, [r2]
   128e0:	2800      	cmp	r0, #0
   128e2:	d104      	bne.n	128ee <bt_conn_new+0x28>
   128e4:	e8c2 5fec 	stlex	ip, r5, [r2]
   128e8:	f1bc 0f00 	cmp.w	ip, #0
   128ec:	d1f6      	bne.n	128dc <bt_conn_new+0x16>
   128ee:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   128f2:	d002      	beq.n	128fa <bt_conn_new+0x34>
	for (i = 0; i < size; i++) {
   128f4:	4604      	mov	r4, r0
   128f6:	3301      	adds	r3, #1
   128f8:	e7e9      	b.n	128ce <bt_conn_new+0x8>
	if (!conn) {
   128fa:	2c00      	cmp	r4, #0
   128fc:	d0ea      	beq.n	128d4 <bt_conn_new+0xe>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
   128fe:	22b8      	movs	r2, #184	; 0xb8
   12900:	2100      	movs	r1, #0
   12902:	4620      	mov	r0, r4
   12904:	f7ff fd34 	bl	12370 <memset>
	return conn;
   12908:	e7e4      	b.n	128d4 <bt_conn_new+0xe>

0001290a <bt_conn_set_security>:
{
   1290a:	b510      	push	{r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   1290c:	7b43      	ldrb	r3, [r0, #13]
{
   1290e:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   12910:	2b07      	cmp	r3, #7
   12912:	d124      	bne.n	1295e <bt_conn_set_security+0x54>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
   12914:	7a43      	ldrb	r3, [r0, #9]
   12916:	428b      	cmp	r3, r1
   12918:	d224      	bcs.n	12964 <bt_conn_set_security+0x5a>
   1291a:	7a83      	ldrb	r3, [r0, #10]
   1291c:	428b      	cmp	r3, r1
   1291e:	d221      	bcs.n	12964 <bt_conn_set_security+0x5a>
	if (val) {
   12920:	060a      	lsls	r2, r1, #24
	atomic_set_bit_to(conn->flags, BT_CONN_FORCE_PAIR,
   12922:	f100 0304 	add.w	r3, r0, #4
   12926:	d511      	bpl.n	1294c <bt_conn_set_security+0x42>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   12928:	e8d3 2fef 	ldaex	r2, [r3]
   1292c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   12930:	e8c3 2fe0 	stlex	r0, r2, [r3]
   12934:	2800      	cmp	r0, #0
   12936:	d1f7      	bne.n	12928 <bt_conn_set_security+0x1e>
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   12938:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		return bt_smp_start_security(conn);
   1293c:	4620      	mov	r0, r4
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   1293e:	72a1      	strb	r1, [r4, #10]
		return bt_smp_start_security(conn);
   12940:	f7fa f860 	bl	ca04 <bt_smp_start_security>
	if (err) {
   12944:	b108      	cbz	r0, 1294a <bt_conn_set_security+0x40>
		conn->required_sec_level = conn->sec_level;
   12946:	7a63      	ldrb	r3, [r4, #9]
   12948:	72a3      	strb	r3, [r4, #10]
}
   1294a:	bd10      	pop	{r4, pc}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1294c:	e8d3 2fef 	ldaex	r2, [r3]
   12950:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   12954:	e8c3 2fe0 	stlex	r0, r2, [r3]
   12958:	2800      	cmp	r0, #0
   1295a:	d0ed      	beq.n	12938 <bt_conn_set_security+0x2e>
   1295c:	e7f6      	b.n	1294c <bt_conn_set_security+0x42>
		return -ENOTCONN;
   1295e:	f06f 0038 	mvn.w	r0, #56	; 0x38
   12962:	e7f2      	b.n	1294a <bt_conn_set_security+0x40>
		return 0;
   12964:	2000      	movs	r0, #0
   12966:	e7f0      	b.n	1294a <bt_conn_set_security+0x40>

00012968 <bt_conn_get_security>:
}
   12968:	7a40      	ldrb	r0, [r0, #9]
   1296a:	4770      	bx	lr

0001296c <bt_conn_reset_rx_state>:
{
   1296c:	b510      	push	{r4, lr}
   1296e:	4604      	mov	r4, r0
	if (!conn->rx) {
   12970:	6900      	ldr	r0, [r0, #16]
   12972:	b118      	cbz	r0, 1297c <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   12974:	f7fa fc68 	bl	d248 <net_buf_unref>
	conn->rx = NULL;
   12978:	2300      	movs	r3, #0
   1297a:	6123      	str	r3, [r4, #16]
}
   1297c:	bd10      	pop	{r4, pc}

0001297e <bt_conn_is_peer_addr_le>:
{
   1297e:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   12980:	7a03      	ldrb	r3, [r0, #8]
{
   12982:	4604      	mov	r4, r0
	if (id != conn->id) {
   12984:	428b      	cmp	r3, r1
{
   12986:	4615      	mov	r5, r2
	if (id != conn->id) {
   12988:	d115      	bne.n	129b6 <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   1298a:	f100 0188 	add.w	r1, r0, #136	; 0x88
   1298e:	2207      	movs	r2, #7
   12990:	4628      	mov	r0, r5
   12992:	f7ff fcb2 	bl	122fa <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   12996:	b180      	cbz	r0, 129ba <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_MASTER) {
   12998:	78e3      	ldrb	r3, [r4, #3]
   1299a:	2207      	movs	r2, #7
   1299c:	b943      	cbnz	r3, 129b0 <bt_conn_is_peer_addr_le+0x32>
   1299e:	f104 0196 	add.w	r1, r4, #150	; 0x96
   129a2:	4628      	mov	r0, r5
   129a4:	f7ff fca9 	bl	122fa <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   129a8:	fab0 f080 	clz	r0, r0
   129ac:	0940      	lsrs	r0, r0, #5
}
   129ae:	bd38      	pop	{r3, r4, r5, pc}
   129b0:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   129b4:	e7f5      	b.n	129a2 <bt_conn_is_peer_addr_le+0x24>
		return false;
   129b6:	2000      	movs	r0, #0
   129b8:	e7f9      	b.n	129ae <bt_conn_is_peer_addr_le+0x30>
		return true;
   129ba:	2001      	movs	r0, #1
   129bc:	e7f7      	b.n	129ae <bt_conn_is_peer_addr_le+0x30>

000129be <bt_conn_ref>:
{
   129be:	b510      	push	{r4, lr}
		old = atomic_get(&conn->ref);
   129c0:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   129c4:	e8d2 3faf 	lda	r3, [r2]
		if (!old) {
   129c8:	b15b      	cbz	r3, 129e2 <bt_conn_ref+0x24>
	} while (!atomic_cas(&conn->ref, old, old + 1));
   129ca:	1c59      	adds	r1, r3, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   129cc:	e8d2 4fef 	ldaex	r4, [r2]
   129d0:	429c      	cmp	r4, r3
   129d2:	d104      	bne.n	129de <bt_conn_ref+0x20>
   129d4:	e8c2 1fec 	stlex	ip, r1, [r2]
   129d8:	f1bc 0f00 	cmp.w	ip, #0
   129dc:	d1f6      	bne.n	129cc <bt_conn_ref+0xe>
   129de:	d1f1      	bne.n	129c4 <bt_conn_ref+0x6>
}
   129e0:	bd10      	pop	{r4, pc}
			return NULL;
   129e2:	4618      	mov	r0, r3
   129e4:	e7fc      	b.n	129e0 <bt_conn_ref+0x22>

000129e6 <bt_conn_unref>:
	atomic_val_t old = atomic_dec(&conn->ref);
   129e6:	30b8      	adds	r0, #184	; 0xb8
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   129e8:	e8d0 3fef 	ldaex	r3, [r0]
   129ec:	3b01      	subs	r3, #1
   129ee:	e8c0 3fe2 	stlex	r2, r3, [r0]
   129f2:	2a00      	cmp	r2, #0
   129f4:	d1f8      	bne.n	129e8 <bt_conn_unref+0x2>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   129f6:	e8d0 3faf 	lda	r3, [r0]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   129fa:	b90b      	cbnz	r3, 12a00 <bt_conn_unref+0x1a>
		bt_le_adv_resume();
   129fc:	f7f4 bda4 	b.w	7548 <bt_le_adv_resume>
}
   12a00:	4770      	bx	lr

00012a02 <conn_lookup_handle>:
{
   12a02:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12a06:	4607      	mov	r7, r0
   12a08:	460e      	mov	r6, r1
   12a0a:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   12a0c:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   12a0e:	f04f 09c0 	mov.w	r9, #192	; 0xc0
	for (i = 0; i < size; i++) {
   12a12:	42b4      	cmp	r4, r6
   12a14:	d103      	bne.n	12a1e <conn_lookup_handle+0x1c>
	return NULL;
   12a16:	2300      	movs	r3, #0
}
   12a18:	4618      	mov	r0, r3
   12a1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   12a1e:	fb09 7004 	mla	r0, r9, r4, r7
   12a22:	f7ff ffcc 	bl	129be <bt_conn_ref>
   12a26:	4603      	mov	r3, r0
		if (!conn) {
   12a28:	b158      	cbz	r0, 12a42 <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   12a2a:	7b45      	ldrb	r5, [r0, #13]
   12a2c:	2d01      	cmp	r5, #1
   12a2e:	d002      	beq.n	12a36 <conn_lookup_handle+0x34>
   12a30:	3d07      	subs	r5, #7
   12a32:	2d01      	cmp	r5, #1
   12a34:	d803      	bhi.n	12a3e <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   12a36:	881a      	ldrh	r2, [r3, #0]
   12a38:	4542      	cmp	r2, r8
   12a3a:	d0ed      	beq.n	12a18 <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   12a3c:	4618      	mov	r0, r3
   12a3e:	f7ff ffd2 	bl	129e6 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   12a42:	3401      	adds	r4, #1
   12a44:	e7e5      	b.n	12a12 <conn_lookup_handle+0x10>

00012a46 <bt_conn_le_conn_update>:
{
   12a46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12a48:	4607      	mov	r7, r0
   12a4a:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   12a4c:	f242 0013 	movw	r0, #8211	; 0x2013
   12a50:	210e      	movs	r1, #14
   12a52:	f7f3 f889 	bl	5b68 <bt_hci_cmd_create>
	if (!buf) {
   12a56:	4606      	mov	r6, r0
   12a58:	b1d0      	cbz	r0, 12a90 <bt_conn_le_conn_update+0x4a>
   12a5a:	210e      	movs	r1, #14
   12a5c:	3008      	adds	r0, #8
   12a5e:	f001 fafd 	bl	1405c <net_buf_simple_add>
   12a62:	4604      	mov	r4, r0
	(void)memset(conn_update, 0, sizeof(*conn_update));
   12a64:	220e      	movs	r2, #14
   12a66:	2100      	movs	r1, #0
   12a68:	f7ff fc82 	bl	12370 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   12a6c:	883b      	ldrh	r3, [r7, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   12a6e:	4631      	mov	r1, r6
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   12a70:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   12a72:	882b      	ldrh	r3, [r5, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   12a74:	2200      	movs	r2, #0
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   12a76:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   12a78:	886b      	ldrh	r3, [r5, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   12a7a:	f242 0013 	movw	r0, #8211	; 0x2013
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   12a7e:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   12a80:	88ab      	ldrh	r3, [r5, #4]
   12a82:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   12a84:	88eb      	ldrh	r3, [r5, #6]
   12a86:	8123      	strh	r3, [r4, #8]
}
   12a88:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   12a8c:	f7f3 b8a4 	b.w	5bd8 <bt_hci_cmd_send_sync>
}
   12a90:	f06f 0036 	mvn.w	r0, #54	; 0x36
   12a94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00012a96 <l2cap_connected>:
}
   12a96:	4770      	bx	lr

00012a98 <l2cap_disconnected>:
   12a98:	4770      	bx	lr

00012a9a <bt_l2cap_chan_remove>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   12a9a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
{
   12a9c:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   12a9e:	b17b      	cbz	r3, 12ac0 <bt_l2cap_chan_remove+0x26>
   12aa0:	2200      	movs	r2, #0
   12aa2:	3b08      	subs	r3, #8
   12aa4:	b163      	cbz	r3, 12ac0 <bt_l2cap_chan_remove+0x26>
		if (chan == ch) {
   12aa6:	428b      	cmp	r3, r1
   12aa8:	f103 0408 	add.w	r4, r3, #8
   12aac:	d10f      	bne.n	12ace <bt_l2cap_chan_remove+0x34>
Z_GENLIST_REMOVE(slist, snode)
   12aae:	688b      	ldr	r3, [r1, #8]
   12ab0:	b93a      	cbnz	r2, 12ac2 <bt_l2cap_chan_remove+0x28>
   12ab2:	6d02      	ldr	r2, [r0, #80]	; 0x50
	list->head = node;
   12ab4:	64c3      	str	r3, [r0, #76]	; 0x4c
Z_GENLIST_REMOVE(slist, snode)
   12ab6:	4294      	cmp	r4, r2
   12ab8:	d100      	bne.n	12abc <bt_l2cap_chan_remove+0x22>
	list->tail = node;
   12aba:	6503      	str	r3, [r0, #80]	; 0x50
	parent->next = child;
   12abc:	2300      	movs	r3, #0
   12abe:	608b      	str	r3, [r1, #8]
}
   12ac0:	bd10      	pop	{r4, pc}
   12ac2:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   12ac4:	6d03      	ldr	r3, [r0, #80]	; 0x50
   12ac6:	429c      	cmp	r4, r3
	list->tail = node;
   12ac8:	bf08      	it	eq
   12aca:	6502      	streq	r2, [r0, #80]	; 0x50
}
   12acc:	e7f6      	b.n	12abc <bt_l2cap_chan_remove+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   12ace:	2c00      	cmp	r4, #0
   12ad0:	d0f6      	beq.n	12ac0 <bt_l2cap_chan_remove+0x26>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   12ad2:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   12ad4:	2b00      	cmp	r3, #0
   12ad6:	d0f3      	beq.n	12ac0 <bt_l2cap_chan_remove+0x26>
   12ad8:	4622      	mov	r2, r4
   12ada:	3b08      	subs	r3, #8
   12adc:	e7e2      	b.n	12aa4 <bt_l2cap_chan_remove+0xa>

00012ade <bt_l2cap_chan_del>:
{
   12ade:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   12ae0:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   12ae4:	4604      	mov	r4, r0
	if (!chan->conn) {
   12ae6:	b123      	cbz	r3, 12af2 <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   12ae8:	686b      	ldr	r3, [r5, #4]
   12aea:	b103      	cbz	r3, 12aee <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   12aec:	4798      	blx	r3
	chan->conn = NULL;
   12aee:	2300      	movs	r3, #0
   12af0:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   12af2:	68e3      	ldr	r3, [r4, #12]
   12af4:	b10b      	cbz	r3, 12afa <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   12af6:	4620      	mov	r0, r4
   12af8:	4798      	blx	r3
	if (ops->released) {
   12afa:	69eb      	ldr	r3, [r5, #28]
   12afc:	b11b      	cbz	r3, 12b06 <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   12afe:	4620      	mov	r0, r4
}
   12b00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   12b04:	4718      	bx	r3
}
   12b06:	bd70      	pop	{r4, r5, r6, pc}

00012b08 <bt_l2cap_disconnected>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   12b08:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
{
   12b0a:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   12b0c:	b18b      	cbz	r3, 12b32 <bt_l2cap_disconnected+0x2a>
   12b0e:	f1b3 0008 	subs.w	r0, r3, #8
   12b12:	d00e      	beq.n	12b32 <bt_l2cap_disconnected+0x2a>
   12b14:	681c      	ldr	r4, [r3, #0]
   12b16:	b104      	cbz	r4, 12b1a <bt_l2cap_disconnected+0x12>
   12b18:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   12b1a:	f7ff ffe0 	bl	12ade <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   12b1e:	b144      	cbz	r4, 12b32 <bt_l2cap_disconnected+0x2a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   12b20:	f114 0308 	adds.w	r3, r4, #8
   12b24:	d002      	beq.n	12b2c <bt_l2cap_disconnected+0x24>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   12b26:	68a3      	ldr	r3, [r4, #8]
   12b28:	b103      	cbz	r3, 12b2c <bt_l2cap_disconnected+0x24>
   12b2a:	3b08      	subs	r3, #8
{
   12b2c:	4620      	mov	r0, r4
   12b2e:	461c      	mov	r4, r3
   12b30:	e7f3      	b.n	12b1a <bt_l2cap_disconnected+0x12>
}
   12b32:	bd10      	pop	{r4, pc}

00012b34 <bt_l2cap_security_changed>:
{
   12b34:	b538      	push	{r3, r4, r5, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   12b36:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
{
   12b38:	460d      	mov	r5, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   12b3a:	b1a3      	cbz	r3, 12b66 <bt_l2cap_security_changed+0x32>
   12b3c:	f1b3 0008 	subs.w	r0, r3, #8
   12b40:	d011      	beq.n	12b66 <bt_l2cap_security_changed+0x32>
   12b42:	681c      	ldr	r4, [r3, #0]
   12b44:	b104      	cbz	r4, 12b48 <bt_l2cap_security_changed+0x14>
   12b46:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   12b48:	6843      	ldr	r3, [r0, #4]
   12b4a:	689b      	ldr	r3, [r3, #8]
   12b4c:	b10b      	cbz	r3, 12b52 <bt_l2cap_security_changed+0x1e>
			chan->ops->encrypt_change(chan, hci_status);
   12b4e:	4629      	mov	r1, r5
   12b50:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   12b52:	b144      	cbz	r4, 12b66 <bt_l2cap_security_changed+0x32>
Z_GENLIST_PEEK_NEXT(slist, snode)
   12b54:	f114 0308 	adds.w	r3, r4, #8
   12b58:	d002      	beq.n	12b60 <bt_l2cap_security_changed+0x2c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   12b5a:	68a3      	ldr	r3, [r4, #8]
   12b5c:	b103      	cbz	r3, 12b60 <bt_l2cap_security_changed+0x2c>
   12b5e:	3b08      	subs	r3, #8
{
   12b60:	4620      	mov	r0, r4
   12b62:	461c      	mov	r4, r3
   12b64:	e7f0      	b.n	12b48 <bt_l2cap_security_changed+0x14>
}
   12b66:	bd38      	pop	{r3, r4, r5, pc}

00012b68 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   12b68:	3104      	adds	r1, #4
   12b6a:	f7f5 bc8b 	b.w	8484 <bt_conn_create_pdu_timeout>

00012b6e <bt_l2cap_send_cb>:
{
   12b6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12b72:	4614      	mov	r4, r2
   12b74:	4605      	mov	r5, r0
   12b76:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   12b78:	f102 0008 	add.w	r0, r2, #8
   12b7c:	2104      	movs	r1, #4
   12b7e:	461e      	mov	r6, r3
   12b80:	f8dd 8018 	ldr.w	r8, [sp, #24]
   12b84:	f001 fa81 	bl	1408a <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   12b88:	89a2      	ldrh	r2, [r4, #12]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   12b8a:	4643      	mov	r3, r8
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   12b8c:	3a04      	subs	r2, #4
   12b8e:	8002      	strh	r2, [r0, #0]
	hdr->cid = sys_cpu_to_le16(cid);
   12b90:	8047      	strh	r7, [r0, #2]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   12b92:	4632      	mov	r2, r6
   12b94:	4621      	mov	r1, r4
   12b96:	4628      	mov	r0, r5
}
   12b98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   12b9c:	f7f5 b98e 	b.w	7ebc <bt_conn_send_cb>

00012ba0 <bt_l2cap_le_lookup_tx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   12ba0:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   12ba2:	b160      	cbz	r0, 12bbe <bt_l2cap_le_lookup_tx_cid+0x1e>
   12ba4:	3808      	subs	r0, #8
   12ba6:	b900      	cbnz	r0, 12baa <bt_l2cap_le_lookup_tx_cid+0xa>
   12ba8:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   12baa:	f8b0 3054 	ldrh.w	r3, [r0, #84]	; 0x54
   12bae:	428b      	cmp	r3, r1
   12bb0:	d005      	beq.n	12bbe <bt_l2cap_le_lookup_tx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   12bb2:	f110 0308 	adds.w	r3, r0, #8
   12bb6:	d001      	beq.n	12bbc <bt_l2cap_le_lookup_tx_cid+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   12bb8:	6880      	ldr	r0, [r0, #8]
   12bba:	e7f2      	b.n	12ba2 <bt_l2cap_le_lookup_tx_cid+0x2>
	return NULL;
   12bbc:	4618      	mov	r0, r3
}
   12bbe:	4770      	bx	lr

00012bc0 <bt_l2cap_le_lookup_rx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   12bc0:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   12bc2:	b160      	cbz	r0, 12bde <bt_l2cap_le_lookup_rx_cid+0x1e>
   12bc4:	3808      	subs	r0, #8
   12bc6:	b900      	cbnz	r0, 12bca <bt_l2cap_le_lookup_rx_cid+0xa>
   12bc8:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   12bca:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
   12bce:	428b      	cmp	r3, r1
   12bd0:	d005      	beq.n	12bde <bt_l2cap_le_lookup_rx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   12bd2:	f110 0308 	adds.w	r3, r0, #8
   12bd6:	d001      	beq.n	12bdc <bt_l2cap_le_lookup_rx_cid+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   12bd8:	6880      	ldr	r0, [r0, #8]
   12bda:	e7f2      	b.n	12bc2 <bt_l2cap_le_lookup_rx_cid+0x2>
	return NULL;
   12bdc:	4618      	mov	r0, r3
}
   12bde:	4770      	bx	lr

00012be0 <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   12be0:	4770      	bx	lr

00012be2 <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   12be2:	4603      	mov	r3, r0
Z_GENLIST_IS_EMPTY(slist)
   12be4:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   12be6:	b128      	cbz	r0, 12bf4 <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   12be8:	6859      	ldr	r1, [r3, #4]
   12bea:	6802      	ldr	r2, [r0, #0]
   12bec:	4288      	cmp	r0, r1
	list->head = node;
   12bee:	601a      	str	r2, [r3, #0]
	list->tail = node;
   12bf0:	bf08      	it	eq
   12bf2:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   12bf4:	4770      	bx	lr

00012bf6 <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   12bf6:	2200      	movs	r2, #0
   12bf8:	4603      	mov	r3, r0
   12bfa:	6800      	ldr	r0, [r0, #0]
   12bfc:	b900      	cbnz	r0, 12c00 <sys_slist_find_and_remove+0xa>
   12bfe:	4770      	bx	lr
   12c00:	4288      	cmp	r0, r1
   12c02:	d110      	bne.n	12c26 <sys_slist_find_and_remove+0x30>
Z_GENLIST_REMOVE(slist, snode)
   12c04:	6808      	ldr	r0, [r1, #0]
   12c06:	b942      	cbnz	r2, 12c1a <sys_slist_find_and_remove+0x24>
   12c08:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   12c0a:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   12c0c:	4291      	cmp	r1, r2
   12c0e:	d100      	bne.n	12c12 <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   12c10:	6058      	str	r0, [r3, #4]
	parent->next = child;
   12c12:	2300      	movs	r3, #0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   12c14:	2001      	movs	r0, #1
	parent->next = child;
   12c16:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   12c18:	4770      	bx	lr
	parent->next = child;
   12c1a:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   12c1c:	6858      	ldr	r0, [r3, #4]
   12c1e:	4281      	cmp	r1, r0
	list->tail = node;
   12c20:	bf08      	it	eq
   12c22:	605a      	streq	r2, [r3, #4]
}
   12c24:	e7f5      	b.n	12c12 <sys_slist_find_and_remove+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   12c26:	4602      	mov	r2, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   12c28:	6800      	ldr	r0, [r0, #0]
   12c2a:	e7e7      	b.n	12bfc <sys_slist_find_and_remove+0x6>

00012c2c <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   12c2c:	4603      	mov	r3, r0
	size_t bytes = 0;
   12c2e:	2000      	movs	r0, #0

	while (buf) {
   12c30:	b903      	cbnz	r3, 12c34 <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   12c32:	4770      	bx	lr
		bytes += buf->len;
   12c34:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   12c36:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   12c38:	4410      	add	r0, r2
		buf = buf->frags;
   12c3a:	e7f9      	b.n	12c30 <net_buf_frags_len+0x4>

00012c3c <att_sent>:
	if (chan->ops->sent) {
   12c3c:	684b      	ldr	r3, [r1, #4]
{
   12c3e:	4608      	mov	r0, r1
	if (chan->ops->sent) {
   12c40:	695b      	ldr	r3, [r3, #20]
   12c42:	b103      	cbz	r3, 12c46 <att_sent+0xa>
		chan->ops->sent(chan);
   12c44:	4718      	bx	r3
}
   12c46:	4770      	bx	lr

00012c48 <attr_read_type_cb>:
{
   12c48:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   12c4a:	68d4      	ldr	r4, [r2, #12]
   12c4c:	3102      	adds	r1, #2
   12c4e:	7823      	ldrb	r3, [r4, #0]
   12c50:	b913      	cbnz	r3, 12c58 <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   12c52:	7021      	strb	r1, [r4, #0]
	return true;
   12c54:	2001      	movs	r0, #1
   12c56:	e006      	b.n	12c66 <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   12c58:	428b      	cmp	r3, r1
   12c5a:	d0fb      	beq.n	12c54 <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   12c5c:	8983      	ldrh	r3, [r0, #12]
   12c5e:	3b02      	subs	r3, #2
   12c60:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   12c62:	2000      	movs	r0, #0
   12c64:	6110      	str	r0, [r2, #16]
}
   12c66:	bd10      	pop	{r4, pc}

00012c68 <att_op_get_type>:
	switch (op) {
   12c68:	281e      	cmp	r0, #30
   12c6a:	d816      	bhi.n	12c9a <att_op_get_type+0x32>
   12c6c:	b308      	cbz	r0, 12cb2 <att_op_get_type+0x4a>
   12c6e:	1e43      	subs	r3, r0, #1
   12c70:	2b1d      	cmp	r3, #29
   12c72:	d81e      	bhi.n	12cb2 <att_op_get_type+0x4a>
   12c74:	e8df f003 	tbb	[pc, r3]
   12c78:	23172317 	.word	0x23172317
   12c7c:	23172317 	.word	0x23172317
   12c80:	23172317 	.word	0x23172317
   12c84:	23172317 	.word	0x23172317
   12c88:	1d172317 	.word	0x1d172317
   12c8c:	2317231d 	.word	0x2317231d
   12c90:	1d191d17 	.word	0x1d191d17
   12c94:	0f1b      	.short	0x0f1b
   12c96:	2004      	movs	r0, #4
   12c98:	4770      	bx	lr
   12c9a:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   12c9e:	2b52      	cmp	r3, #82	; 0x52
   12ca0:	d107      	bne.n	12cb2 <att_op_get_type+0x4a>
		return ATT_COMMAND;
   12ca2:	2000      	movs	r0, #0
}
   12ca4:	4770      	bx	lr
		return ATT_RESPONSE;
   12ca6:	2002      	movs	r0, #2
   12ca8:	4770      	bx	lr
		return ATT_NOTIFICATION;
   12caa:	2003      	movs	r0, #3
   12cac:	4770      	bx	lr
		return ATT_INDICATION;
   12cae:	2005      	movs	r0, #5
   12cb0:	4770      	bx	lr
		return ATT_COMMAND;
   12cb2:	f010 0f40 	tst.w	r0, #64	; 0x40
   12cb6:	bf0c      	ite	eq
   12cb8:	2006      	moveq	r0, #6
   12cba:	2000      	movne	r0, #0
   12cbc:	4770      	bx	lr
		return ATT_REQUEST;
   12cbe:	2001      	movs	r0, #1
   12cc0:	4770      	bx	lr

00012cc2 <bt_gatt_foreach_attr>:
 *  @param user_data Data to pass to the callback.
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
   12cc2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   12cc4:	e9cd 2301 	strd	r2, r3, [sp, #4]
   12cc8:	2300      	movs	r3, #0
   12cca:	461a      	mov	r2, r3
   12ccc:	9300      	str	r3, [sp, #0]
   12cce:	f7f7 fdcf 	bl	a870 <bt_gatt_foreach_attr_type>
				  user_data);
}
   12cd2:	b005      	add	sp, #20
   12cd4:	f85d fb04 	ldr.w	pc, [sp], #4

00012cd8 <find_info_cb>:
{
   12cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   12cda:	6893      	ldr	r3, [r2, #8]
{
   12cdc:	4605      	mov	r5, r0
   12cde:	460e      	mov	r6, r1
   12ce0:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   12ce2:	6817      	ldr	r7, [r2, #0]
	if (!data->rsp) {
   12ce4:	b963      	cbnz	r3, 12d00 <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   12ce6:	6850      	ldr	r0, [r2, #4]
   12ce8:	2101      	movs	r1, #1
   12cea:	3008      	adds	r0, #8
   12cec:	f001 f9b6 	bl	1405c <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   12cf0:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   12cf2:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   12cf4:	781b      	ldrb	r3, [r3, #0]
   12cf6:	2b00      	cmp	r3, #0
   12cf8:	bf0c      	ite	eq
   12cfa:	2301      	moveq	r3, #1
   12cfc:	2302      	movne	r3, #2
   12cfe:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   12d00:	68a3      	ldr	r3, [r4, #8]
   12d02:	781b      	ldrb	r3, [r3, #0]
   12d04:	2b01      	cmp	r3, #1
   12d06:	d003      	beq.n	12d10 <find_info_cb+0x38>
   12d08:	2b02      	cmp	r3, #2
   12d0a:	d019      	beq.n	12d40 <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
   12d0c:	2000      	movs	r0, #0
   12d0e:	e016      	b.n	12d3e <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   12d10:	682b      	ldr	r3, [r5, #0]
   12d12:	781b      	ldrb	r3, [r3, #0]
   12d14:	2b00      	cmp	r3, #0
   12d16:	d1f9      	bne.n	12d0c <find_info_cb+0x34>
   12d18:	6860      	ldr	r0, [r4, #4]
   12d1a:	2104      	movs	r1, #4
   12d1c:	3008      	adds	r0, #8
   12d1e:	f001 f99d 	bl	1405c <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   12d22:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   12d24:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   12d26:	885b      	ldrh	r3, [r3, #2]
		data->info16->handle = sys_cpu_to_le16(handle);
   12d28:	8006      	strh	r6, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   12d2a:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   12d2c:	6863      	ldr	r3, [r4, #4]
   12d2e:	f8b7 005e 	ldrh.w	r0, [r7, #94]	; 0x5e
   12d32:	899b      	ldrh	r3, [r3, #12]
   12d34:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   12d36:	2804      	cmp	r0, #4
   12d38:	bf94      	ite	ls
   12d3a:	2000      	movls	r0, #0
   12d3c:	2001      	movhi	r0, #1
}
   12d3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   12d40:	682b      	ldr	r3, [r5, #0]
   12d42:	781b      	ldrb	r3, [r3, #0]
   12d44:	2b02      	cmp	r3, #2
   12d46:	d1e1      	bne.n	12d0c <find_info_cb+0x34>
   12d48:	6860      	ldr	r0, [r4, #4]
   12d4a:	2112      	movs	r1, #18
   12d4c:	3008      	adds	r0, #8
   12d4e:	f001 f985 	bl	1405c <net_buf_simple_add>
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   12d52:	6829      	ldr	r1, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   12d54:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   12d56:	2210      	movs	r2, #16
		data->info128->handle = sys_cpu_to_le16(handle);
   12d58:	f820 6b02 	strh.w	r6, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   12d5c:	3101      	adds	r1, #1
   12d5e:	f7ff fadc 	bl	1231a <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   12d62:	6863      	ldr	r3, [r4, #4]
   12d64:	f8b7 005e 	ldrh.w	r0, [r7, #94]	; 0x5e
   12d68:	899b      	ldrh	r3, [r3, #12]
   12d6a:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   12d6c:	2812      	cmp	r0, #18
   12d6e:	e7e3      	b.n	12d38 <find_info_cb+0x60>

00012d70 <attr_read_group_cb>:
	if (!data->rsp->len) {
   12d70:	68d0      	ldr	r0, [r2, #12]
   12d72:	3104      	adds	r1, #4
   12d74:	7803      	ldrb	r3, [r0, #0]
   12d76:	b913      	cbnz	r3, 12d7e <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   12d78:	7001      	strb	r1, [r0, #0]
	return true;
   12d7a:	2001      	movs	r0, #1
}
   12d7c:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   12d7e:	428b      	cmp	r3, r1
   12d80:	d0fb      	beq.n	12d7a <attr_read_group_cb+0xa>
		data->group = NULL;
   12d82:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   12d84:	6891      	ldr	r1, [r2, #8]
   12d86:	898b      	ldrh	r3, [r1, #12]
   12d88:	3b04      	subs	r3, #4
   12d8a:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   12d8c:	6110      	str	r0, [r2, #16]
		return false;
   12d8e:	4770      	bx	lr

00012d90 <chan_rsp_sent>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   12d90:	30c0      	adds	r0, #192	; 0xc0
   12d92:	e8d0 3fef 	ldaex	r3, [r0]
   12d96:	f023 0301 	bic.w	r3, r3, #1
   12d9a:	e8c0 3fe2 	stlex	r2, r3, [r0]
   12d9e:	2a00      	cmp	r2, #0
   12da0:	d1f7      	bne.n	12d92 <chan_rsp_sent+0x2>
}
   12da2:	4770      	bx	lr

00012da4 <chan_cfm_sent>:
   12da4:	30c0      	adds	r0, #192	; 0xc0
   12da6:	e8d0 3fef 	ldaex	r3, [r0]
   12daa:	f023 0302 	bic.w	r3, r3, #2
   12dae:	e8c0 3fe2 	stlex	r2, r3, [r0]
   12db2:	2a00      	cmp	r2, #0
   12db4:	d1f7      	bne.n	12da6 <chan_cfm_sent+0x2>
}
   12db6:	4770      	bx	lr

00012db8 <att_chan_read>:
{
   12db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12dbc:	4680      	mov	r8, r0
   12dbe:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   12dc0:	4610      	mov	r0, r2
{
   12dc2:	4699      	mov	r9, r3
   12dc4:	468b      	mov	fp, r1
   12dc6:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   12dc8:	f7ff ff30 	bl	12c2c <net_buf_frags_len>
   12dcc:	f8b8 305e 	ldrh.w	r3, [r8, #94]	; 0x5e
   12dd0:	4283      	cmp	r3, r0
   12dd2:	d97a      	bls.n	12eca <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   12dd4:	f8d8 3008 	ldr.w	r3, [r8, #8]
	frag = net_buf_frag_last(buf);
   12dd8:	4630      	mov	r0, r6
	struct bt_conn *conn = chan->chan.chan.conn;
   12dda:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   12ddc:	f001 f91c 	bl	14018 <net_buf_frag_last>
	size_t len, total = 0;
   12de0:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   12de4:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   12de6:	4630      	mov	r0, r6
   12de8:	f7ff ff20 	bl	12c2c <net_buf_frags_len>
   12dec:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
	return net_buf_simple_tailroom(&buf->b);
   12df0:	f105 0708 	add.w	r7, r5, #8
   12df4:	1a24      	subs	r4, r4, r0
   12df6:	4638      	mov	r0, r7
   12df8:	f001 f974 	bl	140e4 <net_buf_simple_tailroom>
   12dfc:	4284      	cmp	r4, r0
   12dfe:	d211      	bcs.n	12e24 <att_chan_read+0x6c>
   12e00:	4630      	mov	r0, r6
   12e02:	f7ff ff13 	bl	12c2c <net_buf_frags_len>
   12e06:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   12e0a:	1a24      	subs	r4, r4, r0
		if (!len) {
   12e0c:	bb34      	cbnz	r4, 12e5c <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   12e0e:	79b0      	ldrb	r0, [r6, #6]
   12e10:	f7fa f95e 	bl	d0d0 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   12e14:	2200      	movs	r2, #0
   12e16:	2300      	movs	r3, #0
   12e18:	f001 f8ca 	bl	13fb0 <net_buf_alloc_fixed>
			if (!frag) {
   12e1c:	4605      	mov	r5, r0
   12e1e:	b930      	cbnz	r0, 12e2e <att_chan_read+0x76>
	return total;
   12e20:	4657      	mov	r7, sl
   12e22:	e02c      	b.n	12e7e <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   12e24:	4638      	mov	r0, r7
   12e26:	f001 f95d 	bl	140e4 <net_buf_simple_tailroom>
   12e2a:	4604      	mov	r4, r0
   12e2c:	e7ee      	b.n	12e0c <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   12e2e:	4601      	mov	r1, r0
   12e30:	4630      	mov	r0, r6
   12e32:	f001 f902 	bl	1403a <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   12e36:	4630      	mov	r0, r6
   12e38:	f7ff fef8 	bl	12c2c <net_buf_frags_len>
   12e3c:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   12e40:	f105 0708 	add.w	r7, r5, #8
   12e44:	1a24      	subs	r4, r4, r0
   12e46:	4638      	mov	r0, r7
   12e48:	f001 f94c 	bl	140e4 <net_buf_simple_tailroom>
   12e4c:	4284      	cmp	r4, r0
   12e4e:	d21a      	bcs.n	12e86 <att_chan_read+0xce>
   12e50:	4630      	mov	r0, r6
   12e52:	f7ff feeb 	bl	12c2c <net_buf_frags_len>
   12e56:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   12e5a:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   12e5c:	68a9      	ldr	r1, [r5, #8]
   12e5e:	89aa      	ldrh	r2, [r5, #12]
   12e60:	f8db 7004 	ldr.w	r7, [fp, #4]
   12e64:	440a      	add	r2, r1
   12e66:	9803      	ldr	r0, [sp, #12]
   12e68:	4659      	mov	r1, fp
   12e6a:	f8cd 9000 	str.w	r9, [sp]
   12e6e:	b2a3      	uxth	r3, r4
   12e70:	47b8      	blx	r7
		if (read < 0) {
   12e72:	1e07      	subs	r7, r0, #0
   12e74:	da0c      	bge.n	12e90 <att_chan_read+0xd8>
				return total;
   12e76:	f1ba 0f00 	cmp.w	sl, #0
   12e7a:	bf18      	it	ne
   12e7c:	4657      	movne	r7, sl
}
   12e7e:	4638      	mov	r0, r7
   12e80:	b005      	add	sp, #20
   12e82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12e86:	4638      	mov	r0, r7
   12e88:	f001 f92c 	bl	140e4 <net_buf_simple_tailroom>
   12e8c:	4604      	mov	r4, r0
   12e8e:	e7e5      	b.n	12e5c <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   12e90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   12e92:	b993      	cbnz	r3, 12eba <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   12e94:	4639      	mov	r1, r7
   12e96:	f105 0008 	add.w	r0, r5, #8
   12e9a:	f001 f8df 	bl	1405c <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   12e9e:	4630      	mov	r0, r6
   12ea0:	f7ff fec4 	bl	12c2c <net_buf_frags_len>
   12ea4:	f8b8 305e 	ldrh.w	r3, [r8, #94]	; 0x5e
		offset += read;
   12ea8:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   12eaa:	4283      	cmp	r3, r0
		total += read;
   12eac:	44ba      	add	sl, r7
		offset += read;
   12eae:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   12eb2:	d9b5      	bls.n	12e20 <att_chan_read+0x68>
   12eb4:	42a7      	cmp	r7, r4
   12eb6:	d096      	beq.n	12de6 <att_chan_read+0x2e>
   12eb8:	e7b2      	b.n	12e20 <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   12eba:	4639      	mov	r1, r7
   12ebc:	4628      	mov	r0, r5
   12ebe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   12ec0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   12ec2:	4798      	blx	r3
   12ec4:	2800      	cmp	r0, #0
   12ec6:	d1e5      	bne.n	12e94 <att_chan_read+0xdc>
   12ec8:	e7aa      	b.n	12e20 <att_chan_read+0x68>
		return 0;
   12eca:	2700      	movs	r7, #0
   12ecc:	e7d7      	b.n	12e7e <att_chan_read+0xc6>

00012ece <write_cb>:
{
   12ece:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   12ed0:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   12ed2:	4601      	mov	r1, r0
{
   12ed4:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   12ed6:	222a      	movs	r2, #42	; 0x2a
   12ed8:	6820      	ldr	r0, [r4, #0]
   12eda:	f000 fc79 	bl	137d0 <bt_gatt_check_perm>
   12ede:	4605      	mov	r5, r0
   12ee0:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   12ee2:	bb00      	cbnz	r0, 12f26 <write_cb+0x58>
	if (!data->req) {
   12ee4:	7a23      	ldrb	r3, [r4, #8]
	write = attr->write(data->conn, attr, data->value, data->len,
   12ee6:	4631      	mov	r1, r6
	if (!data->req) {
   12ee8:	2b00      	cmp	r3, #0
		flags |= BT_GATT_WRITE_FLAG_CMD;
   12eea:	bf14      	ite	ne
   12eec:	2300      	movne	r3, #0
   12eee:	2302      	moveq	r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   12ef0:	9301      	str	r3, [sp, #4]
   12ef2:	8a63      	ldrh	r3, [r4, #18]
   12ef4:	68b7      	ldr	r7, [r6, #8]
   12ef6:	9300      	str	r3, [sp, #0]
   12ef8:	68e2      	ldr	r2, [r4, #12]
   12efa:	8a23      	ldrh	r3, [r4, #16]
   12efc:	6820      	ldr	r0, [r4, #0]
   12efe:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   12f00:	1e03      	subs	r3, r0, #0
   12f02:	db05      	blt.n	12f10 <write_cb+0x42>
   12f04:	8a22      	ldrh	r2, [r4, #16]
   12f06:	4293      	cmp	r3, r2
   12f08:	d10b      	bne.n	12f22 <write_cb+0x54>
	data->err = 0U;
   12f0a:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   12f0c:	2501      	movs	r5, #1
   12f0e:	e005      	b.n	12f1c <write_cb+0x4e>
	if (err < 0 && err >= -0xff) {
   12f10:	f113 0fff 	cmn.w	r3, #255	; 0xff
   12f14:	d305      	bcc.n	12f22 <write_cb+0x54>
		return -err;
   12f16:	425b      	negs	r3, r3
   12f18:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   12f1a:	7523      	strb	r3, [r4, #20]
}
   12f1c:	4628      	mov	r0, r5
   12f1e:	b003      	add	sp, #12
   12f20:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   12f22:	230e      	movs	r3, #14
   12f24:	e7f9      	b.n	12f1a <write_cb+0x4c>
		return BT_GATT_ITER_STOP;
   12f26:	2500      	movs	r5, #0
   12f28:	e7f8      	b.n	12f1c <write_cb+0x4e>

00012f2a <read_cb>:
{
   12f2a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   12f2e:	4606      	mov	r6, r0
	data->err = 0x00;
   12f30:	2700      	movs	r7, #0
	struct bt_att_chan *chan = data->chan;
   12f32:	f8d2 8000 	ldr.w	r8, [r2]
{
   12f36:	4615      	mov	r5, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   12f38:	f8d8 0008 	ldr.w	r0, [r8, #8]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   12f3c:	4631      	mov	r1, r6
	data->err = 0x00;
   12f3e:	7317      	strb	r7, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   12f40:	2215      	movs	r2, #21
   12f42:	f000 fc45 	bl	137d0 <bt_gatt_check_perm>
   12f46:	4604      	mov	r4, r0
   12f48:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   12f4a:	b9a0      	cbnz	r0, 12f76 <read_cb+0x4c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   12f4c:	e9cd 0000 	strd	r0, r0, [sp]
   12f50:	88ab      	ldrh	r3, [r5, #4]
   12f52:	4631      	mov	r1, r6
   12f54:	4640      	mov	r0, r8
   12f56:	68aa      	ldr	r2, [r5, #8]
   12f58:	f7ff ff2e 	bl	12db8 <att_chan_read>
	if (ret < 0) {
   12f5c:	1e03      	subs	r3, r0, #0
   12f5e:	da0c      	bge.n	12f7a <read_cb+0x50>
	if (err < 0 && err >= -0xff) {
   12f60:	f113 0fff 	cmn.w	r3, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   12f64:	bf32      	itee	cc
   12f66:	230e      	movcc	r3, #14
		return -err;
   12f68:	425b      	negcs	r3, r3
   12f6a:	b2db      	uxtbcs	r3, r3
		data->err = err_to_att(ret);
   12f6c:	732b      	strb	r3, [r5, #12]
}
   12f6e:	4620      	mov	r0, r4
   12f70:	b002      	add	sp, #8
   12f72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   12f76:	463c      	mov	r4, r7
   12f78:	e7f9      	b.n	12f6e <read_cb+0x44>
	return BT_GATT_ITER_CONTINUE;
   12f7a:	2401      	movs	r4, #1
   12f7c:	e7f7      	b.n	12f6e <read_cb+0x44>

00012f7e <chan_req_send>:
{
   12f7e:	b570      	push	{r4, r5, r6, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   12f80:	690e      	ldr	r6, [r1, #16]
{
   12f82:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   12f84:	4630      	mov	r0, r6
{
   12f86:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   12f88:	f7ff fe50 	bl	12c2c <net_buf_frags_len>
   12f8c:	f8b5 305e 	ldrh.w	r3, [r5, #94]	; 0x5e
   12f90:	4283      	cmp	r3, r0
   12f92:	d317      	bcc.n	12fc4 <chan_req_send+0x46>
	chan->req = req;
   12f94:	f8c5 10c4 	str.w	r1, [r5, #196]	; 0xc4
	state->offset = net_buf_simple_headroom(buf);
   12f98:	f106 0008 	add.w	r0, r6, #8
   12f9c:	f001 f89e 	bl	140dc <net_buf_simple_headroom>
	state->len = buf->len;
   12fa0:	89b3      	ldrh	r3, [r6, #12]
	state->offset = net_buf_simple_headroom(buf);
   12fa2:	81a0      	strh	r0, [r4, #12]
	state->len = buf->len;
   12fa4:	81e3      	strh	r3, [r4, #14]
	err = chan_send(chan, net_buf_ref(req->buf), NULL);
   12fa6:	6920      	ldr	r0, [r4, #16]
   12fa8:	f001 f832 	bl	14010 <net_buf_ref>
   12fac:	2200      	movs	r2, #0
   12fae:	4601      	mov	r1, r0
   12fb0:	4628      	mov	r0, r5
   12fb2:	f7f5 ff9f 	bl	8ef4 <chan_send>
	if (err) {
   12fb6:	4605      	mov	r5, r0
   12fb8:	b110      	cbz	r0, 12fc0 <chan_req_send+0x42>
		net_buf_unref(req->buf);
   12fba:	6920      	ldr	r0, [r4, #16]
   12fbc:	f7fa f944 	bl	d248 <net_buf_unref>
}
   12fc0:	4628      	mov	r0, r5
   12fc2:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   12fc4:	f06f 0523 	mvn.w	r5, #35	; 0x23
   12fc8:	e7fa      	b.n	12fc0 <chan_req_send+0x42>

00012fca <bt_att_chan_req_send>:
{
   12fca:	b570      	push	{r4, r5, r6, lr}
   12fcc:	4604      	mov	r4, r0
   12fce:	460d      	mov	r5, r1
	if (k_sem_take(&chan->tx_sem, K_NO_WAIT) < 0) {
   12fd0:	f500 7688 	add.w	r6, r0, #272	; 0x110
	return z_impl_k_sem_take(sem, timeout);
   12fd4:	2200      	movs	r2, #0
   12fd6:	2300      	movs	r3, #0
   12fd8:	4630      	mov	r0, r6
   12fda:	f7fc fbf3 	bl	f7c4 <z_impl_k_sem_take>
   12fde:	2800      	cmp	r0, #0
   12fe0:	db0a      	blt.n	12ff8 <bt_att_chan_req_send+0x2e>
	err = chan_req_send(chan, req);
   12fe2:	4620      	mov	r0, r4
   12fe4:	4629      	mov	r1, r5
   12fe6:	f7ff ffca 	bl	12f7e <chan_req_send>
	if (err < 0) {
   12fea:	1e04      	subs	r4, r0, #0
   12fec:	da02      	bge.n	12ff4 <bt_att_chan_req_send+0x2a>
	z_impl_k_sem_give(sem);
   12fee:	4630      	mov	r0, r6
   12ff0:	f7fc fbc2 	bl	f778 <z_impl_k_sem_give>
}
   12ff4:	4620      	mov	r0, r4
   12ff6:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
   12ff8:	f06f 040a 	mvn.w	r4, #10
   12ffc:	e7fa      	b.n	12ff4 <bt_att_chan_req_send+0x2a>

00012ffe <bt_att_status>:
{
   12ffe:	b538      	push	{r3, r4, r5, lr}
   13000:	4605      	mov	r5, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   13002:	e8d1 3faf 	lda	r3, [r1]
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   13006:	07db      	lsls	r3, r3, #31
   13008:	d519      	bpl.n	1303e <bt_att_status+0x40>
	if (!chan->att) {
   1300a:	f850 0c08 	ldr.w	r0, [r0, #-8]
   1300e:	b1b0      	cbz	r0, 1303e <bt_att_status+0x40>
	if (chan->req) {
   13010:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
   13014:	b99b      	cbnz	r3, 1303e <bt_att_status+0x40>
	node = sys_slist_get(&chan->att->reqs);
   13016:	3004      	adds	r0, #4
   13018:	f7ff fde3 	bl	12be2 <sys_slist_get>
	if (!node) {
   1301c:	4604      	mov	r4, r0
   1301e:	b170      	cbz	r0, 1303e <bt_att_status+0x40>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   13020:	4601      	mov	r1, r0
   13022:	f1a5 0008 	sub.w	r0, r5, #8
   13026:	f7ff ffd0 	bl	12fca <bt_att_chan_req_send>
   1302a:	2800      	cmp	r0, #0
   1302c:	da07      	bge.n	1303e <bt_att_status+0x40>
	sys_slist_prepend(&chan->att->reqs, node);
   1302e:	f855 3c08 	ldr.w	r3, [r5, #-8]
Z_GENLIST_PREPEND(slist, snode)
   13032:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   13034:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   13036:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   13038:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   1303a:	b902      	cbnz	r2, 1303e <bt_att_status+0x40>
	list->tail = node;
   1303c:	609c      	str	r4, [r3, #8]
}
   1303e:	bd38      	pop	{r3, r4, r5, pc}

00013040 <bt_att_chan_send>:
{
   13040:	b570      	push	{r4, r5, r6, lr}
   13042:	4604      	mov	r4, r0
   13044:	460e      	mov	r6, r1
	if (!cb) {
   13046:	4615      	mov	r5, r2
   13048:	b132      	cbz	r2, 13058 <bt_att_chan_send+0x18>
	return chan_send(chan, buf, cb);
   1304a:	462a      	mov	r2, r5
   1304c:	4631      	mov	r1, r6
   1304e:	4620      	mov	r0, r4
}
   13050:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return chan_send(chan, buf, cb);
   13054:	f7f5 bf4e 	b.w	8ef4 <chan_send>
	return z_impl_k_sem_take(sem, timeout);
   13058:	2200      	movs	r2, #0
   1305a:	2300      	movs	r3, #0
   1305c:	f500 7088 	add.w	r0, r0, #272	; 0x110
   13060:	f7fc fbb0 	bl	f7c4 <z_impl_k_sem_take>
		if (k_sem_take(&chan->tx_sem, K_NO_WAIT) < 0) {
   13064:	2800      	cmp	r0, #0
   13066:	daf0      	bge.n	1304a <bt_att_chan_send+0xa>
}
   13068:	f06f 000a 	mvn.w	r0, #10
   1306c:	bd70      	pop	{r4, r5, r6, pc}

0001306e <bt_att_chan_send_rsp>:
{
   1306e:	b538      	push	{r3, r4, r5, lr}
   13070:	4604      	mov	r4, r0
   13072:	460d      	mov	r5, r1
	err = bt_att_chan_send(chan, buf, cb);
   13074:	f7ff ffe4 	bl	13040 <bt_att_chan_send>
	if (err) {
   13078:	b130      	cbz	r0, 13088 <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   1307a:	4629      	mov	r1, r5
   1307c:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
}
   13080:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   13084:	f000 bfb7 	b.w	13ff6 <net_buf_put>
}
   13088:	bd38      	pop	{r3, r4, r5, pc}

0001308a <process_queue>:
{
   1308a:	b570      	push	{r4, r5, r6, lr}
	buf = net_buf_get(queue, K_NO_WAIT);
   1308c:	2200      	movs	r2, #0
{
   1308e:	4604      	mov	r4, r0
	buf = net_buf_get(queue, K_NO_WAIT);
   13090:	2300      	movs	r3, #0
   13092:	4608      	mov	r0, r1
{
   13094:	460e      	mov	r6, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   13096:	f000 ff90 	bl	13fba <net_buf_get>
	if (buf) {
   1309a:	4605      	mov	r5, r0
   1309c:	b160      	cbz	r0, 130b8 <process_queue+0x2e>
		err = chan_send(chan, buf, NULL);
   1309e:	4601      	mov	r1, r0
   130a0:	2200      	movs	r2, #0
   130a2:	4620      	mov	r0, r4
   130a4:	f7f5 ff26 	bl	8ef4 <chan_send>
		if (err) {
   130a8:	4604      	mov	r4, r0
   130aa:	b118      	cbz	r0, 130b4 <process_queue+0x2a>
			k_queue_prepend(&queue->_queue, buf);
   130ac:	4629      	mov	r1, r5
   130ae:	4630      	mov	r0, r6
   130b0:	f001 fefa 	bl	14ea8 <k_queue_prepend>
}
   130b4:	4620      	mov	r0, r4
   130b6:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   130b8:	f06f 0401 	mvn.w	r4, #1
   130bc:	e7fa      	b.n	130b4 <process_queue+0x2a>

000130be <bt_att_sent>:
{
   130be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->sent) {
   130c0:	f8d0 3120 	ldr.w	r3, [r0, #288]	; 0x120
{
   130c4:	4604      	mov	r4, r0
	struct bt_att *att = chan->att;
   130c6:	f850 5c08 	ldr.w	r5, [r0, #-8]
	struct bt_att_chan *chan = ATT_CHAN(ch);
   130ca:	f1a0 0708 	sub.w	r7, r0, #8
	if (chan->sent) {
   130ce:	b10b      	cbz	r3, 130d4 <bt_att_sent+0x16>
		chan->sent(chan);
   130d0:	4638      	mov	r0, r7
   130d2:	4798      	blx	r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   130d4:	f104 03b8 	add.w	r3, r4, #184	; 0xb8
   130d8:	e8d3 2fef 	ldaex	r2, [r3]
   130dc:	f022 0210 	bic.w	r2, r2, #16
   130e0:	e8c3 2fe1 	stlex	r1, r2, [r3]
   130e4:	2900      	cmp	r1, #0
   130e6:	d1f7      	bne.n	130d8 <bt_att_sent+0x1a>
	if (!att) {
   130e8:	b335      	cbz	r5, 13138 <bt_att_sent+0x7a>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   130ea:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   130ee:	b98b      	cbnz	r3, 13114 <bt_att_sent+0x56>
   130f0:	686b      	ldr	r3, [r5, #4]
   130f2:	b17b      	cbz	r3, 13114 <bt_att_sent+0x56>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   130f4:	1d28      	adds	r0, r5, #4
   130f6:	f7ff fd74 	bl	12be2 <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   130fa:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   130fc:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   130fe:	4638      	mov	r0, r7
   13100:	f7ff ff3d 	bl	12f7e <chan_req_send>
   13104:	2800      	cmp	r0, #0
   13106:	da17      	bge.n	13138 <bt_att_sent+0x7a>
Z_GENLIST_PREPEND(slist, snode)
   13108:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   1310a:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   1310c:	68ab      	ldr	r3, [r5, #8]
	list->head = node;
   1310e:	606e      	str	r6, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   13110:	b903      	cbnz	r3, 13114 <bt_att_sent+0x56>
	list->tail = node;
   13112:	60ae      	str	r6, [r5, #8]
	err = process_queue(chan, &chan->tx_queue);
   13114:	4638      	mov	r0, r7
   13116:	f104 01c0 	add.w	r1, r4, #192	; 0xc0
   1311a:	f7ff ffb6 	bl	1308a <process_queue>
	if (!err) {
   1311e:	b158      	cbz	r0, 13138 <bt_att_sent+0x7a>
	err = process_queue(chan, &att->tx_queue);
   13120:	4638      	mov	r0, r7
   13122:	f105 010c 	add.w	r1, r5, #12
   13126:	f7ff ffb0 	bl	1308a <process_queue>
	if (!err) {
   1312a:	b128      	cbz	r0, 13138 <bt_att_sent+0x7a>
	z_impl_k_sem_give(sem);
   1312c:	f504 7084 	add.w	r0, r4, #264	; 0x108
}
   13130:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   13134:	f7fc bb20 	b.w	f778 <z_impl_k_sem_give>
   13138:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001313a <att_write_cmd>:
{
   1313a:	b530      	push	{r4, r5, lr}
   1313c:	460c      	mov	r4, r1
   1313e:	b085      	sub	sp, #20
   13140:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   13142:	f101 0008 	add.w	r0, r1, #8
   13146:	f000 ffc1 	bl	140cc <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   1314a:	89a2      	ldrh	r2, [r4, #12]
   1314c:	4603      	mov	r3, r0
   1314e:	9202      	str	r2, [sp, #8]
   13150:	68a2      	ldr	r2, [r4, #8]
   13152:	4628      	mov	r0, r5
   13154:	9201      	str	r2, [sp, #4]
   13156:	2200      	movs	r2, #0
   13158:	4611      	mov	r1, r2
   1315a:	9200      	str	r2, [sp, #0]
   1315c:	f7f6 f84c 	bl	91f8 <att_write_rsp>
}
   13160:	b005      	add	sp, #20
   13162:	bd30      	pop	{r4, r5, pc}

00013164 <att_write_req>:
{
   13164:	b530      	push	{r4, r5, lr}
   13166:	460c      	mov	r4, r1
   13168:	b085      	sub	sp, #20
   1316a:	4605      	mov	r5, r0
   1316c:	f101 0008 	add.w	r0, r1, #8
   13170:	f000 ffac 	bl	140cc <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   13174:	89a2      	ldrh	r2, [r4, #12]
   13176:	4603      	mov	r3, r0
   13178:	9202      	str	r2, [sp, #8]
   1317a:	68a2      	ldr	r2, [r4, #8]
   1317c:	2112      	movs	r1, #18
   1317e:	9201      	str	r2, [sp, #4]
   13180:	2200      	movs	r2, #0
   13182:	4628      	mov	r0, r5
   13184:	9200      	str	r2, [sp, #0]
   13186:	2213      	movs	r2, #19
   13188:	f7f6 f836 	bl	91f8 <att_write_rsp>
}
   1318c:	b005      	add	sp, #20
   1318e:	bd30      	pop	{r4, r5, pc}

00013190 <att_read_blob_req>:
{
   13190:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   13192:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   13194:	210c      	movs	r1, #12
   13196:	8813      	ldrh	r3, [r2, #0]
   13198:	8852      	ldrh	r2, [r2, #2]
   1319a:	9200      	str	r2, [sp, #0]
   1319c:	220d      	movs	r2, #13
   1319e:	f7f6 fa87 	bl	96b0 <att_read_rsp>
}
   131a2:	b003      	add	sp, #12
   131a4:	f85d fb04 	ldr.w	pc, [sp], #4

000131a8 <att_read_req>:
{
   131a8:	b507      	push	{r0, r1, r2, lr}
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   131aa:	2200      	movs	r2, #0
	handle = sys_le16_to_cpu(req->handle);
   131ac:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   131ae:	210a      	movs	r1, #10
   131b0:	881b      	ldrh	r3, [r3, #0]
   131b2:	9200      	str	r2, [sp, #0]
   131b4:	220b      	movs	r2, #11
   131b6:	f7f6 fa7b 	bl	96b0 <att_read_rsp>
}
   131ba:	b003      	add	sp, #12
   131bc:	f85d fb04 	ldr.w	pc, [sp], #4

000131c0 <bt_att_init>:
	bt_gatt_init();
   131c0:	f7f7 baca 	b.w	a758 <bt_gatt_init>

000131c4 <att_req_destroy>:
{
   131c4:	b510      	push	{r4, lr}
   131c6:	4604      	mov	r4, r0
	if (req->buf) {
   131c8:	6900      	ldr	r0, [r0, #16]
   131ca:	b108      	cbz	r0, 131d0 <att_req_destroy+0xc>
		net_buf_unref(req->buf);
   131cc:	f7fa f83c 	bl	d248 <net_buf_unref>
	if (req->destroy) {
   131d0:	68a3      	ldr	r3, [r4, #8]
   131d2:	b10b      	cbz	r3, 131d8 <att_req_destroy+0x14>
		req->destroy(req);
   131d4:	4620      	mov	r0, r4
   131d6:	4798      	blx	r3
	bt_att_req_free(req);
   131d8:	4620      	mov	r0, r4
}
   131da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_req_free(req);
   131de:	f7f6 bc09 	b.w	99f4 <bt_att_req_free>

000131e2 <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   131e2:	898a      	ldrh	r2, [r1, #12]
   131e4:	2300      	movs	r3, #0
   131e6:	6889      	ldr	r1, [r1, #8]
   131e8:	f7f6 bc10 	b.w	9a0c <att_handle_rsp>

000131ec <att_chan_detach>:
{
   131ec:	b538      	push	{r3, r4, r5, lr}
   131ee:	4604      	mov	r4, r0
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   131f0:	6800      	ldr	r0, [r0, #0]
   131f2:	f504 7196 	add.w	r1, r4, #300	; 0x12c
   131f6:	303c      	adds	r0, #60	; 0x3c
   131f8:	f7ff fcfd 	bl	12bf6 <sys_slist_find_and_remove>
		k_sem_give(&chan->tx_sem);
   131fc:	f504 7588 	add.w	r5, r4, #272	; 0x110
   13200:	4628      	mov	r0, r5
   13202:	f7fc fab9 	bl	f778 <z_impl_k_sem_give>
   13206:	4628      	mov	r0, r5
   13208:	f7fc fab6 	bl	f778 <z_impl_k_sem_give>
   1320c:	4628      	mov	r0, r5
   1320e:	f7fc fab3 	bl	f778 <z_impl_k_sem_give>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   13212:	f104 05c8 	add.w	r5, r4, #200	; 0xc8
   13216:	2200      	movs	r2, #0
   13218:	2300      	movs	r3, #0
   1321a:	4628      	mov	r0, r5
   1321c:	f000 fecd 	bl	13fba <net_buf_get>
   13220:	4602      	mov	r2, r0
   13222:	b950      	cbnz	r0, 1323a <att_chan_detach+0x4e>
	if (chan->req) {
   13224:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
   13228:	b123      	cbz	r3, 13234 <att_chan_detach+0x48>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   1322a:	4601      	mov	r1, r0
   1322c:	230e      	movs	r3, #14
   1322e:	4620      	mov	r0, r4
   13230:	f7f6 fbec 	bl	9a0c <att_handle_rsp>
	chan->att = NULL;
   13234:	2300      	movs	r3, #0
   13236:	6023      	str	r3, [r4, #0]
}
   13238:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_unref(buf);
   1323a:	f7fa f805 	bl	d248 <net_buf_unref>
   1323e:	e7ea      	b.n	13216 <att_chan_detach+0x2a>

00013240 <bt_att_disconnected>:
{
   13240:	b538      	push	{r3, r4, r5, lr}
   13242:	4604      	mov	r4, r0
	struct bt_att *att = att_chan->att;
   13244:	f850 5d08 	ldr.w	r5, [r0, #-8]!
	att_chan_detach(att_chan);
   13248:	f7ff ffd0 	bl	131ec <att_chan_detach>
	if (!sys_slist_is_empty(&att->chans)) {
   1324c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   1324e:	b93b      	cbnz	r3, 13260 <bt_att_disconnected+0x20>
	att_reset(att);
   13250:	4628      	mov	r0, r5
   13252:	f7f6 fc91 	bl	9b78 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
   13256:	6820      	ldr	r0, [r4, #0]
}
   13258:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_gatt_disconnected(ch->chan.conn);
   1325c:	f7f7 becc 	b.w	aff8 <bt_gatt_disconnected>
}
   13260:	bd38      	pop	{r3, r4, r5, pc}

00013262 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf, bt_conn_tx_cb_t cb,
		void *user_data)
{
   13262:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   13266:	4605      	mov	r5, r0
   13268:	460e      	mov	r6, r1
   1326a:	4614      	mov	r4, r2
   1326c:	4698      	mov	r8, r3
	int ret;

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(buf);

	att = att_get(conn);
   1326e:	f7f5 fc6d 	bl	8b4c <att_get>
	if (!att) {
   13272:	4607      	mov	r7, r0
   13274:	b938      	cbnz	r0, 13286 <bt_att_send+0x24>
		net_buf_unref(buf);
   13276:	4630      	mov	r0, r6
   13278:	f7f9 ffe6 	bl	d248 <net_buf_unref>
		return -ENOTCONN;
   1327c:	f06f 0038 	mvn.w	r0, #56	; 0x38
		BT_DBG("Queueing buffer %p", buf);
		net_buf_put(&att->tx_queue, buf);
	}

	return 0;
}
   13280:	b002      	add	sp, #8
   13282:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
   13286:	b144      	cbz	r4, 1329a <bt_att_send+0x38>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   13288:	4623      	mov	r3, r4
   1328a:	4632      	mov	r2, r6
   1328c:	2104      	movs	r1, #4
   1328e:	4628      	mov	r0, r5
   13290:	f8cd 8000 	str.w	r8, [sp]
   13294:	f7ff fc6b 	bl	12b6e <bt_l2cap_send_cb>
   13298:	e7f2      	b.n	13280 <bt_att_send+0x1e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1329a:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
   1329c:	b184      	cbz	r4, 132c0 <bt_att_send+0x5e>
   1329e:	f5b4 7596 	subs.w	r5, r4, #300	; 0x12c
   132a2:	d00f      	beq.n	132c4 <bt_att_send+0x62>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   132a4:	6824      	ldr	r4, [r4, #0]
   132a6:	b10c      	cbz	r4, 132ac <bt_att_send+0x4a>
   132a8:	f5a4 7496 	sub.w	r4, r4, #300	; 0x12c
   132ac:	2000      	movs	r0, #0
   132ae:	b95d      	cbnz	r5, 132c8 <bt_att_send+0x66>
	if (ret < 0) {
   132b0:	b188      	cbz	r0, 132d6 <bt_att_send+0x74>
		net_buf_put(&att->tx_queue, buf);
   132b2:	f107 000c 	add.w	r0, r7, #12
   132b6:	4631      	mov	r1, r6
   132b8:	f000 fe9d 	bl	13ff6 <net_buf_put>
	return 0;
   132bc:	4628      	mov	r0, r5
   132be:	e7df      	b.n	13280 <bt_att_send+0x1e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   132c0:	4625      	mov	r5, r4
   132c2:	e7f3      	b.n	132ac <bt_att_send+0x4a>
   132c4:	462c      	mov	r4, r5
   132c6:	e7f1      	b.n	132ac <bt_att_send+0x4a>
		ret = bt_att_chan_send(chan, buf, NULL);
   132c8:	2200      	movs	r2, #0
   132ca:	4631      	mov	r1, r6
   132cc:	4628      	mov	r0, r5
   132ce:	f7ff feb7 	bl	13040 <bt_att_chan_send>
		if (ret >= 0) {
   132d2:	2800      	cmp	r0, #0
   132d4:	db01      	blt.n	132da <bt_att_send+0x78>
	return 0;
   132d6:	2000      	movs	r0, #0
   132d8:	e7d2      	b.n	13280 <bt_att_send+0x1e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   132da:	b154      	cbz	r4, 132f2 <bt_att_send+0x90>
Z_GENLIST_PEEK_NEXT(slist, snode)
   132dc:	f514 7396 	adds.w	r3, r4, #300	; 0x12c
   132e0:	d004      	beq.n	132ec <bt_att_send+0x8a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   132e2:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
   132e6:	b10b      	cbz	r3, 132ec <bt_att_send+0x8a>
   132e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
   132ec:	4625      	mov	r5, r4
   132ee:	461c      	mov	r4, r3
   132f0:	e7dd      	b.n	132ae <bt_att_send+0x4c>
   132f2:	4623      	mov	r3, r4
   132f4:	e7fa      	b.n	132ec <bt_att_send+0x8a>

000132f6 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   132f6:	b570      	push	{r4, r5, r6, lr}
   132f8:	460c      	mov	r4, r1
	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(req);

	att = att_get(conn);
   132fa:	f7f5 fc27 	bl	8b4c <att_get>
	if (!att) {
   132fe:	4605      	mov	r5, r0
   13300:	b930      	cbnz	r0, 13310 <bt_att_req_send+0x1a>
		net_buf_unref(req->buf);
   13302:	6920      	ldr	r0, [r4, #16]
   13304:	f7f9 ffa0 	bl	d248 <net_buf_unref>
		req->buf = NULL;
		return -ENOTCONN;
   13308:	f06f 0038 	mvn.w	r0, #56	; 0x38
		req->buf = NULL;
   1330c:	6125      	str	r5, [r4, #16]
	sys_slist_append(&att->reqs, &req->node);

	BT_DBG("req %p queued", req);

	return 0;
}
   1330e:	bd70      	pop	{r4, r5, r6, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   13310:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   13312:	b153      	cbz	r3, 1332a <bt_att_req_send+0x34>
   13314:	f5b3 7096 	subs.w	r0, r3, #300	; 0x12c
   13318:	d007      	beq.n	1332a <bt_att_req_send+0x34>
   1331a:	681e      	ldr	r6, [r3, #0]
   1331c:	b10e      	cbz	r6, 13322 <bt_att_req_send+0x2c>
   1331e:	f5a6 7696 	sub.w	r6, r6, #300	; 0x12c
		if (!chan->req) {
   13322:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
   13326:	b143      	cbz	r3, 1333a <bt_att_req_send+0x44>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   13328:	b96e      	cbnz	r6, 13346 <bt_att_req_send+0x50>
	parent->next = child;
   1332a:	2000      	movs	r0, #0
   1332c:	6020      	str	r0, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   1332e:	68ab      	ldr	r3, [r5, #8]
   13330:	b9a3      	cbnz	r3, 1335c <bt_att_req_send+0x66>
	return 0;
   13332:	4618      	mov	r0, r3
	list->head = node;
   13334:	e9c5 4401 	strd	r4, r4, [r5, #4]
}
   13338:	e7e9      	b.n	1330e <bt_att_req_send+0x18>
			ret = bt_att_chan_req_send(chan, req);
   1333a:	4621      	mov	r1, r4
   1333c:	f7ff fe45 	bl	12fca <bt_att_chan_req_send>
			if (ret >= 0) {
   13340:	2800      	cmp	r0, #0
   13342:	dbf1      	blt.n	13328 <bt_att_req_send+0x32>
   13344:	e7e3      	b.n	1330e <bt_att_req_send+0x18>
Z_GENLIST_PEEK_NEXT(slist, snode)
   13346:	f516 7396 	adds.w	r3, r6, #300	; 0x12c
   1334a:	d004      	beq.n	13356 <bt_att_req_send+0x60>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1334c:	f8d6 312c 	ldr.w	r3, [r6, #300]	; 0x12c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   13350:	b10b      	cbz	r3, 13356 <bt_att_req_send+0x60>
   13352:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
{
   13356:	4630      	mov	r0, r6
   13358:	461e      	mov	r6, r3
   1335a:	e7e2      	b.n	13322 <bt_att_req_send+0x2c>
	parent->next = child;
   1335c:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1335e:	60ac      	str	r4, [r5, #8]
}
   13360:	e7d5      	b.n	1330e <bt_att_req_send+0x18>

00013362 <gatt_ccc_changed>:
{
   13362:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   13364:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   13366:	895a      	ldrh	r2, [r3, #10]
   13368:	428a      	cmp	r2, r1
   1336a:	d003      	beq.n	13374 <gatt_ccc_changed+0x12>
		ccc->value = value;
   1336c:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   1336e:	68db      	ldr	r3, [r3, #12]
   13370:	b103      	cbz	r3, 13374 <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   13372:	4718      	bx	r3
}
   13374:	4770      	bx	lr

00013376 <gatt_indicate_rsp>:
{
   13376:	b510      	push	{r4, lr}
   13378:	9c02      	ldr	r4, [sp, #8]
   1337a:	460a      	mov	r2, r1
	params->_ref--;
   1337c:	7da3      	ldrb	r3, [r4, #22]
	params->func(conn, params, err);
   1337e:	4621      	mov	r1, r4
	params->_ref--;
   13380:	3b01      	subs	r3, #1
   13382:	75a3      	strb	r3, [r4, #22]
	params->func(conn, params, err);
   13384:	68a3      	ldr	r3, [r4, #8]
   13386:	4798      	blx	r3
	if (params->destroy && (params->_ref == 0)) {
   13388:	68e3      	ldr	r3, [r4, #12]
   1338a:	b12b      	cbz	r3, 13398 <gatt_indicate_rsp+0x22>
   1338c:	7da2      	ldrb	r2, [r4, #22]
   1338e:	b91a      	cbnz	r2, 13398 <gatt_indicate_rsp+0x22>
		params->destroy(params);
   13390:	4620      	mov	r0, r4
}
   13392:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   13396:	4718      	bx	r3
}
   13398:	bd10      	pop	{r4, pc}

0001339a <match_uuid>:
	data->attr = attr;
   1339a:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   1339c:	8091      	strh	r1, [r2, #4]
}
   1339e:	2000      	movs	r0, #0
   133a0:	4770      	bx	lr

000133a2 <ccc_set_cb>:
}
   133a2:	2000      	movs	r0, #0
   133a4:	4770      	bx	lr

000133a6 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   133a6:	2207      	movs	r2, #7
   133a8:	f7fe bfb7 	b.w	1231a <memcpy>

000133ac <clear_ccc_cfg>:
{
   133ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   133ae:	2500      	movs	r5, #0
{
   133b0:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   133b2:	4669      	mov	r1, sp
   133b4:	3001      	adds	r0, #1
   133b6:	9500      	str	r5, [sp, #0]
   133b8:	f8cd 5003 	str.w	r5, [sp, #3]
   133bc:	f7ff fff3 	bl	133a6 <bt_addr_le_copy>
	cfg->id = 0U;
   133c0:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   133c2:	8125      	strh	r5, [r4, #8]
}
   133c4:	b003      	add	sp, #12
   133c6:	bd30      	pop	{r4, r5, pc}

000133c8 <write_name>:
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   133c8:	2100      	movs	r1, #0
{
   133ca:	b570      	push	{r4, r5, r6, lr}
   133cc:	b092      	sub	sp, #72	; 0x48
   133ce:	f8bd 6058 	ldrh.w	r6, [sp, #88]	; 0x58
   133d2:	4615      	mov	r5, r2
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   133d4:	a802      	add	r0, sp, #8
   133d6:	223d      	movs	r2, #61	; 0x3d
{
   133d8:	461c      	mov	r4, r3
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   133da:	9101      	str	r1, [sp, #4]
   133dc:	f7fe ffc8 	bl	12370 <memset>
	if (offset) {
   133e0:	b966      	cbnz	r6, 133fc <write_name+0x34>
	if (len >= sizeof(value)) {
   133e2:	2c40      	cmp	r4, #64	; 0x40
   133e4:	d80d      	bhi.n	13402 <write_name+0x3a>
	memcpy(value, buf, len);
   133e6:	4622      	mov	r2, r4
   133e8:	4629      	mov	r1, r5
   133ea:	a801      	add	r0, sp, #4
   133ec:	f7fe ff95 	bl	1231a <memcpy>
	bt_set_name(value);
   133f0:	a801      	add	r0, sp, #4
   133f2:	f7f3 fd73 	bl	6edc <bt_set_name>
	return len;
   133f6:	4620      	mov	r0, r4
}
   133f8:	b012      	add	sp, #72	; 0x48
   133fa:	bd70      	pop	{r4, r5, r6, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   133fc:	f06f 0006 	mvn.w	r0, #6
   13400:	e7fa      	b.n	133f8 <write_name+0x30>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   13402:	f06f 000c 	mvn.w	r0, #12
   13406:	e7f7      	b.n	133f8 <write_name+0x30>

00013408 <gen_hash_m>:
{
   13408:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1340a:	6807      	ldr	r7, [r0, #0]
{
   1340c:	4606      	mov	r6, r0
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1340e:	783d      	ldrb	r5, [r7, #0]
{
   13410:	4614      	mov	r4, r2
   13412:	b089      	sub	sp, #36	; 0x24
	if (attr->uuid->type != BT_UUID_TYPE_16)
   13414:	b10d      	cbz	r5, 1341a <gen_hash_m+0x12>
	switch (u16->val) {
   13416:	2501      	movs	r5, #1
   13418:	e014      	b.n	13444 <gen_hash_m+0x3c>
   1341a:	887b      	ldrh	r3, [r7, #2]
   1341c:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   13420:	d004      	beq.n	1342c <gen_hash_m+0x24>
   13422:	d812      	bhi.n	1344a <gen_hash_m+0x42>
   13424:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   13428:	2b03      	cmp	r3, #3
   1342a:	d8f4      	bhi.n	13416 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   1342c:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   13430:	2202      	movs	r2, #2
   13432:	4620      	mov	r0, r4
   13434:	f10d 010e 	add.w	r1, sp, #14
   13438:	f7fe fbaa 	bl	11b90 <tc_cmac_update>
   1343c:	b9e0      	cbnz	r0, 13478 <gen_hash_m+0x70>
			state->err = -EINVAL;
   1343e:	f06f 0315 	mvn.w	r3, #21
   13442:	65a3      	str	r3, [r4, #88]	; 0x58
}
   13444:	4628      	mov	r0, r5
   13446:	b009      	add	sp, #36	; 0x24
   13448:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   1344a:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   1344e:	33ff      	adds	r3, #255	; 0xff
   13450:	b29b      	uxth	r3, r3
   13452:	2b04      	cmp	r3, #4
   13454:	d8df      	bhi.n	13416 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   13456:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1345a:	2202      	movs	r2, #2
   1345c:	4620      	mov	r0, r4
   1345e:	f10d 010e 	add.w	r1, sp, #14
   13462:	f7fe fb95 	bl	11b90 <tc_cmac_update>
   13466:	2800      	cmp	r0, #0
   13468:	d0e9      	beq.n	1343e <gen_hash_m+0x36>
		value = sys_cpu_to_le16(u16->val);
   1346a:	887b      	ldrh	r3, [r7, #2]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1346c:	2202      	movs	r2, #2
		value = sys_cpu_to_le16(u16->val);
   1346e:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   13472:	f10d 010e 	add.w	r1, sp, #14
   13476:	e017      	b.n	134a8 <gen_hash_m+0xa0>
		value = sys_cpu_to_le16(u16->val);
   13478:	887b      	ldrh	r3, [r7, #2]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1347a:	2202      	movs	r2, #2
   1347c:	4620      	mov	r0, r4
   1347e:	f10d 010e 	add.w	r1, sp, #14
		value = sys_cpu_to_le16(u16->val);
   13482:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   13486:	f7fe fb83 	bl	11b90 <tc_cmac_update>
   1348a:	2800      	cmp	r0, #0
   1348c:	d0d7      	beq.n	1343e <gen_hash_m+0x36>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   1348e:	2000      	movs	r0, #0
   13490:	2310      	movs	r3, #16
   13492:	4631      	mov	r1, r6
   13494:	eb0d 0203 	add.w	r2, sp, r3
   13498:	6877      	ldr	r7, [r6, #4]
   1349a:	9000      	str	r0, [sp, #0]
   1349c:	47b8      	blx	r7
		if (len < 0) {
   1349e:	1e02      	subs	r2, r0, #0
   134a0:	da01      	bge.n	134a6 <gen_hash_m+0x9e>
			state->err = len;
   134a2:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   134a4:	e7ce      	b.n	13444 <gen_hash_m+0x3c>
		if (tc_cmac_update(&state->state, data, len) ==
   134a6:	a904      	add	r1, sp, #16
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   134a8:	4620      	mov	r0, r4
   134aa:	f7fe fb71 	bl	11b90 <tc_cmac_update>
   134ae:	2800      	cmp	r0, #0
   134b0:	d1b1      	bne.n	13416 <gen_hash_m+0xe>
   134b2:	e7c4      	b.n	1343e <gen_hash_m+0x36>

000134b4 <atomic_and>:
{
   134b4:	4603      	mov	r3, r0
}
   134b6:	e8d3 0fef 	ldaex	r0, [r3]
   134ba:	ea00 0201 	and.w	r2, r0, r1
   134be:	e8c3 2fec 	stlex	ip, r2, [r3]
   134c2:	f1bc 0f00 	cmp.w	ip, #0
   134c6:	d1f6      	bne.n	134b6 <atomic_and+0x2>
   134c8:	4770      	bx	lr

000134ca <clear_cf_cfg>:
{
   134ca:	b537      	push	{r0, r1, r2, r4, r5, lr}
   134cc:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   134ce:	2500      	movs	r5, #0
   134d0:	4669      	mov	r1, sp
   134d2:	3001      	adds	r0, #1
   134d4:	9500      	str	r5, [sp, #0]
   134d6:	f8cd 5003 	str.w	r5, [sp, #3]
   134da:	f7ff ff64 	bl	133a6 <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
   134de:	f104 0008 	add.w	r0, r4, #8
   134e2:	2201      	movs	r2, #1
   134e4:	4629      	mov	r1, r5
   134e6:	f7fe ff43 	bl	12370 <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   134ea:	340c      	adds	r4, #12
   134ec:	e8d4 3fef 	ldaex	r3, [r4]
   134f0:	e8c4 5fe2 	stlex	r2, r5, [r4]
   134f4:	2a00      	cmp	r2, #0
   134f6:	d1f9      	bne.n	134ec <clear_cf_cfg+0x22>
}
   134f8:	b003      	add	sp, #12
   134fa:	bd30      	pop	{r4, r5, pc}

000134fc <ccc_find_cfg>:
{
   134fc:	b510      	push	{r4, lr}
		if (id == ccc->cfg[i].id &&
   134fe:	7803      	ldrb	r3, [r0, #0]
{
   13500:	4604      	mov	r4, r0
		if (id == ccc->cfg[i].id &&
   13502:	4293      	cmp	r3, r2
   13504:	d001      	beq.n	1350a <ccc_find_cfg+0xe>
	return NULL;
   13506:	2000      	movs	r0, #0
}
   13508:	bd10      	pop	{r4, pc}
	return memcmp(a, b, sizeof(*a));
   1350a:	2207      	movs	r2, #7
   1350c:	3001      	adds	r0, #1
   1350e:	f7fe fef4 	bl	122fa <memcmp>
		if (id == ccc->cfg[i].id &&
   13512:	2800      	cmp	r0, #0
   13514:	d1f7      	bne.n	13506 <ccc_find_cfg+0xa>
			return &ccc->cfg[i];
   13516:	4620      	mov	r0, r4
   13518:	e7f6      	b.n	13508 <ccc_find_cfg+0xc>

0001351a <find_ccc_cfg>:
{
   1351a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1351c:	460c      	mov	r4, r1
   1351e:	1c4d      	adds	r5, r1, #1
		if (conn) {
   13520:	b148      	cbz	r0, 13536 <find_ccc_cfg+0x1c>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   13522:	462a      	mov	r2, r5
   13524:	7809      	ldrb	r1, [r1, #0]
   13526:	f7ff fa2a 	bl	1297e <bt_conn_is_peer_addr_le>
   1352a:	2800      	cmp	r0, #0
	return NULL;
   1352c:	bf08      	it	eq
   1352e:	2400      	moveq	r4, #0
}
   13530:	4620      	mov	r0, r4
   13532:	b003      	add	sp, #12
   13534:	bd30      	pop	{r4, r5, pc}
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   13536:	9000      	str	r0, [sp, #0]
   13538:	2207      	movs	r2, #7
   1353a:	f8cd 0003 	str.w	r0, [sp, #3]
   1353e:	4669      	mov	r1, sp
   13540:	4628      	mov	r0, r5
   13542:	f7fe feda 	bl	122fa <memcmp>
   13546:	2800      	cmp	r0, #0
	return NULL;
   13548:	bf18      	it	ne
   1354a:	2400      	movne	r4, #0
   1354c:	e7f0      	b.n	13530 <find_ccc_cfg+0x16>

0001354e <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   1354e:	2301      	movs	r3, #1
   13550:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   13552:	e8d0 2fef 	ldaex	r2, [r0]
   13556:	431a      	orrs	r2, r3
   13558:	e8c0 2fe1 	stlex	r1, r2, [r0]
   1355c:	2900      	cmp	r1, #0
   1355e:	d1f8      	bne.n	13552 <atomic_set_bit+0x4>
}
   13560:	4770      	bx	lr

00013562 <sc_restore_rsp>:
{
   13562:	b508      	push	{r3, lr}
	cfg = find_cf_cfg(conn);
   13564:	f7f6 fefe 	bl	a364 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   13568:	b140      	cbz	r0, 1357c <sc_restore_rsp+0x1a>
   1356a:	7a03      	ldrb	r3, [r0, #8]
   1356c:	07db      	lsls	r3, r3, #31
   1356e:	d505      	bpl.n	1357c <sc_restore_rsp+0x1a>
}
   13570:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   13574:	2100      	movs	r1, #0
   13576:	300c      	adds	r0, #12
   13578:	f7ff bfe9 	b.w	1354e <atomic_set_bit>
}
   1357c:	bd08      	pop	{r3, pc}

0001357e <read_appearance>:
{
   1357e:	b513      	push	{r0, r1, r4, lr}
   13580:	4610      	mov	r0, r2
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   13582:	f240 3241 	movw	r2, #833	; 0x341
{
   13586:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   1358a:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   1358e:	2902      	cmp	r1, #2
   13590:	d80d      	bhi.n	135ae <read_appearance+0x30>
	len = MIN(buf_len, value_len - offset);
   13592:	f1c1 0402 	rsb	r4, r1, #2
   13596:	429c      	cmp	r4, r3
   13598:	bfa8      	it	ge
   1359a:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   1359c:	f10d 0306 	add.w	r3, sp, #6
   135a0:	4622      	mov	r2, r4
   135a2:	4419      	add	r1, r3
   135a4:	f7fe feb9 	bl	1231a <memcpy>
}
   135a8:	4620      	mov	r0, r4
   135aa:	b002      	add	sp, #8
   135ac:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   135ae:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   135b2:	e7f9      	b.n	135a8 <read_appearance+0x2a>

000135b4 <read_name>:
{
   135b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   135b8:	4698      	mov	r8, r3
   135ba:	4615      	mov	r5, r2
   135bc:	f8bd 6018 	ldrh.w	r6, [sp, #24]
	const char *name = bt_get_name();
   135c0:	f7f3 fcde 	bl	6f80 <bt_get_name>
   135c4:	4607      	mov	r7, r0
				 strlen(name));
   135c6:	f7fe fe6d 	bl	122a4 <strlen>
	if (offset > value_len) {
   135ca:	b283      	uxth	r3, r0
   135cc:	42b3      	cmp	r3, r6
   135ce:	d30c      	bcc.n	135ea <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   135d0:	1b9c      	subs	r4, r3, r6
   135d2:	4544      	cmp	r4, r8
   135d4:	bfa8      	it	ge
   135d6:	4644      	movge	r4, r8
   135d8:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   135da:	4622      	mov	r2, r4
   135dc:	4628      	mov	r0, r5
   135de:	19b9      	adds	r1, r7, r6
   135e0:	f7fe fe9b 	bl	1231a <memcpy>
}
   135e4:	4620      	mov	r0, r4
   135e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   135ea:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   135ee:	e7f9      	b.n	135e4 <read_name+0x30>

000135f0 <bt_gatt_attr_read_ccc>:
{
   135f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   135f2:	68c9      	ldr	r1, [r1, #12]
{
   135f4:	4615      	mov	r5, r2
   135f6:	461f      	mov	r7, r3
   135f8:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	cfg = find_ccc_cfg(conn, ccc);
   135fc:	f7ff ff8d 	bl	1351a <find_ccc_cfg>
	if (cfg) {
   13600:	b100      	cbz	r0, 13604 <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   13602:	8900      	ldrh	r0, [r0, #8]
	if (offset > value_len) {
   13604:	2e02      	cmp	r6, #2
   13606:	f8ad 0006 	strh.w	r0, [sp, #6]
   1360a:	d80e      	bhi.n	1362a <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   1360c:	f1c6 0402 	rsb	r4, r6, #2
   13610:	42bc      	cmp	r4, r7
   13612:	bfa8      	it	ge
   13614:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   13616:	f10d 0306 	add.w	r3, sp, #6
   1361a:	4622      	mov	r2, r4
   1361c:	4628      	mov	r0, r5
   1361e:	1999      	adds	r1, r3, r6
   13620:	f7fe fe7b 	bl	1231a <memcpy>
}
   13624:	4620      	mov	r0, r4
   13626:	b003      	add	sp, #12
   13628:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1362a:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   1362e:	e7f9      	b.n	13624 <bt_gatt_attr_read_ccc+0x34>

00013630 <cf_read>:
{
   13630:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   13632:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   13634:	2300      	movs	r3, #0
{
   13636:	4615      	mov	r5, r2
   13638:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   1363c:	f88d 3004 	strb.w	r3, [sp, #4]
	cfg = find_cf_cfg(conn);
   13640:	f7f6 fe90 	bl	a364 <find_cf_cfg>
	if (cfg) {
   13644:	b128      	cbz	r0, 13652 <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   13646:	f100 0108 	add.w	r1, r0, #8
   1364a:	2201      	movs	r2, #1
   1364c:	a801      	add	r0, sp, #4
   1364e:	f7fe fe64 	bl	1231a <memcpy>
	if (offset > value_len) {
   13652:	2e01      	cmp	r6, #1
   13654:	d80d      	bhi.n	13672 <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   13656:	f1c6 0401 	rsb	r4, r6, #1
   1365a:	42bc      	cmp	r4, r7
   1365c:	bfa8      	it	ge
   1365e:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   13660:	ab01      	add	r3, sp, #4
   13662:	4622      	mov	r2, r4
   13664:	4628      	mov	r0, r5
   13666:	1999      	adds	r1, r3, r6
   13668:	f7fe fe57 	bl	1231a <memcpy>
}
   1366c:	4620      	mov	r0, r4
   1366e:	b003      	add	sp, #12
   13670:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   13672:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   13676:	e7f9      	b.n	1366c <cf_read+0x3c>

00013678 <bt_gatt_attr_read_service>:
{
   13678:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
   1367a:	68c9      	ldr	r1, [r1, #12]
{
   1367c:	461c      	mov	r4, r3
	if (uuid->type == BT_UUID_TYPE_16) {
   1367e:	780b      	ldrb	r3, [r1, #0]
{
   13680:	4610      	mov	r0, r2
   13682:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	if (uuid->type == BT_UUID_TYPE_16) {
   13686:	b993      	cbnz	r3, 136ae <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   13688:	884b      	ldrh	r3, [r1, #2]
	if (offset > value_len) {
   1368a:	2d02      	cmp	r5, #2
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   1368c:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (offset > value_len) {
   13690:	d819      	bhi.n	136c6 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   13692:	f1c5 0202 	rsb	r2, r5, #2
   13696:	4294      	cmp	r4, r2
   13698:	bfa8      	it	ge
   1369a:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   1369c:	4622      	mov	r2, r4
   1369e:	f10d 0306 	add.w	r3, sp, #6
   136a2:	1959      	adds	r1, r3, r5
   136a4:	f7fe fe39 	bl	1231a <memcpy>
}
   136a8:	4620      	mov	r0, r4
   136aa:	b003      	add	sp, #12
   136ac:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
   136ae:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
   136b0:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   136b4:	d807      	bhi.n	136c6 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   136b6:	f1c5 0210 	rsb	r2, r5, #16
   136ba:	4294      	cmp	r4, r2
   136bc:	bfa8      	it	ge
   136be:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   136c0:	4429      	add	r1, r5
   136c2:	4622      	mov	r2, r4
   136c4:	e7ee      	b.n	136a4 <bt_gatt_attr_read_service+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   136c6:	f06f 0406 	mvn.w	r4, #6
   136ca:	e7ed      	b.n	136a8 <bt_gatt_attr_read_service+0x30>

000136cc <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   136cc:	2a02      	cmp	r2, #2
{
   136ce:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   136d0:	d108      	bne.n	136e4 <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   136d2:	2300      	movs	r3, #0
   136d4:	f100 0188 	add.w	r1, r0, #136	; 0x88
   136d8:	461a      	mov	r2, r3
   136da:	7a00      	ldrb	r0, [r0, #8]
   136dc:	f7f6 fcae 	bl	a03c <sc_save>
}
   136e0:	2002      	movs	r0, #2
   136e2:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   136e4:	f7f6 ffc6 	bl	a674 <sc_clear>
   136e8:	e7fa      	b.n	136e0 <sc_ccc_cfg_write+0x14>

000136ea <bt_gatt_attr_read>:
{
   136ea:	b538      	push	{r3, r4, r5, lr}
   136ec:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   136f0:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   136f4:	4610      	mov	r0, r2
	if (offset > value_len) {
   136f6:	42a9      	cmp	r1, r5
   136f8:	d80b      	bhi.n	13712 <bt_gatt_attr_read+0x28>
	len = MIN(buf_len, value_len - offset);
   136fa:	1a6d      	subs	r5, r5, r1
   136fc:	429d      	cmp	r5, r3
   136fe:	bfa8      	it	ge
   13700:	461d      	movge	r5, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   13702:	9b05      	ldr	r3, [sp, #20]
   13704:	b2ad      	uxth	r5, r5
   13706:	462a      	mov	r2, r5
   13708:	4419      	add	r1, r3
   1370a:	f7fe fe06 	bl	1231a <memcpy>
}
   1370e:	4628      	mov	r0, r5
   13710:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   13712:	f06f 0506 	mvn.w	r5, #6
   13716:	e7fa      	b.n	1370e <bt_gatt_attr_read+0x24>

00013718 <bt_gatt_attr_value_handle>:
{
   13718:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   1371a:	4604      	mov	r4, r0
   1371c:	b910      	cbnz	r0, 13724 <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   1371e:	2000      	movs	r0, #0
}
   13720:	b002      	add	sp, #8
   13722:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   13724:	2300      	movs	r3, #0
   13726:	f88d 3004 	strb.w	r3, [sp, #4]
   1372a:	f642 0303 	movw	r3, #10243	; 0x2803
   1372e:	6800      	ldr	r0, [r0, #0]
   13730:	a901      	add	r1, sp, #4
   13732:	f8ad 3006 	strh.w	r3, [sp, #6]
   13736:	f7fe feac 	bl	12492 <bt_uuid_cmp>
   1373a:	2800      	cmp	r0, #0
   1373c:	d1ef      	bne.n	1371e <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   1373e:	68e3      	ldr	r3, [r4, #12]
   13740:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   13742:	2800      	cmp	r0, #0
   13744:	d1ec      	bne.n	13720 <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   13746:	4620      	mov	r0, r4
   13748:	f7f7 f862 	bl	a810 <bt_gatt_attr_get_handle>
   1374c:	3001      	adds	r0, #1
   1374e:	b280      	uxth	r0, r0
	return handle;
   13750:	e7e6      	b.n	13720 <bt_gatt_attr_value_handle+0x8>

00013752 <bt_gatt_attr_read_chrc>:
{
   13752:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   13754:	68cf      	ldr	r7, [r1, #12]
{
   13756:	461c      	mov	r4, r3
	pdu.properties = chrc->properties;
   13758:	79bb      	ldrb	r3, [r7, #6]
{
   1375a:	b087      	sub	sp, #28
   1375c:	4608      	mov	r0, r1
	pdu.properties = chrc->properties;
   1375e:	f88d 3004 	strb.w	r3, [sp, #4]
{
   13762:	4615      	mov	r5, r2
   13764:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   13768:	f7ff ffd6 	bl	13718 <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   1376c:	6839      	ldr	r1, [r7, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   1376e:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   13772:	780b      	ldrb	r3, [r1, #0]
   13774:	b99b      	cbnz	r3, 1379e <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   13776:	884b      	ldrh	r3, [r1, #2]
		value_len += 2U;
   13778:	2105      	movs	r1, #5
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   1377a:	f8ad 3007 	strh.w	r3, [sp, #7]
	if (offset > value_len) {
   1377e:	42b1      	cmp	r1, r6
   13780:	d315      	bcc.n	137ae <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   13782:	1b89      	subs	r1, r1, r6
   13784:	42a1      	cmp	r1, r4
   13786:	bfa8      	it	ge
   13788:	4621      	movge	r1, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   1378a:	ab01      	add	r3, sp, #4
   1378c:	b28c      	uxth	r4, r1
   1378e:	4622      	mov	r2, r4
   13790:	4628      	mov	r0, r5
   13792:	1999      	adds	r1, r3, r6
   13794:	f7fe fdc1 	bl	1231a <memcpy>
}
   13798:	4620      	mov	r0, r4
   1379a:	b007      	add	sp, #28
   1379c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   1379e:	3101      	adds	r1, #1
   137a0:	2210      	movs	r2, #16
   137a2:	f10d 0007 	add.w	r0, sp, #7
   137a6:	f7fe fdb8 	bl	1231a <memcpy>
		value_len += 16U;
   137aa:	2113      	movs	r1, #19
   137ac:	e7e7      	b.n	1377e <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   137ae:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   137b2:	e7f1      	b.n	13798 <bt_gatt_attr_read_chrc+0x46>

000137b4 <bt_gatt_foreach_attr>:
{
   137b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   137b6:	e9cd 2301 	strd	r2, r3, [sp, #4]
   137ba:	2300      	movs	r3, #0
   137bc:	461a      	mov	r2, r3
   137be:	9300      	str	r3, [sp, #0]
   137c0:	f7f7 f856 	bl	a870 <bt_gatt_foreach_attr_type>
}
   137c4:	b005      	add	sp, #20
   137c6:	f85d fb04 	ldr.w	pc, [sp], #4

000137ca <db_hash_process>:
	db_hash_gen(true);
   137ca:	2001      	movs	r0, #1
   137cc:	f7f7 b8aa 	b.w	a924 <db_hash_gen>

000137d0 <bt_gatt_check_perm>:
{
   137d0:	b538      	push	{r3, r4, r5, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   137d2:	07d4      	lsls	r4, r2, #31
{
   137d4:	4605      	mov	r5, r0
   137d6:	7c88      	ldrb	r0, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   137d8:	d504      	bpl.n	137e4 <bt_gatt_check_perm+0x14>
   137da:	f010 0f15 	tst.w	r0, #21
   137de:	d01e      	beq.n	1381e <bt_gatt_check_perm+0x4e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   137e0:	684b      	ldr	r3, [r1, #4]
   137e2:	b1e3      	cbz	r3, 1381e <bt_gatt_check_perm+0x4e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   137e4:	0793      	lsls	r3, r2, #30
   137e6:	d504      	bpl.n	137f2 <bt_gatt_check_perm+0x22>
   137e8:	f010 0f2a 	tst.w	r0, #42	; 0x2a
   137ec:	d019      	beq.n	13822 <bt_gatt_check_perm+0x52>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   137ee:	688b      	ldr	r3, [r1, #8]
   137f0:	b1bb      	cbz	r3, 13822 <bt_gatt_check_perm+0x52>
	mask &= attr->perm;
   137f2:	ea02 0400 	and.w	r4, r2, r0
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   137f6:	f014 0f30 	tst.w	r4, #48	; 0x30
   137fa:	d103      	bne.n	13804 <bt_gatt_check_perm+0x34>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   137fc:	f014 000c 	ands.w	r0, r4, #12
   13800:	d107      	bne.n	13812 <bt_gatt_check_perm+0x42>
}
   13802:	bd38      	pop	{r3, r4, r5, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   13804:	4628      	mov	r0, r5
   13806:	f7ff f8af 	bl	12968 <bt_conn_get_security>
   1380a:	2802      	cmp	r0, #2
   1380c:	d8f6      	bhi.n	137fc <bt_gatt_check_perm+0x2c>
			return BT_ATT_ERR_AUTHENTICATION;
   1380e:	2005      	movs	r0, #5
   13810:	e7f7      	b.n	13802 <bt_gatt_check_perm+0x32>
		if (!conn->encrypt) {
   13812:	7aeb      	ldrb	r3, [r5, #11]
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   13814:	2b00      	cmp	r3, #0
   13816:	bf14      	ite	ne
   13818:	2000      	movne	r0, #0
   1381a:	200f      	moveq	r0, #15
   1381c:	e7f1      	b.n	13802 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   1381e:	2002      	movs	r0, #2
   13820:	e7ef      	b.n	13802 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   13822:	2003      	movs	r0, #3
   13824:	e7ed      	b.n	13802 <bt_gatt_check_perm+0x32>

00013826 <bt_gatt_change_aware>:
{
   13826:	b570      	push	{r4, r5, r6, lr}
   13828:	460d      	mov	r5, r1
	cfg = find_cf_cfg(conn);
   1382a:	f7f6 fd9b 	bl	a364 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   1382e:	b910      	cbnz	r0, 13836 <bt_gatt_change_aware+0x10>
		return true;
   13830:	2501      	movs	r5, #1
}
   13832:	4628      	mov	r0, r5
   13834:	bd70      	pop	{r4, r5, r6, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   13836:	7a03      	ldrb	r3, [r0, #8]
   13838:	07da      	lsls	r2, r3, #31
   1383a:	d5f9      	bpl.n	13830 <bt_gatt_change_aware+0xa>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   1383c:	f100 040c 	add.w	r4, r0, #12
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   13840:	e8d4 1faf 	lda	r1, [r4]
   13844:	f011 0601 	ands.w	r6, r1, #1
   13848:	d1f2      	bne.n	13830 <bt_gatt_change_aware+0xa>
	if (!req) {
   1384a:	2d00      	cmp	r5, #0
   1384c:	d0f1      	beq.n	13832 <bt_gatt_change_aware+0xc>
   1384e:	e8d4 3faf 	lda	r3, [r4]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   13852:	f3c3 0540 	ubfx	r5, r3, #1, #1
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   13856:	079b      	lsls	r3, r3, #30
   13858:	d509      	bpl.n	1386e <bt_gatt_change_aware+0x48>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1385a:	f06f 0102 	mvn.w	r1, #2
   1385e:	4620      	mov	r0, r4
   13860:	f7ff fe28 	bl	134b4 <atomic_and>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   13864:	4631      	mov	r1, r6
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   13866:	4620      	mov	r0, r4
   13868:	f7ff fe71 	bl	1354e <atomic_set_bit>
	return false;
   1386c:	e7e1      	b.n	13832 <bt_gatt_change_aware+0xc>
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   1386e:	2101      	movs	r1, #1
   13870:	e7f9      	b.n	13866 <bt_gatt_change_aware+0x40>

00013872 <sys_memcpy_swap>:
	psrc += length - 1;
   13872:	1e53      	subs	r3, r2, #1
   13874:	4419      	add	r1, r3
	for (; length > 0; length--) {
   13876:	4402      	add	r2, r0
		*pdst++ = *psrc--;
   13878:	f811 3901 	ldrb.w	r3, [r1], #-1
   1387c:	f800 3b01 	strb.w	r3, [r0], #1
	for (; length > 0; length--) {
   13880:	4290      	cmp	r0, r2
   13882:	d1f9      	bne.n	13878 <sys_memcpy_swap+0x6>
}
   13884:	4770      	bx	lr

00013886 <sys_mem_swap>:
{
   13886:	b510      	push	{r4, lr}
   13888:	1843      	adds	r3, r0, r1
   1388a:	eb00 0151 	add.w	r1, r0, r1, lsr #1
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1388e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
		uint8_t tmp = ((uint8_t *)buf)[i];
   13892:	7802      	ldrb	r2, [r0, #0]
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   13894:	f800 4b01 	strb.w	r4, [r0], #1
	for (i = 0; i < (length/2); i++) {
   13898:	4288      	cmp	r0, r1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   1389a:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (length/2); i++) {
   1389c:	d1f7      	bne.n	1388e <sys_mem_swap+0x8>
	}
}
   1389e:	bd10      	pop	{r4, pc}

000138a0 <smp_pairing_rsp>:
}
   138a0:	2007      	movs	r0, #7
   138a2:	4770      	bx	lr

000138a4 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   138a4:	2301      	movs	r3, #1
   138a6:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   138a8:	e8d0 2fef 	ldaex	r2, [r0]
   138ac:	431a      	orrs	r2, r3
   138ae:	e8c0 2fe1 	stlex	r1, r2, [r0]
   138b2:	2900      	cmp	r1, #0
   138b4:	d1f8      	bne.n	138a8 <atomic_set_bit+0x4>
}
   138b6:	4770      	bx	lr

000138b8 <smp_keypress_notif>:
{
   138b8:	b508      	push	{r3, lr}
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   138ba:	210e      	movs	r1, #14
   138bc:	30b8      	adds	r0, #184	; 0xb8
   138be:	f7ff fff1 	bl	138a4 <atomic_set_bit>
}
   138c2:	2000      	movs	r0, #0
   138c4:	bd08      	pop	{r3, pc}

000138c6 <bt_smp_aes_cmac>:
{
   138c6:	b570      	push	{r4, r5, r6, lr}
   138c8:	b0c2      	sub	sp, #264	; 0x108
   138ca:	460d      	mov	r5, r1
   138cc:	4616      	mov	r6, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   138ce:	4601      	mov	r1, r0
   138d0:	aa16      	add	r2, sp, #88	; 0x58
   138d2:	4668      	mov	r0, sp
{
   138d4:	461c      	mov	r4, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   138d6:	f7fe f930 	bl	11b3a <tc_cmac_setup>
   138da:	b150      	cbz	r0, 138f2 <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
   138dc:	4632      	mov	r2, r6
   138de:	4629      	mov	r1, r5
   138e0:	4668      	mov	r0, sp
   138e2:	f7fe f955 	bl	11b90 <tc_cmac_update>
   138e6:	b120      	cbz	r0, 138f2 <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
   138e8:	4669      	mov	r1, sp
   138ea:	4620      	mov	r0, r4
   138ec:	f7fe f9bc 	bl	11c68 <tc_cmac_final>
   138f0:	b918      	cbnz	r0, 138fa <bt_smp_aes_cmac+0x34>
		return -EIO;
   138f2:	f06f 0004 	mvn.w	r0, #4
}
   138f6:	b042      	add	sp, #264	; 0x108
   138f8:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
   138fa:	2000      	movs	r0, #0
   138fc:	e7fb      	b.n	138f6 <bt_smp_aes_cmac+0x30>

000138fe <smp_f4>:
{
   138fe:	b5f0      	push	{r4, r5, r6, r7, lr}
   13900:	460e      	mov	r6, r1
   13902:	4614      	mov	r4, r2
   13904:	461d      	mov	r5, r3
   13906:	b097      	sub	sp, #92	; 0x5c
	sys_memcpy_swap(m, u, 32);
   13908:	4601      	mov	r1, r0
   1390a:	2220      	movs	r2, #32
   1390c:	a805      	add	r0, sp, #20
{
   1390e:	9f1c      	ldr	r7, [sp, #112]	; 0x70
	sys_memcpy_swap(m, u, 32);
   13910:	f7ff ffaf 	bl	13872 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   13914:	2220      	movs	r2, #32
   13916:	4631      	mov	r1, r6
   13918:	a80d      	add	r0, sp, #52	; 0x34
   1391a:	f7ff ffaa 	bl	13872 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   1391e:	4621      	mov	r1, r4
   13920:	2210      	movs	r2, #16
   13922:	a801      	add	r0, sp, #4
	m[64] = z;
   13924:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	sys_memcpy_swap(xs, x, 16);
   13928:	f7ff ffa3 	bl	13872 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), res);
   1392c:	463b      	mov	r3, r7
   1392e:	2241      	movs	r2, #65	; 0x41
   13930:	a905      	add	r1, sp, #20
   13932:	a801      	add	r0, sp, #4
   13934:	f7ff ffc7 	bl	138c6 <bt_smp_aes_cmac>
	if (err) {
   13938:	4604      	mov	r4, r0
   1393a:	b918      	cbnz	r0, 13944 <smp_f4+0x46>
	sys_mem_swap(res, 16);
   1393c:	2110      	movs	r1, #16
   1393e:	4638      	mov	r0, r7
   13940:	f7ff ffa1 	bl	13886 <sys_mem_swap>
}
   13944:	4620      	mov	r0, r4
   13946:	b017      	add	sp, #92	; 0x5c
   13948:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001394a <smp_f6>:
{
   1394a:	b5f0      	push	{r4, r5, r6, r7, lr}
   1394c:	4616      	mov	r6, r2
   1394e:	461c      	mov	r4, r3
   13950:	4605      	mov	r5, r0
   13952:	b097      	sub	sp, #92	; 0x5c
	sys_memcpy_swap(m, n1, 16);
   13954:	2210      	movs	r2, #16
   13956:	a805      	add	r0, sp, #20
{
   13958:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
	sys_memcpy_swap(m, n1, 16);
   1395a:	f7ff ff8a 	bl	13872 <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
   1395e:	2210      	movs	r2, #16
   13960:	4631      	mov	r1, r6
   13962:	a809      	add	r0, sp, #36	; 0x24
   13964:	f7ff ff85 	bl	13872 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
   13968:	4621      	mov	r1, r4
   1396a:	2210      	movs	r2, #16
   1396c:	a80d      	add	r0, sp, #52	; 0x34
   1396e:	f7ff ff80 	bl	13872 <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
   13972:	2203      	movs	r2, #3
   13974:	991c      	ldr	r1, [sp, #112]	; 0x70
   13976:	a811      	add	r0, sp, #68	; 0x44
   13978:	f7ff ff7b 	bl	13872 <sys_memcpy_swap>
	m[51] = a1->type;
   1397c:	9c1d      	ldr	r4, [sp, #116]	; 0x74
	memcpy(m + 52, a1->a.val, 6);
   1397e:	2206      	movs	r2, #6
	m[51] = a1->type;
   13980:	f814 3b01 	ldrb.w	r3, [r4], #1
	memcpy(m + 52, a1->a.val, 6);
   13984:	a812      	add	r0, sp, #72	; 0x48
   13986:	4621      	mov	r1, r4
	m[51] = a1->type;
   13988:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(m + 52, a1->a.val, 6);
   1398c:	f7fe fcc5 	bl	1231a <memcpy>
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   13990:	4621      	mov	r1, r4
   13992:	2206      	movs	r2, #6
   13994:	a812      	add	r0, sp, #72	; 0x48
   13996:	f7ff ff6c 	bl	13872 <sys_memcpy_swap>
	m[58] = a2->type;
   1399a:	9c1e      	ldr	r4, [sp, #120]	; 0x78
	memcpy(m + 59, a2->a.val, 6);
   1399c:	2206      	movs	r2, #6
	m[58] = a2->type;
   1399e:	f814 3b01 	ldrb.w	r3, [r4], #1
	memcpy(m + 59, a2->a.val, 6);
   139a2:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   139a6:	4621      	mov	r1, r4
	m[58] = a2->type;
   139a8:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	memcpy(m + 59, a2->a.val, 6);
   139ac:	f7fe fcb5 	bl	1231a <memcpy>
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   139b0:	4621      	mov	r1, r4
   139b2:	2206      	movs	r2, #6
   139b4:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   139b8:	f7ff ff5b 	bl	13872 <sys_memcpy_swap>
	sys_memcpy_swap(ws, w, 16);
   139bc:	2210      	movs	r2, #16
   139be:	4629      	mov	r1, r5
   139c0:	a801      	add	r0, sp, #4
   139c2:	f7ff ff56 	bl	13872 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(ws, m, sizeof(m), check);
   139c6:	463b      	mov	r3, r7
   139c8:	2241      	movs	r2, #65	; 0x41
   139ca:	a905      	add	r1, sp, #20
   139cc:	a801      	add	r0, sp, #4
   139ce:	f7ff ff7a 	bl	138c6 <bt_smp_aes_cmac>
	if (err) {
   139d2:	4604      	mov	r4, r0
   139d4:	b918      	cbnz	r0, 139de <smp_f6+0x94>
	sys_mem_swap(check, 16);
   139d6:	2110      	movs	r1, #16
   139d8:	4638      	mov	r0, r7
   139da:	f7ff ff54 	bl	13886 <sys_mem_swap>
}
   139de:	4620      	mov	r0, r4
   139e0:	b017      	add	sp, #92	; 0x5c
   139e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000139e4 <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   139e4:	2301      	movs	r3, #1
   139e6:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   139e8:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   139ea:	e8d0 2fef 	ldaex	r2, [r0]
   139ee:	401a      	ands	r2, r3
   139f0:	e8c0 2fe1 	stlex	r1, r2, [r0]
   139f4:	2900      	cmp	r1, #0
   139f6:	d1f8      	bne.n	139ea <atomic_clear_bit+0x6>
}
   139f8:	4770      	bx	lr

000139fa <bt_smp_disconnected>:
{
   139fa:	b538      	push	{r3, r4, r5, lr}
	struct bt_keys *keys = chan->conn->le.keys;
   139fc:	6803      	ldr	r3, [r0, #0]
{
   139fe:	4604      	mov	r4, r0
	struct bt_keys *keys = chan->conn->le.keys;
   13a00:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
	k_delayed_work_cancel(&smp->work);
   13a04:	f500 70d4 	add.w	r0, r0, #424	; 0x1a8
   13a08:	f001 fc07 	bl	1521a <k_delayed_work_cancel>
	if (keys) {
   13a0c:	b13d      	cbz	r5, 13a1e <bt_smp_disconnected+0x24>
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
   13a0e:	89eb      	ldrh	r3, [r5, #14]
   13a10:	b113      	cbz	r3, 13a18 <bt_smp_disconnected+0x1e>
   13a12:	7b6b      	ldrb	r3, [r5, #13]
   13a14:	079b      	lsls	r3, r3, #30
   13a16:	d502      	bpl.n	13a1e <bt_smp_disconnected+0x24>
			bt_keys_clear(keys);
   13a18:	4628      	mov	r0, r5
   13a1a:	f7f9 fa2b 	bl	ce74 <bt_keys_clear>
	(void)memset(smp, 0, sizeof(*smp));
   13a1e:	4620      	mov	r0, r4
}
   13a20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	(void)memset(smp, 0, sizeof(*smp));
   13a24:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
   13a28:	2100      	movs	r1, #0
   13a2a:	f7fe bca1 	b.w	12370 <memset>

00013a2e <smp_security_request>:
   13a2e:	2007      	movs	r0, #7
   13a30:	4770      	bx	lr

00013a32 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   13a32:	e8d0 0faf 	lda	r0, [r0]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   13a36:	4108      	asrs	r0, r1
}
   13a38:	f000 0001 	and.w	r0, r0, #1
   13a3c:	4770      	bx	lr

00013a3e <smp_create_pdu.isra.0>:
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   13a3e:	b570      	push	{r4, r5, r6, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   13a40:	f100 05bc 	add.w	r5, r0, #188	; 0xbc
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   13a44:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   13a46:	4628      	mov	r0, r5
   13a48:	2104      	movs	r1, #4
   13a4a:	f7ff fff2 	bl	13a32 <atomic_test_bit>
   13a4e:	b168      	cbz	r0, 13a6c <smp_create_pdu.isra.0+0x2e>
		timeout = K_NO_WAIT;
   13a50:	2200      	movs	r2, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   13a52:	2100      	movs	r1, #0
		timeout = SMP_TIMEOUT;
   13a54:	2300      	movs	r3, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   13a56:	4608      	mov	r0, r1
   13a58:	f7ff f886 	bl	12b68 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   13a5c:	4604      	mov	r4, r0
   13a5e:	b940      	cbnz	r0, 13a72 <smp_create_pdu.isra.0+0x34>
		atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   13a60:	2104      	movs	r1, #4
   13a62:	4628      	mov	r0, r5
   13a64:	f7ff ff1e 	bl	138a4 <atomic_set_bit>
}
   13a68:	4620      	mov	r0, r4
   13a6a:	bd70      	pop	{r4, r5, r6, pc}
		timeout = SMP_TIMEOUT;
   13a6c:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   13a70:	e7ef      	b.n	13a52 <smp_create_pdu.isra.0+0x14>
	return net_buf_simple_add(&buf->b, len);
   13a72:	2101      	movs	r1, #1
   13a74:	3008      	adds	r0, #8
   13a76:	f000 faf1 	bl	1405c <net_buf_simple_add>
	hdr->code = op;
   13a7a:	7006      	strb	r6, [r0, #0]
	return buf;
   13a7c:	e7f4      	b.n	13a68 <smp_create_pdu.isra.0+0x2a>

00013a7e <smp_send_pairing_random>:
{
   13a7e:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   13a80:	2104      	movs	r1, #4
{
   13a82:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   13a84:	f7ff ffdb 	bl	13a3e <smp_create_pdu.isra.0>
	if (!rsp_buf) {
   13a88:	4604      	mov	r4, r0
   13a8a:	b178      	cbz	r0, 13aac <smp_send_pairing_random+0x2e>
   13a8c:	2110      	movs	r1, #16
   13a8e:	3008      	adds	r0, #8
   13a90:	f000 fae4 	bl	1405c <net_buf_simple_add>
	memcpy(req->val, smp->prnd, sizeof(req->val));
   13a94:	2210      	movs	r2, #16
   13a96:	f105 01df 	add.w	r1, r5, #223	; 0xdf
   13a9a:	f7fe fc3e 	bl	1231a <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   13a9e:	4628      	mov	r0, r5
   13aa0:	2200      	movs	r2, #0
   13aa2:	4621      	mov	r1, r4
   13aa4:	f7f7 fc2c 	bl	b300 <smp_send.isra.0>
	return 0;
   13aa8:	2000      	movs	r0, #0
}
   13aaa:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   13aac:	2008      	movs	r0, #8
   13aae:	e7fc      	b.n	13aaa <smp_send_pairing_random+0x2c>

00013ab0 <send_pairing_rsp>:
{
   13ab0:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   13ab2:	2102      	movs	r1, #2
{
   13ab4:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   13ab6:	f7ff ffc2 	bl	13a3e <smp_create_pdu.isra.0>
	if (!rsp_buf) {
   13aba:	4604      	mov	r4, r0
   13abc:	b178      	cbz	r0, 13ade <send_pairing_rsp+0x2e>
   13abe:	2106      	movs	r1, #6
   13ac0:	3008      	adds	r0, #8
   13ac2:	f000 facb 	bl	1405c <net_buf_simple_add>
	memcpy(rsp, smp->prsp + 1, sizeof(*rsp));
   13ac6:	2206      	movs	r2, #6
   13ac8:	f105 01c9 	add.w	r1, r5, #201	; 0xc9
   13acc:	f7fe fc25 	bl	1231a <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   13ad0:	4628      	mov	r0, r5
   13ad2:	2200      	movs	r2, #0
   13ad4:	4621      	mov	r1, r4
   13ad6:	f7f7 fc13 	bl	b300 <smp_send.isra.0>
	return 0;
   13ada:	2000      	movs	r0, #0
}
   13adc:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   13ade:	2008      	movs	r0, #8
   13ae0:	e7fc      	b.n	13adc <send_pairing_rsp+0x2c>

00013ae2 <smp_dhkey_check>:
{
   13ae2:	b570      	push	{r4, r5, r6, lr}
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_SLAVE) {
   13ae4:	6803      	ldr	r3, [r0, #0]
{
   13ae6:	4604      	mov	r4, r0
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_SLAVE) {
   13ae8:	78db      	ldrb	r3, [r3, #3]
   13aea:	2b01      	cmp	r3, #1
   13aec:	d115      	bne.n	13b1a <smp_dhkey_check+0x38>
	struct bt_smp_dhkey_check *req = (void *)buf->data;
   13aee:	688e      	ldr	r6, [r1, #8]
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   13af0:	f100 05bc 	add.w	r5, r0, #188	; 0xbc
   13af4:	2110      	movs	r1, #16
   13af6:	4628      	mov	r0, r5
   13af8:	f7ff ff74 	bl	139e4 <atomic_clear_bit>
		memcpy(smp->e, req->e, sizeof(smp->e));
   13afc:	4631      	mov	r1, r6
   13afe:	2210      	movs	r2, #16
   13b00:	f204 106f 	addw	r0, r4, #367	; 0x16f
   13b04:	f7fe fc09 	bl	1231a <memcpy>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   13b08:	2107      	movs	r1, #7
   13b0a:	4628      	mov	r0, r5
   13b0c:	f7ff ff91 	bl	13a32 <atomic_test_bit>
   13b10:	b128      	cbz	r0, 13b1e <smp_dhkey_check+0x3c>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   13b12:	2109      	movs	r1, #9
   13b14:	4628      	mov	r0, r5
   13b16:	f7ff fec5 	bl	138a4 <atomic_set_bit>
}
   13b1a:	2000      	movs	r0, #0
   13b1c:	bd70      	pop	{r4, r5, r6, pc}
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   13b1e:	210a      	movs	r1, #10
   13b20:	4628      	mov	r0, r5
   13b22:	f7ff ff86 	bl	13a32 <atomic_test_bit>
   13b26:	2800      	cmp	r0, #0
   13b28:	d1f3      	bne.n	13b12 <smp_dhkey_check+0x30>
		return compute_and_check_and_send_slave_dhcheck(smp);
   13b2a:	4620      	mov	r0, r4
}
   13b2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return compute_and_check_and_send_slave_dhcheck(smp);
   13b30:	f7f7 bc5e 	b.w	b3f0 <compute_and_check_and_send_slave_dhcheck>

00013b34 <atomic_test_and_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   13b34:	2301      	movs	r3, #1
   13b36:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   13b3a:	43ca      	mvns	r2, r1
{
   13b3c:	b500      	push	{lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13b3e:	e8d0 3fef 	ldaex	r3, [r0]
   13b42:	ea03 0c02 	and.w	ip, r3, r2
   13b46:	e8c0 cfee 	stlex	lr, ip, [r0]
   13b4a:	f1be 0f00 	cmp.w	lr, #0
   13b4e:	d1f6      	bne.n	13b3e <atomic_test_and_clear_bit+0xa>
	return (old & mask) != 0;
   13b50:	420b      	tst	r3, r1
}
   13b52:	bf14      	ite	ne
   13b54:	2001      	movne	r0, #1
   13b56:	2000      	moveq	r0, #0
   13b58:	f85d fb04 	ldr.w	pc, [sp], #4

00013b5c <smp_reset>:
{
   13b5c:	b538      	push	{r3, r4, r5, lr}
   13b5e:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   13b60:	6805      	ldr	r5, [r0, #0]
	k_delayed_work_cancel(&smp->work);
   13b62:	f500 70d4 	add.w	r0, r0, #424	; 0x1a8
   13b66:	f001 fb58 	bl	1521a <k_delayed_work_cancel>
	smp->method = JUST_WORKS;
   13b6a:	2300      	movs	r3, #0
	atomic_set(&smp->allowed_cmds, 0);
   13b6c:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
	smp->method = JUST_WORKS;
   13b70:	f884 30c0 	strb.w	r3, [r4, #192]	; 0xc0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   13b74:	e8d0 2fef 	ldaex	r2, [r0]
   13b78:	e8c0 3fe1 	stlex	r1, r3, [r0]
   13b7c:	2900      	cmp	r1, #0
   13b7e:	d1f9      	bne.n	13b74 <smp_reset+0x18>
   13b80:	34bc      	adds	r4, #188	; 0xbc
   13b82:	e8d4 2fef 	ldaex	r2, [r4]
   13b86:	e8c4 3fe1 	stlex	r1, r3, [r4]
   13b8a:	2900      	cmp	r1, #0
   13b8c:	d1f9      	bne.n	13b82 <smp_reset+0x26>
	if (conn->required_sec_level != conn->sec_level) {
   13b8e:	7a6b      	ldrb	r3, [r5, #9]
   13b90:	7aaa      	ldrb	r2, [r5, #10]
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   13b92:	2101      	movs	r1, #1
	if (conn->required_sec_level != conn->sec_level) {
   13b94:	429a      	cmp	r2, r3
		conn->required_sec_level = conn->sec_level;
   13b96:	bf18      	it	ne
   13b98:	72ab      	strbne	r3, [r5, #10]
}
   13b9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   13b9e:	f7ff be81 	b.w	138a4 <atomic_set_bit>

00013ba2 <smp_error>:
{
   13ba2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   13ba4:	4606      	mov	r6, r0
   13ba6:	460c      	mov	r4, r1
	smp_pairing_complete(smp, reason);
   13ba8:	f7f8 f8b8 	bl	bd1c <smp_pairing_complete>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_FAIL, sizeof(*rsp));
   13bac:	2105      	movs	r1, #5
   13bae:	4630      	mov	r0, r6
   13bb0:	f7ff ff45 	bl	13a3e <smp_create_pdu.isra.0>
	if (!buf) {
   13bb4:	4605      	mov	r5, r0
   13bb6:	b178      	cbz	r0, 13bd8 <smp_error+0x36>
   13bb8:	2101      	movs	r1, #1
   13bba:	3008      	adds	r0, #8
   13bbc:	f000 fa4e 	bl	1405c <net_buf_simple_add>
	rsp->reason = reason;
   13bc0:	7004      	strb	r4, [r0, #0]
   13bc2:	2400      	movs	r4, #0
   13bc4:	462a      	mov	r2, r5
   13bc6:	4623      	mov	r3, r4
   13bc8:	2106      	movs	r1, #6
   13bca:	6830      	ldr	r0, [r6, #0]
   13bcc:	9400      	str	r4, [sp, #0]
   13bce:	f7fe ffce 	bl	12b6e <bt_l2cap_send_cb>
	return 0;
   13bd2:	4620      	mov	r0, r4
}
   13bd4:	b002      	add	sp, #8
   13bd6:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
   13bd8:	f06f 0036 	mvn.w	r0, #54	; 0x36
   13bdc:	e7fa      	b.n	13bd4 <smp_error+0x32>

00013bde <bt_smp_dhkey_ready>:
{
   13bde:	b570      	push	{r4, r5, r6, lr}
   13be0:	4606      	mov	r6, r0
	struct bt_smp *smp = smp_find(SMP_FLAG_DHKEY_GEN);
   13be2:	2008      	movs	r0, #8
   13be4:	f7f7 fba4 	bl	b330 <smp_find>
	if (smp) {
   13be8:	4604      	mov	r4, r0
   13bea:	b1c0      	cbz	r0, 13c1e <bt_smp_dhkey_ready+0x40>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   13bec:	f100 05bc 	add.w	r5, r0, #188	; 0xbc
   13bf0:	2108      	movs	r1, #8
   13bf2:	4628      	mov	r0, r5
   13bf4:	f7ff fef6 	bl	139e4 <atomic_clear_bit>
	if (!dhkey) {
   13bf8:	b38e      	cbz	r6, 13c5e <bt_smp_dhkey_ready+0x80>
	atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   13bfa:	2107      	movs	r1, #7
   13bfc:	f7ff fef2 	bl	139e4 <atomic_clear_bit>
	memcpy(smp->dhkey, dhkey, 32);
   13c00:	4631      	mov	r1, r6
   13c02:	2220      	movs	r2, #32
   13c04:	f204 104f 	addw	r0, r4, #335	; 0x14f
   13c08:	f7fe fb87 	bl	1231a <memcpy>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   13c0c:	210a      	movs	r1, #10
   13c0e:	4628      	mov	r0, r5
   13c10:	f7ff ff0f 	bl	13a32 <atomic_test_bit>
   13c14:	b168      	cbz	r0, 13c32 <bt_smp_dhkey_ready+0x54>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   13c16:	2109      	movs	r1, #9
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   13c18:	4628      	mov	r0, r5
   13c1a:	f7ff fe43 	bl	138a4 <atomic_set_bit>
		smp = smp_find(SMP_FLAG_DHKEY_PENDING);
   13c1e:	2007      	movs	r0, #7
   13c20:	f7f7 fb86 	bl	b330 <smp_find>
		if (smp) {
   13c24:	4604      	mov	r4, r0
   13c26:	b118      	cbz	r0, 13c30 <bt_smp_dhkey_ready+0x52>
			err = smp_dhkey_generate(smp);
   13c28:	f7f7 face 	bl	b1c8 <smp_dhkey_generate>
			if (err) {
   13c2c:	4601      	mov	r1, r0
   13c2e:	b990      	cbnz	r0, 13c56 <bt_smp_dhkey_ready+0x78>
}
   13c30:	bd70      	pop	{r4, r5, r6, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   13c32:	2110      	movs	r1, #16
   13c34:	4628      	mov	r0, r5
   13c36:	f7ff fefc 	bl	13a32 <atomic_test_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   13c3a:	2109      	movs	r1, #9
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   13c3c:	2800      	cmp	r0, #0
   13c3e:	d1eb      	bne.n	13c18 <bt_smp_dhkey_ready+0x3a>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
   13c40:	4628      	mov	r0, r5
   13c42:	f7ff fef6 	bl	13a32 <atomic_test_bit>
   13c46:	2800      	cmp	r0, #0
   13c48:	d0e9      	beq.n	13c1e <bt_smp_dhkey_ready+0x40>
		return  compute_and_check_and_send_slave_dhcheck(smp);
   13c4a:	4620      	mov	r0, r4
   13c4c:	f7f7 fbd0 	bl	b3f0 <compute_and_check_and_send_slave_dhcheck>
		if (err) {
   13c50:	4601      	mov	r1, r0
   13c52:	2800      	cmp	r0, #0
   13c54:	d0e3      	beq.n	13c1e <bt_smp_dhkey_ready+0x40>
			smp_error(smp, err);
   13c56:	4620      	mov	r0, r4
   13c58:	f7ff ffa3 	bl	13ba2 <smp_error>
   13c5c:	e7df      	b.n	13c1e <bt_smp_dhkey_ready+0x40>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   13c5e:	210b      	movs	r1, #11
   13c60:	e7f9      	b.n	13c56 <bt_smp_dhkey_ready+0x78>

00013c62 <smp_check_complete.part.0>:
static void smp_check_complete(struct bt_conn *conn, uint8_t dist_complete)
   13c62:	b510      	push	{r4, lr}
   13c64:	460c      	mov	r4, r1
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
   13c66:	2106      	movs	r1, #6
   13c68:	f7fe ff9a 	bl	12ba0 <bt_l2cap_le_lookup_tx_cid>
		smp->local_dist &= ~dist_complete;
   13c6c:	f890 21a0 	ldrb.w	r2, [r0, #416]	; 0x1a0
   13c70:	ea22 0104 	bic.w	r1, r2, r4
   13c74:	f880 11a0 	strb.w	r1, [r0, #416]	; 0x1a0
		if (!smp->local_dist && !smp->remote_dist) {
   13c78:	f8b0 11a0 	ldrh.w	r1, [r0, #416]	; 0x1a0
   13c7c:	b919      	cbnz	r1, 13c86 <smp_check_complete.part.0+0x24>
}
   13c7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			smp_pairing_complete(smp, 0);
   13c82:	f7f8 b84b 	b.w	bd1c <smp_pairing_complete>
}
   13c86:	bd10      	pop	{r4, pc}

00013c88 <smp_sign_info_sent>:
	if (conn->type == BT_CONN_TYPE_LE) {
   13c88:	7883      	ldrb	r3, [r0, #2]
   13c8a:	2b01      	cmp	r3, #1
   13c8c:	d102      	bne.n	13c94 <smp_sign_info_sent+0xc>
   13c8e:	2104      	movs	r1, #4
   13c90:	f7ff bfe7 	b.w	13c62 <smp_check_complete.part.0>
}
   13c94:	4770      	bx	lr

00013c96 <smp_ident_sent>:
	if (conn->type == BT_CONN_TYPE_LE) {
   13c96:	7881      	ldrb	r1, [r0, #2]
   13c98:	2901      	cmp	r1, #1
   13c9a:	d101      	bne.n	13ca0 <smp_ident_sent+0xa>
   13c9c:	f7ff bfe1 	b.w	13c62 <smp_check_complete.part.0>
}
   13ca0:	4770      	bx	lr

00013ca2 <smp_id_sent>:
	if (conn->type == BT_CONN_TYPE_LE) {
   13ca2:	7883      	ldrb	r3, [r0, #2]
   13ca4:	2b01      	cmp	r3, #1
   13ca6:	d102      	bne.n	13cae <smp_id_sent+0xc>
   13ca8:	2102      	movs	r1, #2
   13caa:	f7ff bfda 	b.w	13c62 <smp_check_complete.part.0>
}
   13cae:	4770      	bx	lr

00013cb0 <smp_c1>:
{
   13cb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13cb4:	4699      	mov	r9, r3
   13cb6:	b089      	sub	sp, #36	; 0x24
   13cb8:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
	p1[0] = ia->type;
   13cbc:	783b      	ldrb	r3, [r7, #0]
{
   13cbe:	460c      	mov	r4, r1
	p1[0] = ia->type;
   13cc0:	f88d 3000 	strb.w	r3, [sp]
	p1[1] = ra->type;
   13cc4:	f898 3000 	ldrb.w	r3, [r8]
{
   13cc8:	4611      	mov	r1, r2
   13cca:	9d12      	ldr	r5, [sp, #72]	; 0x48
	memcpy(p1 + 2, preq, 7);
   13ccc:	2207      	movs	r2, #7
{
   13cce:	4606      	mov	r6, r0
	memcpy(p1 + 2, preq, 7);
   13cd0:	f10d 0002 	add.w	r0, sp, #2
	p1[1] = ra->type;
   13cd4:	f88d 3001 	strb.w	r3, [sp, #1]
	memcpy(p1 + 2, preq, 7);
   13cd8:	f7fe fb1f 	bl	1231a <memcpy>
	memcpy(p1 + 9, pres, 7);
   13cdc:	2207      	movs	r2, #7
   13cde:	4649      	mov	r1, r9
   13ce0:	f10d 0009 	add.w	r0, sp, #9
   13ce4:	f7fe fb19 	bl	1231a <memcpy>
	while (len--) {
   13ce8:	4629      	mov	r1, r5
   13cea:	466a      	mov	r2, sp
   13cec:	f104 0010 	add.w	r0, r4, #16
   13cf0:	4284      	cmp	r4, r0
   13cf2:	d127      	bne.n	13d44 <smp_c1+0x94>
	err = bt_encrypt_le(k, enc_data, enc_data);
   13cf4:	462a      	mov	r2, r5
   13cf6:	4629      	mov	r1, r5
   13cf8:	4630      	mov	r0, r6
   13cfa:	f7fe fd8a 	bl	12812 <bt_encrypt_le>
	if (err) {
   13cfe:	4604      	mov	r4, r0
   13d00:	b9e0      	cbnz	r0, 13d3c <smp_c1+0x8c>
	memcpy(p2, ra->a.val, 6);
   13d02:	2206      	movs	r2, #6
   13d04:	f108 0101 	add.w	r1, r8, #1
   13d08:	a804      	add	r0, sp, #16
   13d0a:	f7fe fb06 	bl	1231a <memcpy>
	memcpy(p2 + 6, ia->a.val, 6);
   13d0e:	2206      	movs	r2, #6
   13d10:	1c79      	adds	r1, r7, #1
   13d12:	f10d 0016 	add.w	r0, sp, #22
   13d16:	f7fe fb00 	bl	1231a <memcpy>
	(void)memset(p2 + 12, 0, 4);
   13d1a:	2204      	movs	r2, #4
   13d1c:	4621      	mov	r1, r4
   13d1e:	a807      	add	r0, sp, #28
   13d20:	f7fe fb26 	bl	12370 <memset>
	while (len--) {
   13d24:	462a      	mov	r2, r5
   13d26:	f105 0010 	add.w	r0, r5, #16
   13d2a:	ab04      	add	r3, sp, #16
   13d2c:	4282      	cmp	r2, r0
   13d2e:	d112      	bne.n	13d56 <smp_c1+0xa6>
	return bt_encrypt_le(k, enc_data, enc_data);
   13d30:	462a      	mov	r2, r5
   13d32:	4629      	mov	r1, r5
   13d34:	4630      	mov	r0, r6
   13d36:	f7fe fd6c 	bl	12812 <bt_encrypt_le>
   13d3a:	4604      	mov	r4, r0
}
   13d3c:	4620      	mov	r0, r4
   13d3e:	b009      	add	sp, #36	; 0x24
   13d40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		*r++ = *p++ ^ *q++;
   13d44:	f814 3b01 	ldrb.w	r3, [r4], #1
   13d48:	f812 cb01 	ldrb.w	ip, [r2], #1
   13d4c:	ea83 030c 	eor.w	r3, r3, ip
   13d50:	f801 3b01 	strb.w	r3, [r1], #1
   13d54:	e7cc      	b.n	13cf0 <smp_c1+0x40>
   13d56:	f812 1b01 	ldrb.w	r1, [r2], #1
   13d5a:	f813 4b01 	ldrb.w	r4, [r3], #1
   13d5e:	4061      	eors	r1, r4
   13d60:	f802 1c01 	strb.w	r1, [r2, #-1]
   13d64:	e7e2      	b.n	13d2c <smp_c1+0x7c>

00013d66 <legacy_pairing_confirm>:
{
   13d66:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   13d68:	f100 07bc 	add.w	r7, r0, #188	; 0xbc
{
   13d6c:	4605      	mov	r5, r0
   13d6e:	b085      	sub	sp, #20
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   13d70:	210a      	movs	r1, #10
   13d72:	4638      	mov	r0, r7
   13d74:	f7ff fe5d 	bl	13a32 <atomic_test_bit>
   13d78:	bb90      	cbnz	r0, 13de0 <legacy_pairing_confirm+0x7a>
			atomic_set_bit(&smp->allowed_cmds,
   13d7a:	2104      	movs	r1, #4
   13d7c:	f105 00b8 	add.w	r0, r5, #184	; 0xb8
   13d80:	f7ff fd90 	bl	138a4 <atomic_set_bit>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   13d84:	2103      	movs	r1, #3
   13d86:	4628      	mov	r0, r5
	struct bt_conn *conn = smp->chan.chan.conn;
   13d88:	682c      	ldr	r4, [r5, #0]
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   13d8a:	f7ff fe58 	bl	13a3e <smp_create_pdu.isra.0>
	if (!buf) {
   13d8e:	4606      	mov	r6, r0
   13d90:	b1c0      	cbz	r0, 13dc4 <legacy_pairing_confirm+0x5e>
   13d92:	2110      	movs	r1, #16
   13d94:	3008      	adds	r0, #8
   13d96:	f000 f961 	bl	1405c <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
   13d9a:	f104 0396 	add.w	r3, r4, #150	; 0x96
   13d9e:	348f      	adds	r4, #143	; 0x8f
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
   13da0:	9002      	str	r0, [sp, #8]
   13da2:	9301      	str	r3, [sp, #4]
   13da4:	9400      	str	r4, [sp, #0]
   13da6:	f105 03c8 	add.w	r3, r5, #200	; 0xc8
   13daa:	f105 02c1 	add.w	r2, r5, #193	; 0xc1
   13dae:	f105 01df 	add.w	r1, r5, #223	; 0xdf
   13db2:	f105 00ff 	add.w	r0, r5, #255	; 0xff
   13db6:	f7ff ff7b 	bl	13cb0 <smp_c1>
   13dba:	4604      	mov	r4, r0
   13dbc:	b120      	cbz	r0, 13dc8 <legacy_pairing_confirm+0x62>
		net_buf_unref(buf);
   13dbe:	4630      	mov	r0, r6
   13dc0:	f7f9 fa42 	bl	d248 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   13dc4:	2008      	movs	r0, #8
   13dc6:	e009      	b.n	13ddc <legacy_pairing_confirm+0x76>
	smp_send(smp, buf, NULL, NULL);
   13dc8:	4602      	mov	r2, r0
   13dca:	4631      	mov	r1, r6
   13dcc:	4628      	mov	r0, r5
   13dce:	f7f7 fa97 	bl	b300 <smp_send.isra.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   13dd2:	4621      	mov	r1, r4
   13dd4:	4638      	mov	r0, r7
   13dd6:	f7ff fe05 	bl	139e4 <atomic_clear_bit>
	return 0;
   13dda:	2000      	movs	r0, #0
}
   13ddc:	b005      	add	sp, #20
   13dde:	bdf0      	pop	{r4, r5, r6, r7, pc}
		atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   13de0:	2100      	movs	r1, #0
   13de2:	4638      	mov	r0, r7
   13de4:	f7ff fd5e 	bl	138a4 <atomic_set_bit>
   13de8:	e7f7      	b.n	13dda <legacy_pairing_confirm+0x74>

00013dea <bt_smp_request_ltk>:
{
   13dea:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   13dee:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   13df0:	4604      	mov	r4, r0
   13df2:	e9cd 2300 	strd	r2, r3, [sp]
	smp = smp_chan_get(conn);
   13df6:	f7f7 fa2b 	bl	b250 <smp_chan_get>
	if (!smp) {
   13dfa:	4605      	mov	r5, r0
   13dfc:	2800      	cmp	r0, #0
   13dfe:	f000 809d 	beq.w	13f3c <bt_smp_request_ltk+0x152>
	if (ediv == 0U && rand == 0U &&
   13e02:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
   13e06:	f1b9 0f00 	cmp.w	r9, #0
   13e0a:	d12d      	bne.n	13e68 <bt_smp_request_ltk+0x7e>
   13e0c:	e9dd 2300 	ldrd	r2, r3, [sp]
   13e10:	4313      	orrs	r3, r2
   13e12:	d129      	bne.n	13e68 <bt_smp_request_ltk+0x7e>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   13e14:	f100 08bc 	add.w	r8, r0, #188	; 0xbc
   13e18:	2103      	movs	r1, #3
   13e1a:	4640      	mov	r0, r8
   13e1c:	f7ff fe09 	bl	13a32 <atomic_test_bit>
	if (ediv == 0U && rand == 0U &&
   13e20:	b310      	cbz	r0, 13e68 <bt_smp_request_ltk+0x7e>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   13e22:	2101      	movs	r1, #1
   13e24:	4640      	mov	r0, r8
   13e26:	f7ff fe04 	bl	13a32 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   13e2a:	4606      	mov	r6, r0
   13e2c:	b1e0      	cbz	r0, 13e68 <bt_smp_request_ltk+0x7e>
	return MIN(req->max_key_size, rsp->max_key_size);
   13e2e:	f895 40cc 	ldrb.w	r4, [r5, #204]	; 0xcc
   13e32:	f895 30c5 	ldrb.w	r3, [r5, #197]	; 0xc5
		memcpy(ltk, smp->tk, enc_size);
   13e36:	4638      	mov	r0, r7
	return MIN(req->max_key_size, rsp->max_key_size);
   13e38:	429c      	cmp	r4, r3
   13e3a:	bf28      	it	cs
   13e3c:	461c      	movcs	r4, r3
		memcpy(ltk, smp->tk, enc_size);
   13e3e:	f105 01ff 	add.w	r1, r5, #255	; 0xff
   13e42:	4622      	mov	r2, r4
   13e44:	f7fe fa69 	bl	1231a <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   13e48:	2c0f      	cmp	r4, #15
   13e4a:	d805      	bhi.n	13e58 <bt_smp_request_ltk+0x6e>
			(void)memset(ltk + enc_size, 0,
   13e4c:	4649      	mov	r1, r9
   13e4e:	f1c4 0210 	rsb	r2, r4, #16
   13e52:	1938      	adds	r0, r7, r4
   13e54:	f7fe fa8c 	bl	12370 <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   13e58:	2101      	movs	r1, #1
   13e5a:	4640      	mov	r0, r8
   13e5c:	f7ff fd22 	bl	138a4 <atomic_set_bit>
}
   13e60:	4630      	mov	r0, r6
   13e62:	b003      	add	sp, #12
   13e64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!conn->le.keys) {
   13e68:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   13e6c:	b983      	cbnz	r3, 13e90 <bt_smp_request_ltk+0xa6>
					     &conn->le.dst);
   13e6e:	f104 0688 	add.w	r6, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   13e72:	4632      	mov	r2, r6
   13e74:	2020      	movs	r0, #32
   13e76:	7a21      	ldrb	r1, [r4, #8]
   13e78:	f7f8 ff9c 	bl	cdb4 <bt_keys_find>
   13e7c:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
   13e80:	b930      	cbnz	r0, 13e90 <bt_smp_request_ltk+0xa6>
			conn->le.keys = bt_keys_find(BT_KEYS_SLAVE_LTK,
   13e82:	4632      	mov	r2, r6
   13e84:	2001      	movs	r0, #1
   13e86:	7a21      	ldrb	r1, [r4, #8]
   13e88:	f7f8 ff94 	bl	cdb4 <bt_keys_find>
   13e8c:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (ediv == 0U && rand == 0U &&
   13e90:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
   13e94:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   13e98:	b9ce      	cbnz	r6, 13ece <bt_smp_request_ltk+0xe4>
   13e9a:	e9dd 2300 	ldrd	r2, r3, [sp]
   13e9e:	4313      	orrs	r3, r2
   13ea0:	d115      	bne.n	13ece <bt_smp_request_ltk+0xe4>
   13ea2:	2800      	cmp	r0, #0
   13ea4:	d03c      	beq.n	13f20 <bt_smp_request_ltk+0x136>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   13ea6:	89c3      	ldrh	r3, [r0, #14]
   13ea8:	069a      	lsls	r2, r3, #26
   13eaa:	d511      	bpl.n	13ed0 <bt_smp_request_ltk+0xe6>
		enc_size = conn->le.keys->enc_size;
   13eac:	7b04      	ldrb	r4, [r0, #12]
		memcpy(ltk, conn->le.keys->ltk.val, enc_size);
   13eae:	f100 011a 	add.w	r1, r0, #26
   13eb2:	4622      	mov	r2, r4
   13eb4:	4638      	mov	r0, r7
   13eb6:	f7fe fa30 	bl	1231a <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   13eba:	2c0f      	cmp	r4, #15
   13ebc:	d805      	bhi.n	13eca <bt_smp_request_ltk+0xe0>
			(void)memset(ltk + enc_size, 0,
   13ebe:	4631      	mov	r1, r6
   13ec0:	f1c4 0210 	rsb	r2, r4, #16
   13ec4:	1938      	adds	r0, r7, r4
   13ec6:	f7fe fa53 	bl	12370 <memset>
		return true;
   13eca:	2601      	movs	r6, #1
   13ecc:	e7c8      	b.n	13e60 <bt_smp_request_ltk+0x76>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
   13ece:	b338      	cbz	r0, 13f20 <bt_smp_request_ltk+0x136>
   13ed0:	89c3      	ldrh	r3, [r0, #14]
   13ed2:	07db      	lsls	r3, r3, #31
   13ed4:	d524      	bpl.n	13f20 <bt_smp_request_ltk+0x136>
	    !memcmp(conn->le.keys->slave_ltk.rand, &rand, 8) &&
   13ed6:	2208      	movs	r2, #8
   13ed8:	4669      	mov	r1, sp
   13eda:	3068      	adds	r0, #104	; 0x68
   13edc:	f7fe fa0d 	bl	122fa <memcmp>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
   13ee0:	b9f0      	cbnz	r0, 13f20 <bt_smp_request_ltk+0x136>
	    !memcmp(conn->le.keys->slave_ltk.ediv, &ediv, 2)) {
   13ee2:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   13ee6:	2202      	movs	r2, #2
   13ee8:	a90a      	add	r1, sp, #40	; 0x28
   13eea:	3070      	adds	r0, #112	; 0x70
   13eec:	f7fe fa05 	bl	122fa <memcmp>
	    !memcmp(conn->le.keys->slave_ltk.rand, &rand, 8) &&
   13ef0:	4606      	mov	r6, r0
   13ef2:	b9a8      	cbnz	r0, 13f20 <bt_smp_request_ltk+0x136>
		enc_size = conn->le.keys->enc_size;
   13ef4:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
		memcpy(ltk, conn->le.keys->slave_ltk.val, enc_size);
   13ef8:	4638      	mov	r0, r7
		enc_size = conn->le.keys->enc_size;
   13efa:	7b0c      	ldrb	r4, [r1, #12]
		memcpy(ltk, conn->le.keys->slave_ltk.val, enc_size);
   13efc:	3172      	adds	r1, #114	; 0x72
   13efe:	4622      	mov	r2, r4
   13f00:	f7fe fa0b 	bl	1231a <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   13f04:	2c0f      	cmp	r4, #15
   13f06:	d805      	bhi.n	13f14 <bt_smp_request_ltk+0x12a>
			(void)memset(ltk + enc_size, 0,
   13f08:	4631      	mov	r1, r6
   13f0a:	f1c4 0210 	rsb	r2, r4, #16
   13f0e:	1938      	adds	r0, r7, r4
   13f10:	f7fe fa2e 	bl	12370 <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   13f14:	2101      	movs	r1, #1
   13f16:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
   13f1a:	f7ff fcc3 	bl	138a4 <atomic_set_bit>
		return true;
   13f1e:	e7d4      	b.n	13eca <bt_smp_request_ltk+0xe0>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   13f20:	210f      	movs	r1, #15
   13f22:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
   13f26:	f7ff fd84 	bl	13a32 <atomic_test_bit>
   13f2a:	b120      	cbz	r0, 13f36 <bt_smp_request_ltk+0x14c>
		bt_conn_security_changed(conn, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   13f2c:	2202      	movs	r2, #2
   13f2e:	2106      	movs	r1, #6
   13f30:	4620      	mov	r0, r4
   13f32:	f7f3 feeb 	bl	7d0c <bt_conn_security_changed>
	smp_reset(smp);
   13f36:	4628      	mov	r0, r5
   13f38:	f7ff fe10 	bl	13b5c <smp_reset>
	return false;
   13f3c:	2600      	movs	r6, #0
   13f3e:	e78f      	b.n	13e60 <bt_smp_request_ltk+0x76>

00013f40 <bt_smp_irk_get>:
{
   13f40:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t invalid_ir[16] = { 0 };
   13f42:	2500      	movs	r5, #0
{
   13f44:	460c      	mov	r4, r1
	if (!memcmp(ir, invalid_ir, 16)) {
   13f46:	2210      	movs	r2, #16
   13f48:	4669      	mov	r1, sp
{
   13f4a:	4606      	mov	r6, r0
	uint8_t invalid_ir[16] = { 0 };
   13f4c:	e9cd 5500 	strd	r5, r5, [sp]
   13f50:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (!memcmp(ir, invalid_ir, 16)) {
   13f54:	f7fe f9d1 	bl	122fa <memcmp>
   13f58:	b180      	cbz	r0, 13f7c <bt_smp_irk_get+0x3c>
	dst[0] = val;
   13f5a:	2301      	movs	r3, #1
	memset(&res[4], 0, 16 - 4);
   13f5c:	220c      	movs	r2, #12
   13f5e:	4629      	mov	r1, r5
   13f60:	7023      	strb	r3, [r4, #0]
	dst[1] = val >> 8;
   13f62:	7065      	strb	r5, [r4, #1]
	dst[0] = val;
   13f64:	70a5      	strb	r5, [r4, #2]
	dst[1] = val >> 8;
   13f66:	70e5      	strb	r5, [r4, #3]
   13f68:	1d20      	adds	r0, r4, #4
   13f6a:	f7fe fa01 	bl	12370 <memset>
	err = bt_encrypt_le(key, res, res);
   13f6e:	4622      	mov	r2, r4
   13f70:	4621      	mov	r1, r4
   13f72:	4630      	mov	r0, r6
   13f74:	f7fe fc4d 	bl	12812 <bt_encrypt_le>
}
   13f78:	b004      	add	sp, #16
   13f7a:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   13f7c:	f06f 0015 	mvn.w	r0, #21
   13f80:	e7fa      	b.n	13f78 <bt_smp_irk_get+0x38>

00013f82 <id_add>:
	bt_id_add(keys);
   13f82:	f7f2 b95b 	b.w	623c <bt_id_add>

00013f86 <bt_keys_get_type>:
{
   13f86:	b570      	push	{r4, r5, r6, lr}
   13f88:	4604      	mov	r4, r0
   13f8a:	460d      	mov	r5, r1
   13f8c:	4616      	mov	r6, r2
	keys = bt_keys_find(type, id, addr);
   13f8e:	f7f8 ff11 	bl	cdb4 <bt_keys_find>
	if (keys) {
   13f92:	b938      	cbnz	r0, 13fa4 <bt_keys_get_type+0x1e>
	keys = bt_keys_get_addr(id, addr);
   13f94:	4631      	mov	r1, r6
   13f96:	4628      	mov	r0, r5
   13f98:	f7f8 fe98 	bl	cccc <bt_keys_get_addr>
	if (!keys) {
   13f9c:	b110      	cbz	r0, 13fa4 <bt_keys_get_type+0x1e>
	keys->keys |= type;
   13f9e:	89c3      	ldrh	r3, [r0, #14]
   13fa0:	431c      	orrs	r4, r3
   13fa2:	81c4      	strh	r4, [r0, #14]
}
   13fa4:	bd70      	pop	{r4, r5, r6, pc}

00013fa6 <bt_keys_add_type>:
	keys->keys |= type;
   13fa6:	89c3      	ldrh	r3, [r0, #14]
   13fa8:	4319      	orrs	r1, r3
   13faa:	81c1      	strh	r1, [r0, #14]
}
   13fac:	4770      	bx	lr

00013fae <fixed_data_unref>:
}
   13fae:	4770      	bx	lr

00013fb0 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   13fb0:	6a01      	ldr	r1, [r0, #32]
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   13fb2:	6849      	ldr	r1, [r1, #4]
   13fb4:	6809      	ldr	r1, [r1, #0]
   13fb6:	f7f9 b8bb 	b.w	d130 <net_buf_alloc_len>

00013fba <net_buf_get>:
{
   13fba:	b570      	push	{r4, r5, r6, lr}
   13fbc:	4606      	mov	r6, r0
	return z_impl_k_queue_get(queue, timeout);
   13fbe:	f7fb f809 	bl	efd4 <z_impl_k_queue_get>
	if (!buf) {
   13fc2:	4605      	mov	r5, r0
   13fc4:	b128      	cbz	r0, 13fd2 <net_buf_get+0x18>
   13fc6:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   13fc8:	7963      	ldrb	r3, [r4, #5]
   13fca:	f013 0301 	ands.w	r3, r3, #1
   13fce:	d102      	bne.n	13fd6 <net_buf_get+0x1c>
	frag->frags = NULL;
   13fd0:	6023      	str	r3, [r4, #0]
}
   13fd2:	4628      	mov	r0, r5
   13fd4:	bd70      	pop	{r4, r5, r6, pc}
   13fd6:	2300      	movs	r3, #0
   13fd8:	2200      	movs	r2, #0
   13fda:	4630      	mov	r0, r6
   13fdc:	f7fa fffa 	bl	efd4 <z_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   13fe0:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   13fe2:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   13fe4:	f023 0301 	bic.w	r3, r3, #1
   13fe8:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   13fea:	4604      	mov	r4, r0
   13fec:	e7ec      	b.n	13fc8 <net_buf_get+0xe>

00013fee <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
   13fee:	6883      	ldr	r3, [r0, #8]
   13ff0:	440b      	add	r3, r1
   13ff2:	6003      	str	r3, [r0, #0]
}
   13ff4:	4770      	bx	lr

00013ff6 <net_buf_put>:
	for (tail = buf; tail->frags; tail = tail->frags) {
   13ff6:	460a      	mov	r2, r1
{
   13ff8:	b410      	push	{r4}
	for (tail = buf; tail->frags; tail = tail->frags) {
   13ffa:	6814      	ldr	r4, [r2, #0]
   13ffc:	b914      	cbnz	r4, 14004 <net_buf_put+0xe>
}
   13ffe:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   14000:	f000 bf5c 	b.w	14ebc <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   14004:	7953      	ldrb	r3, [r2, #5]
   14006:	f043 0301 	orr.w	r3, r3, #1
   1400a:	7153      	strb	r3, [r2, #5]
   1400c:	4622      	mov	r2, r4
   1400e:	e7f4      	b.n	13ffa <net_buf_put+0x4>

00014010 <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   14010:	7902      	ldrb	r2, [r0, #4]
   14012:	3201      	adds	r2, #1
   14014:	7102      	strb	r2, [r0, #4]
	return buf;
}
   14016:	4770      	bx	lr

00014018 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   14018:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   1401a:	4618      	mov	r0, r3
   1401c:	681b      	ldr	r3, [r3, #0]
   1401e:	2b00      	cmp	r3, #0
   14020:	d1fb      	bne.n	1401a <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   14022:	4770      	bx	lr

00014024 <net_buf_frag_insert>:
void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   14024:	6802      	ldr	r2, [r0, #0]
{
   14026:	b510      	push	{r4, lr}
	if (parent->frags) {
   14028:	b12a      	cbz	r2, 14036 <net_buf_frag_insert+0x12>
   1402a:	460b      	mov	r3, r1
	while (buf->frags) {
   1402c:	461c      	mov	r4, r3
   1402e:	681b      	ldr	r3, [r3, #0]
   14030:	2b00      	cmp	r3, #0
   14032:	d1fb      	bne.n	1402c <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
   14034:	6022      	str	r2, [r4, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   14036:	6001      	str	r1, [r0, #0]
}
   14038:	bd10      	pop	{r4, pc}

0001403a <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   1403a:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(frag);

	if (!head) {
   1403c:	4604      	mov	r4, r0
   1403e:	b920      	cbnz	r0, 1404a <net_buf_frag_add+0x10>
		return net_buf_ref(frag);
   14040:	4608      	mov	r0, r1
	buf->ref++;
   14042:	790b      	ldrb	r3, [r1, #4]
   14044:	3301      	adds	r3, #1
   14046:	710b      	strb	r3, [r1, #4]
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   14048:	bd10      	pop	{r4, pc}
   1404a:	4603      	mov	r3, r0
	while (buf->frags) {
   1404c:	4618      	mov	r0, r3
   1404e:	681b      	ldr	r3, [r3, #0]
   14050:	2b00      	cmp	r3, #0
   14052:	d1fb      	bne.n	1404c <net_buf_frag_add+0x12>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   14054:	f7ff ffe6 	bl	14024 <net_buf_frag_insert>
   14058:	4620      	mov	r0, r4
   1405a:	e7f5      	b.n	14048 <net_buf_frag_add+0xe>

0001405c <net_buf_simple_add>:
	return buf->data + buf->len;
   1405c:	8883      	ldrh	r3, [r0, #4]
   1405e:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   14060:	4419      	add	r1, r3
   14062:	8081      	strh	r1, [r0, #4]
	return tail;
}
   14064:	18d0      	adds	r0, r2, r3
   14066:	4770      	bx	lr

00014068 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   14068:	b430      	push	{r4, r5}
   1406a:	8884      	ldrh	r4, [r0, #4]
   1406c:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   1406e:	18a3      	adds	r3, r4, r2
   14070:	8083      	strh	r3, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   14072:	1928      	adds	r0, r5, r4
}
   14074:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   14076:	f7fe b950 	b.w	1231a <memcpy>

0001407a <net_buf_simple_add_u8>:

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   1407a:	b510      	push	{r4, lr}
   1407c:	8883      	ldrh	r3, [r0, #4]
   1407e:	6802      	ldr	r2, [r0, #0]
	buf->len += len;
   14080:	1c5c      	adds	r4, r3, #1
   14082:	8084      	strh	r4, [r0, #4]
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   14084:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   14086:	18d0      	adds	r0, r2, r3
   14088:	bd10      	pop	{r4, pc}

0001408a <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   1408a:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   1408c:	6800      	ldr	r0, [r0, #0]
	buf->len += len;
   1408e:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   14090:	1a40      	subs	r0, r0, r1
	buf->len += len;
   14092:	4411      	add	r1, r2
	buf->data -= len;
   14094:	6018      	str	r0, [r3, #0]
	buf->len += len;
   14096:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   14098:	4770      	bx	lr

0001409a <net_buf_simple_push_u8>:
	buf->data -= len;
   1409a:	6802      	ldr	r2, [r0, #0]
   1409c:	1e53      	subs	r3, r2, #1
   1409e:	6003      	str	r3, [r0, #0]
	buf->len += len;
   140a0:	8883      	ldrh	r3, [r0, #4]
   140a2:	3301      	adds	r3, #1
   140a4:	8083      	strh	r3, [r0, #4]

void net_buf_simple_push_u8(struct net_buf_simple *buf, uint8_t val)
{
	uint8_t *data = net_buf_simple_push(buf, 1);

	*data = val;
   140a6:	f802 1c01 	strb.w	r1, [r2, #-1]
}
   140aa:	4770      	bx	lr

000140ac <net_buf_simple_pull>:

	sys_put_be64(val, net_buf_simple_push(buf, sizeof(val)));
}

void *net_buf_simple_pull(struct net_buf_simple *buf, size_t len)
{
   140ac:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   140ae:	8882      	ldrh	r2, [r0, #4]
   140b0:	1a52      	subs	r2, r2, r1
   140b2:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   140b4:	6800      	ldr	r0, [r0, #0]
   140b6:	4408      	add	r0, r1
   140b8:	6018      	str	r0, [r3, #0]
}
   140ba:	4770      	bx	lr

000140bc <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   140bc:	4603      	mov	r3, r0
	void *data = buf->data;
   140be:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   140c0:	889a      	ldrh	r2, [r3, #4]
   140c2:	1a52      	subs	r2, r2, r1
	buf->data += len;
   140c4:	4401      	add	r1, r0
	buf->len -= len;
   140c6:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   140c8:	6019      	str	r1, [r3, #0]

	return data;
}
   140ca:	4770      	bx	lr

000140cc <net_buf_simple_pull_le16>:

	return val;
}

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   140cc:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   140ce:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, sizeof(val));
   140d0:	2102      	movs	r1, #2
	val = UNALIGNED_GET((uint16_t *)buf->data);
   140d2:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   140d4:	f7ff ffea 	bl	140ac <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   140d8:	4620      	mov	r0, r4
   140da:	bd10      	pop	{r4, pc}

000140dc <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   140dc:	6802      	ldr	r2, [r0, #0]
   140de:	6880      	ldr	r0, [r0, #8]
}
   140e0:	1a10      	subs	r0, r2, r0
   140e2:	4770      	bx	lr

000140e4 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   140e4:	8883      	ldrh	r3, [r0, #4]
   140e6:	88c2      	ldrh	r2, [r0, #6]
   140e8:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   140ea:	6803      	ldr	r3, [r0, #0]
   140ec:	6880      	ldr	r0, [r0, #8]
   140ee:	1a18      	subs	r0, r3, r0
}
   140f0:	1a10      	subs	r0, r2, r0
   140f2:	4770      	bx	lr

000140f4 <gpio_fire_callbacks>:
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void gpio_fire_callbacks(sys_slist_t *list,
					const struct device *port,
					uint32_t pins)
{
   140f4:	b570      	push	{r4, r5, r6, lr}
   140f6:	460e      	mov	r6, r1
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   140f8:	6801      	ldr	r1, [r0, #0]
{
   140fa:	4615      	mov	r5, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   140fc:	b189      	cbz	r1, 14122 <gpio_fire_callbacks+0x2e>
	return node->next;
   140fe:	680c      	ldr	r4, [r1, #0]
   14100:	2c00      	cmp	r4, #0
   14102:	bf38      	it	cc
   14104:	2400      	movcc	r4, #0
		if (cb->pin_mask & pins) {
   14106:	688a      	ldr	r2, [r1, #8]
   14108:	402a      	ands	r2, r5
   1410a:	d002      	beq.n	14112 <gpio_fire_callbacks+0x1e>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   1410c:	4630      	mov	r0, r6
   1410e:	684b      	ldr	r3, [r1, #4]
   14110:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   14112:	b134      	cbz	r4, 14122 <gpio_fire_callbacks+0x2e>
   14114:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   14116:	4621      	mov	r1, r4
   14118:	2b00      	cmp	r3, #0
   1411a:	bf38      	it	cc
   1411c:	2300      	movcc	r3, #0
   1411e:	461c      	mov	r4, r3
   14120:	e7f1      	b.n	14106 <gpio_fire_callbacks+0x12>
		}
	}
}
   14122:	bd70      	pop	{r4, r5, r6, pc}

00014124 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   14124:	6843      	ldr	r3, [r0, #4]
}
   14126:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   14128:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   1412a:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   1412c:	600b      	str	r3, [r1, #0]
}
   1412e:	4770      	bx	lr

00014130 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   14130:	6843      	ldr	r3, [r0, #4]
   14132:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   14134:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   14136:	4042      	eors	r2, r0
   14138:	400a      	ands	r2, r1
   1413a:	4042      	eors	r2, r0
    p_reg->OUT = value;
   1413c:	605a      	str	r2, [r3, #4]
}
   1413e:	2000      	movs	r0, #0
   14140:	4770      	bx	lr

00014142 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   14142:	6843      	ldr	r3, [r0, #4]
}
   14144:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   14146:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   14148:	6099      	str	r1, [r3, #8]
}
   1414a:	4770      	bx	lr

0001414c <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1414c:	6843      	ldr	r3, [r0, #4]
}
   1414e:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   14150:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   14152:	60d9      	str	r1, [r3, #12]
}
   14154:	4770      	bx	lr

00014156 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   14156:	6843      	ldr	r3, [r0, #4]
}
   14158:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1415a:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   1415c:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
   1415e:	404b      	eors	r3, r1
    p_reg->OUT = value;
   14160:	6053      	str	r3, [r2, #4]
}
   14162:	4770      	bx	lr

00014164 <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   14164:	68c3      	ldr	r3, [r0, #12]
{
   14166:	b530      	push	{r4, r5, lr}
Z_GENLIST_IS_EMPTY(slist)
   14168:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
   1416a:	b158      	cbz	r0, 14184 <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1416c:	2400      	movs	r4, #0
   1416e:	4281      	cmp	r1, r0
   14170:	d113      	bne.n	1419a <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
   14172:	6808      	ldr	r0, [r1, #0]
   14174:	b95c      	cbnz	r4, 1418e <gpio_nrfx_manage_callback+0x2a>
   14176:	689c      	ldr	r4, [r3, #8]
	list->head = node;
   14178:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   1417a:	42a1      	cmp	r1, r4
   1417c:	d100      	bne.n	14180 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   1417e:	6098      	str	r0, [r3, #8]
	parent->next = child;
   14180:	2000      	movs	r0, #0
   14182:	6008      	str	r0, [r1, #0]
	if (set) {
   14184:	b972      	cbnz	r2, 141a4 <gpio_nrfx_manage_callback+0x40>
	return 0;
   14186:	2000      	movs	r0, #0
}
   14188:	bd30      	pop	{r4, r5, pc}
   1418a:	4628      	mov	r0, r5
   1418c:	e7ef      	b.n	1416e <gpio_nrfx_manage_callback+0xa>
   1418e:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   14190:	6898      	ldr	r0, [r3, #8]
   14192:	4281      	cmp	r1, r0
	list->tail = node;
   14194:	bf08      	it	eq
   14196:	609c      	streq	r4, [r3, #8]
}
   14198:	e7f2      	b.n	14180 <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1419a:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1419c:	4604      	mov	r4, r0
   1419e:	2d00      	cmp	r5, #0
   141a0:	d1f3      	bne.n	1418a <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   141a2:	b13a      	cbz	r2, 141b4 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
   141a4:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   141a6:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   141a8:	6898      	ldr	r0, [r3, #8]
	list->head = node;
   141aa:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   141ac:	2800      	cmp	r0, #0
   141ae:	d1ea      	bne.n	14186 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   141b0:	6099      	str	r1, [r3, #8]
}
   141b2:	e7e9      	b.n	14188 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   141b4:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   141b8:	e7e6      	b.n	14188 <gpio_nrfx_manage_callback+0x24>

000141ba <check_level_trigger_pins>:
{
   141ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t bit = 1U << pin;
   141be:	2601      	movs	r6, #1
	uint32_t pin = 0U;
   141c0:	2700      	movs	r7, #0
	struct gpio_nrfx_data *data = get_port_data(port);
   141c2:	68c3      	ldr	r3, [r0, #12]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   141c4:	f8d0 8004 	ldr.w	r8, [r0, #4]
	uint32_t out = data->pin_int_en;
   141c8:	68dc      	ldr	r4, [r3, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   141ca:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
   141ce:	430a      	orrs	r2, r1
   141d0:	ea24 0402 	bic.w	r4, r4, r2
	uint32_t port_in = nrf_gpio_port_in_read(cfg->port);
   141d4:	f8d8 2004 	ldr.w	r2, [r8, #4]
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   141d8:	691b      	ldr	r3, [r3, #16]
    return p_reg->IN;
   141da:	6915      	ldr	r5, [r2, #16]
   141dc:	405d      	eors	r5, r3
	uint32_t out = pin_states & level_pins;
   141de:	ea24 0505 	bic.w	r5, r4, r5
	while (level_pins) {
   141e2:	b914      	cbnz	r4, 141ea <check_level_trigger_pins+0x30>
}
   141e4:	4628      	mov	r0, r5
   141e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   141ea:	4234      	tst	r4, r6
   141ec:	d00a      	beq.n	14204 <check_level_trigger_pins+0x4a>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   141ee:	f898 3008 	ldrb.w	r3, [r8, #8]
   141f2:	f007 001f 	and.w	r0, r7, #31
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   141f6:	2100      	movs	r1, #0
   141f8:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
   141fc:	f7f9 f8d0 	bl	d3a0 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   14200:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   14204:	3701      	adds	r7, #1
		bit <<= 1;
   14206:	0076      	lsls	r6, r6, #1
   14208:	e7eb      	b.n	141e2 <check_level_trigger_pins+0x28>

0001420a <cfg_level_pins>:
{
   1420a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t bit = 1U << pin;
   1420e:	2601      	movs	r6, #1
	uint32_t pin = 0U;
   14210:	2500      	movs	r5, #0
	const struct gpio_nrfx_data *data = get_port_data(port);
   14212:	68c7      	ldr	r7, [r0, #12]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   14214:	f8d0 8004 	ldr.w	r8, [r0, #4]
	uint32_t out = data->pin_int_en;
   14218:	68fc      	ldr	r4, [r7, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   1421a:	e9d7 3205 	ldrd	r3, r2, [r7, #20]
   1421e:	4313      	orrs	r3, r2
   14220:	ea24 0403 	bic.w	r4, r4, r3
	while (level_pins) {
   14224:	b90c      	cbnz	r4, 1422a <cfg_level_pins+0x20>
}
   14226:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   1422a:	4226      	tst	r6, r4
   1422c:	d010      	beq.n	14250 <cfg_level_pins+0x46>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1422e:	6939      	ldr	r1, [r7, #16]
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   14230:	f898 3008 	ldrb.w	r3, [r8, #8]
	if ((BIT(pin) & data->int_active_level) != 0U) {
   14234:	40e9      	lsrs	r1, r5
   14236:	f001 0101 	and.w	r1, r1, #1
   1423a:	f1c1 0103 	rsb	r1, r1, #3
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1423e:	f005 001f 	and.w	r0, r5, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   14242:	b2c9      	uxtb	r1, r1
   14244:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
   14248:	f7f9 f8aa 	bl	d3a0 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   1424c:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   14250:	3501      	adds	r5, #1
		bit <<= 1;
   14252:	0076      	lsls	r6, r6, #1
   14254:	e7e6      	b.n	14224 <cfg_level_pins+0x1a>

00014256 <vipm_nrf_max_data_size_get>:
static inline int z_impl_ipm_max_data_size_get(const struct device *ipmdev)
{
	const struct ipm_driver_api *api =
		(const struct ipm_driver_api *)ipmdev->api;

	return api->max_data_size_get(ipmdev);
   14256:	6883      	ldr	r3, [r0, #8]
   14258:	689b      	ldr	r3, [r3, #8]
   1425a:	4718      	bx	r3

0001425c <vipm_nrf_max_id_val_get>:
}
   1425c:	2000      	movs	r0, #0
   1425e:	4770      	bx	lr

00014260 <vipm_nrf_1_set_enabled>:
UTIL_LISTIFY(NRFX_IPC_ID_MAX_VALUE, VIPM_DEVICE, _);
   14260:	b508      	push	{r3, lr}
   14262:	b139      	cbz	r1, 14274 <vipm_nrf_1_set_enabled+0x14>
   14264:	202a      	movs	r0, #42	; 0x2a
   14266:	f7ef ff11 	bl	408c <arch_irq_enable>
   1426a:	2001      	movs	r0, #1
   1426c:	f7f9 ffe0 	bl	e230 <nrfx_ipc_receive_event_enable>
   14270:	2000      	movs	r0, #0
   14272:	bd08      	pop	{r3, pc}
   14274:	2001      	movs	r0, #1
   14276:	f7f9 ffe3 	bl	e240 <nrfx_ipc_receive_event_disable>
   1427a:	e7f9      	b.n	14270 <vipm_nrf_1_set_enabled+0x10>

0001427c <flash_nrf_write_protection>:
}
   1427c:	2000      	movs	r0, #0
   1427e:	4770      	bx	lr

00014280 <is_regular_addr_valid>:
{
   14280:	b538      	push	{r3, r4, r5, lr}
   14282:	4604      	mov	r4, r0
   14284:	460d      	mov	r5, r1
	size_t flash_size = nrfx_nvmc_flash_size_get();
   14286:	f000 f8eb 	bl	14460 <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
   1428a:	4284      	cmp	r4, r0
   1428c:	d209      	bcs.n	142a2 <is_regular_addr_valid+0x22>
   1428e:	2c00      	cmp	r4, #0
   14290:	db07      	blt.n	142a2 <is_regular_addr_valid+0x22>
	    addr < 0 ||
   14292:	42a8      	cmp	r0, r5
   14294:	d305      	bcc.n	142a2 <is_regular_addr_valid+0x22>
	    (addr) + len > flash_size) {
   14296:	442c      	add	r4, r5
	    len > flash_size ||
   14298:	4284      	cmp	r4, r0
   1429a:	bf8c      	ite	hi
   1429c:	2000      	movhi	r0, #0
   1429e:	2001      	movls	r0, #1
}
   142a0:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   142a2:	2000      	movs	r0, #0
   142a4:	e7fc      	b.n	142a0 <is_regular_addr_valid+0x20>

000142a6 <flash_get_page_info>:

#include <drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
				   bool use_addr, struct flash_pages_info *info)
{
   142a6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   142aa:	461e      	mov	r6, r3
	off_t group_offs = 0;
	uint32_t num_in_group;
	off_t end = 0;
	size_t layout_size;

	api->page_layout(dev, &layout, &layout_size);
   142ac:	6883      	ldr	r3, [r0, #8]
{
   142ae:	460c      	mov	r4, r1
	api->page_layout(dev, &layout, &layout_size);
   142b0:	695b      	ldr	r3, [r3, #20]
   142b2:	4669      	mov	r1, sp
{
   142b4:	4617      	mov	r7, r2
	api->page_layout(dev, &layout, &layout_size);
   142b6:	aa01      	add	r2, sp, #4
   142b8:	4798      	blx	r3

	while (layout_size--) {
   142ba:	e9dd 1000 	ldrd	r1, r0, [sp]
   142be:	2300      	movs	r3, #0
	off_t end = 0;
   142c0:	461d      	mov	r5, r3
	off_t group_offs = 0;
   142c2:	469e      	mov	lr, r3
	size_t page_count = 0;
   142c4:	469c      	mov	ip, r3
   142c6:	f100 38ff 	add.w	r8, r0, #4294967295
	while (layout_size--) {
   142ca:	f1b8 3fff 	cmp.w	r8, #4294967295
   142ce:	d102      	bne.n	142d6 <flash_get_page_info+0x30>
		page_count += layout->pages_count;

		layout++;
	}

	return -EINVAL; /* page of the index doesn't exist */
   142d0:	f06f 0015 	mvn.w	r0, #21
   142d4:	e018      	b.n	14308 <flash_get_page_info+0x62>
		if (use_addr) {
   142d6:	680a      	ldr	r2, [r1, #0]
   142d8:	b1cf      	cbz	r7, 1430e <flash_get_page_info+0x68>
			end += layout->pages_count * layout->pages_size;
   142da:	6848      	ldr	r0, [r1, #4]
   142dc:	fb00 5502 	mla	r5, r0, r2, r5
		if (offs < end) {
   142e0:	42a5      	cmp	r5, r4
   142e2:	f108 38ff 	add.w	r8, r8, #4294967295
   142e6:	dd17      	ble.n	14318 <flash_get_page_info+0x72>
   142e8:	b103      	cbz	r3, 142ec <flash_get_page_info+0x46>
   142ea:	9100      	str	r1, [sp, #0]
			info->size = layout->pages_size;
   142ec:	9b00      	ldr	r3, [sp, #0]
   142ee:	685b      	ldr	r3, [r3, #4]
   142f0:	6073      	str	r3, [r6, #4]
			if (use_addr) {
   142f2:	b177      	cbz	r7, 14312 <flash_get_page_info+0x6c>
				num_in_group = (offs - group_offs) /
   142f4:	eba4 040e 	sub.w	r4, r4, lr
   142f8:	fbb4 f4f3 	udiv	r4, r4, r3
			return 0;
   142fc:	2000      	movs	r0, #0
			info->start_offset = group_offs +
   142fe:	fb04 e303 	mla	r3, r4, r3, lr
			info->index = page_count + num_in_group;
   14302:	4464      	add	r4, ip
			info->start_offset = group_offs +
   14304:	6033      	str	r3, [r6, #0]
			info->index = page_count + num_in_group;
   14306:	60b4      	str	r4, [r6, #8]
}
   14308:	b002      	add	sp, #8
   1430a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			end += layout->pages_count;
   1430e:	4415      	add	r5, r2
   14310:	e7e6      	b.n	142e0 <flash_get_page_info+0x3a>
				num_in_group = offs - page_count;
   14312:	eba4 040c 	sub.w	r4, r4, ip
   14316:	e7f1      	b.n	142fc <flash_get_page_info+0x56>
		group_offs += layout->pages_count * layout->pages_size;
   14318:	684b      	ldr	r3, [r1, #4]
		page_count += layout->pages_count;
   1431a:	4494      	add	ip, r2
		group_offs += layout->pages_count * layout->pages_size;
   1431c:	fb03 ee02 	mla	lr, r3, r2, lr
		layout++;
   14320:	3108      	adds	r1, #8
   14322:	2301      	movs	r3, #1
   14324:	e7d1      	b.n	142ca <flash_get_page_info+0x24>

00014326 <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
   14326:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, true, info);
   14328:	2201      	movs	r2, #1
   1432a:	f7ff bfbc 	b.w	142a6 <flash_get_page_info>

0001432e <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
   1432e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_driver_api *api = dev->api;
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;
   14332:	2400      	movs	r4, #0

	api->page_layout(dev, &layout, &num_blocks);
   14334:	6883      	ldr	r3, [r0, #8]
{
   14336:	b086      	sub	sp, #24
   14338:	4688      	mov	r8, r1
   1433a:	4691      	mov	r9, r2
	api->page_layout(dev, &layout, &num_blocks);
   1433c:	695b      	ldr	r3, [r3, #20]
   1433e:	aa02      	add	r2, sp, #8
   14340:	a901      	add	r1, sp, #4
   14342:	4798      	blx	r3
	size_t block, num_blocks, page = 0, i;
   14344:	46a2      	mov	sl, r4

	for (block = 0; block < num_blocks; block++) {
   14346:	4625      	mov	r5, r4
   14348:	9b02      	ldr	r3, [sp, #8]
   1434a:	42ab      	cmp	r3, r5
   1434c:	d802      	bhi.n	14354 <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
   1434e:	b006      	add	sp, #24
   14350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for (i = 0; i < l->pages_count; i++) {
   14354:	2600      	movs	r6, #0
		const struct flash_pages_layout *l = &layout[block];
   14356:	9f01      	ldr	r7, [sp, #4]
   14358:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		page_info.size = l->pages_size;
   1435c:	687b      	ldr	r3, [r7, #4]
   1435e:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   14360:	683a      	ldr	r2, [r7, #0]
   14362:	eb0a 0306 	add.w	r3, sl, r6
   14366:	42b2      	cmp	r2, r6
   14368:	d802      	bhi.n	14370 <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
   1436a:	469a      	mov	sl, r3
   1436c:	3501      	adds	r5, #1
   1436e:	e7eb      	b.n	14348 <flash_page_foreach+0x1a>
			if (!cb(&page_info, data)) {
   14370:	4649      	mov	r1, r9
   14372:	a803      	add	r0, sp, #12
			page_info.start_offset = off;
   14374:	9403      	str	r4, [sp, #12]
			page_info.index = page;
   14376:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
   14378:	47c0      	blx	r8
   1437a:	2800      	cmp	r0, #0
   1437c:	d0e7      	beq.n	1434e <flash_page_foreach+0x20>
			off += page_info.size;
   1437e:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   14380:	3601      	adds	r6, #1
			off += page_info.size;
   14382:	441c      	add	r4, r3
		for (i = 0; i < l->pages_count; i++) {
   14384:	e7ec      	b.n	14360 <flash_page_foreach+0x32>

00014386 <uarte_nrfx_isr_int>:
	return config->uarte_regs;
   14386:	6843      	ldr	r3, [r0, #4]
   14388:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
   1438a:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   1438e:	05d2      	lsls	r2, r2, #23
   14390:	d518      	bpl.n	143c4 <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14392:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
   14396:	b1aa      	cbz	r2, 143c4 <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
   14398:	f04f 0120 	mov.w	r1, #32
   1439c:	f3ef 8211 	mrs	r2, BASEPRI
   143a0:	f381 8811 	msr	BASEPRI, r1
   143a4:	f3bf 8f6f 	isb	sy
   143a8:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   143ac:	b131      	cbz	r1, 143bc <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   143ae:	2100      	movs	r1, #0
   143b0:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   143b4:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   143b8:	2101      	movs	r1, #1
   143ba:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   143bc:	f382 8811 	msr	BASEPRI, r2
   143c0:	f3bf 8f6f 	isb	sy
}
   143c4:	4770      	bx	lr

000143c6 <uarte_nrfx_config_get>:
{
   143c6:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   143c8:	68c2      	ldr	r2, [r0, #12]
   143ca:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   143ce:	e883 0003 	stmia.w	r3, {r0, r1}
}
   143d2:	2000      	movs	r0, #0
   143d4:	4770      	bx	lr

000143d6 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   143d6:	6843      	ldr	r3, [r0, #4]
   143d8:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   143da:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   143de:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   143e2:	4770      	bx	lr

000143e4 <is_tx_ready>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   143e4:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   143e6:	6813      	ldr	r3, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   143e8:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   143ec:	b938      	cbnz	r0, 143fe <is_tx_ready+0x1a>
   143ee:	7992      	ldrb	r2, [r2, #6]
   143f0:	b932      	cbnz	r2, 14400 <is_tx_ready+0x1c>
   143f2:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
   143f6:	3800      	subs	r0, #0
   143f8:	bf18      	it	ne
   143fa:	2001      	movne	r0, #1
   143fc:	4770      	bx	lr
   143fe:	2001      	movs	r0, #1
}
   14400:	4770      	bx	lr

00014402 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   14402:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   14404:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
   14406:	681b      	ldr	r3, [r3, #0]
   14408:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1440c:	b148      	cbz	r0, 14422 <uarte_nrfx_poll_in+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1440e:	2000      	movs	r0, #0
	*c = data->rx_data;
   14410:	7c52      	ldrb	r2, [r2, #17]
   14412:	700a      	strb	r2, [r1, #0]
   14414:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   14418:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1441c:	2201      	movs	r2, #1
   1441e:	601a      	str	r2, [r3, #0]
	return 0;
   14420:	4770      	bx	lr
		return -1;
   14422:	f04f 30ff 	mov.w	r0, #4294967295
}
   14426:	4770      	bx	lr

00014428 <hw_cc3xx_init>:
#include <nrf_cc3xx_platform.h>

#if CONFIG_HW_CC3XX

static int hw_cc3xx_init(const struct device *dev)
{
   14428:	b508      	push	{r3, lr}
	int res;

	__ASSERT_NO_MSG(dev != NULL);

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
   1442a:	f7ef fb2b 	bl	3a84 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
   1442e:	f7ef fbef 	bl	3c10 <nrf_cc3xx_platform_mutex_init>
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
#endif
	return res;
}
   14432:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
   14436:	f7fb bde9 	b.w	1000c <nrf_cc3xx_platform_init_no_rng>

0001443a <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   1443a:	4700      	bx	r0

0001443c <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   1443c:	f000 be8b 	b.w	15156 <z_impl_k_busy_wait>

00014440 <nrfx_clock_enable>:
{
   14440:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   14442:	2005      	movs	r0, #5
   14444:	f7ef fe32 	bl	40ac <arch_irq_is_enabled>
   14448:	b910      	cbnz	r0, 14450 <nrfx_clock_enable+0x10>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   1444a:	2005      	movs	r0, #5
   1444c:	f7ef fe1e 	bl	408c <arch_irq_enable>
}

#if NRF_CLOCK_HAS_HFCLKSRC
NRF_STATIC_INLINE void nrf_clock_hf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLKSRC = (uint32_t)(source);
   14450:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   14454:	2201      	movs	r2, #1
   14456:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
                                   >> CLOCK_HFCLK192MCTRL_HCLK192M_Pos);
}

NRF_STATIC_INLINE void nrf_clock_hfclk192m_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLK192MSRC = (uint32_t)(source);
   1445a:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
}
   1445e:	bd08      	pop	{r3, pc}

00014460 <nrfx_nvmc_flash_size_get>:
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   14460:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   14464:	4770      	bx	lr

00014466 <nrfx_nvmc_flash_page_size_get>:

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   14466:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   1446a:	4770      	bx	lr

0001446c <nrfx_nvmc_flash_page_count_get>:

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   1446c:	f44f 7080 	mov.w	r0, #256	; 0x100
   14470:	4770      	bx	lr

00014472 <metal_device_open>:
{
   14472:	b573      	push	{r0, r1, r4, r5, r6, lr}
   14474:	460c      	mov	r4, r1
   14476:	4615      	mov	r5, r2
	if (!bus_name || !strlen(bus_name) ||
   14478:	4606      	mov	r6, r0
   1447a:	b918      	cbnz	r0, 14484 <metal_device_open+0x12>
		return -EINVAL;
   1447c:	f06f 0015 	mvn.w	r0, #21
}
   14480:	b002      	add	sp, #8
   14482:	bd70      	pop	{r4, r5, r6, pc}
	if (!bus_name || !strlen(bus_name) ||
   14484:	f7fd ff0e 	bl	122a4 <strlen>
   14488:	2800      	cmp	r0, #0
   1448a:	d0f7      	beq.n	1447c <metal_device_open+0xa>
   1448c:	2c00      	cmp	r4, #0
   1448e:	d0f5      	beq.n	1447c <metal_device_open+0xa>
	    !dev_name || !strlen(dev_name) ||
   14490:	4620      	mov	r0, r4
   14492:	f7fd ff07 	bl	122a4 <strlen>
   14496:	2800      	cmp	r0, #0
   14498:	d0f0      	beq.n	1447c <metal_device_open+0xa>
   1449a:	2d00      	cmp	r5, #0
   1449c:	d0ee      	beq.n	1447c <metal_device_open+0xa>
	error = metal_bus_find(bus_name, &bus);
   1449e:	4630      	mov	r0, r6
   144a0:	a901      	add	r1, sp, #4
   144a2:	f7f9 ff4f 	bl	e344 <metal_bus_find>
	if (error)
   144a6:	2800      	cmp	r0, #0
   144a8:	d1ea      	bne.n	14480 <metal_device_open+0xe>
	if (!bus->ops.dev_open)
   144aa:	9801      	ldr	r0, [sp, #4]
   144ac:	6883      	ldr	r3, [r0, #8]
   144ae:	b11b      	cbz	r3, 144b8 <metal_device_open+0x46>
	error = (*bus->ops.dev_open)(bus, dev_name, device);
   144b0:	462a      	mov	r2, r5
   144b2:	4621      	mov	r1, r4
   144b4:	4798      	blx	r3
	if (error)
   144b6:	e7e3      	b.n	14480 <metal_device_open+0xe>
		return -ENODEV;
   144b8:	f06f 0012 	mvn.w	r0, #18
   144bc:	e7e0      	b.n	14480 <metal_device_open+0xe>

000144be <metal_io_block_read>:
	metal_sys_io_mem_map(io);
}

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
   144be:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return (io->virt != METAL_BAD_VA && offset < io->size
   144c0:	6804      	ldr	r4, [r0, #0]
   144c2:	6885      	ldr	r5, [r0, #8]
		: NULL);
   144c4:	1c66      	adds	r6, r4, #1
   144c6:	d00f      	beq.n	144e8 <metal_io_block_read+0x2a>
	return (io->virt != METAL_BAD_VA && offset < io->size
   144c8:	42a9      	cmp	r1, r5
   144ca:	d232      	bcs.n	14532 <metal_io_block_read+0x74>
		: NULL);
   144cc:	440c      	add	r4, r1
	unsigned char *dest = dst;
	int retlen;

	if (offset >= io->size)
		return -ERANGE;
	if ((offset + len) > io->size)
   144ce:	185e      	adds	r6, r3, r1
   144d0:	42ae      	cmp	r6, r5
		len = io->size - offset;
   144d2:	bf88      	it	hi
   144d4:	1a6b      	subhi	r3, r5, r1
	retlen = len;
	if (io->ops.block_read) {
   144d6:	6a05      	ldr	r5, [r0, #32]
   144d8:	b155      	cbz	r5, 144f0 <metal_io_block_read+0x32>
		retlen = (*io->ops.block_read)(
   144da:	9300      	str	r3, [sp, #0]
   144dc:	2305      	movs	r3, #5
   144de:	47a8      	blx	r5
   144e0:	4603      	mov	r3, r0
		for (; len != 0; dest++, ptr++, len--)
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
	}
	return retlen;
}
   144e2:	4618      	mov	r0, r3
   144e4:	b002      	add	sp, #8
   144e6:	bd70      	pop	{r4, r5, r6, pc}
	if (offset >= io->size)
   144e8:	42a9      	cmp	r1, r5
   144ea:	d222      	bcs.n	14532 <metal_io_block_read+0x74>
   144ec:	2400      	movs	r4, #0
   144ee:	e7ee      	b.n	144ce <metal_io_block_read+0x10>
		atomic_thread_fence(memory_order_seq_cst);
   144f0:	f3bf 8f5b 	dmb	ish
		while ( len && (
   144f4:	4621      	mov	r1, r4
   144f6:	4618      	mov	r0, r3
   144f8:	2800      	cmp	r0, #0
   144fa:	d0f2      	beq.n	144e2 <metal_io_block_read+0x24>
			((uintptr_t)dest % sizeof(int)) ||
   144fc:	ea42 0401 	orr.w	r4, r2, r1
   14500:	07a4      	lsls	r4, r4, #30
   14502:	d10a      	bne.n	1451a <metal_io_block_read+0x5c>
		for (; len >= (int)sizeof(int); dest += sizeof(int),
   14504:	2803      	cmp	r0, #3
   14506:	dc0e      	bgt.n	14526 <metal_io_block_read+0x68>
   14508:	3901      	subs	r1, #1
   1450a:	4410      	add	r0, r2
		for (; len != 0; dest++, ptr++, len--)
   1450c:	4282      	cmp	r2, r0
   1450e:	d0e8      	beq.n	144e2 <metal_io_block_read+0x24>
				*(const unsigned char *)ptr;
   14510:	f811 4f01 	ldrb.w	r4, [r1, #1]!
			*(unsigned char *)dest =
   14514:	f802 4b01 	strb.w	r4, [r2], #1
		for (; len != 0; dest++, ptr++, len--)
   14518:	e7f8      	b.n	1450c <metal_io_block_read+0x4e>
				*(const unsigned char *)ptr;
   1451a:	f811 4b01 	ldrb.w	r4, [r1], #1
			len--;
   1451e:	3801      	subs	r0, #1
			*(unsigned char *)dest =
   14520:	f802 4b01 	strb.w	r4, [r2], #1
			len--;
   14524:	e7e8      	b.n	144f8 <metal_io_block_read+0x3a>
			*(unsigned int *)dest = *(const unsigned int *)ptr;
   14526:	f851 4b04 	ldr.w	r4, [r1], #4
   1452a:	3804      	subs	r0, #4
   1452c:	f842 4b04 	str.w	r4, [r2], #4
		for (; len >= (int)sizeof(int); dest += sizeof(int),
   14530:	e7e8      	b.n	14504 <metal_io_block_read+0x46>
		return -ERANGE;
   14532:	f06f 0325 	mvn.w	r3, #37	; 0x25
   14536:	e7d4      	b.n	144e2 <metal_io_block_read+0x24>

00014538 <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
   14538:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return (io->virt != METAL_BAD_VA && offset < io->size
   1453a:	6804      	ldr	r4, [r0, #0]
   1453c:	6885      	ldr	r5, [r0, #8]
		: NULL);
   1453e:	1c66      	adds	r6, r4, #1
   14540:	d00e      	beq.n	14560 <metal_io_block_write+0x28>
	return (io->virt != METAL_BAD_VA && offset < io->size
   14542:	42a9      	cmp	r1, r5
   14544:	d230      	bcs.n	145a8 <metal_io_block_write+0x70>
		: NULL);
   14546:	440c      	add	r4, r1
	const unsigned char *source = src;
	int retlen;

	if (offset >= io->size)
		return -ERANGE;
	if ((offset + len) > io->size)
   14548:	185e      	adds	r6, r3, r1
   1454a:	42ae      	cmp	r6, r5
		len = io->size - offset;
   1454c:	bf88      	it	hi
   1454e:	1a6b      	subhi	r3, r5, r1
	retlen = len;
	if (io->ops.block_write) {
   14550:	6a45      	ldr	r5, [r0, #36]	; 0x24
   14552:	b94d      	cbnz	r5, 14568 <metal_io_block_write+0x30>
   14554:	4619      	mov	r1, r3
		retlen = (*io->ops.block_write)(
			io, offset, src, memory_order_seq_cst, len);
	} else {
		while ( len && (
   14556:	b991      	cbnz	r1, 1457e <metal_io_block_write+0x46>
					len -= sizeof(int))
			*(unsigned int *)ptr = *(const unsigned int *)source;
		for (; len != 0; ptr++, source++, len--)
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
		atomic_thread_fence(memory_order_seq_cst);
   14558:	f3bf 8f5b 	dmb	ish
	retlen = len;
   1455c:	4618      	mov	r0, r3
   1455e:	e006      	b.n	1456e <metal_io_block_write+0x36>
	if (offset >= io->size)
   14560:	42a9      	cmp	r1, r5
   14562:	d221      	bcs.n	145a8 <metal_io_block_write+0x70>
   14564:	2400      	movs	r4, #0
   14566:	e7ef      	b.n	14548 <metal_io_block_write+0x10>
		retlen = (*io->ops.block_write)(
   14568:	9300      	str	r3, [sp, #0]
   1456a:	2305      	movs	r3, #5
   1456c:	47a8      	blx	r5
	}
	return retlen;
}
   1456e:	b002      	add	sp, #8
   14570:	bd70      	pop	{r4, r5, r6, pc}
				*(const unsigned char *)source;
   14572:	f812 0b01 	ldrb.w	r0, [r2], #1
			len--;
   14576:	3901      	subs	r1, #1
			*(unsigned char *)ptr =
   14578:	f804 0b01 	strb.w	r0, [r4], #1
			len--;
   1457c:	e7eb      	b.n	14556 <metal_io_block_write+0x1e>
			((uintptr_t)ptr % sizeof(int)) ||
   1457e:	ea44 0002 	orr.w	r0, r4, r2
   14582:	0780      	lsls	r0, r0, #30
   14584:	d1f5      	bne.n	14572 <metal_io_block_write+0x3a>
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   14586:	2903      	cmp	r1, #3
   14588:	dc08      	bgt.n	1459c <metal_io_block_write+0x64>
   1458a:	3a01      	subs	r2, #1
   1458c:	4421      	add	r1, r4
		for (; len != 0; ptr++, source++, len--)
   1458e:	428c      	cmp	r4, r1
   14590:	d0e2      	beq.n	14558 <metal_io_block_write+0x20>
				*(const unsigned char *)source;
   14592:	f812 0f01 	ldrb.w	r0, [r2, #1]!
			*(unsigned char *)ptr =
   14596:	f804 0b01 	strb.w	r0, [r4], #1
		for (; len != 0; ptr++, source++, len--)
   1459a:	e7f8      	b.n	1458e <metal_io_block_write+0x56>
			*(unsigned int *)ptr = *(const unsigned int *)source;
   1459c:	f852 0b04 	ldr.w	r0, [r2], #4
   145a0:	3904      	subs	r1, #4
   145a2:	f844 0b04 	str.w	r0, [r4], #4
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   145a6:	e7ee      	b.n	14586 <metal_io_block_write+0x4e>
		return -ERANGE;
   145a8:	f06f 0025 	mvn.w	r0, #37	; 0x25
   145ac:	e7df      	b.n	1456e <metal_io_block_write+0x36>

000145ae <metal_io_block_set>:

int metal_io_block_set(struct metal_io_region *io, unsigned long offset,
	       unsigned char value, int len)
{
   145ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return (io->virt != METAL_BAD_VA && offset < io->size
   145b0:	6804      	ldr	r4, [r0, #0]
   145b2:	461d      	mov	r5, r3
		: NULL);
   145b4:	1c66      	adds	r6, r4, #1
   145b6:	6883      	ldr	r3, [r0, #8]
   145b8:	d00e      	beq.n	145d8 <metal_io_block_set+0x2a>
	return (io->virt != METAL_BAD_VA && offset < io->size
   145ba:	4299      	cmp	r1, r3
   145bc:	d22d      	bcs.n	1461a <metal_io_block_set+0x6c>
		: NULL);
   145be:	440c      	add	r4, r1
	unsigned char *ptr = metal_io_virt(io, offset);
	int retlen = len;

	if (offset >= io->size)
		return -ERANGE;
	if ((offset + len) > io->size)
   145c0:	186e      	adds	r6, r5, r1
   145c2:	429e      	cmp	r6, r3
		len = io->size - offset;
	retlen = len;
	if (io->ops.block_set) {
   145c4:	6a86      	ldr	r6, [r0, #40]	; 0x28
		len = io->size - offset;
   145c6:	bf88      	it	hi
   145c8:	1a5d      	subhi	r5, r3, r1
	if (io->ops.block_set) {
   145ca:	b186      	cbz	r6, 145ee <metal_io_block_set+0x40>
		(*io->ops.block_set)(
   145cc:	2305      	movs	r3, #5
   145ce:	9500      	str	r5, [sp, #0]
   145d0:	47b0      	blx	r6
		for (; len != 0; ptr++, len--)
			*(unsigned char *)ptr = (unsigned char) value;
		atomic_thread_fence(memory_order_seq_cst);
	}
	return retlen;
}
   145d2:	4628      	mov	r0, r5
   145d4:	b002      	add	sp, #8
   145d6:	bd70      	pop	{r4, r5, r6, pc}
	if (offset >= io->size)
   145d8:	4299      	cmp	r1, r3
   145da:	d21e      	bcs.n	1461a <metal_io_block_set+0x6c>
   145dc:	2400      	movs	r4, #0
   145de:	e7ef      	b.n	145c0 <metal_io_block_set+0x12>
			*(unsigned char *)ptr = (unsigned char) value;
   145e0:	f804 2b01 	strb.w	r2, [r4], #1
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
   145e4:	3b01      	subs	r3, #1
   145e6:	b923      	cbnz	r3, 145f2 <metal_io_block_set+0x44>
		atomic_thread_fence(memory_order_seq_cst);
   145e8:	f3bf 8f5b 	dmb	ish
   145ec:	e7f1      	b.n	145d2 <metal_io_block_set+0x24>
   145ee:	462b      	mov	r3, r5
   145f0:	e7f9      	b.n	145e6 <metal_io_block_set+0x38>
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
   145f2:	07a1      	lsls	r1, r4, #30
   145f4:	d1f4      	bne.n	145e0 <metal_io_block_set+0x32>
			cint |= ((unsigned int)value << (CHAR_BIT * i));
   145f6:	0611      	lsls	r1, r2, #24
   145f8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   145fc:	4311      	orrs	r1, r2
   145fe:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   14602:	2b03      	cmp	r3, #3
   14604:	dc05      	bgt.n	14612 <metal_io_block_set+0x64>
   14606:	4423      	add	r3, r4
		for (; len != 0; ptr++, len--)
   14608:	429c      	cmp	r4, r3
   1460a:	d0ed      	beq.n	145e8 <metal_io_block_set+0x3a>
			*(unsigned char *)ptr = (unsigned char) value;
   1460c:	f804 2b01 	strb.w	r2, [r4], #1
		for (; len != 0; ptr++, len--)
   14610:	e7fa      	b.n	14608 <metal_io_block_set+0x5a>
			*(unsigned int *)ptr = cint;
   14612:	f844 1b04 	str.w	r1, [r4], #4
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   14616:	3b04      	subs	r3, #4
   14618:	e7f3      	b.n	14602 <metal_io_block_set+0x54>
		return -ERANGE;
   1461a:	f06f 0525 	mvn.w	r5, #37	; 0x25
   1461e:	e7d8      	b.n	145d2 <metal_io_block_set+0x24>

00014620 <metal_generic_dev_sys_open>:

	/* Since Zephyr runs bare-metal there is no mapping that needs to be
	 * done of IO regions
	 */
	return 0;
}
   14620:	2000      	movs	r0, #0
   14622:	4770      	bx	lr

00014624 <metal_io_phys>:
 * @return	METAL_BAD_PHYS if offset is out of range, or physical address
 *		of offset.
 */
static inline metal_phys_addr_t
metal_io_phys(struct metal_io_region *io, unsigned long offset)
{
   14624:	b430      	push	{r4, r5}
	if (!io->ops.offset_to_phys) {
   14626:	6b04      	ldr	r4, [r0, #48]	; 0x30
{
   14628:	460b      	mov	r3, r1
	if (!io->ops.offset_to_phys) {
   1462a:	b984      	cbnz	r4, 1464e <metal_io_phys+0x2a>
		unsigned long page = (io->page_shift >=
   1462c:	68c1      	ldr	r1, [r0, #12]
				     sizeof(offset) * CHAR_BIT ?
				     0 : offset >> io->page_shift);
		return (io->physmap && offset < io->size
   1462e:	6845      	ldr	r5, [r0, #4]
				     0 : offset >> io->page_shift);
   14630:	291f      	cmp	r1, #31
   14632:	bf98      	it	ls
   14634:	fa23 f401 	lsrls.w	r4, r3, r1
			? io->physmap[page] + (offset & io->page_mask)
			: METAL_BAD_PHYS);
   14638:	b165      	cbz	r5, 14654 <metal_io_phys+0x30>
		return (io->physmap && offset < io->size
   1463a:	6881      	ldr	r1, [r0, #8]
   1463c:	428b      	cmp	r3, r1
   1463e:	d209      	bcs.n	14654 <metal_io_phys+0x30>
			? io->physmap[page] + (offset & io->page_mask)
   14640:	6900      	ldr	r0, [r0, #16]
   14642:	4003      	ands	r3, r0
			: METAL_BAD_PHYS);
   14644:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   14648:	4418      	add	r0, r3
	}

	return io->ops.offset_to_phys(io, offset);
}
   1464a:	bc30      	pop	{r4, r5}
   1464c:	4770      	bx	lr
	return io->ops.offset_to_phys(io, offset);
   1464e:	4623      	mov	r3, r4
}
   14650:	bc30      	pop	{r4, r5}
	return io->ops.offset_to_phys(io, offset);
   14652:	4718      	bx	r3
			: METAL_BAD_PHYS);
   14654:	f04f 30ff 	mov.w	r0, #4294967295
   14658:	e7f7      	b.n	1464a <metal_io_phys+0x26>

0001465a <virtqueue_create>:
{
   1465a:	b570      	push	{r4, r5, r6, lr}
   1465c:	9c06      	ldr	r4, [sp, #24]
		vq->vq_queue_index = id;
   1465e:	8121      	strh	r1, [r4, #8]
		vq->callback = callback;
   14660:	9904      	ldr	r1, [sp, #16]
		vq->vq_name = name;
   14662:	e9c4 0200 	strd	r0, r2, [r4]
		vq->vq_nentries = ring->num_descs;
   14666:	891a      	ldrh	r2, [r3, #8]
		vq->callback = callback;
   14668:	60e1      	str	r1, [r4, #12]
		vq->notify = notify;
   1466a:	9905      	ldr	r1, [sp, #20]
{
	vr->num = num;
	vr->desc = (struct vring_desc *)p;
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
   1466c:	1c96      	adds	r6, r2, #2
   1466e:	6121      	str	r1, [r4, #16]
		vq_ring_init(vq, ring->vaddr, ring->align);
   14670:	e9d3 1500 	ldrd	r1, r5, [r3]
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
   14674:	eb01 1302 	add.w	r3, r1, r2, lsl #4
   14678:	61e3      	str	r3, [r4, #28]
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
   1467a:	eb03 0346 	add.w	r3, r3, r6, lsl #1
	      align - 1) & ~(align - 1));
   1467e:	1c6e      	adds	r6, r5, #1
   14680:	4433      	add	r3, r6
   14682:	426d      	negs	r5, r5
   14684:	402b      	ands	r3, r5
	vr->used = (struct vring_used *)
   14686:	6223      	str	r3, [r4, #32]
	vr = &vq->vq_ring;

	vring_init(vr, size, ring_mem, alignment);

#ifndef VIRTIO_SLAVE_ONLY
	if (vq->vq_dev->role == VIRTIO_DEV_MASTER) {
   14688:	6983      	ldr	r3, [r0, #24]
	vr->desc = (struct vring_desc *)p;
   1468a:	e9c4 2105 	strd	r2, r1, [r4, #20]
		vq->vq_nentries = ring->num_descs;
   1468e:	8162      	strh	r2, [r4, #10]
		vq->vq_free_cnt = vq->vq_nentries;
   14690:	84a2      	strh	r2, [r4, #36]	; 0x24
	if (vq->vq_dev->role == VIRTIO_DEV_MASTER) {
   14692:	b96b      	cbnz	r3, 146b0 <virtqueue_create+0x56>
		int i;

		for (i = 0; i < size - 1; i++)
   14694:	3a01      	subs	r2, #1
   14696:	4293      	cmp	r3, r2
   14698:	eb01 1003 	add.w	r0, r1, r3, lsl #4
   1469c:	db0a      	blt.n	146b4 <virtqueue_create+0x5a>
			vr->desc[i].next = i + 1;
		vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
   1469e:	2300      	movs	r3, #0
   146a0:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   146a4:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   146a8:	7393      	strb	r3, [r2, #14]
   146aa:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   146ae:	73d3      	strb	r3, [r2, #15]
}
   146b0:	2000      	movs	r0, #0
   146b2:	bd70      	pop	{r4, r5, r6, pc}
			vr->desc[i].next = i + 1;
   146b4:	3301      	adds	r3, #1
   146b6:	81c3      	strh	r3, [r0, #14]
		for (i = 0; i < size - 1; i++)
   146b8:	e7ed      	b.n	14696 <virtqueue_create+0x3c>

000146ba <virtqueue_add_buffer>:
{
   146ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   146be:	2700      	movs	r7, #0
		head_idx = vq->vq_desc_head_idx;
   146c0:	f8b0 b02c 	ldrh.w	fp, [r0, #44]	; 0x2c
{
   146c4:	4604      	mov	r4, r0
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   146c6:	465d      	mov	r5, fp
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
   146c8:	46ba      	mov	sl, r7
{
   146ca:	b085      	sub	sp, #20
	needed = readable + writable;
   146cc:	18d6      	adds	r6, r2, r3
{
   146ce:	4691      	mov	r9, r2
		dxp->cookie = cookie;
   146d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   146d2:	eb00 03cb 	add.w	r3, r0, fp, lsl #3
   146d6:	635a      	str	r2, [r3, #52]	; 0x34
		dxp->ndescs = needed;
   146d8:	871e      	strh	r6, [r3, #56]	; 0x38
		if (i < needed - 1)
   146da:	1e72      	subs	r2, r6, #1
		idx = vq_ring_add_buffer(vq, vq->vq_ring.desc, head_idx,
   146dc:	6983      	ldr	r3, [r0, #24]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   146de:	f101 0804 	add.w	r8, r1, #4
		if (i < needed - 1)
   146e2:	9201      	str	r2, [sp, #4]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   146e4:	42be      	cmp	r6, r7
   146e6:	dc19      	bgt.n	1471c <virtqueue_add_buffer+0x62>
		vq->vq_free_cnt -= needed;
   146e8:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
	 * it usable to the host. The chain is made available now rather than
	 * deferring to virtqueue_notify() in the hopes that if the host is
	 * currently running on another CPU, we can keep it processing the new
	 * descriptor.
	 */
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
   146ea:	8962      	ldrh	r2, [r4, #10]
		vq->vq_free_cnt -= needed;
   146ec:	1b9e      	subs	r6, r3, r6
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
   146ee:	69e3      	ldr	r3, [r4, #28]
		vq->vq_desc_head_idx = idx;
   146f0:	85a5      	strh	r5, [r4, #44]	; 0x2c
		vq->vq_free_cnt -= needed;
   146f2:	84a6      	strh	r6, [r4, #36]	; 0x24
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
   146f4:	1e51      	subs	r1, r2, #1
   146f6:	885a      	ldrh	r2, [r3, #2]
}
   146f8:	2000      	movs	r0, #0
	vq->vq_ring.avail->ring[avail_idx] = desc_idx;
   146fa:	400a      	ands	r2, r1
   146fc:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   14700:	f8a3 b004 	strh.w	fp, [r3, #4]

	atomic_thread_fence(memory_order_seq_cst);
   14704:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.avail->idx++;
   14708:	69e2      	ldr	r2, [r4, #28]
   1470a:	8853      	ldrh	r3, [r2, #2]
   1470c:	3301      	adds	r3, #1
   1470e:	8053      	strh	r3, [r2, #2]

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
   14710:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   14712:	3301      	adds	r3, #1
   14714:	84e3      	strh	r3, [r4, #38]	; 0x26
}
   14716:	b005      	add	sp, #20
   14718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
   1471c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
		dp = &desc[idx];
   1471e:	012a      	lsls	r2, r5, #4
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
   14720:	f858 1c04 	ldr.w	r1, [r8, #-4]
   14724:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   14728:	9302      	str	r3, [sp, #8]
   1472a:	6803      	ldr	r3, [r0, #0]
   1472c:	9203      	str	r2, [sp, #12]
   1472e:	1ac9      	subs	r1, r1, r3
 *		physical address.
 */
static inline metal_phys_addr_t
metal_io_virt_to_phys(struct metal_io_region *io, void *virt)
{
	return metal_io_phys(io, metal_io_virt_to_offset(io, virt));
   14730:	6883      	ldr	r3, [r0, #8]
   14732:	f108 0808 	add.w	r8, r8, #8
   14736:	4299      	cmp	r1, r3
   14738:	bf28      	it	cs
   1473a:	f04f 31ff 	movcs.w	r1, #4294967295
   1473e:	f7ff ff71 	bl	14624 <metal_io_phys>
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
   14742:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   14746:	5098      	str	r0, [r3, r2]
		dp->len = buf_list[i].len;
   14748:	f858 2c08 	ldr.w	r2, [r8, #-8]
			dp->flags |= VRING_DESC_F_NEXT;
   1474c:	f885 a00d 	strb.w	sl, [r5, #13]
		dp->len = buf_list[i].len;
   14750:	60aa      	str	r2, [r5, #8]
		if (i < needed - 1)
   14752:	9a01      	ldr	r2, [sp, #4]
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
   14754:	f8c5 a004 	str.w	sl, [r5, #4]
		if (i < needed - 1)
   14758:	4297      	cmp	r7, r2
			dp->flags |= VRING_DESC_F_NEXT;
   1475a:	bfb6      	itet	lt
   1475c:	2201      	movlt	r2, #1
		dp->flags = 0;
   1475e:	f885 a00c 	strbge.w	sl, [r5, #12]
			dp->flags |= VRING_DESC_F_NEXT;
   14762:	732a      	strblt	r2, [r5, #12]
		if (i >= readable)
   14764:	45b9      	cmp	r9, r7
			dp->flags |= VRING_DESC_F_WRITE;
   14766:	bfd8      	it	le
   14768:	89aa      	ldrhle	r2, [r5, #12]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   1476a:	f107 0701 	add.w	r7, r7, #1
			dp->flags |= VRING_DESC_F_WRITE;
   1476e:	bfdc      	itt	le
   14770:	f042 0202 	orrle.w	r2, r2, #2
   14774:	81aa      	strhle	r2, [r5, #12]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   14776:	89ed      	ldrh	r5, [r5, #14]
   14778:	e7b4      	b.n	146e4 <virtqueue_add_buffer+0x2a>

0001477a <virtqueue_get_buffer>:
{
   1477a:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!vq || vq->vq_used_cons_idx == vq->vq_ring.used->idx)
   1477c:	b350      	cbz	r0, 147d4 <virtqueue_get_buffer+0x5a>
   1477e:	6a05      	ldr	r5, [r0, #32]
   14780:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
   14782:	886c      	ldrh	r4, [r5, #2]
   14784:	429c      	cmp	r4, r3
   14786:	d030      	beq.n	147ea <virtqueue_get_buffer+0x70>
	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
   14788:	1c5c      	adds	r4, r3, #1
   1478a:	85c4      	strh	r4, [r0, #46]	; 0x2e
   1478c:	8944      	ldrh	r4, [r0, #10]
	atomic_thread_fence(memory_order_seq_cst);
   1478e:	f3bf 8f5b 	dmb	ish
	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
   14792:	3c01      	subs	r4, #1
   14794:	401c      	ands	r4, r3
	desc_idx = (uint16_t)uep->id;
   14796:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
   1479a:	686b      	ldr	r3, [r5, #4]
   1479c:	b29e      	uxth	r6, r3
	if (len)
   1479e:	b109      	cbz	r1, 147a4 <virtqueue_get_buffer+0x2a>
		*len = uep->len;
   147a0:	68ad      	ldr	r5, [r5, #8]
   147a2:	600d      	str	r5, [r1, #0]
	dp = &vq->vq_ring.desc[desc_idx];
   147a4:	f8d0 c018 	ldr.w	ip, [r0, #24]
   147a8:	b29b      	uxth	r3, r3
   147aa:	eb0c 1103 	add.w	r1, ip, r3, lsl #4
	vq->vq_free_cnt += dxp->ndescs;
   147ae:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
   147b2:	8f1d      	ldrh	r5, [r3, #56]	; 0x38
   147b4:	8c87      	ldrh	r7, [r0, #36]	; 0x24
   147b6:	442f      	add	r7, r5
	dxp->ndescs--;
   147b8:	3d01      	subs	r5, #1
	vq->vq_free_cnt += dxp->ndescs;
   147ba:	8487      	strh	r7, [r0, #36]	; 0x24
	dxp->ndescs--;
   147bc:	871d      	strh	r5, [r3, #56]	; 0x38
	if ((dp->flags & VRING_DESC_F_INDIRECT) == 0) {
   147be:	898d      	ldrh	r5, [r1, #12]
   147c0:	076f      	lsls	r7, r5, #29
   147c2:	d50e      	bpl.n	147e2 <virtqueue_get_buffer+0x68>
	dp->next = vq->vq_desc_head_idx;
   147c4:	8d85      	ldrh	r5, [r0, #44]	; 0x2c
   147c6:	81cd      	strh	r5, [r1, #14]
	vq->vq_descx[desc_idx].cookie = NULL;
   147c8:	2100      	movs	r1, #0
	vq->vq_desc_head_idx = desc_idx;
   147ca:	8586      	strh	r6, [r0, #44]	; 0x2c
	cookie = vq->vq_descx[desc_idx].cookie;
   147cc:	6b58      	ldr	r0, [r3, #52]	; 0x34
	vq->vq_descx[desc_idx].cookie = NULL;
   147ce:	6359      	str	r1, [r3, #52]	; 0x34
	if (idx)
   147d0:	b102      	cbz	r2, 147d4 <virtqueue_get_buffer+0x5a>
		*idx = used_idx;
   147d2:	8014      	strh	r4, [r2, #0]
}
   147d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			dxp->ndescs--;
   147d6:	8f1d      	ldrh	r5, [r3, #56]	; 0x38
			dp = &vq->vq_ring.desc[dp->next];
   147d8:	89c9      	ldrh	r1, [r1, #14]
			dxp->ndescs--;
   147da:	3d01      	subs	r5, #1
			dp = &vq->vq_ring.desc[dp->next];
   147dc:	eb0c 1101 	add.w	r1, ip, r1, lsl #4
			dxp->ndescs--;
   147e0:	871d      	strh	r5, [r3, #56]	; 0x38
		while (dp->flags & VRING_DESC_F_NEXT) {
   147e2:	898d      	ldrh	r5, [r1, #12]
   147e4:	07ed      	lsls	r5, r5, #31
   147e6:	d4f6      	bmi.n	147d6 <virtqueue_get_buffer+0x5c>
   147e8:	e7ec      	b.n	147c4 <virtqueue_get_buffer+0x4a>
		return NULL;
   147ea:	2000      	movs	r0, #0
   147ec:	e7f2      	b.n	147d4 <virtqueue_get_buffer+0x5a>

000147ee <virtqueue_get_available_buffer>:
{
   147ee:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	atomic_thread_fence(memory_order_seq_cst);
   147f2:	f3bf 8f5b 	dmb	ish
{
   147f6:	4617      	mov	r7, r2
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   147f8:	69c2      	ldr	r2, [r0, #28]
{
   147fa:	460e      	mov	r6, r1
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   147fc:	8853      	ldrh	r3, [r2, #2]
   147fe:	8e01      	ldrh	r1, [r0, #48]	; 0x30
{
   14800:	4605      	mov	r5, r0
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   14802:	428b      	cmp	r3, r1
   14804:	d046      	beq.n	14894 <virtqueue_get_available_buffer+0xa6>
	head_idx = vq->vq_available_idx++ & (vq->vq_nentries - 1);
   14806:	1c4b      	adds	r3, r1, #1
   14808:	8603      	strh	r3, [r0, #48]	; 0x30
   1480a:	8943      	ldrh	r3, [r0, #10]
	buffer = virtqueue_phys_to_virt(vq, vq->vq_ring.desc[*avail_idx].addr);
   1480c:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
	head_idx = vq->vq_available_idx++ & (vq->vq_nentries - 1);
   14810:	3b01      	subs	r3, #1
	*avail_idx = vq->vq_ring.avail->ring[head_idx];
   14812:	400b      	ands	r3, r1
   14814:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   14818:	889a      	ldrh	r2, [r3, #4]
	buffer = virtqueue_phys_to_virt(vq, vq->vq_ring.desc[*avail_idx].addr);
   1481a:	6983      	ldr	r3, [r0, #24]
	*avail_idx = vq->vq_ring.avail->ring[head_idx];
   1481c:	b291      	uxth	r1, r2
	buffer = virtqueue_phys_to_virt(vq, vq->vq_ring.desc[*avail_idx].addr);
   1481e:	eb03 1301 	add.w	r3, r3, r1, lsl #4
	*avail_idx = vq->vq_ring.avail->ring[head_idx];
   14822:	8032      	strh	r2, [r6, #0]
	buffer = virtqueue_phys_to_virt(vq, vq->vq_ring.desc[*avail_idx].addr);
   14824:	f8d3 9000 	ldr.w	r9, [r3]
	if (!io->ops.phys_to_offset) {
   14828:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
   1482c:	bb5b      	cbnz	r3, 14886 <virtqueue_get_available_buffer+0x98>
			(io->page_mask == (metal_phys_addr_t)(-1) ?
   1482e:	f8d8 4010 	ldr.w	r4, [r8, #16]
			phys - io->physmap[0] :  phys & io->page_mask);
   14832:	1c62      	adds	r2, r4, #1
   14834:	bf09      	itett	eq
   14836:	f8d8 3004 	ldreq.w	r3, [r8, #4]
   1483a:	ea09 0404 	andne.w	r4, r9, r4
   1483e:	681c      	ldreq	r4, [r3, #0]
   14840:	eba9 0404 	subeq.w	r4, r9, r4
			if (metal_io_phys(io, offset) == phys)
   14844:	4621      	mov	r1, r4
   14846:	4640      	mov	r0, r8
   14848:	f7ff feec 	bl	14624 <metal_io_phys>
   1484c:	4581      	cmp	r9, r0
   1484e:	d009      	beq.n	14864 <virtqueue_get_available_buffer+0x76>
			offset += io->page_mask + 1;
   14850:	f8d8 3010 	ldr.w	r3, [r8, #16]
   14854:	3301      	adds	r3, #1
   14856:	441c      	add	r4, r3
		} while (offset < io->size);
   14858:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1485c:	429c      	cmp	r4, r3
   1485e:	d3f1      	bcc.n	14844 <virtqueue_get_available_buffer+0x56>
		return METAL_BAD_OFFSET;
   14860:	f04f 34ff 	mov.w	r4, #4294967295
	return (io->virt != METAL_BAD_VA && offset < io->size
   14864:	f8d8 0000 	ldr.w	r0, [r8]
		: NULL);
   14868:	1c43      	adds	r3, r0, #1
   1486a:	d011      	beq.n	14890 <virtqueue_get_available_buffer+0xa2>
	return (io->virt != METAL_BAD_VA && offset < io->size
   1486c:	f8d8 3008 	ldr.w	r3, [r8, #8]
   14870:	42a3      	cmp	r3, r4
   14872:	d90d      	bls.n	14890 <virtqueue_get_available_buffer+0xa2>
		: NULL);
   14874:	4420      	add	r0, r4
	*len = vq->vq_ring.desc[*avail_idx].len;
   14876:	8832      	ldrh	r2, [r6, #0]
   14878:	69ab      	ldr	r3, [r5, #24]
   1487a:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   1487e:	689b      	ldr	r3, [r3, #8]
   14880:	603b      	str	r3, [r7, #0]
}
   14882:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return (*io->ops.phys_to_offset)(io, phys);
   14886:	4649      	mov	r1, r9
   14888:	4640      	mov	r0, r8
   1488a:	4798      	blx	r3
   1488c:	4604      	mov	r4, r0
   1488e:	e7e9      	b.n	14864 <virtqueue_get_available_buffer+0x76>
		: NULL);
   14890:	2000      	movs	r0, #0
   14892:	e7f0      	b.n	14876 <virtqueue_get_available_buffer+0x88>
		return NULL;
   14894:	2000      	movs	r0, #0
   14896:	e7f4      	b.n	14882 <virtqueue_get_available_buffer+0x94>

00014898 <virtqueue_disable_cb>:
{
   14898:	b530      	push	{r4, r5, lr}
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   1489a:	2500      	movs	r5, #0
   1489c:	6802      	ldr	r2, [r0, #0]
   1489e:	6993      	ldr	r3, [r2, #24]
   148a0:	6912      	ldr	r2, [r2, #16]
   148a2:	f002 5400 	and.w	r4, r2, #536870912	; 0x20000000
   148a6:	ea54 0205 	orrs.w	r2, r4, r5
   148aa:	d014      	beq.n	148d6 <virtqueue_disable_cb+0x3e>
		if (vq->vq_dev->role == VIRTIO_DEV_MASTER) {
   148ac:	b94b      	cbnz	r3, 148c2 <virtqueue_disable_cb+0x2a>
			vring_used_event(&vq->vq_ring) =
   148ae:	69c2      	ldr	r2, [r0, #28]
   148b0:	6941      	ldr	r1, [r0, #20]
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
   148b2:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
   148b4:	8940      	ldrh	r0, [r0, #10]
			vring_used_event(&vq->vq_ring) =
   148b6:	eb02 0241 	add.w	r2, r2, r1, lsl #1
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
   148ba:	1a1b      	subs	r3, r3, r0
			vring_avail_event(&vq->vq_ring) =
   148bc:	3b01      	subs	r3, #1
   148be:	8093      	strh	r3, [r2, #4]
}
   148c0:	bd30      	pop	{r4, r5, pc}
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
   148c2:	2b01      	cmp	r3, #1
   148c4:	d1fc      	bne.n	148c0 <virtqueue_disable_cb+0x28>
			vring_avail_event(&vq->vq_ring) =
   148c6:	6a02      	ldr	r2, [r0, #32]
   148c8:	6941      	ldr	r1, [r0, #20]
			    vq->vq_available_idx - vq->vq_nentries - 1;
   148ca:	8e03      	ldrh	r3, [r0, #48]	; 0x30
   148cc:	8940      	ldrh	r0, [r0, #10]
			vring_avail_event(&vq->vq_ring) =
   148ce:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
			    vq->vq_available_idx - vq->vq_nentries - 1;
   148d2:	1a1b      	subs	r3, r3, r0
   148d4:	e7f2      	b.n	148bc <virtqueue_disable_cb+0x24>
		if (vq->vq_dev->role == VIRTIO_DEV_MASTER)
   148d6:	b92b      	cbnz	r3, 148e4 <virtqueue_disable_cb+0x4c>
			vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
   148d8:	69c2      	ldr	r2, [r0, #28]
			vq->vq_ring.used->flags |= VRING_USED_F_NO_NOTIFY;
   148da:	8813      	ldrh	r3, [r2, #0]
   148dc:	f043 0301 	orr.w	r3, r3, #1
   148e0:	8013      	strh	r3, [r2, #0]
}
   148e2:	e7ed      	b.n	148c0 <virtqueue_disable_cb+0x28>
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE)
   148e4:	2b01      	cmp	r3, #1
   148e6:	d1eb      	bne.n	148c0 <virtqueue_disable_cb+0x28>
			vq->vq_ring.used->flags |= VRING_USED_F_NO_NOTIFY;
   148e8:	6a02      	ldr	r2, [r0, #32]
   148ea:	e7f6      	b.n	148da <virtqueue_disable_cb+0x42>

000148ec <virtqueue_kick>:
{
   148ec:	b510      	push	{r4, lr}
	atomic_thread_fence(memory_order_seq_cst);
   148ee:	f3bf 8f5b 	dmb	ish
 */
static int vq_ring_must_notify(struct virtqueue *vq)
{
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   148f2:	2300      	movs	r3, #0
   148f4:	6801      	ldr	r1, [r0, #0]
{
   148f6:	4604      	mov	r4, r0
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   148f8:	6908      	ldr	r0, [r1, #16]
   148fa:	f000 5200 	and.w	r2, r0, #536870912	; 0x20000000
   148fe:	4313      	orrs	r3, r2
   14900:	698b      	ldr	r3, [r1, #24]
   14902:	d020      	beq.n	14946 <virtqueue_kick+0x5a>
#ifndef VIRTIO_SLAVE_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_MASTER) {
   14904:	b9b3      	cbnz	r3, 14934 <virtqueue_kick+0x48>
			new_idx = vq->vq_ring.avail->idx;
   14906:	69e3      	ldr	r3, [r4, #28]
			prev_idx = new_idx - vq->vq_queued_cnt;
			event_idx = vring_avail_event(&vq->vq_ring);
   14908:	6961      	ldr	r1, [r4, #20]
			new_idx = vq->vq_ring.avail->idx;
   1490a:	885a      	ldrh	r2, [r3, #2]
			event_idx = vring_avail_event(&vq->vq_ring);
   1490c:	6a23      	ldr	r3, [r4, #32]
   1490e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
#endif /*VIRTIO_SLAVE_ONLY*/
#ifndef VIRTIO_MASTER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
			new_idx = vq->vq_ring.used->idx;
			prev_idx = new_idx - vq->vq_queued_cnt;
			event_idx = vring_used_event(&vq->vq_ring);
   14912:	889b      	ldrh	r3, [r3, #4]
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
	return (uint16_t)(new_idx - event_idx - 1) <
   14914:	1ad2      	subs	r2, r2, r3
   14916:	3a01      	subs	r2, #1
   14918:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   1491a:	b292      	uxth	r2, r2
   1491c:	4293      	cmp	r3, r2
   1491e:	bf94      	ite	ls
   14920:	2300      	movls	r3, #0
   14922:	2301      	movhi	r3, #1
	if (vq_ring_must_notify(vq))
   14924:	b11b      	cbz	r3, 1492e <virtqueue_kick+0x42>
 * vq_ring_notify
 *
 */
static void vq_ring_notify(struct virtqueue *vq)
{
	if (vq->notify)
   14926:	6923      	ldr	r3, [r4, #16]
   14928:	b10b      	cbz	r3, 1492e <virtqueue_kick+0x42>
		vq->notify(vq);
   1492a:	4620      	mov	r0, r4
   1492c:	4798      	blx	r3
	vq->vq_queued_cnt = 0;
   1492e:	2300      	movs	r3, #0
   14930:	84e3      	strh	r3, [r4, #38]	; 0x26
}
   14932:	bd10      	pop	{r4, pc}
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
   14934:	2b01      	cmp	r3, #1
   14936:	d1fa      	bne.n	1492e <virtqueue_kick+0x42>
			new_idx = vq->vq_ring.used->idx;
   14938:	6a23      	ldr	r3, [r4, #32]
			event_idx = vring_used_event(&vq->vq_ring);
   1493a:	6961      	ldr	r1, [r4, #20]
			new_idx = vq->vq_ring.used->idx;
   1493c:	885a      	ldrh	r2, [r3, #2]
			event_idx = vring_used_event(&vq->vq_ring);
   1493e:	69e3      	ldr	r3, [r4, #28]
   14940:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   14944:	e7e5      	b.n	14912 <virtqueue_kick+0x26>
		if (vq->vq_dev->role == VIRTIO_DEV_MASTER)
   14946:	b92b      	cbnz	r3, 14954 <virtqueue_kick+0x68>
			return (vq->vq_ring.used->flags &
   14948:	6a23      	ldr	r3, [r4, #32]
			return (vq->vq_ring.avail->flags &
   1494a:	881b      	ldrh	r3, [r3, #0]
				VRING_AVAIL_F_NO_INTERRUPT) == 0;
   1494c:	43db      	mvns	r3, r3
   1494e:	f003 0301 	and.w	r3, r3, #1
   14952:	e7e7      	b.n	14924 <virtqueue_kick+0x38>
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE)
   14954:	2b01      	cmp	r3, #1
   14956:	d1ea      	bne.n	1492e <virtqueue_kick+0x42>
			return (vq->vq_ring.avail->flags &
   14958:	69e3      	ldr	r3, [r4, #28]
   1495a:	e7f6      	b.n	1494a <virtqueue_kick+0x5e>

0001495c <virtqueue_get_desc_size>:
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   1495c:	69c2      	ldr	r2, [r0, #28]
   1495e:	8e01      	ldrh	r1, [r0, #48]	; 0x30
   14960:	8853      	ldrh	r3, [r2, #2]
   14962:	428b      	cmp	r3, r1
   14964:	d00a      	beq.n	1497c <virtqueue_get_desc_size+0x20>
	head_idx = vq->vq_available_idx & (vq->vq_nentries - 1);
   14966:	8943      	ldrh	r3, [r0, #10]
   14968:	3b01      	subs	r3, #1
	avail_idx = vq->vq_ring.avail->ring[head_idx];
   1496a:	400b      	ands	r3, r1
   1496c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
	len = vq->vq_ring.desc[avail_idx].len;
   14970:	889a      	ldrh	r2, [r3, #4]
   14972:	6983      	ldr	r3, [r0, #24]
   14974:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   14978:	6898      	ldr	r0, [r3, #8]
	return len;
   1497a:	4770      	bx	lr
		return 0;
   1497c:	2000      	movs	r0, #0
}
   1497e:	4770      	bx	lr

00014980 <virtqueue_notification>:
	atomic_thread_fence(memory_order_seq_cst);
   14980:	f3bf 8f5b 	dmb	ish
	if (vq->callback)
   14984:	68c3      	ldr	r3, [r0, #12]
   14986:	b103      	cbz	r3, 1498a <virtqueue_notification+0xa>
		vq->callback(vq);
   14988:	4718      	bx	r3
}
   1498a:	4770      	bx	lr

0001498c <__metal_mutex_acquire>:
	return z_impl_k_sem_take(sem, timeout);
   1498c:	f04f 32ff 	mov.w	r2, #4294967295
   14990:	f04f 33ff 	mov.w	r3, #4294967295
   14994:	f7fa bf16 	b.w	f7c4 <z_impl_k_sem_take>

00014998 <rpmsg_unregister_endpoint>:
{
   14998:	b570      	push	{r4, r5, r6, lr}
   1499a:	4604      	mov	r4, r0
	struct rpmsg_device *rdev = ept->rdev;
   1499c:	6a05      	ldr	r5, [r0, #32]
	metal_mutex_acquire(&rdev->lock);
   1499e:	f105 0658 	add.w	r6, r5, #88	; 0x58
   149a2:	4630      	mov	r0, r6
   149a4:	f7ff fff2 	bl	1498c <__metal_mutex_acquire>
	if (ept->addr != RPMSG_ADDR_ANY)
   149a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   149aa:	1c5a      	adds	r2, r3, #1
   149ac:	d010      	beq.n	149d0 <rpmsg_unregister_endpoint+0x38>
	addr -= RPMSG_RESERVED_ADDRESSES;
   149ae:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
	if (addr >= 0 && addr < size)
   149b2:	2b7f      	cmp	r3, #127	; 0x7f
   149b4:	d80c      	bhi.n	149d0 <rpmsg_unregister_endpoint+0x38>
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   149b6:	2201      	movs	r2, #1
	bitmap[bit / METAL_BITS_PER_ULONG] &=
   149b8:	0959      	lsrs	r1, r3, #5
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
   149ba:	3548      	adds	r5, #72	; 0x48
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   149bc:	f003 031f 	and.w	r3, r3, #31
   149c0:	fa02 f303 	lsl.w	r3, r2, r3
	bitmap[bit / METAL_BITS_PER_ULONG] &=
   149c4:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
   149c8:	ea22 0203 	bic.w	r2, r2, r3
   149cc:	f845 2021 	str.w	r2, [r5, r1, lsl #2]
	metal_list_del(&ept->node);
   149d0:	f104 0334 	add.w	r3, r4, #52	; 0x34
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
	node->next->prev = node->prev;
   149d4:	e9d4 120d 	ldrd	r1, r2, [r4, #52]	; 0x34
   149d8:	604a      	str	r2, [r1, #4]
	node->prev->next = node->next;
   149da:	6011      	str	r1, [r2, #0]
	node->prev = node;
	node->next = node;
   149dc:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
	ept->rdev = NULL;
   149e0:	2300      	movs	r3, #0
   149e2:	6223      	str	r3, [r4, #32]
	z_impl_k_sem_give(sem);
   149e4:	4630      	mov	r0, r6
}
   149e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   149ea:	f7fa bec5 	b.w	f778 <z_impl_k_sem_give>

000149ee <rpmsg_send_ns_message>:
{
   149ee:	b510      	push	{r4, lr}
	ns_msg.addr = ept->addr;
   149f0:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
   149f2:	b08c      	sub	sp, #48	; 0x30
   149f4:	4604      	mov	r4, r0
	ns_msg.flags = flags;
   149f6:	910b      	str	r1, [sp, #44]	; 0x2c
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
   149f8:	2220      	movs	r2, #32
   149fa:	4601      	mov	r1, r0
   149fc:	a802      	add	r0, sp, #8
	ns_msg.addr = ept->addr;
   149fe:	930a      	str	r3, [sp, #40]	; 0x28
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
   14a00:	f7fd fc3d 	bl	1227e <strncpy>
	ret = rpmsg_send_offchannel_raw(ept, ept->addr,
   14a04:	2328      	movs	r3, #40	; 0x28
   14a06:	2201      	movs	r2, #1
   14a08:	4620      	mov	r0, r4
   14a0a:	e9cd 3200 	strd	r3, r2, [sp]
   14a0e:	6a61      	ldr	r1, [r4, #36]	; 0x24
   14a10:	2235      	movs	r2, #53	; 0x35
   14a12:	ab02      	add	r3, sp, #8
   14a14:	f7f9 fdba 	bl	e58c <rpmsg_send_offchannel_raw>
}
   14a18:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   14a1c:	b00c      	add	sp, #48	; 0x30
   14a1e:	bd10      	pop	{r4, pc}

00014a20 <rpmsg_get_endpoint>:
{
   14a20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   14a24:	4680      	mov	r8, r0
   14a26:	4689      	mov	r9, r1
   14a28:	4615      	mov	r5, r2
   14a2a:	461e      	mov	r6, r3
	metal_list_for_each(&rdev->endpoints, node) {
   14a2c:	6807      	ldr	r7, [r0, #0]
   14a2e:	45b8      	cmp	r8, r7
   14a30:	d101      	bne.n	14a36 <rpmsg_get_endpoint+0x16>
	return NULL;
   14a32:	2400      	movs	r4, #0
   14a34:	e021      	b.n	14a7a <rpmsg_get_endpoint+0x5a>
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   14a36:	1c69      	adds	r1, r5, #1
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
   14a38:	f1a7 0434 	sub.w	r4, r7, #52	; 0x34
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   14a3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   14a3e:	d006      	beq.n	14a4e <rpmsg_get_endpoint+0x2e>
   14a40:	429d      	cmp	r5, r3
		if (addr == ept->addr && dest_addr == ept->dest_addr)
   14a42:	d01a      	beq.n	14a7a <rpmsg_get_endpoint+0x5a>
		if (name)
   14a44:	f1b9 0f00 	cmp.w	r9, #0
   14a48:	d106      	bne.n	14a58 <rpmsg_get_endpoint+0x38>
	metal_list_for_each(&rdev->endpoints, node) {
   14a4a:	683f      	ldr	r7, [r7, #0]
   14a4c:	e7ef      	b.n	14a2e <rpmsg_get_endpoint+0xe>
		if (addr == ept->addr && dest_addr == ept->dest_addr)
   14a4e:	3301      	adds	r3, #1
   14a50:	d1f8      	bne.n	14a44 <rpmsg_get_endpoint+0x24>
   14a52:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14a54:	42b3      	cmp	r3, r6
   14a56:	e7f4      	b.n	14a42 <rpmsg_get_endpoint+0x22>
			name_match = !strncmp(ept->name, name,
   14a58:	2220      	movs	r2, #32
   14a5a:	4649      	mov	r1, r9
   14a5c:	4620      	mov	r0, r4
   14a5e:	f7fd fc3d 	bl	122dc <strncmp>
		if (!name || !name_match)
   14a62:	2800      	cmp	r0, #0
   14a64:	d1f1      	bne.n	14a4a <rpmsg_get_endpoint+0x2a>
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
   14a66:	1c72      	adds	r2, r6, #1
   14a68:	d002      	beq.n	14a70 <rpmsg_get_endpoint+0x50>
   14a6a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14a6c:	42b3      	cmp	r3, r6
   14a6e:	d004      	beq.n	14a7a <rpmsg_get_endpoint+0x5a>
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
   14a70:	1c6b      	adds	r3, r5, #1
   14a72:	d1ea      	bne.n	14a4a <rpmsg_get_endpoint+0x2a>
   14a74:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14a76:	3301      	adds	r3, #1
   14a78:	d1e7      	bne.n	14a4a <rpmsg_get_endpoint+0x2a>
}
   14a7a:	4620      	mov	r0, r4
   14a7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00014a80 <rpmsg_register_endpoint>:
	new_node->prev = node->prev;
   14a80:	6842      	ldr	r2, [r0, #4]
	metal_list_add_tail(&rdev->endpoints, &ept->node);
   14a82:	f101 0334 	add.w	r3, r1, #52	; 0x34
	new_node->next = node;
   14a86:	e9c1 020d 	strd	r0, r2, [r1, #52]	; 0x34
	ept->rdev = rdev;
   14a8a:	6208      	str	r0, [r1, #32]
	new_node->next->prev = new_node;
   14a8c:	6043      	str	r3, [r0, #4]
	new_node->prev->next = new_node;
   14a8e:	6b8a      	ldr	r2, [r1, #56]	; 0x38
   14a90:	6013      	str	r3, [r2, #0]
}
   14a92:	4770      	bx	lr

00014a94 <rpmsg_destroy_ept>:
 *
 * @param ept - pointer to endpoint to destroy
 *
 */
void rpmsg_destroy_ept(struct rpmsg_endpoint *ept)
{
   14a94:	b510      	push	{r4, lr}
	struct rpmsg_device *rdev;

	if (!ept)
   14a96:	4604      	mov	r4, r0
   14a98:	b190      	cbz	r0, 14ac0 <rpmsg_destroy_ept+0x2c>
		return;

	rdev = ept->rdev;
   14a9a:	6a03      	ldr	r3, [r0, #32]
	if (!rdev)
   14a9c:	b183      	cbz	r3, 14ac0 <rpmsg_destroy_ept+0x2c>
		return;

	if (ept->name[0] && rdev->support_ns &&
   14a9e:	7802      	ldrb	r2, [r0, #0]
   14aa0:	b14a      	cbz	r2, 14ab6 <rpmsg_destroy_ept+0x22>
   14aa2:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
   14aa6:	b133      	cbz	r3, 14ab6 <rpmsg_destroy_ept+0x22>
   14aa8:	6a43      	ldr	r3, [r0, #36]	; 0x24
   14aaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   14aae:	d302      	bcc.n	14ab6 <rpmsg_destroy_ept+0x22>
	    ept->addr >= RPMSG_RESERVED_ADDRESSES)
		(void)rpmsg_send_ns_message(ept, RPMSG_NS_DESTROY);
   14ab0:	2101      	movs	r1, #1
   14ab2:	f7ff ff9c 	bl	149ee <rpmsg_send_ns_message>
	rpmsg_unregister_endpoint(ept);
   14ab6:	4620      	mov	r0, r4
}
   14ab8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	rpmsg_unregister_endpoint(ept);
   14abc:	f7ff bf6c 	b.w	14998 <rpmsg_unregister_endpoint>
}
   14ac0:	bd10      	pop	{r4, pc}

00014ac2 <rpmsg_virtio_tx_callback>:
}
   14ac2:	4770      	bx	lr

00014ac4 <k_sem_give>:
   14ac4:	f7fa be58 	b.w	f778 <z_impl_k_sem_give>

00014ac8 <rpmsg_virtio_get_rx_buffer>:
{
   14ac8:	b430      	push	{r4, r5}
	return rvdev->vdev->role;
   14aca:	6fc5      	ldr	r5, [r0, #124]	; 0x7c
   14acc:	4613      	mov	r3, r2
   14ace:	69ad      	ldr	r5, [r5, #24]
	if (role == RPMSG_MASTER) {
   14ad0:	b925      	cbnz	r5, 14adc <rpmsg_virtio_get_rx_buffer+0x14>
}
   14ad2:	bc30      	pop	{r4, r5}
		data = virtqueue_get_buffer(rvdev->rvq, len, idx);
   14ad4:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
   14ad8:	f7ff be4f 	b.w	1477a <virtqueue_get_buffer>
	if (role == RPMSG_REMOTE) {
   14adc:	2d01      	cmp	r5, #1
   14ade:	d106      	bne.n	14aee <rpmsg_virtio_get_rx_buffer+0x26>
}
   14ae0:	bc30      	pop	{r4, r5}
		    virtqueue_get_available_buffer(rvdev->rvq, idx, len);
   14ae2:	460a      	mov	r2, r1
   14ae4:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
   14ae8:	4619      	mov	r1, r3
   14aea:	f7ff be80 	b.w	147ee <virtqueue_get_available_buffer>
}
   14aee:	2000      	movs	r0, #0
   14af0:	bc30      	pop	{r4, r5}
   14af2:	4770      	bx	lr

00014af4 <__metal_mutex_acquire>:
	return z_impl_k_sem_take(sem, timeout);
   14af4:	f04f 32ff 	mov.w	r2, #4294967295
   14af8:	f04f 33ff 	mov.w	r3, #4294967295
   14afc:	f7fa be62 	b.w	f7c4 <z_impl_k_sem_take>

00014b00 <rpmsg_virtio_ns_callback>:
{
   14b00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (len != sizeof(*ns_msg))
   14b04:	2a28      	cmp	r2, #40	; 0x28
{
   14b06:	4680      	mov	r8, r0
   14b08:	460e      	mov	r6, r1
   14b0a:	b089      	sub	sp, #36	; 0x24
	if (len != sizeof(*ns_msg))
   14b0c:	d12b      	bne.n	14b66 <rpmsg_virtio_ns_callback+0x66>
	struct rpmsg_device *rdev = ept->rdev;
   14b0e:	6a05      	ldr	r5, [r0, #32]
	metal_io_block_read(io,
   14b10:	2320      	movs	r3, #32
	struct metal_io_region *io = rvdev->shbuf_io;
   14b12:	f8d5 0088 	ldr.w	r0, [r5, #136]	; 0x88
	metal_io_block_read(io,
   14b16:	466a      	mov	r2, sp
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
   14b18:	6801      	ldr	r1, [r0, #0]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   14b1a:	6884      	ldr	r4, [r0, #8]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
   14b1c:	1a71      	subs	r1, r6, r1
   14b1e:	42a1      	cmp	r1, r4
   14b20:	bf28      	it	cs
   14b22:	f04f 31ff 	movcs.w	r1, #4294967295
   14b26:	f7ff fcca 	bl	144be <metal_io_block_read>
	metal_mutex_acquire(&rdev->lock);
   14b2a:	f105 0758 	add.w	r7, r5, #88	; 0x58
	dest = ns_msg->addr;
   14b2e:	f8d6 9020 	ldr.w	r9, [r6, #32]
   14b32:	4638      	mov	r0, r7
   14b34:	f7ff ffde 	bl	14af4 <__metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
   14b38:	464b      	mov	r3, r9
   14b3a:	f04f 32ff 	mov.w	r2, #4294967295
   14b3e:	4669      	mov	r1, sp
   14b40:	4628      	mov	r0, r5
   14b42:	f7ff ff6d 	bl	14a20 <rpmsg_get_endpoint>
	if (ns_msg->flags & RPMSG_NS_DESTROY) {
   14b46:	6a73      	ldr	r3, [r6, #36]	; 0x24
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
   14b48:	4604      	mov	r4, r0
	if (ns_msg->flags & RPMSG_NS_DESTROY) {
   14b4a:	07db      	lsls	r3, r3, #31
   14b4c:	d50f      	bpl.n	14b6e <rpmsg_virtio_ns_callback+0x6e>
		if (_ept)
   14b4e:	b110      	cbz	r0, 14b56 <rpmsg_virtio_ns_callback+0x56>
			_ept->dest_addr = RPMSG_ADDR_ANY;
   14b50:	f04f 33ff 	mov.w	r3, #4294967295
   14b54:	6283      	str	r3, [r0, #40]	; 0x28
   14b56:	4638      	mov	r0, r7
   14b58:	f7ff ffb4 	bl	14ac4 <k_sem_give>
		if (_ept && _ept->ns_unbind_cb)
   14b5c:	b11c      	cbz	r4, 14b66 <rpmsg_virtio_ns_callback+0x66>
   14b5e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   14b60:	b10b      	cbz	r3, 14b66 <rpmsg_virtio_ns_callback+0x66>
			_ept->ns_unbind_cb(ept);
   14b62:	4640      	mov	r0, r8
   14b64:	4798      	blx	r3
}
   14b66:	2000      	movs	r0, #0
   14b68:	b009      	add	sp, #36	; 0x24
   14b6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (!_ept) {
   14b6e:	b950      	cbnz	r0, 14b86 <rpmsg_virtio_ns_callback+0x86>
   14b70:	4638      	mov	r0, r7
   14b72:	f7ff ffa7 	bl	14ac4 <k_sem_give>
			if (rdev->ns_bind_cb)
   14b76:	6f2b      	ldr	r3, [r5, #112]	; 0x70
   14b78:	2b00      	cmp	r3, #0
   14b7a:	d0f4      	beq.n	14b66 <rpmsg_virtio_ns_callback+0x66>
				rdev->ns_bind_cb(rdev, name, dest);
   14b7c:	464a      	mov	r2, r9
   14b7e:	4669      	mov	r1, sp
   14b80:	4628      	mov	r0, r5
   14b82:	4798      	blx	r3
   14b84:	e7ef      	b.n	14b66 <rpmsg_virtio_ns_callback+0x66>
			_ept->dest_addr = dest;
   14b86:	f8c0 9028 	str.w	r9, [r0, #40]	; 0x28
   14b8a:	4638      	mov	r0, r7
   14b8c:	f7ff ff9a 	bl	14ac4 <k_sem_give>
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
	__metal_mutex_release(mutex);
}
   14b90:	e7e9      	b.n	14b66 <rpmsg_virtio_ns_callback+0x66>

00014b92 <rpmsg_virtio_rx_callback>:
{
   14b92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct rpmsg_virtio_device *rvdev = vdev->priv;
   14b96:	6803      	ldr	r3, [r0, #0]
{
   14b98:	b086      	sub	sp, #24
	struct rpmsg_virtio_device *rvdev = vdev->priv;
   14b9a:	6a5e      	ldr	r6, [r3, #36]	; 0x24
	metal_mutex_acquire(&rdev->lock);
   14b9c:	f106 0758 	add.w	r7, r6, #88	; 0x58
	__metal_mutex_acquire(mutex);
   14ba0:	4638      	mov	r0, r7
   14ba2:	f7ff ffa7 	bl	14af4 <__metal_mutex_acquire>
	rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
   14ba6:	4630      	mov	r0, r6
   14ba8:	f10d 020a 	add.w	r2, sp, #10
   14bac:	a903      	add	r1, sp, #12
   14bae:	f7ff ff8b 	bl	14ac8 <rpmsg_virtio_get_rx_buffer>
   14bb2:	4604      	mov	r4, r0
   14bb4:	4638      	mov	r0, r7
   14bb6:	f7ff ff85 	bl	14ac4 <k_sem_give>
	while (rp_hdr) {
   14bba:	b914      	cbnz	r4, 14bc2 <rpmsg_virtio_rx_callback+0x30>
}
   14bbc:	b006      	add	sp, #24
   14bbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14bc2:	4638      	mov	r0, r7
   14bc4:	f7ff ff96 	bl	14af4 <__metal_mutex_acquire>
			     struct rpmsg_endpoint *ept);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
   14bc8:	f04f 33ff 	mov.w	r3, #4294967295
   14bcc:	2100      	movs	r1, #0
   14bce:	4630      	mov	r0, r6
   14bd0:	6862      	ldr	r2, [r4, #4]
   14bd2:	f7ff ff25 	bl	14a20 <rpmsg_get_endpoint>
   14bd6:	4605      	mov	r5, r0
   14bd8:	4638      	mov	r0, r7
   14bda:	f7ff ff73 	bl	14ac4 <k_sem_give>
		if (ept) {
   14bde:	b185      	cbz	r5, 14c02 <rpmsg_virtio_rx_callback+0x70>
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
   14be0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   14be2:	6823      	ldr	r3, [r4, #0]
   14be4:	3201      	adds	r2, #1
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   14be6:	6be9      	ldr	r1, [r5, #60]	; 0x3c
				ept->dest_addr = rp_hdr->src;
   14be8:	bf08      	it	eq
   14bea:	62ab      	streq	r3, [r5, #40]	; 0x28
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   14bec:	89a2      	ldrh	r2, [r4, #12]
   14bee:	9100      	str	r1, [sp, #0]
   14bf0:	4628      	mov	r0, r5
   14bf2:	f8d5 802c 	ldr.w	r8, [r5, #44]	; 0x2c
   14bf6:	f104 0110 	add.w	r1, r4, #16
   14bfa:	47c0      	blx	r8
			RPMSG_ASSERT(status >= 0,
   14bfc:	2800      	cmp	r0, #0
   14bfe:	da00      	bge.n	14c02 <rpmsg_virtio_rx_callback+0x70>
   14c00:	e7fe      	b.n	14c00 <rpmsg_virtio_rx_callback+0x6e>
   14c02:	4638      	mov	r0, r7
   14c04:	f7ff ff76 	bl	14af4 <__metal_mutex_acquire>
   14c08:	6ff2      	ldr	r2, [r6, #124]	; 0x7c
		rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
   14c0a:	9b03      	ldr	r3, [sp, #12]
   14c0c:	6992      	ldr	r2, [r2, #24]
	if (role == RPMSG_MASTER) {
   14c0e:	b9b2      	cbnz	r2, 14c3e <rpmsg_virtio_rx_callback+0xac>
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
   14c10:	9400      	str	r4, [sp, #0]
		vqbuf.len = len;
   14c12:	e9cd 4304 	strd	r4, r3, [sp, #16]
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
   14c16:	f8d6 0080 	ldr.w	r0, [r6, #128]	; 0x80
   14c1a:	2301      	movs	r3, #1
   14c1c:	a904      	add	r1, sp, #16
   14c1e:	f7ff fd4c 	bl	146ba <virtqueue_add_buffer>
		rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
   14c22:	4630      	mov	r0, r6
   14c24:	f10d 020a 	add.w	r2, sp, #10
   14c28:	a903      	add	r1, sp, #12
   14c2a:	f7ff ff4d 	bl	14ac8 <rpmsg_virtio_get_rx_buffer>
		if (!rp_hdr) {
   14c2e:	4604      	mov	r4, r0
   14c30:	2800      	cmp	r0, #0
   14c32:	d1bf      	bne.n	14bb4 <rpmsg_virtio_rx_callback+0x22>
			virtqueue_kick(rvdev->rvq);
   14c34:	f8d6 0080 	ldr.w	r0, [r6, #128]	; 0x80
   14c38:	f7ff fe58 	bl	148ec <virtqueue_kick>
   14c3c:	e7ba      	b.n	14bb4 <rpmsg_virtio_rx_callback+0x22>
	if (role == RPMSG_REMOTE) {
   14c3e:	2a01      	cmp	r2, #1
   14c40:	d1ef      	bne.n	14c22 <rpmsg_virtio_rx_callback+0x90>
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
   14c42:	461a      	mov	r2, r3
   14c44:	f8bd 100a 	ldrh.w	r1, [sp, #10]
   14c48:	f8d6 0080 	ldr.w	r0, [r6, #128]	; 0x80
   14c4c:	f7f9 fc82 	bl	e554 <virtqueue_add_consumed_buffer>
   14c50:	e7e7      	b.n	14c22 <rpmsg_virtio_rx_callback+0x90>

00014c52 <rpmsg_virtio_shm_pool_get_buffer>:
{
   14c52:	4603      	mov	r3, r0
	if (shpool->avail < size)
   14c54:	6842      	ldr	r2, [r0, #4]
{
   14c56:	b510      	push	{r4, lr}
	if (shpool->avail < size)
   14c58:	428a      	cmp	r2, r1
	buffer = (char *)shpool->base + shpool->size - shpool->avail;
   14c5a:	bf29      	itett	cs
   14c5c:	6880      	ldrcs	r0, [r0, #8]
		return NULL;
   14c5e:	2000      	movcc	r0, #0
	buffer = (char *)shpool->base + shpool->size - shpool->avail;
   14c60:	1a84      	subcs	r4, r0, r2
   14c62:	6818      	ldrcs	r0, [r3, #0]
	shpool->avail -= size;
   14c64:	bf22      	ittt	cs
   14c66:	1a52      	subcs	r2, r2, r1
	buffer = (char *)shpool->base + shpool->size - shpool->avail;
   14c68:	1900      	addcs	r0, r0, r4
	shpool->avail -= size;
   14c6a:	605a      	strcs	r2, [r3, #4]
}
   14c6c:	bd10      	pop	{r4, pc}

00014c6e <rpmsg_virtio_init_shm_pool>:
	if (!shpool)
   14c6e:	b110      	cbz	r0, 14c76 <rpmsg_virtio_init_shm_pool+0x8>
	shpool->avail = size;
   14c70:	e9c0 2201 	strd	r2, r2, [r0, #4]
	shpool->base = shb;
   14c74:	6001      	str	r1, [r0, #0]
}
   14c76:	4770      	bx	lr

00014c78 <z_pm_save_idle_exit>:
	z_clock_idle_exit();
   14c78:	f7fc be51 	b.w	1191e <z_clock_idle_exit>

00014c7c <k_heap_init>:
{
   14c7c:	b410      	push	{r4}
   14c7e:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   14c82:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   14c86:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   14c88:	f7fb bf1b 	b.w	10ac2 <sys_heap_init>

00014c8c <k_heap_aligned_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   14c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14c90:	b087      	sub	sp, #28
   14c92:	4604      	mov	r4, r0
   14c94:	460e      	mov	r6, r1
	int64_t now, end = z_timeout_end_calc(timeout);
   14c96:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
{
   14c9a:	4617      	mov	r7, r2
	int64_t now, end = z_timeout_end_calc(timeout);
   14c9c:	f000 fb18 	bl	152d0 <z_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   14ca0:	f104 0914 	add.w	r9, r4, #20
	int64_t now, end = z_timeout_end_calc(timeout);
   14ca4:	4605      	mov	r5, r0
   14ca6:	4688      	mov	r8, r1
	__asm__ volatile(
   14ca8:	f04f 0320 	mov.w	r3, #32
   14cac:	f3ef 8b11 	mrs	fp, BASEPRI
   14cb0:	f383 8811 	msr	BASEPRI, r3
   14cb4:	f3bf 8f6f 	isb	sy
		now = z_tick_get();
		if ((ret != NULL) || ((end - now) <= 0)) {
			break;
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   14cb8:	f104 0a0c 	add.w	sl, r4, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   14cbc:	463a      	mov	r2, r7
   14cbe:	4631      	mov	r1, r6
   14cc0:	4620      	mov	r0, r4
   14cc2:	f7fb fea1 	bl	10a08 <sys_heap_aligned_alloc>
   14cc6:	9005      	str	r0, [sp, #20]
		now = z_tick_get();
   14cc8:	f7fb f860 	bl	fd8c <z_tick_get>
		if ((ret != NULL) || ((end - now) <= 0)) {
   14ccc:	9b05      	ldr	r3, [sp, #20]
   14cce:	b13b      	cbz	r3, 14ce0 <k_heap_aligned_alloc+0x54>
	__asm__ volatile(
   14cd0:	f38b 8811 	msr	BASEPRI, fp
   14cd4:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&h->lock);
	}

	k_spin_unlock(&h->lock, key);
	return ret;
}
   14cd8:	4618      	mov	r0, r3
   14cda:	b007      	add	sp, #28
   14cdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((ret != NULL) || ((end - now) <= 0)) {
   14ce0:	1a2a      	subs	r2, r5, r0
   14ce2:	9202      	str	r2, [sp, #8]
   14ce4:	eb68 0201 	sbc.w	r2, r8, r1
   14ce8:	9203      	str	r2, [sp, #12]
   14cea:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   14cee:	2901      	cmp	r1, #1
   14cf0:	f172 0200 	sbcs.w	r2, r2, #0
   14cf4:	dbec      	blt.n	14cd0 <k_heap_aligned_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   14cf6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   14cfa:	4659      	mov	r1, fp
   14cfc:	e9cd 2300 	strd	r2, r3, [sp]
   14d00:	4648      	mov	r0, r9
   14d02:	4652      	mov	r2, sl
   14d04:	f7fa fc24 	bl	f550 <z_pend_curr>
	__asm__ volatile(
   14d08:	f04f 0320 	mov.w	r3, #32
   14d0c:	f3ef 8b11 	mrs	fp, BASEPRI
   14d10:	f383 8811 	msr	BASEPRI, r3
   14d14:	f3bf 8f6f 	isb	sy
   14d18:	e7d0      	b.n	14cbc <k_heap_aligned_alloc+0x30>

00014d1a <k_heap_free>:

void k_heap_free(struct k_heap *h, void *mem)
{
   14d1a:	b538      	push	{r3, r4, r5, lr}
   14d1c:	4604      	mov	r4, r0
   14d1e:	f04f 0320 	mov.w	r3, #32
   14d22:	f3ef 8511 	mrs	r5, BASEPRI
   14d26:	f383 8811 	msr	BASEPRI, r3
   14d2a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   14d2e:	f7fb fe1e 	bl	1096e <sys_heap_free>

	if (z_unpend_all(&h->wait_q) != 0) {
   14d32:	f104 000c 	add.w	r0, r4, #12
   14d36:	f000 f9e8 	bl	1510a <z_unpend_all>
   14d3a:	b130      	cbz	r0, 14d4a <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   14d3c:	4629      	mov	r1, r5
   14d3e:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   14d42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   14d46:	f7fa b9bb 	b.w	f0c0 <z_reschedule>
	__asm__ volatile(
   14d4a:	f385 8811 	msr	BASEPRI, r5
   14d4e:	f3bf 8f6f 	isb	sy
}
   14d52:	bd38      	pop	{r3, r4, r5, pc}

00014d54 <k_mem_slab_init>:
{
   14d54:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   14d56:	2400      	movs	r4, #0
   14d58:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   14d5a:	ea41 0402 	orr.w	r4, r1, r2
   14d5e:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   14d62:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
   14d66:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   14d68:	d10c      	bne.n	14d84 <k_mem_slab_init+0x30>
	slab->free_list = NULL;
   14d6a:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   14d6c:	42a3      	cmp	r3, r4
   14d6e:	d103      	bne.n	14d78 <k_mem_slab_init+0x24>
   14d70:	e9c0 0000 	strd	r0, r0, [r0]
}
   14d74:	2000      	movs	r0, #0
}
   14d76:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   14d78:	6945      	ldr	r5, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   14d7a:	3401      	adds	r4, #1
		*(char **)p = slab->free_list;
   14d7c:	600d      	str	r5, [r1, #0]
		slab->free_list = p;
   14d7e:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   14d80:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   14d82:	e7f3      	b.n	14d6c <k_mem_slab_init+0x18>
		return -EINVAL;
   14d84:	f06f 0015 	mvn.w	r0, #21
	return rc;
   14d88:	e7f5      	b.n	14d76 <k_mem_slab_init+0x22>

00014d8a <z_impl_k_mutex_init>:
{
   14d8a:	4603      	mov	r3, r0
	mutex->owner = NULL;
   14d8c:	2000      	movs	r0, #0
   14d8e:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
   14d92:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
   14d96:	4770      	bx	lr

00014d98 <queue_insert>:
{
   14d98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   14d9c:	4699      	mov	r9, r3
   14d9e:	4604      	mov	r4, r0
   14da0:	460d      	mov	r5, r1
   14da2:	4690      	mov	r8, r2
   14da4:	f89d 3020 	ldrb.w	r3, [sp, #32]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   14da8:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   14dac:	f04f 0220 	mov.w	r2, #32
   14db0:	f3ef 8711 	mrs	r7, BASEPRI
   14db4:	f382 8811 	msr	BASEPRI, r2
   14db8:	f3bf 8f6f 	isb	sy
	if (is_append) {
   14dbc:	b103      	cbz	r3, 14dc0 <queue_insert+0x28>
		prev = sys_sflist_peek_tail(&queue->data_q);
   14dbe:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   14dc0:	4630      	mov	r0, r6
   14dc2:	f000 f97d 	bl	150c0 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   14dc6:	b160      	cbz	r0, 14de2 <queue_insert+0x4a>
   14dc8:	2400      	movs	r4, #0
   14dca:	f8c0 8014 	str.w	r8, [r0, #20]
   14dce:	f8c0 4080 	str.w	r4, [r0, #128]	; 0x80
	z_ready_thread(thread);
   14dd2:	f000 f91a 	bl	1500a <z_ready_thread>
	z_reschedule(&queue->lock, key);
   14dd6:	4630      	mov	r0, r6
   14dd8:	4639      	mov	r1, r7
   14dda:	f7fa f971 	bl	f0c0 <z_reschedule>
	return 0;
   14dde:	2000      	movs	r0, #0
   14de0:	e00c      	b.n	14dfc <queue_insert+0x64>
	if (alloc) {
   14de2:	f1b9 0f00 	cmp.w	r9, #0
   14de6:	d01b      	beq.n	14e20 <queue_insert+0x88>
	return z_thread_aligned_alloc(0, size);
   14de8:	2108      	movs	r1, #8
   14dea:	f7fb f8f7 	bl	ffdc <z_thread_aligned_alloc>
		if (anode == NULL) {
   14dee:	b938      	cbnz	r0, 14e00 <queue_insert+0x68>
	__asm__ volatile(
   14df0:	f387 8811 	msr	BASEPRI, r7
   14df4:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   14df8:	f06f 000b 	mvn.w	r0, #11
}
   14dfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   14e00:	2301      	movs	r3, #1
		anode->data = data;
   14e02:	f8c0 8004 	str.w	r8, [r0, #4]
   14e06:	6003      	str	r3, [r0, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   14e08:	6803      	ldr	r3, [r0, #0]
   14e0a:	f003 0203 	and.w	r2, r3, #3
   14e0e:	b95d      	cbnz	r5, 14e28 <queue_insert+0x90>
	parent->next_and_flags = cur_flags | (unative_t)child;
   14e10:	6823      	ldr	r3, [r4, #0]
   14e12:	4313      	orrs	r3, r2
   14e14:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   14e16:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   14e18:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   14e1a:	b973      	cbnz	r3, 14e3a <queue_insert+0xa2>
	list->tail = node;
   14e1c:	6060      	str	r0, [r4, #4]
}
   14e1e:	e00c      	b.n	14e3a <queue_insert+0xa2>
}
   14e20:	4640      	mov	r0, r8
	node->next_and_flags = flags;
   14e22:	f8c8 9000 	str.w	r9, [r8]
}
   14e26:	e7ef      	b.n	14e08 <queue_insert+0x70>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   14e28:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   14e2a:	f033 0303 	bics.w	r3, r3, #3
   14e2e:	d110      	bne.n	14e52 <queue_insert+0xba>
	parent->next_and_flags = cur_flags | (unative_t)child;
   14e30:	6002      	str	r2, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   14e32:	6862      	ldr	r2, [r4, #4]
   14e34:	b93a      	cbnz	r2, 14e46 <queue_insert+0xae>
	list->head = node;
   14e36:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   14e3a:	2104      	movs	r1, #4
   14e3c:	f104 0010 	add.w	r0, r4, #16
   14e40:	f000 fbdd 	bl	155fe <z_handle_obj_poll_events>
   14e44:	e7c7      	b.n	14dd6 <queue_insert+0x3e>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   14e46:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   14e48:	f003 0303 	and.w	r3, r3, #3
   14e4c:	4303      	orrs	r3, r0
   14e4e:	6013      	str	r3, [r2, #0]
   14e50:	e7e4      	b.n	14e1c <queue_insert+0x84>
   14e52:	4313      	orrs	r3, r2
   14e54:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   14e56:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   14e58:	f003 0303 	and.w	r3, r3, #3
   14e5c:	4303      	orrs	r3, r0
   14e5e:	602b      	str	r3, [r5, #0]
}
   14e60:	e7eb      	b.n	14e3a <queue_insert+0xa2>

00014e62 <z_queue_node_peek>:
{
   14e62:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   14e64:	4604      	mov	r4, r0
   14e66:	b130      	cbz	r0, 14e76 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   14e68:	6802      	ldr	r2, [r0, #0]
   14e6a:	0793      	lsls	r3, r2, #30
   14e6c:	d003      	beq.n	14e76 <z_queue_node_peek+0x14>
		ret = anode->data;
   14e6e:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   14e70:	b109      	cbz	r1, 14e76 <z_queue_node_peek+0x14>
			k_free(anode);
   14e72:	f000 fbf0 	bl	15656 <k_free>
}
   14e76:	4620      	mov	r0, r4
   14e78:	bd10      	pop	{r4, pc}

00014e7a <z_impl_k_queue_init>:
	list->head = NULL;
   14e7a:	2300      	movs	r3, #0
	list->tail = NULL;
   14e7c:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dlist_init(&w->waitq);
   14e80:	f100 0308 	add.w	r3, r0, #8
   14e84:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   14e88:	f100 0310 	add.w	r3, r0, #16
   14e8c:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   14e90:	4770      	bx	lr

00014e92 <k_queue_append>:
	(void)queue_insert(queue, NULL, data, false, true);
   14e92:	2301      	movs	r3, #1
{
   14e94:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   14e96:	9300      	str	r3, [sp, #0]
   14e98:	2300      	movs	r3, #0
{
   14e9a:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   14e9c:	4619      	mov	r1, r3
   14e9e:	f7ff ff7b 	bl	14d98 <queue_insert>
}
   14ea2:	b003      	add	sp, #12
   14ea4:	f85d fb04 	ldr.w	pc, [sp], #4

00014ea8 <k_queue_prepend>:
	(void)queue_insert(queue, NULL, data, false, false);
   14ea8:	2300      	movs	r3, #0
{
   14eaa:	b507      	push	{r0, r1, r2, lr}
   14eac:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   14eae:	9300      	str	r3, [sp, #0]
   14eb0:	4619      	mov	r1, r3
   14eb2:	f7ff ff71 	bl	14d98 <queue_insert>
}
   14eb6:	b003      	add	sp, #12
   14eb8:	f85d fb04 	ldr.w	pc, [sp], #4

00014ebc <k_queue_append_list>:
{
   14ebc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   14ec0:	4605      	mov	r5, r0
   14ec2:	4616      	mov	r6, r2
	CHECKIF(head == NULL || tail == NULL) {
   14ec4:	460c      	mov	r4, r1
   14ec6:	b391      	cbz	r1, 14f2e <k_queue_append_list+0x72>
   14ec8:	b38a      	cbz	r2, 14f2e <k_queue_append_list+0x72>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   14eca:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   14ece:	f04f 0320 	mov.w	r3, #32
   14ed2:	f3ef 8811 	mrs	r8, BASEPRI
   14ed6:	f383 8811 	msr	BASEPRI, r3
   14eda:	f3bf 8f6f 	isb	sy
		thread = z_unpend_first_thread(&queue->wait_q);
   14ede:	4638      	mov	r0, r7
   14ee0:	f000 f8ee 	bl	150c0 <z_unpend_first_thread>
   14ee4:	f04f 0900 	mov.w	r9, #0
	while ((head != NULL) && (thread != NULL)) {
   14ee8:	b920      	cbnz	r0, 14ef4 <k_queue_append_list+0x38>
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   14eea:	686b      	ldr	r3, [r5, #4]
   14eec:	b9cb      	cbnz	r3, 14f22 <k_queue_append_list+0x66>
	list->head = node;
   14eee:	602c      	str	r4, [r5, #0]
	list->tail = node;
   14ef0:	606e      	str	r6, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   14ef2:	e00a      	b.n	14f0a <k_queue_append_list+0x4e>
	thread->base.swap_data = data;
   14ef4:	6144      	str	r4, [r0, #20]
   14ef6:	f8c0 9080 	str.w	r9, [r0, #128]	; 0x80
	z_ready_thread(thread);
   14efa:	f000 f886 	bl	1500a <z_ready_thread>
		head = *(void **)head;
   14efe:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   14f00:	4638      	mov	r0, r7
   14f02:	f000 f8dd 	bl	150c0 <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   14f06:	2c00      	cmp	r4, #0
   14f08:	d1ee      	bne.n	14ee8 <k_queue_append_list+0x2c>
	z_handle_obj_poll_events(&queue->poll_events, state);
   14f0a:	2104      	movs	r1, #4
   14f0c:	f105 0010 	add.w	r0, r5, #16
   14f10:	f000 fb75 	bl	155fe <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   14f14:	4638      	mov	r0, r7
   14f16:	4641      	mov	r1, r8
   14f18:	f7fa f8d2 	bl	f0c0 <z_reschedule>
	return 0;
   14f1c:	2000      	movs	r0, #0
}
   14f1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   14f22:	6819      	ldr	r1, [r3, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   14f24:	f001 0103 	and.w	r1, r1, #3
   14f28:	430c      	orrs	r4, r1
   14f2a:	601c      	str	r4, [r3, #0]
}
   14f2c:	e7e0      	b.n	14ef0 <k_queue_append_list+0x34>
		return -EINVAL;
   14f2e:	f06f 0015 	mvn.w	r0, #21
   14f32:	e7f4      	b.n	14f1e <k_queue_append_list+0x62>

00014f34 <z_is_t1_higher_prio_than_t2>:
	if (thread_1->base.prio < thread_2->base.prio) {
   14f34:	f990 000e 	ldrsb.w	r0, [r0, #14]
   14f38:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   14f3c:	4298      	cmp	r0, r3
   14f3e:	bfac      	ite	ge
   14f40:	2000      	movge	r0, #0
   14f42:	2001      	movlt	r0, #1
   14f44:	4770      	bx	lr

00014f46 <z_find_first_thread_to_unpend>:
{
   14f46:	b510      	push	{r4, lr}
   14f48:	f04f 0320 	mov.w	r3, #32
   14f4c:	f3ef 8411 	mrs	r4, BASEPRI
   14f50:	f383 8811 	msr	BASEPRI, r3
   14f54:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   14f58:	f000 f84d 	bl	14ff6 <z_priq_dumb_best>
	__asm__ volatile(
   14f5c:	f384 8811 	msr	BASEPRI, r4
   14f60:	f3bf 8f6f 	isb	sy
}
   14f64:	bd10      	pop	{r4, pc}

00014f66 <z_unpend_thread_no_timeout>:
{
   14f66:	b510      	push	{r4, lr}
	__asm__ volatile(
   14f68:	f04f 0320 	mov.w	r3, #32
   14f6c:	f3ef 8411 	mrs	r4, BASEPRI
   14f70:	f383 8811 	msr	BASEPRI, r3
   14f74:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   14f78:	f000 f81b 	bl	14fb2 <unpend_thread_no_timeout>
	__asm__ volatile(
   14f7c:	f384 8811 	msr	BASEPRI, r4
   14f80:	f3bf 8f6f 	isb	sy
}
   14f84:	bd10      	pop	{r4, pc}

00014f86 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   14f86:	4603      	mov	r3, r0
   14f88:	b920      	cbnz	r0, 14f94 <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   14f8a:	f3ef 8205 	mrs	r2, IPSR
   14f8e:	b90a      	cbnz	r2, 14f94 <z_reschedule_irqlock+0xe>
   14f90:	f7ef b824 	b.w	3fdc <arch_swap>
   14f94:	f383 8811 	msr	BASEPRI, r3
   14f98:	f3bf 8f6f 	isb	sy
}
   14f9c:	4770      	bx	lr

00014f9e <z_reschedule_unlocked>:
	__asm__ volatile(
   14f9e:	f04f 0320 	mov.w	r3, #32
   14fa2:	f3ef 8011 	mrs	r0, BASEPRI
   14fa6:	f383 8811 	msr	BASEPRI, r3
   14faa:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   14fae:	f7ff bfea 	b.w	14f86 <z_reschedule_irqlock>

00014fb2 <unpend_thread_no_timeout>:
{
   14fb2:	4601      	mov	r1, r0
   14fb4:	b508      	push	{r3, lr}
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
   14fb6:	6880      	ldr	r0, [r0, #8]
   14fb8:	f7fa f8a8 	bl	f10c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   14fbc:	7b4b      	ldrb	r3, [r1, #13]
   14fbe:	f023 0302 	bic.w	r3, r3, #2
   14fc2:	734b      	strb	r3, [r1, #13]
	thread->base.pended_on = NULL;
   14fc4:	2300      	movs	r3, #0
   14fc6:	608b      	str	r3, [r1, #8]
}
   14fc8:	bd08      	pop	{r3, pc}

00014fca <z_unpend_thread>:
{
   14fca:	b538      	push	{r3, r4, r5, lr}
   14fcc:	4604      	mov	r4, r0
   14fce:	f04f 0320 	mov.w	r3, #32
   14fd2:	f3ef 8511 	mrs	r5, BASEPRI
   14fd6:	f383 8811 	msr	BASEPRI, r3
   14fda:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   14fde:	f7ff ffe8 	bl	14fb2 <unpend_thread_no_timeout>
	__asm__ volatile(
   14fe2:	f385 8811 	msr	BASEPRI, r5
   14fe6:	f3bf 8f6f 	isb	sy
	return z_abort_timeout(&thread->base.timeout);
   14fea:	f104 0018 	add.w	r0, r4, #24
}
   14fee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   14ff2:	f000 b927 	b.w	15244 <z_abort_timeout>

00014ff6 <z_priq_dumb_best>:
{
   14ff6:	4603      	mov	r3, r0
	return list->head == list;
   14ff8:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14ffa:	4283      	cmp	r3, r0
   14ffc:	d003      	beq.n	15006 <z_priq_dumb_best+0x10>
	if (n != NULL) {
   14ffe:	2800      	cmp	r0, #0
   15000:	bf38      	it	cc
   15002:	2000      	movcc	r0, #0
   15004:	4770      	bx	lr
	struct k_thread *thread = NULL;
   15006:	2000      	movs	r0, #0
}
   15008:	4770      	bx	lr

0001500a <z_ready_thread>:
{
   1500a:	b510      	push	{r4, lr}
	__asm__ volatile(
   1500c:	f04f 0320 	mov.w	r3, #32
   15010:	f3ef 8411 	mrs	r4, BASEPRI
   15014:	f383 8811 	msr	BASEPRI, r3
   15018:	f3bf 8f6f 	isb	sy
		ready_thread(thread);
   1501c:	f7fa f8d0 	bl	f1c0 <ready_thread>
	__asm__ volatile(
   15020:	f384 8811 	msr	BASEPRI, r4
   15024:	f3bf 8f6f 	isb	sy
}
   15028:	bd10      	pop	{r4, pc}

0001502a <z_thread_timeout>:
{
   1502a:	b570      	push	{r4, r5, r6, lr}
   1502c:	4604      	mov	r4, r0
	__asm__ volatile(
   1502e:	f04f 0320 	mov.w	r3, #32
   15032:	f3ef 8611 	mrs	r6, BASEPRI
   15036:	f383 8811 	msr	BASEPRI, r3
   1503a:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
   1503e:	f850 3c10 	ldr.w	r3, [r0, #-16]
		struct k_thread *thread = CONTAINER_OF(timeout,
   15042:	f1a0 0518 	sub.w	r5, r0, #24
		if (thread->base.pended_on != NULL) {
   15046:	b113      	cbz	r3, 1504e <z_thread_timeout+0x24>
			unpend_thread_no_timeout(thread);
   15048:	4628      	mov	r0, r5
   1504a:	f7ff ffb2 	bl	14fb2 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   1504e:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		ready_thread(thread);
   15052:	4628      	mov	r0, r5
   15054:	f023 0314 	bic.w	r3, r3, #20
   15058:	f804 3c0b 	strb.w	r3, [r4, #-11]
   1505c:	f7fa f8b0 	bl	f1c0 <ready_thread>
	__asm__ volatile(
   15060:	f386 8811 	msr	BASEPRI, r6
   15064:	f3bf 8f6f 	isb	sy
}
   15068:	bd70      	pop	{r4, r5, r6, pc}

0001506a <add_to_waitq_locked>:
{
   1506a:	b538      	push	{r3, r4, r5, lr}
   1506c:	4604      	mov	r4, r0
   1506e:	460d      	mov	r5, r1
	unready_thread(thread);
   15070:	f7fa fa2e 	bl	f4d0 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   15074:	7b63      	ldrb	r3, [r4, #13]
   15076:	f043 0302 	orr.w	r3, r3, #2
   1507a:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   1507c:	b1c5      	cbz	r5, 150b0 <add_to_waitq_locked+0x46>
	return list->head == list;
   1507e:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   15080:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15082:	429d      	cmp	r5, r3
   15084:	bf08      	it	eq
   15086:	2300      	moveq	r3, #0
   15088:	2b00      	cmp	r3, #0
   1508a:	bf38      	it	cc
   1508c:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1508e:	b183      	cbz	r3, 150b2 <add_to_waitq_locked+0x48>
	if (thread_1->base.prio < thread_2->base.prio) {
   15090:	f994 100e 	ldrsb.w	r1, [r4, #14]
   15094:	f993 200e 	ldrsb.w	r2, [r3, #14]
   15098:	4291      	cmp	r1, r2
   1509a:	db04      	blt.n	150a6 <add_to_waitq_locked+0x3c>
	return (node == list->tail) ? NULL : node->next;
   1509c:	686a      	ldr	r2, [r5, #4]
   1509e:	429a      	cmp	r2, r3
   150a0:	d007      	beq.n	150b2 <add_to_waitq_locked+0x48>
   150a2:	681b      	ldr	r3, [r3, #0]
   150a4:	e7f3      	b.n	1508e <add_to_waitq_locked+0x24>
	node->prev = successor->prev;
   150a6:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   150a8:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   150ac:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   150ae:	605c      	str	r4, [r3, #4]
}
   150b0:	bd38      	pop	{r3, r4, r5, pc}
	node->prev = list->tail;
   150b2:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   150b4:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   150b6:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   150b8:	686b      	ldr	r3, [r5, #4]
   150ba:	601c      	str	r4, [r3, #0]
	list->tail = node;
   150bc:	606c      	str	r4, [r5, #4]
   150be:	e7f7      	b.n	150b0 <add_to_waitq_locked+0x46>

000150c0 <z_unpend_first_thread>:
{
   150c0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   150c2:	f04f 0320 	mov.w	r3, #32
   150c6:	f3ef 8211 	mrs	r2, BASEPRI
   150ca:	f383 8811 	msr	BASEPRI, r3
   150ce:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   150d2:	f7ff ff90 	bl	14ff6 <z_priq_dumb_best>
   150d6:	4604      	mov	r4, r0
	__asm__ volatile(
   150d8:	f382 8811 	msr	BASEPRI, r2
   150dc:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   150e0:	b188      	cbz	r0, 15106 <z_unpend_first_thread+0x46>
	__asm__ volatile(
   150e2:	f04f 0320 	mov.w	r3, #32
   150e6:	f3ef 8511 	mrs	r5, BASEPRI
   150ea:	f383 8811 	msr	BASEPRI, r3
   150ee:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   150f2:	f7ff ff5e 	bl	14fb2 <unpend_thread_no_timeout>
	__asm__ volatile(
   150f6:	f385 8811 	msr	BASEPRI, r5
   150fa:	f3bf 8f6f 	isb	sy
   150fe:	f104 0018 	add.w	r0, r4, #24
   15102:	f000 f89f 	bl	15244 <z_abort_timeout>
}
   15106:	4620      	mov	r0, r4
   15108:	bd38      	pop	{r3, r4, r5, pc}

0001510a <z_unpend_all>:
{
   1510a:	b538      	push	{r3, r4, r5, lr}
   1510c:	4605      	mov	r5, r0
	int need_sched = 0;
   1510e:	2000      	movs	r0, #0
	return list->head == list;
   15110:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15112:	42a5      	cmp	r5, r4
   15114:	d000      	beq.n	15118 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   15116:	b904      	cbnz	r4, 1511a <z_unpend_all+0x10>
}
   15118:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   1511a:	4620      	mov	r0, r4
   1511c:	f7ff ff55 	bl	14fca <z_unpend_thread>
		z_ready_thread(thread);
   15120:	4620      	mov	r0, r4
   15122:	f7ff ff72 	bl	1500a <z_ready_thread>
		need_sched = 1;
   15126:	2001      	movs	r0, #1
   15128:	e7f2      	b.n	15110 <z_unpend_all+0x6>

0001512a <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || initial_count > limit) {
   1512a:	b15a      	cbz	r2, 15144 <z_impl_k_sem_init+0x1a>
   1512c:	428a      	cmp	r2, r1
   1512e:	d309      	bcc.n	15144 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   15130:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   15134:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   15138:	e9c0 0000 	strd	r0, r0, [r0]
   1513c:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   15140:	2000      	movs	r0, #0
   15142:	4770      	bx	lr
		return -EINVAL;
   15144:	f06f 0015 	mvn.w	r0, #21
}
   15148:	4770      	bx	lr

0001514a <k_is_in_isr>:
   1514a:	f3ef 8005 	mrs	r0, IPSR
}
   1514e:	3800      	subs	r0, #0
   15150:	bf18      	it	ne
   15152:	2001      	movne	r0, #1
   15154:	4770      	bx	lr

00015156 <z_impl_k_busy_wait>:
	if (usec_to_wait == 0) {
   15156:	b108      	cbz	r0, 1515c <z_impl_k_busy_wait+0x6>
	arch_busy_wait(usec_to_wait);
   15158:	f7ec ba8e 	b.w	1678 <arch_busy_wait>
}
   1515c:	4770      	bx	lr

0001515e <z_impl_k_thread_name_set>:
}
   1515e:	f06f 0046 	mvn.w	r0, #70	; 0x46
   15162:	4770      	bx	lr

00015164 <k_thread_name_get>:
}
   15164:	2000      	movs	r0, #0
   15166:	4770      	bx	lr

00015168 <k_work_submit_to_queue>:
{
   15168:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1516a:	f101 0308 	add.w	r3, r1, #8
   1516e:	e8d3 2fef 	ldaex	r2, [r3]
   15172:	f042 0c01 	orr.w	ip, r2, #1
   15176:	e8c3 cfee 	stlex	lr, ip, [r3]
   1517a:	f1be 0f00 	cmp.w	lr, #0
   1517e:	d1f6      	bne.n	1516e <k_work_submit_to_queue+0x6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   15180:	07d3      	lsls	r3, r2, #31
   15182:	d403      	bmi.n	1518c <k_work_submit_to_queue+0x24>
}
   15184:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   15188:	f7ff be83 	b.w	14e92 <k_queue_append>
}
   1518c:	f85d fb04 	ldr.w	pc, [sp], #4

00015190 <work_timeout>:
	k_work_submit_to_queue(w->work_q, &w->work);
   15190:	f1a0 0110 	sub.w	r1, r0, #16
   15194:	6980      	ldr	r0, [r0, #24]
   15196:	f7ff bfe7 	b.w	15168 <k_work_submit_to_queue>

0001519a <work_cancel>:
{
   1519a:	b570      	push	{r4, r5, r6, lr}
   1519c:	4604      	mov	r4, r0
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   1519e:	f100 0508 	add.w	r5, r0, #8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   151a2:	e8d5 3faf 	lda	r3, [r5]
	if (k_work_pending(&work->work)) {
   151a6:	07db      	lsls	r3, r3, #31
   151a8:	d52f      	bpl.n	1520a <work_cancel+0x70>
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   151aa:	2100      	movs	r1, #0
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   151ac:	6a82      	ldr	r2, [r0, #40]	; 0x28
   151ae:	6813      	ldr	r3, [r2, #0]
   151b0:	b913      	cbnz	r3, 151b8 <work_cancel+0x1e>
			return -EINVAL;
   151b2:	f06f 0015 	mvn.w	r0, #21
}
   151b6:	bd70      	pop	{r4, r5, r6, pc}
   151b8:	429c      	cmp	r4, r3
   151ba:	d121      	bne.n	15200 <work_cancel+0x66>
Z_GENLIST_REMOVE(sflist, sfnode)
   151bc:	6823      	ldr	r3, [r4, #0]
   151be:	6856      	ldr	r6, [r2, #4]
   151c0:	f023 0003 	bic.w	r0, r3, #3
   151c4:	b991      	cbnz	r1, 151ec <work_cancel+0x52>
   151c6:	42b4      	cmp	r4, r6
	list->head = node;
   151c8:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   151ca:	d100      	bne.n	151ce <work_cancel+0x34>
	list->tail = node;
   151cc:	6050      	str	r0, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   151ce:	6823      	ldr	r3, [r4, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   151d0:	f003 0303 	and.w	r3, r3, #3
   151d4:	6023      	str	r3, [r4, #0]
	work->work_q = NULL;
   151d6:	2000      	movs	r0, #0
   151d8:	62a0      	str	r0, [r4, #40]	; 0x28
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   151da:	e8d5 3fef 	ldaex	r3, [r5]
   151de:	f023 0301 	bic.w	r3, r3, #1
   151e2:	e8c5 3fe2 	stlex	r2, r3, [r5]
   151e6:	2a00      	cmp	r2, #0
   151e8:	d0e5      	beq.n	151b6 <work_cancel+0x1c>
   151ea:	e7f6      	b.n	151da <work_cancel+0x40>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   151ec:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   151ee:	42b4      	cmp	r4, r6
	parent->next_and_flags = cur_flags | (unative_t)child;
   151f0:	f003 0303 	and.w	r3, r3, #3
   151f4:	ea43 0300 	orr.w	r3, r3, r0
   151f8:	600b      	str	r3, [r1, #0]
	list->tail = node;
   151fa:	bf08      	it	eq
   151fc:	6051      	streq	r1, [r2, #4]
}
   151fe:	e7e6      	b.n	151ce <work_cancel+0x34>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   15200:	6818      	ldr	r0, [r3, #0]
   15202:	4619      	mov	r1, r3
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   15204:	f020 0303 	bic.w	r3, r0, #3
   15208:	e7d2      	b.n	151b0 <work_cancel+0x16>
		int err = z_abort_timeout(&work->timeout);
   1520a:	3010      	adds	r0, #16
   1520c:	f000 f81a 	bl	15244 <z_abort_timeout>
		if (err) {
   15210:	2800      	cmp	r0, #0
   15212:	d0e0      	beq.n	151d6 <work_cancel+0x3c>
			return -EALREADY;
   15214:	f06f 0044 	mvn.w	r0, #68	; 0x44
   15218:	e7cd      	b.n	151b6 <work_cancel+0x1c>

0001521a <k_delayed_work_cancel>:

int k_delayed_work_cancel(struct k_delayed_work *work)
{
   1521a:	b510      	push	{r4, lr}
	__asm__ volatile(
   1521c:	f04f 0220 	mov.w	r2, #32
   15220:	f3ef 8411 	mrs	r4, BASEPRI
   15224:	f382 8811 	msr	BASEPRI, r2
   15228:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = -EINVAL;

	if (work->work_q != NULL) {
   1522c:	6a83      	ldr	r3, [r0, #40]	; 0x28
   1522e:	b133      	cbz	r3, 1523e <k_delayed_work_cancel+0x24>
		ret = work_cancel(work);
   15230:	f7ff ffb3 	bl	1519a <work_cancel>
	__asm__ volatile(
   15234:	f384 8811 	msr	BASEPRI, r4
   15238:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);
	return ret;
}
   1523c:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   1523e:	f06f 0015 	mvn.w	r0, #21
   15242:	e7f7      	b.n	15234 <k_delayed_work_cancel+0x1a>

00015244 <z_abort_timeout>:
{
   15244:	b510      	push	{r4, lr}
	__asm__ volatile(
   15246:	f04f 0220 	mov.w	r2, #32
   1524a:	f3ef 8411 	mrs	r4, BASEPRI
   1524e:	f382 8811 	msr	BASEPRI, r2
   15252:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   15256:	6803      	ldr	r3, [r0, #0]
   15258:	b13b      	cbz	r3, 1526a <z_abort_timeout+0x26>
			remove_timeout(to);
   1525a:	f7fa fc59 	bl	fb10 <remove_timeout>
			ret = 0;
   1525e:	2000      	movs	r0, #0
	__asm__ volatile(
   15260:	f384 8811 	msr	BASEPRI, r4
   15264:	f3bf 8f6f 	isb	sy
}
   15268:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   1526a:	f06f 0015 	mvn.w	r0, #21
   1526e:	e7f7      	b.n	15260 <z_abort_timeout+0x1c>

00015270 <z_get_next_timeout_expiry>:
{
   15270:	b510      	push	{r4, lr}
	__asm__ volatile(
   15272:	f04f 0320 	mov.w	r3, #32
   15276:	f3ef 8411 	mrs	r4, BASEPRI
   1527a:	f383 8811 	msr	BASEPRI, r3
   1527e:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   15282:	f7fa fc5f 	bl	fb44 <next_timeout>
	__asm__ volatile(
   15286:	f384 8811 	msr	BASEPRI, r4
   1528a:	f3bf 8f6f 	isb	sy
}
   1528e:	bd10      	pop	{r4, pc}

00015290 <z_set_timeout_expiry>:
{
   15290:	b570      	push	{r4, r5, r6, lr}
   15292:	4604      	mov	r4, r0
   15294:	460d      	mov	r5, r1
	__asm__ volatile(
   15296:	f04f 0320 	mov.w	r3, #32
   1529a:	f3ef 8611 	mrs	r6, BASEPRI
   1529e:	f383 8811 	msr	BASEPRI, r3
   152a2:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   152a6:	f7fa fc4d 	bl	fb44 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   152aa:	2801      	cmp	r0, #1
   152ac:	dd05      	ble.n	152ba <z_set_timeout_expiry+0x2a>
   152ae:	42a0      	cmp	r0, r4
   152b0:	dd03      	ble.n	152ba <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, is_idle);
   152b2:	4629      	mov	r1, r5
   152b4:	4620      	mov	r0, r4
   152b6:	f7ee fb7f 	bl	39b8 <z_clock_set_timeout>
	__asm__ volatile(
   152ba:	f386 8811 	msr	BASEPRI, r6
   152be:	f3bf 8f6f 	isb	sy
}
   152c2:	bd70      	pop	{r4, r5, r6, pc}

000152c4 <z_tick_get_32>:

uint32_t z_tick_get_32(void)
{
   152c4:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)z_tick_get();
   152c6:	f7fa fd61 	bl	fd8c <z_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   152ca:	bd08      	pop	{r3, pc}

000152cc <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return z_tick_get();
   152cc:	f7fa bd5e 	b.w	fd8c <z_tick_get>

000152d0 <z_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t z_timeout_end_calc(k_timeout_t timeout)
{
   152d0:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   152d2:	1c4b      	adds	r3, r1, #1
   152d4:	bf08      	it	eq
   152d6:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   152da:	4604      	mov	r4, r0
   152dc:	460d      	mov	r5, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   152de:	d013      	beq.n	15308 <z_timeout_end_calc+0x38>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   152e0:	ea54 0105 	orrs.w	r1, r4, r5
   152e4:	d103      	bne.n	152ee <z_timeout_end_calc+0x1e>

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
		return Z_TICK_ABS(dt);
	}
	return z_tick_get() + MAX(1, dt);
}
   152e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return z_tick_get();
   152ea:	f7fa bd4f 	b.w	fd8c <z_tick_get>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   152ee:	f06f 0101 	mvn.w	r1, #1
   152f2:	1a0a      	subs	r2, r1, r0
   152f4:	f04f 31ff 	mov.w	r1, #4294967295
   152f8:	eb61 0305 	sbc.w	r3, r1, r5
   152fc:	2a00      	cmp	r2, #0
   152fe:	f173 0100 	sbcs.w	r1, r3, #0
   15302:	db02      	blt.n	1530a <z_timeout_end_calc+0x3a>
		return Z_TICK_ABS(dt);
   15304:	4610      	mov	r0, r2
   15306:	4619      	mov	r1, r3
}
   15308:	bd38      	pop	{r3, r4, r5, pc}
	return z_tick_get() + MAX(1, dt);
   1530a:	f7fa fd3f 	bl	fd8c <z_tick_get>
   1530e:	2c01      	cmp	r4, #1
   15310:	f175 0300 	sbcs.w	r3, r5, #0
   15314:	bfbc      	itt	lt
   15316:	2401      	movlt	r4, #1
   15318:	2500      	movlt	r5, #0
   1531a:	1820      	adds	r0, r4, r0
   1531c:	eb45 0101 	adc.w	r1, r5, r1
   15320:	e7f2      	b.n	15308 <z_timeout_end_calc+0x38>

00015322 <k_timer_init>:
	timer->status = 0U;
   15322:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   15324:	e9c0 1208 	strd	r1, r2, [r0, #32]
   15328:	f100 0218 	add.w	r2, r0, #24
   1532c:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   15330:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   15334:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   15336:	6343      	str	r3, [r0, #52]	; 0x34
}
   15338:	4770      	bx	lr

0001533a <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   1533a:	b510      	push	{r4, lr}
   1533c:	4604      	mov	r4, r0
	int inactive = z_abort_timeout(&timer->timeout) != 0;
   1533e:	f7ff ff81 	bl	15244 <z_abort_timeout>

	if (inactive) {
   15342:	b9d8      	cbnz	r0, 1537c <z_impl_k_timer_stop+0x42>
		return;
	}

	if (timer->stop_fn != NULL) {
   15344:	6a63      	ldr	r3, [r4, #36]	; 0x24
   15346:	b10b      	cbz	r3, 1534c <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   15348:	4620      	mov	r0, r4
   1534a:	4798      	blx	r3
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);
   1534c:	f104 0018 	add.w	r0, r4, #24
   15350:	2100      	movs	r1, #0
   15352:	f7ff fdf8 	bl	14f46 <z_find_first_thread_to_unpend>
	if (thread != NULL) {
   15356:	4604      	mov	r4, r0
   15358:	b180      	cbz	r0, 1537c <z_impl_k_timer_stop+0x42>
		z_unpend_thread_no_timeout(thread);
   1535a:	f7ff fe04 	bl	14f66 <z_unpend_thread_no_timeout>
	}

	struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);

	if (pending_thread != NULL) {
		z_ready_thread(pending_thread);
   1535e:	4620      	mov	r0, r4
   15360:	f7ff fe53 	bl	1500a <z_ready_thread>
	__asm__ volatile(
   15364:	f04f 0320 	mov.w	r3, #32
   15368:	f3ef 8011 	mrs	r0, BASEPRI
   1536c:	f383 8811 	msr	BASEPRI, r3
   15370:	f3bf 8f6f 	isb	sy
		z_reschedule_unlocked();
	}
}
   15374:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   15378:	f7ff be05 	b.w	14f86 <z_reschedule_irqlock>
   1537c:	bd10      	pop	{r4, pc}

0001537e <clear_event_registrations>:
	while (num_events--) {
   1537e:	2314      	movs	r3, #20
{
   15380:	b530      	push	{r4, r5, lr}
	event->poller = NULL;
   15382:	2400      	movs	r4, #0
   15384:	fb03 0101 	mla	r1, r3, r1, r0
	while (num_events--) {
   15388:	4281      	cmp	r1, r0
   1538a:	d100      	bne.n	1538e <clear_event_registrations+0x10>
}
   1538c:	bd30      	pop	{r4, r5, pc}
	switch (event->type) {
   1538e:	f811 3c07 	ldrb.w	r3, [r1, #-7]
	event->poller = NULL;
   15392:	f841 4c0c 	str.w	r4, [r1, #-12]
	switch (event->type) {
   15396:	f003 030f 	and.w	r3, r3, #15
   1539a:	2b02      	cmp	r3, #2
   1539c:	d80a      	bhi.n	153b4 <clear_event_registrations+0x36>
   1539e:	b15b      	cbz	r3, 153b8 <clear_event_registrations+0x3a>
	if (remove && sys_dnode_is_linked(&event->_node)) {
   153a0:	f851 3c14 	ldr.w	r3, [r1, #-20]
   153a4:	b143      	cbz	r3, 153b8 <clear_event_registrations+0x3a>
	node->prev->next = node->next;
   153a6:	f851 5c10 	ldr.w	r5, [r1, #-16]
   153aa:	602b      	str	r3, [r5, #0]
	node->next->prev = node->prev;
   153ac:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   153ae:	e941 4405 	strd	r4, r4, [r1, #-20]
}
   153b2:	e001      	b.n	153b8 <clear_event_registrations+0x3a>
	switch (event->type) {
   153b4:	2b04      	cmp	r3, #4
   153b6:	d0f3      	beq.n	153a0 <clear_event_registrations+0x22>
	__asm__ volatile(
   153b8:	f382 8811 	msr	BASEPRI, r2
   153bc:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   153c0:	f04f 0320 	mov.w	r3, #32
   153c4:	f3ef 8211 	mrs	r2, BASEPRI
   153c8:	f383 8811 	msr	BASEPRI, r3
   153cc:	f3bf 8f6f 	isb	sy
   153d0:	3914      	subs	r1, #20
   153d2:	e7d9      	b.n	15388 <clear_event_registrations+0xa>

000153d4 <k_work_submit_to_queue>:
{
   153d4:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   153d6:	f101 0308 	add.w	r3, r1, #8
   153da:	e8d3 2fef 	ldaex	r2, [r3]
   153de:	f042 0c01 	orr.w	ip, r2, #1
   153e2:	e8c3 cfee 	stlex	lr, ip, [r3]
   153e6:	f1be 0f00 	cmp.w	lr, #0
   153ea:	d1f6      	bne.n	153da <k_work_submit_to_queue+0x6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   153ec:	07d3      	lsls	r3, r2, #31
   153ee:	d403      	bmi.n	153f8 <k_work_submit_to_queue+0x24>
}
   153f0:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   153f4:	f7ff bd4d 	b.w	14e92 <k_queue_append>
}
   153f8:	f85d fb04 	ldr.w	pc, [sp], #4

000153fc <signal_poll_event>:
{
   153fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   15400:	6884      	ldr	r4, [r0, #8]
{
   15402:	4605      	mov	r5, r0
   15404:	460e      	mov	r6, r1
	if (poller) {
   15406:	b144      	cbz	r4, 1541a <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   15408:	7863      	ldrb	r3, [r4, #1]
   1540a:	2b01      	cmp	r3, #1
   1540c:	d138      	bne.n	15480 <signal_poll_event+0x84>
	if (!z_is_thread_pending(thread)) {
   1540e:	f814 3c57 	ldrb.w	r3, [r4, #-87]
   15412:	f013 0302 	ands.w	r3, r3, #2
   15416:	d10a      	bne.n	1542e <signal_poll_event+0x32>
		poller->is_polling = false;
   15418:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   1541a:	2000      	movs	r0, #0
	event->state |= state;
   1541c:	68eb      	ldr	r3, [r5, #12]
	event->poller = NULL;
   1541e:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   15420:	f3c3 3104 	ubfx	r1, r3, #12, #5
   15424:	430e      	orrs	r6, r1
   15426:	f366 3310 	bfi	r3, r6, #12, #5
   1542a:	60eb      	str	r3, [r5, #12]
	return retcode;
   1542c:	e00d      	b.n	1544a <signal_poll_event+0x4e>
	if (z_is_thread_timeout_expired(thread)) {
   1542e:	f04f 31ff 	mov.w	r1, #4294967295
   15432:	e954 230f 	ldrd	r2, r3, [r4, #-60]	; 0x3c
   15436:	f06f 0001 	mvn.w	r0, #1
   1543a:	428b      	cmp	r3, r1
   1543c:	bf08      	it	eq
   1543e:	4282      	cmpeq	r2, r0
   15440:	d105      	bne.n	1544e <signal_poll_event+0x52>
		poller->is_polling = false;
   15442:	2300      	movs	r3, #0
		return -EAGAIN;
   15444:	f06f 000a 	mvn.w	r0, #10
		poller->is_polling = false;
   15448:	7023      	strb	r3, [r4, #0]
}
   1544a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1544e:	f1a4 0864 	sub.w	r8, r4, #100	; 0x64
	z_unpend_thread(thread);
   15452:	4640      	mov	r0, r8
   15454:	f7ff fdb9 	bl	14fca <z_unpend_thread>
	arch_thread_return_value_set(thread,
   15458:	2e08      	cmp	r6, #8
   1545a:	bf0c      	ite	eq
   1545c:	f06f 0303 	mvneq.w	r3, #3
   15460:	2300      	movne	r3, #0
   15462:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   15464:	f814 3c57 	ldrb.w	r3, [r4, #-87]
   15468:	06db      	lsls	r3, r3, #27
   1546a:	d102      	bne.n	15472 <signal_poll_event+0x76>
	if (!z_is_thread_ready(thread)) {
   1546c:	f854 7c4c 	ldr.w	r7, [r4, #-76]
   15470:	b10f      	cbz	r7, 15476 <signal_poll_event+0x7a>
		poller->is_polling = false;
   15472:	2300      	movs	r3, #0
   15474:	e7d0      	b.n	15418 <signal_poll_event+0x1c>
	z_ready_thread(thread);
   15476:	4640      	mov	r0, r8
   15478:	f7ff fdc7 	bl	1500a <z_ready_thread>
		poller->is_polling = false;
   1547c:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   1547e:	e7cc      	b.n	1541a <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   15480:	2b02      	cmp	r3, #2
   15482:	d1f6      	bne.n	15472 <signal_poll_event+0x76>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   15484:	7823      	ldrb	r3, [r4, #0]
   15486:	2b00      	cmp	r3, #0
   15488:	d0c7      	beq.n	1541a <signal_poll_event+0x1e>
   1548a:	f854 7c04 	ldr.w	r7, [r4, #-4]
   1548e:	2f00      	cmp	r7, #0
   15490:	d0f4      	beq.n	1547c <signal_poll_event+0x80>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   15492:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   15496:	f1a4 0910 	sub.w	r9, r4, #16
   1549a:	f104 0010 	add.w	r0, r4, #16
   1549e:	f7ff fed1 	bl	15244 <z_abort_timeout>
		k_work_submit_to_queue(work_q, &twork->work);
   154a2:	4649      	mov	r1, r9
   154a4:	4638      	mov	r0, r7
		twork->poll_result = 0;
   154a6:	f8c4 8028 	str.w	r8, [r4, #40]	; 0x28
		k_work_submit_to_queue(work_q, &twork->work);
   154aa:	f7ff ff93 	bl	153d4 <k_work_submit_to_queue>
		poller->is_polling = false;
   154ae:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   154b2:	e7b2      	b.n	1541a <signal_poll_event+0x1e>

000154b4 <add_event>:
{
   154b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   154b6:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   154b8:	e9d0 2300 	ldrd	r2, r3, [r0]
   154bc:	4290      	cmp	r0, r2
   154be:	4604      	mov	r4, r0
   154c0:	460d      	mov	r5, r1
   154c2:	d106      	bne.n	154d2 <add_event+0x1e>
	node->prev = list->tail;
   154c4:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   154c6:	602c      	str	r4, [r5, #0]
	node->prev = list->tail;
   154c8:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   154ca:	6863      	ldr	r3, [r4, #4]
   154cc:	601d      	str	r5, [r3, #0]
	list->tail = node;
   154ce:	6065      	str	r5, [r4, #4]
}
   154d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   154d2:	2b00      	cmp	r3, #0
   154d4:	d0f6      	beq.n	154c4 <add_event+0x10>
	    z_is_t1_higher_prio_than_t2(poller_thread(pending->poller),
   154d6:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   154d8:	b100      	cbz	r0, 154dc <add_event+0x28>
   154da:	3864      	subs	r0, #100	; 0x64
   154dc:	b107      	cbz	r7, 154e0 <add_event+0x2c>
   154de:	3f64      	subs	r7, #100	; 0x64
	    z_is_t1_higher_prio_than_t2(poller_thread(pending->poller),
   154e0:	4639      	mov	r1, r7
   154e2:	f7ff fd27 	bl	14f34 <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   154e6:	2800      	cmp	r0, #0
   154e8:	d1ec      	bne.n	154c4 <add_event+0x10>
	return list->head == list;
   154ea:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   154ec:	42b4      	cmp	r4, r6
   154ee:	d0e9      	beq.n	154c4 <add_event+0x10>
   154f0:	2e00      	cmp	r6, #0
   154f2:	bf38      	it	cc
   154f4:	2600      	movcc	r6, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   154f6:	2e00      	cmp	r6, #0
   154f8:	d0e4      	beq.n	154c4 <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller_thread(poller),
   154fa:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   154fc:	b101      	cbz	r1, 15500 <add_event+0x4c>
   154fe:	3964      	subs	r1, #100	; 0x64
		if (z_is_t1_higher_prio_than_t2(poller_thread(poller),
   15500:	4638      	mov	r0, r7
   15502:	f7ff fd17 	bl	14f34 <z_is_t1_higher_prio_than_t2>
   15506:	b128      	cbz	r0, 15514 <add_event+0x60>
	node->prev = successor->prev;
   15508:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   1550a:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
   1550e:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   15510:	6075      	str	r5, [r6, #4]
			return;
   15512:	e7dd      	b.n	154d0 <add_event+0x1c>
	return (node == list->tail) ? NULL : node->next;
   15514:	6863      	ldr	r3, [r4, #4]
   15516:	42b3      	cmp	r3, r6
   15518:	d0d4      	beq.n	154c4 <add_event+0x10>
   1551a:	6836      	ldr	r6, [r6, #0]
   1551c:	e7eb      	b.n	154f6 <add_event+0x42>

0001551e <register_events>:
{
   1551e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   15522:	f04f 0a00 	mov.w	sl, #0
{
   15526:	460e      	mov	r6, r1
   15528:	4614      	mov	r4, r2
   1552a:	461f      	mov	r7, r3
   1552c:	4683      	mov	fp, r0
	int events_registered = 0;
   1552e:	4655      	mov	r5, sl
	event->poller = NULL;
   15530:	46d0      	mov	r8, sl
	for (int ii = 0; ii < num_events; ii++) {
   15532:	45b2      	cmp	sl, r6
   15534:	db02      	blt.n	1553c <register_events+0x1e>
}
   15536:	4628      	mov	r0, r5
   15538:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1553c:	f04f 0320 	mov.w	r3, #32
   15540:	f3ef 8911 	mrs	r9, BASEPRI
   15544:	f383 8811 	msr	BASEPRI, r3
   15548:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   1554c:	f89b 200d 	ldrb.w	r2, [fp, #13]
   15550:	f002 020f 	and.w	r2, r2, #15
   15554:	2a02      	cmp	r2, #2
   15556:	d006      	beq.n	15566 <register_events+0x48>
   15558:	2a04      	cmp	r2, #4
   1555a:	d008      	beq.n	1556e <register_events+0x50>
   1555c:	2a01      	cmp	r2, #1
   1555e:	d120      	bne.n	155a2 <register_events+0x84>
		if (event->signal->signaled != 0U) {
   15560:	f8db 3010 	ldr.w	r3, [fp, #16]
   15564:	e001      	b.n	1556a <register_events+0x4c>
		if (k_sem_count_get(event->sem) > 0U) {
   15566:	f8db 3010 	ldr.w	r3, [fp, #16]
		if (event->signal->signaled != 0U) {
   1556a:	689b      	ldr	r3, [r3, #8]
   1556c:	e002      	b.n	15574 <register_events+0x56>
		if (!k_queue_is_empty(event->queue)) {
   1556e:	f8db 3010 	ldr.w	r3, [fp, #16]
   15572:	681b      	ldr	r3, [r3, #0]
		if (event->signal->signaled != 0U) {
   15574:	b1ab      	cbz	r3, 155a2 <register_events+0x84>
	event->state |= state;
   15576:	f8db 300c 	ldr.w	r3, [fp, #12]
	event->poller = NULL;
   1557a:	f8cb 8008 	str.w	r8, [fp, #8]
	event->state |= state;
   1557e:	f3c3 3104 	ubfx	r1, r3, #12, #5
   15582:	430a      	orrs	r2, r1
   15584:	f362 3310 	bfi	r3, r2, #12, #5
   15588:	f8cb 300c 	str.w	r3, [fp, #12]
			poller->is_polling = false;
   1558c:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   15590:	f389 8811 	msr	BASEPRI, r9
   15594:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   15598:	f10a 0a01 	add.w	sl, sl, #1
   1559c:	f10b 0b14 	add.w	fp, fp, #20
   155a0:	e7c7      	b.n	15532 <register_events+0x14>
		} else if (!just_check && poller->is_polling) {
   155a2:	2f00      	cmp	r7, #0
   155a4:	d1f4      	bne.n	15590 <register_events+0x72>
   155a6:	7823      	ldrb	r3, [r4, #0]
   155a8:	2b00      	cmp	r3, #0
   155aa:	d0f1      	beq.n	15590 <register_events+0x72>
	switch (event->type) {
   155ac:	f89b 300d 	ldrb.w	r3, [fp, #13]
   155b0:	f003 030f 	and.w	r3, r3, #15
   155b4:	2b02      	cmp	r3, #2
   155b6:	d008      	beq.n	155ca <register_events+0xac>
   155b8:	2b04      	cmp	r3, #4
   155ba:	d006      	beq.n	155ca <register_events+0xac>
   155bc:	2b01      	cmp	r3, #1
   155be:	d10b      	bne.n	155d8 <register_events+0xba>
		add_event(&event->signal->poll_events, event, poller);
   155c0:	4622      	mov	r2, r4
   155c2:	4659      	mov	r1, fp
   155c4:	f8db 0010 	ldr.w	r0, [fp, #16]
   155c8:	e004      	b.n	155d4 <register_events+0xb6>
		add_event(&event->queue->poll_events, event, poller);
   155ca:	4622      	mov	r2, r4
   155cc:	4659      	mov	r1, fp
   155ce:	f8db 0010 	ldr.w	r0, [fp, #16]
   155d2:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
   155d4:	f7ff ff6e 	bl	154b4 <add_event>
	event->poller = poller;
   155d8:	f8cb 4008 	str.w	r4, [fp, #8]
			events_registered += 1;
   155dc:	3501      	adds	r5, #1
   155de:	e7d7      	b.n	15590 <register_events+0x72>

000155e0 <k_poll_event_init>:
{
   155e0:	b510      	push	{r4, lr}
	event->poller = NULL;
   155e2:	2400      	movs	r4, #0
	event->type = type;
   155e4:	0452      	lsls	r2, r2, #17
   155e6:	0209      	lsls	r1, r1, #8
   155e8:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
   155ec:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
   155f0:	430a      	orrs	r2, r1
   155f2:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   155f4:	6084      	str	r4, [r0, #8]
	event->type = type;
   155f6:	430a      	orrs	r2, r1
	event->obj = obj;
   155f8:	e9c0 2303 	strd	r2, r3, [r0, #12]
}
   155fc:	bd10      	pop	{r4, pc}

000155fe <z_handle_obj_poll_events>:
{
   155fe:	4603      	mov	r3, r0
	return list->head == list;
   15600:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   15602:	4283      	cmp	r3, r0
   15604:	d008      	beq.n	15618 <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
   15606:	e9d0 3200 	ldrd	r3, r2, [r0]
   1560a:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1560c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1560e:	2300      	movs	r3, #0
	node->prev = NULL;
   15610:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   15614:	f7ff bef2 	b.w	153fc <signal_poll_event>
}
   15618:	4770      	bx	lr

0001561a <z_heap_aligned_alloc>:
	size_t excess = MAX(sizeof(struct k_heap *), align);
   1561a:	2904      	cmp	r1, #4
{
   1561c:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
	size_t excess = MAX(sizeof(struct k_heap *), align);
   15620:	460d      	mov	r5, r1
   15622:	bf38      	it	cc
   15624:	2504      	movcc	r5, #4
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   15626:	1952      	adds	r2, r2, r5
{
   15628:	4606      	mov	r6, r0
   1562a:	d209      	bcs.n	15640 <z_heap_aligned_alloc+0x26>
	mem = k_heap_aligned_alloc(heap, align, size, K_NO_WAIT);
   1562c:	f04f 0800 	mov.w	r8, #0
   15630:	f04f 0900 	mov.w	r9, #0
   15634:	e9cd 8900 	strd	r8, r9, [sp]
   15638:	f7ff fb28 	bl	14c8c <k_heap_aligned_alloc>
	if (mem == NULL) {
   1563c:	4604      	mov	r4, r0
   1563e:	b918      	cbnz	r0, 15648 <z_heap_aligned_alloc+0x2e>
		return NULL;
   15640:	2000      	movs	r0, #0
}
   15642:	b002      	add	sp, #8
   15644:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	memset(mem, 0xff, excess);
   15648:	462a      	mov	r2, r5
   1564a:	21ff      	movs	r1, #255	; 0xff
   1564c:	f7fc fe90 	bl	12370 <memset>
	*heap_ref = heap;
   15650:	6026      	str	r6, [r4, #0]
	return mem + excess;
   15652:	1960      	adds	r0, r4, r5
   15654:	e7f5      	b.n	15642 <z_heap_aligned_alloc+0x28>

00015656 <k_free>:
	if (ptr != NULL) {
   15656:	b138      	cbz	r0, 15668 <k_free+0x12>
		for (heap_ref = &((struct k_heap **)ptr)[-1];
   15658:	1f03      	subs	r3, r0, #4
   1565a:	4619      	mov	r1, r3
			*heap_ref == (struct k_heap *)-1; --heap_ref) {
   1565c:	f853 0904 	ldr.w	r0, [r3], #-4
		for (heap_ref = &((struct k_heap **)ptr)[-1];
   15660:	1c42      	adds	r2, r0, #1
   15662:	d0fa      	beq.n	1565a <k_free+0x4>
		k_heap_free(*heap_ref, ptr);
   15664:	f7ff bb59 	b.w	14d1a <k_heap_free>
}
   15668:	4770      	bx	lr

0001566a <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
   1566a:	4770      	bx	lr
